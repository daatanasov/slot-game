{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/slot-game/frontend/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,sMAAM,UAAU,CAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,yDACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,sMAAM,UAAU,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,sMAAM,UAAU,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,6CAA6C;QAC1D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,sMAAM,UAAU,CAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,sMAAM,UAAU,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,sMAAM,UAAU,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG"}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/slot-game/frontend/src/app/custom-hooks/useSocket.ts"],"sourcesContent":["'use client'\r\nimport { useState, useEffect } from 'react'\r\nimport io, { Socket } from 'socket.io-client'\r\n\r\ninterface GameState {\r\n    balance: number\r\n    minBet: number\r\n    maxBet: number\r\n}\r\n\r\ninterface SpinResult {\r\n    success: boolean\r\n    reels?: string[]\r\n    isWin?: boolean\r\n    winnings: number\r\n    message?: string\r\n    grid: string[][]\r\n}\r\n\r\nexport const useSocket = (userId: string) => {\r\n    const [socket, setSocket] = useState<Socket | null>(null)\r\n    const [gameState, setGameState] = useState<GameState | null>(null)\r\n    const [spinResult, setSpinResult] = useState<SpinResult>()\r\n    const [isConnected, setIsConnected] = useState(false)\r\n\r\n    useEffect(() => {\r\n        // Create socket connection\r\n        const newSocket = io('http://localhost:8080', {\r\n            query: { userId },\r\n        })\r\n\r\n        // Connection event handlers\r\n        newSocket.on('connect', () => {\r\n            setIsConnected(true)\r\n            console.log('Connected to WebSocket server')\r\n\r\n            // Join the slot game\r\n            newSocket.emit('join-slot-game', { userId })\r\n        })\r\n\r\n        newSocket.on('disconnect', () => {\r\n            setIsConnected(false)\r\n            console.log('Disconnected from WebSocket server')\r\n        })\r\n\r\n        // Game-specific event listeners\r\n        newSocket.on('game-joined', (response) => {\r\n            if (response.success) {\r\n                setGameState(response.gameState)\r\n            } else {\r\n                console.error('Failed to join game:', response.message)\r\n            }\r\n        })\r\n\r\n        newSocket.on('spin-result', (result) => {\r\n            console.log(result)\r\n            setSpinResult(result)\r\n        })\r\n\r\n        // Set the socket state\r\n        setSocket(newSocket)\r\n\r\n        // Cleanup on component unmount\r\n        return () => {\r\n            newSocket.disconnect()\r\n        }\r\n    }, [userId])\r\n\r\n    const spin = (betAmount: number) => {\r\n        console.log(betAmount)\r\n        if (socket && isConnected) {\r\n            socket.emit('spin', betAmount)\r\n        }\r\n    }\r\n\r\n    return {\r\n        socket,\r\n        gameState,\r\n        spinResult,\r\n        isConnected,\r\n        spin,\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;AACA;AACA;AAAA;AAFA;;;AAmBO,MAAM,YAAY,CAAC;IACtB,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IACpD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAoB;IAC7D,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD;IAC3C,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE/C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,2BAA2B;QAC3B,MAAM,YAAY,CAAA,GAAA,wLAAA,CAAA,UAAE,AAAD,EAAE,yBAAyB;YAC1C,OAAO;gBAAE;YAAO;QACpB;QAEA,4BAA4B;QAC5B,UAAU,EAAE,CAAC,WAAW;YACpB,eAAe;YACf,QAAQ,GAAG,CAAC;YAEZ,qBAAqB;YACrB,UAAU,IAAI,CAAC,kBAAkB;gBAAE;YAAO;QAC9C;QAEA,UAAU,EAAE,CAAC,cAAc;YACvB,eAAe;YACf,QAAQ,GAAG,CAAC;QAChB;QAEA,gCAAgC;QAChC,UAAU,EAAE,CAAC,eAAe,CAAC;YACzB,IAAI,SAAS,OAAO,EAAE;gBAClB,aAAa,SAAS,SAAS;YACnC,OAAO;gBACH,QAAQ,KAAK,CAAC,wBAAwB,SAAS,OAAO;YAC1D;QACJ;QAEA,UAAU,EAAE,CAAC,eAAe,CAAC;YACzB,QAAQ,GAAG,CAAC;YACZ,cAAc;QAClB;QAEA,uBAAuB;QACvB,UAAU;QAEV,+BAA+B;QAC/B,OAAO;YACH,UAAU,UAAU;QACxB;IACJ,GAAG;QAAC;KAAO;IAEX,MAAM,OAAO,CAAC;QACV,QAAQ,GAAG,CAAC;QACZ,IAAI,UAAU,aAAa;YACvB,OAAO,IAAI,CAAC,QAAQ;QACxB;IACJ;IAEA,OAAO;QACH;QACA;QACA;QACA;QACA;IACJ;AACJ"}},
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/slot-game/frontend/src/app/components/SlotIcon.tsx"],"sourcesContent":["const SlotIcon = ({ icon }: { icon: string }) => {\r\n    const spriteMap: Record<string, { x: number; y: number }> = {\r\n        j: { x: 0, y: -8 },\r\n        a: { x: -160, y: -8 },\r\n        d: { x: -320, y: -8 },\r\n        k: { x: 0, y: -165 },\r\n        w: { x: -160, y: -165 },\r\n        q: { x: -320, y: -165 },\r\n        empty: { x: 0, y: -100 }, // Placeholder for empty cells\r\n    }\r\n\r\n    const { x, y } = spriteMap[icon] || spriteMap['empty']\r\n    return (\r\n        <div\r\n            className=\"h-36 w-36 bg-no-repeat\"\r\n            style={{\r\n                backgroundImage: \"url('/images/sprites-reels.webp')\",\r\n                backgroundPosition: `${x}px ${y}px`,\r\n            }}\r\n        ></div>\r\n    )\r\n}\r\n\r\nexport default SlotIcon\r\n"],"names":[],"mappings":";;;;;AAAA,MAAM,WAAW,CAAC,EAAE,IAAI,EAAoB;IACxC,MAAM,YAAsD;QACxD,GAAG;YAAE,GAAG;YAAG,GAAG,CAAC;QAAE;QACjB,GAAG;YAAE,GAAG,CAAC;YAAK,GAAG,CAAC;QAAE;QACpB,GAAG;YAAE,GAAG,CAAC;YAAK,GAAG,CAAC;QAAE;QACpB,GAAG;YAAE,GAAG;YAAG,GAAG,CAAC;QAAI;QACnB,GAAG;YAAE,GAAG,CAAC;YAAK,GAAG,CAAC;QAAI;QACtB,GAAG;YAAE,GAAG,CAAC;YAAK,GAAG,CAAC;QAAI;QACtB,OAAO;YAAE,GAAG;YAAG,GAAG,CAAC;QAAI;IAC3B;IAEA,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,SAAS,CAAC,KAAK,IAAI,SAAS,CAAC,QAAQ;IACtD,qBACI,8OAAC;QACG,WAAU;QACV,OAAO;YACH,iBAAiB;YACjB,oBAAoB,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC;QACvC;;;;;;AAGZ;uCAEe"}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/slot-game/frontend/src/app/pages/games/SlotGame.tsx"],"sourcesContent":["'use client'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { io, Socket } from 'socket.io-client'\r\nimport { Card, CardContent } from '@/components/ui/card'\r\nimport { Button } from '@/components/ui/button'\r\nimport { useSocket } from '../../custom-hooks/useSocket'\r\nimport SlotIcon from '@/app/components/SlotIcon'\r\n\r\nconst SlotGame = () => {\r\n    const userId = 'user_123'\r\n    const { gameState, spinResult, isConnected, spin } = useSocket(userId)\r\n    // const [socket, setSocket] = useState<Socket | null>(null)\r\n    const [grid, setGrid] = useState<string[][]>([\r\n        ['', '', '', '', ''],\r\n        ['', '', '', '', ''],\r\n        ['', '', '', '', ''],\r\n    ])\r\n    const [spinning, setSpinning] = useState<boolean>(false)\r\n    const [balance, setBalance] = useState<number>(1000)\r\n    // const [userId, setUserId] = useState<string | null>(null)\r\n    const [betAmount, setBetAmount] = useState<number>(10)\r\n    const [lastWinnings, setLastWinnings] = useState<number>(0)\r\n    const [winning, setWinning] = useState<number>(0)\r\n\r\n    useEffect(() => {\r\n        if (spinResult && spinResult.grid != grid) {\r\n            setGrid(spinResult.grid)\r\n            setWinning(spinResult.winnings)\r\n        }\r\n    }, [spinResult])\r\n\r\n    const handleSpin = () => {\r\n        if (isConnected && gameState) {\r\n            // Validate bet amount\r\n            if (betAmount < gameState.minBet || betAmount > gameState.maxBet) {\r\n                alert(\r\n                    `Bet must be between ${gameState.minBet} and ${gameState.maxBet}`\r\n                )\r\n                return\r\n            }\r\n            setSpinning(true)\r\n            setTimeout(() => {\r\n                setSpinning(false)\r\n                spin(betAmount)\r\n            }, 2000)\r\n        }\r\n    }\r\n\r\n    // const renderSymbol = (symbol: string) => {\r\n    //     const symbolMap: { [key: string]: string } = {\r\n    //         j: '♥',\r\n    //         a: '🍋',\r\n    //         d: '🍇',\r\n    //         k: '🍊',\r\n    //         w: '💎',\r\n    //         q: '🍀',\r\n    //         '': '❓',\r\n    //     }\r\n    //     return symbolMap[symbol]\r\n    // }\r\n\r\n    return (\r\n        <div className=\"min-h-screen bg-gradient-to-br from-[#1a1a2e] via-[#16213e] to-[#0f3460] flex items-center justify-center p-4\">\r\n            <Card\r\n                className=\"w-full max-w-4xl bg-[#0f3460] border-4 border-[#e94560] shadow-2xl background-wrapper bg-center bg-cover bg-no-repeat rounded-lg\"\r\n                style={{\r\n                    backgroundImage: \"url('/images/background.jpg')\",\r\n                }}\r\n            >\r\n                <CardContent className=\"p-6\">\r\n                    <div className=\"grid grid-cols-5 gap-2 mb-6\">\r\n                        {grid.map((row, rowIndex) =>\r\n                            row.map((cell, colIndex) => {\r\n                                return (\r\n                                    <div\r\n                                        key={`${rowIndex}-${colIndex}`}\r\n                                        className=\"bg-[#1a1a2e] border-2 border-[#e94560] rounded-lg h-40 flex items-center justify-center text-white text-4xl font-bold\"\r\n                                    >\r\n                                        <SlotIcon\r\n                                            key={`${rowIndex}-${colIndex}`}\r\n                                            icon={cell}\r\n                                            winning={winning}\r\n                                        />\r\n                                        {/* {renderSymbol(cell)} */}\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        )}\r\n                    </div>\r\n\r\n                    <div className=\"flex justify-between items-center\">\r\n                        <div className=\"flex space-x-4 items-center\">\r\n                            <Button\r\n                                variant=\"destructive\"\r\n                                className=\"bg-[#e94560] hover:bg-[#ff6b81] text-white font-bold py-3 px-6 rounded-lg\"\r\n                                onClick={handleSpin}\r\n                                disabled={spinning}\r\n                            >\r\n                                SPIN\r\n                            </Button>\r\n                            <div className=\"flex items-center space-x-2\">\r\n                                <span className=\"text-white\">Bet:</span>\r\n                                <input\r\n                                    type=\"number\"\r\n                                    value={betAmount}\r\n                                    onChange={(e) =>\r\n                                        setBetAmount(Number(e.target.value))\r\n                                    }\r\n                                    min=\"1\"\r\n                                    max={balance}\r\n                                    className=\"w-20 p-2 rounded bg-[#1a1a2e] text-white\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"text-white text-xl flex items-center space-x-4\">\r\n                            <div>\r\n                                <span>Balance: </span>\r\n                                <span className=\"font-bold text-[#e94560]\">\r\n                                    ${balance.toFixed(2)}\r\n                                </span>\r\n                            </div>\r\n                            <div>\r\n                                <span>Last Winnings: </span>\r\n                                <span className=\"font-bold text-green-500\">\r\n                                    ${lastWinnings.toFixed(2)}\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SlotGame\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 473, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}