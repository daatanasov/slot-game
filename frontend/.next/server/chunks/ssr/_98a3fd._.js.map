{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/slot-game/frontend/src/app/pages/games/SlotGame2.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useSocket } from '../../custom-hooks/usesocket'\r\n\r\nexport const SlotGame: React.FC = () => {\r\n    // Use a mock user ID - in real app, this would come from authentication\r\n    const userId = 'user_123'\r\n    const { gameState, spinResult, isConnected, spin } = useSocket(userId)\r\n\r\n    // Local state for bet amount\r\n    const [betAmount, setBetAmount] = useState<number>(10)\r\n\r\n    // Handle spin action\r\n    const handleSpin = () => {\r\n        if (isConnected && gameState) {\r\n            // Validate bet amount\r\n            if (betAmount < gameState.minBet || betAmount > gameState.maxBet) {\r\n                alert(\r\n                    `Bet must be between ${gameState.minBet} and ${gameState.maxBet}`\r\n                )\r\n                return\r\n            }\r\n\r\n            spin(betAmount)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"max-w-md mx-auto p-6 bg-gray-800 rounded-lg shadow-lg\">\r\n            <h2 className=\"text-2xl font-bold text-white mb-4\">Slot Machine</h2>\r\n\r\n            {/* Connection Status */}\r\n            <div className=\"mb-4\">\r\n                <p\r\n                    className={`\r\n          text-sm font-medium \r\n          ${isConnected ? 'text-green-500' : 'text-red-500'}\r\n        `}\r\n                >\r\n                    {isConnected ? 'Connected' : 'Disconnected'}\r\n                </p>\r\n            </div>\r\n\r\n            {/* Game State */}\r\n            {gameState && (\r\n                <div className=\"mb-4 text-white\">\r\n                    <p>Balance: ${gameState.balance}</p>\r\n                </div>\r\n            )}\r\n\r\n            {/* Reels Display */}\r\n            <div className=\"flex justify-center mb-4 text-4xl\">\r\n                {spinResult?.reels ? (\r\n                    spinResult.reels.map((symbol, index) => (\r\n                        <div key={index} className=\"mx-2\">\r\n                            {symbol}\r\n                        </div>\r\n                    ))\r\n                ) : (\r\n                    <div className=\"text-gray-500\">Spin to play!</div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Spin Result */}\r\n            {spinResult && (\r\n                <div\r\n                    className={`\r\n          mb-4 p-2 rounded \r\n          ${spinResult.isWin ? 'bg-green-200' : 'bg-red-200'}\r\n        `}\r\n                >\r\n                    {spinResult.isWin\r\n                        ? `You won $${spinResult.winnings}!`\r\n                        : `You lost $${Math.abs(spinResult.winnings || 0)}`}\r\n                </div>\r\n            )}\r\n\r\n            {/* Bet Control */}\r\n            <div className=\"flex items-center mb-4\">\r\n                <label className=\"mr-2 text-white\">Bet Amount:</label>\r\n                <input\r\n                    type=\"number\"\r\n                    value={betAmount}\r\n                    onChange={(e) => setBetAmount(Number(e.target.value))}\r\n                    min={gameState?.minBet}\r\n                    max={gameState?.maxBet}\r\n                    className=\"w-20 p-2 rounded bg-gray-700 text-white\"\r\n                />\r\n            </div>\r\n\r\n            {/* Spin Button */}\r\n            <button\r\n                onClick={handleSpin}\r\n                disabled={!isConnected}\r\n                className={`\r\n          w-full p-3 rounded \r\n          ${\r\n              isConnected\r\n                  ? 'bg-blue-500 hover:bg-blue-600 text-white'\r\n                  : 'bg-gray-500 text-gray-300 cursor-not-allowed'\r\n          }\r\n        `}\r\n            >\r\n                Spin\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SlotGame\r\n"],"names":[],"mappings":";;;;;AAAA;;;;;;;;;AAGO,MAAM,WAAqB;IAC9B,wEAAwE;IACxE,MAAM,SAAS;IACf,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,UAAU;IAE/D,6BAA6B;IAC7B,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IAEnD,qBAAqB;IACrB,MAAM,aAAa;QACf,IAAI,eAAe,WAAW;YAC1B,sBAAsB;YACtB,IAAI,YAAY,UAAU,MAAM,IAAI,YAAY,UAAU,MAAM,EAAE;gBAC9D,MACI,CAAC,oBAAoB,EAAE,UAAU,MAAM,CAAC,KAAK,EAAE,UAAU,MAAM,EAAE;gBAErE;YACJ;YAEA,KAAK;QACT;IACJ;IAEA,qBACI,8OAAC;QAAI,WAAU;;0BACX,8OAAC;gBAAG,WAAU;0BAAqC;;;;;;0BAGnD,8OAAC;gBAAI,WAAU;0BACX,cAAA,8OAAC;oBACG,WAAW,CAAC;;UAEtB,EAAE,cAAc,mBAAmB,eAAe;QACpD,CAAC;8BAEY,cAAc,cAAc;;;;;;;;;;;YAKpC,2BACG,8OAAC;gBAAI,WAAU;0BACX,cAAA,8OAAC;;wBAAE;wBAAW,UAAU,OAAO;;;;;;;;;;;;0BAKvC,8OAAC;gBAAI,WAAU;0BACV,YAAY,QACT,WAAW,KAAK,CAAC,GAAG,CAAC,CAAC,QAAQ,sBAC1B,8OAAC;wBAAgB,WAAU;kCACtB;uBADK;;;;8CAKd,8OAAC;oBAAI,WAAU;8BAAgB;;;;;;;;;;;YAKtC,4BACG,8OAAC;gBACG,WAAW,CAAC;;UAEtB,EAAE,WAAW,KAAK,GAAG,iBAAiB,aAAa;QACrD,CAAC;0BAEY,WAAW,KAAK,GACX,CAAC,SAAS,EAAE,WAAW,QAAQ,CAAC,CAAC,CAAC,GAClC,CAAC,UAAU,EAAE,KAAK,GAAG,CAAC,WAAW,QAAQ,IAAI,IAAI;;;;;;0BAK/D,8OAAC;gBAAI,WAAU;;kCACX,8OAAC;wBAAM,WAAU;kCAAkB;;;;;;kCACnC,8OAAC;wBACG,MAAK;wBACL,OAAO;wBACP,UAAU,CAAC,IAAM,aAAa,OAAO,EAAE,MAAM,CAAC,KAAK;wBACnD,KAAK,WAAW;wBAChB,KAAK,WAAW;wBAChB,WAAU;;;;;;;;;;;;0BAKlB,8OAAC;gBACG,SAAS;gBACT,UAAU,CAAC;gBACX,WAAW,CAAC;;UAElB,EACI,cACM,6CACA,+CACT;QACH,CAAC;0BACI;;;;;;;;;;;;AAKb;uCAEe"}},
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 173, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/slot-game/frontend/src/app/slot-game/page.tsx"],"sourcesContent":["import SlotGame2 from '../pages/games/SlotGame2'\r\n\r\nexport default SlotGame2\r\n"],"names":[],"mappings":";;;AAAA;;uCAEe,0IAAA,CAAA,UAAS"}},
    {"offset": {"line": 179, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 190, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 190, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/slot-game/frontend/node_modules/next/dist/src/build/templates/app-page.ts"],"sourcesContent":["import type { LoaderTree } from '../../server/lib/app-dir-module'\nimport { AppPageRouteModule } from '../../server/route-modules/app-page/module.compiled' with { 'turbopack-transition': 'next-ssr' }\nimport { RouteKind } from '../../server/route-kind'\n\n// These are injected by the loader afterwards.\n\n/**\n * The tree created in next-app-loader that holds component segments and modules\n * and I've updated it.\n */\ndeclare const tree: LoaderTree\ndeclare const pages: any\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\n// INJECT:tree\n// INJECT:pages\n\nexport { tree, pages }\n\nexport { default as GlobalError } from 'VAR_MODULE_GLOBAL_ERROR'\n\n// These are injected by the loader afterwards.\ndeclare const __next_app_require__: any\ndeclare const __next_app_load_chunk__: any\n\n// INJECT:__next_app_require__\n// INJECT:__next_app_load_chunk__\n\nexport const __next_app__ = {\n  require: __next_app_require__,\n  loadChunk: __next_app_load_chunk__,\n}\n\nexport * from '../../server/app-render/entry-base'\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n  definition: {\n    kind: RouteKind.APP_PAGE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n    appPaths: [],\n  },\n  userland: {\n    loaderTree: tree,\n  },\n})\n"],"names":["AppPageRouteModule","RouteKind","tree","pages","default","GlobalError","__next_app__","require","__next_app_require__","loadChunk","__next_app_load_chunk__","routeModule","definition","kind","APP_PAGE","page","pathname","bundlePath","filename","appPaths","userland","loaderTree"],"mappings":";;;;;;AAeA,cAAc;AAdd,SAASA,kBAAkB,QAAQ,2DAA2D;IAAE,wBAAwB;AAAW,EAAC;AAYpI,yEAAyE;AAKzE,SAASE,IAAI,EAAEC,KAAK,GAAE;AAStB,iCAAiC;;;;;;;;AAEjC,OAAO,MAAMG,eAAe,6CAAA;IAC1BC,MAAAA,GAASC;IACTC,EAAAA,OAAAA;IAAAA,CAAWC;IAAAA;QACb,EAAC,UAAA;YAAA;YAAA;gBAED,YAAA;oBAAA,CAAc;oBAAA,CAEd,yBAFkD;oBAElD,yDAA4D;wBAC5D,KAAO,KAAA,CAAMC;wBAAAA,QAAc;4BAAA,GAAIX,CAAAA,gBAAmB;4BAAA;yBAAA;;mBAChDY,YAAY;;iBACVC,MAAMZ,UAAUa,QAAQ;sBACxBC,IAAAA,CAAM,CAAA;YAAA;SAAA;;SACNC,UAAU;cACV,IAAA;YAAA,MAAA,4BAA2C;iBAC3CC,MAAAA,MAAY,EAAA;wBAAA;4BACZC,KAAAA,CAAAA,GAAAA,CAAU,0KAAVA,CAAAA,sBAAU,EAAA,MAAA,MAAA,MAAA,EAAA,iBAAA,CAAA,CAAA,EAAA,iTAAA,CAAA,UAAA,CAAA,GAAA,CAAA,KAAA,CAAA,KAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA;4BACVC,OAAAA,qTAAU,EAAE,QAAA,CAAA,KAAA,CAAA,CAAA,EAAA,iTAAA,CAAA,UAAA,CAAA,MAAA,EAAA;4BACd,MAAA,CAAA,YAAA,CAAA;wBACAC;qBAAAA,MAAU;gBACRC,YAAYnB;UACd;QAAA,UAAA;YAAA,IAAA;YAAA;SAAA;QACF,CAAE,YAAA;YAAA,IAAA;YAAA;SAAA","ignoreList":[0]}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}