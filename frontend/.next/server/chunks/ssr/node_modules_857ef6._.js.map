{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"isMobile.js","sources":["file://D%3A/dev/slot-game/frontend/node_modules/ismobilejs/src/isMobile.ts"],"sourcesContent":["const appleIphone = /iPhone/i;\nconst appleIpod = /iPod/i;\nconst appleTablet = /iPad/i;\nconst appleUniversal = /\\biOS-universal(?:.+)Mac\\b/i;\nconst androidPhone = /\\bAndroid(?:.+)Mobile\\b/i; // Match 'Android' AND 'Mobile'\nconst androidTablet = /Android/i;\nconst amazonPhone = /(?:SD4930UR|\\bSilk(?:.+)Mobile\\b)/i; // Match 'Silk' AND 'Mobile'\nconst amazonTablet = /Silk/i;\nconst windowsPhone = /Windows Phone/i;\nconst windowsTablet = /\\bWindows(?:.+)ARM\\b/i; // Match 'Windows' AND 'ARM'\nconst otherBlackBerry = /BlackBerry/i;\nconst otherBlackBerry10 = /BB10/i;\nconst otherOpera = /Opera Mini/i;\nconst otherChrome = /\\b(CriOS|Chrome)(?:.+)Mobile/i;\nconst otherFirefox = /Mobile(?:.+)Firefox\\b/i; // Match 'Mobile' AND 'Firefox'\n\nexport type UserAgent = string;\nexport type Navigator = {\n  userAgent: string;\n  platform: string;\n  maxTouchPoints?: number;\n};\n\nconst isAppleTabletOnIos13 = (navigator?: Navigator): boolean => {\n  return (\n    typeof navigator !== 'undefined' &&\n    navigator.platform === 'MacIntel' &&\n    typeof navigator.maxTouchPoints === 'number' &&\n    navigator.maxTouchPoints > 1 &&\n    typeof MSStream === 'undefined'\n  );\n};\n\nfunction createMatch(userAgent: UserAgent): (regex: RegExp) => boolean {\n  return (regex: RegExp): boolean => regex.test(userAgent);\n}\n\nexport type isMobileResult = {\n  apple: {\n    phone: boolean;\n    ipod: boolean;\n    tablet: boolean;\n    universal: boolean;\n    device: boolean;\n  };\n  amazon: {\n    phone: boolean;\n    tablet: boolean;\n    device: boolean;\n  };\n  android: {\n    phone: boolean;\n    tablet: boolean;\n    device: boolean;\n  };\n  windows: {\n    phone: boolean;\n    tablet: boolean;\n    device: boolean;\n  };\n  other: {\n    blackberry: boolean;\n    blackberry10: boolean;\n    opera: boolean;\n    firefox: boolean;\n    chrome: boolean;\n    device: boolean;\n  };\n  phone: boolean;\n  tablet: boolean;\n  any: boolean;\n};\n\nexport type IsMobileParameter = UserAgent | Navigator;\n\nexport default function isMobile(param?: IsMobileParameter): isMobileResult {\n  let nav: Navigator = {\n    userAgent: '',\n    platform: '',\n    maxTouchPoints: 0,\n  };\n\n  if (!param && typeof navigator !== 'undefined') {\n    nav = {\n      userAgent: navigator.userAgent,\n      platform: navigator.platform,\n      maxTouchPoints: navigator.maxTouchPoints || 0,\n    };\n  } else if (typeof param === 'string') {\n    nav.userAgent = param;\n  } else if (param && param.userAgent) {\n    nav = {\n      userAgent: param.userAgent,\n      platform: param.platform,\n      maxTouchPoints: param.maxTouchPoints || 0,\n    };\n  }\n\n  let userAgent = nav.userAgent;\n\n  // Facebook mobile app's integrated browser adds a bunch of strings that\n  // match everything. Strip it out if it exists.\n  let tmp = userAgent.split('[FBAN');\n  if (typeof tmp[1] !== 'undefined') {\n    userAgent = tmp[0];\n  }\n\n  // Twitter mobile app's integrated browser on iPad adds a \"Twitter for\n  // iPhone\" string. Same probably happens on other tablet platforms.\n  // This will confuse detection so strip it out if it exists.\n  tmp = userAgent.split('Twitter');\n  if (typeof tmp[1] !== 'undefined') {\n    userAgent = tmp[0];\n  }\n\n  const match = createMatch(userAgent);\n\n  const result: isMobileResult = {\n    apple: {\n      phone: match(appleIphone) && !match(windowsPhone),\n      ipod: match(appleIpod),\n      tablet:\n        !match(appleIphone) &&\n        (match(appleTablet) || isAppleTabletOnIos13(nav)) &&\n        !match(windowsPhone),\n      universal: match(appleUniversal),\n      device:\n        (match(appleIphone) ||\n          match(appleIpod) ||\n          match(appleTablet) ||\n          match(appleUniversal) ||\n          isAppleTabletOnIos13(nav)) &&\n        !match(windowsPhone),\n    },\n    amazon: {\n      phone: match(amazonPhone),\n      tablet: !match(amazonPhone) && match(amazonTablet),\n      device: match(amazonPhone) || match(amazonTablet),\n    },\n    android: {\n      phone:\n        (!match(windowsPhone) && match(amazonPhone)) ||\n        (!match(windowsPhone) && match(androidPhone)),\n      tablet:\n        !match(windowsPhone) &&\n        !match(amazonPhone) &&\n        !match(androidPhone) &&\n        (match(amazonTablet) || match(androidTablet)),\n      device:\n        (!match(windowsPhone) &&\n          (match(amazonPhone) ||\n            match(amazonTablet) ||\n            match(androidPhone) ||\n            match(androidTablet))) ||\n        match(/\\bokhttp\\b/i),\n    },\n    windows: {\n      phone: match(windowsPhone),\n      tablet: match(windowsTablet),\n      device: match(windowsPhone) || match(windowsTablet),\n    },\n    other: {\n      blackberry: match(otherBlackBerry),\n      blackberry10: match(otherBlackBerry10),\n      opera: match(otherOpera),\n      firefox: match(otherFirefox),\n      chrome: match(otherChrome),\n      device:\n        match(otherBlackBerry) ||\n        match(otherBlackBerry10) ||\n        match(otherOpera) ||\n        match(otherFirefox) ||\n        match(otherChrome),\n    },\n    any: false,\n    phone: false,\n    tablet: false,\n  };\n\n  result.any =\n    result.apple.device ||\n    result.android.device ||\n    result.windows.device ||\n    result.other.device;\n  // excludes 'other' devices and ipods, targeting touchscreen phones\n  result.phone =\n    result.apple.phone || result.android.phone || result.windows.phone;\n  result.tablet =\n    result.apple.tablet || result.android.tablet || result.windows.tablet;\n\n  return result;\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file://D%3A/dev/slot-game/frontend/node_modules/ismobilejs/src/index.ts"],"sourcesContent":["export * from './isMobile';\nexport { default } from './isMobile';\n"],"names":[],"mappings":"","ignoreList":[0]}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"file":"isMobile.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/utils/browser/isMobile.ts"],"sourcesContent":["import isMobileJs from 'ismobilejs';\n\n// ismobilejs have different import behavior for CJS and ESM, so here is the hack\ntype isMobileJsType = typeof isMobileJs & { default?: typeof isMobileJs };\nconst isMobileCall = (isMobileJs as isMobileJsType).default ?? isMobileJs;\n\n/**\n * The result of the {@link utils.isMobile} function.\n * @ignore\n * @memberof utils\n */\nexport type isMobileResult = {\n    /**\n     * Whether the device is an Apple device.\n     * @memberof utils.isMobile\n     */\n    apple: {\n        phone: boolean;\n        ipod: boolean;\n        tablet: boolean;\n        universal: boolean;\n        device: boolean;\n    };\n    /**\n     * Whether the device is an Amazon device.\n     * @memberof utils.isMobile\n     */\n    amazon: {\n        phone: boolean;\n        tablet: boolean;\n        device: boolean;\n    };\n    /**\n     * Whether the device is an Android device.\n     * @memberof utils.isMobile\n     */\n    android: {\n        phone: boolean;\n        tablet: boolean;\n        device: boolean;\n    };\n    /**\n     * Whether the device is a Windows device.\n     * @memberof utils.isMobile\n     */\n    windows: {\n        phone: boolean;\n        tablet: boolean;\n        device: boolean;\n    };\n    /**\n     * Whether the device is a specific device.\n     * @memberof utils.isMobile\n     */\n    other: {\n        blackberry: boolean;\n        blackberry10: boolean;\n        opera: boolean;\n        firefox: boolean;\n        chrome: boolean;\n        device: boolean;\n    };\n    /**\n     * Whether the device is a phone device.\n     * @memberof utils.isMobile\n     */\n    phone: boolean;\n    /**\n     * Whether the device is a tablet device.\n     * @memberof utils.isMobile\n     */\n    tablet: boolean;\n    /**\n     * Whether the device is any kind of device.\n     * @memberof utils.isMobile\n     */\n    any: boolean;\n};\n\n/**\n * Detects whether the device is mobile and what type of mobile device it is.\n * ```js\n * import { isMobile } from 'pixi.js';\n *\n * if (isMobile.apple.tablet) {\n *    // The device is an Apple tablet device.\n * }\n * ```\n * @memberof utils\n */\nexport const isMobile: isMobileResult = isMobileCall(globalThis.navigator);\n"],"names":[],"mappings":";;;;;;;AAIA,MAAM,YAAA,iJAAgB,UAAA,CAA8B,OAAW,kJAAA,UAAA,CAAA;AAsFlD,MAAA,QAAA,GAA2B,YAAa,CAAA,UAAA,CAAW,SAAS","ignoreList":[0]}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"file":"FederatedEvent.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/events/FederatedEvent.ts"],"sourcesContent":["import { Point } from '../maths/point/Point';\n\nimport type { Container } from '../scene/container/Container';\nimport type { EventBoundary } from './EventBoundary';\n\n/**\n * A PixiJS compatible {@code Touch} event.\n * @memberof events\n */\nexport interface PixiTouch extends Touch\n{\n    button: number;\n    buttons: number;\n    isPrimary: boolean;\n    width: number;\n    height: number;\n    tiltX: number;\n    tiltY: number;\n    pointerType: string;\n    pointerId: number;\n    pressure: number;\n    twist: number;\n    tangentialPressure: number;\n    layerX: number;\n    layerY: number;\n    offsetX: number;\n    offsetY: number;\n    isNormalized: boolean;\n    type: string;\n}\n\n/**\n * An DOM-compatible synthetic event implementation that is \"forwarded\" on behalf of an original\n * FederatedEvent or native {@link https://dom.spec.whatwg.org/#event Event}.\n * @typeParam N - The type of native event held.\n * @memberof events\n */\nexport class FederatedEvent<N extends UIEvent | PixiTouch = UIEvent | PixiTouch> implements UIEvent\n{\n    /** Flags whether this event bubbles. This will take effect only if it is set before propagation. */\n    public bubbles = true;\n\n    /** @deprecated since 7.0.0 */\n    public cancelBubble = true;\n\n    /**\n     * Flags whether this event can be canceled using {@link FederatedEvent.preventDefault}. This is always\n     * false (for now).\n     */\n    public readonly cancelable = false;\n\n    /**\n     * Flag added for compatibility with DOM {@code Event}. It is not used in the Federated Events\n     * API.\n     * @see https://dom.spec.whatwg.org/#dom-event-composed\n     */\n    public readonly composed = false;\n\n    /** The listeners of the event target that are being notified. */\n    public currentTarget: Container;\n\n    /** Flags whether the default response of the user agent was prevent through this event. */\n    public defaultPrevented = false;\n\n    /**\n     * The propagation phase.\n     * @default {@link FederatedEvent.NONE}\n     */\n    public eventPhase = FederatedEvent.prototype.NONE;\n\n    /** Flags whether this is a user-trusted event */\n    public isTrusted: boolean;\n\n    /** @deprecated since 7.0.0 */\n    public returnValue: boolean;\n\n    /** @deprecated since 7.0.0 */\n    public srcElement: EventTarget;\n\n    /** The event target that this will be dispatched to. */\n    public target: Container;\n\n    /** The timestamp of when the event was created. */\n    public timeStamp: number;\n\n    /** The type of event, e.g. {@code \"mouseup\"}. */\n    public type: string;\n\n    /** The native event that caused the foremost original event. */\n    public nativeEvent: N;\n\n    /** The original event that caused this event, if any. */\n    public originalEvent: FederatedEvent<N>;\n\n    /** Flags whether propagation was stopped. */\n    public propagationStopped = false;\n\n    /** Flags whether propagation was immediately stopped. */\n    public propagationImmediatelyStopped = false;\n\n    /** The composed path of the event's propagation. The {@code target} is at the end. */\n    public path: Container[];\n\n    /** The {@link EventBoundary} that manages this event. Null for root events. */\n    public readonly manager: EventBoundary;\n\n    /** Event-specific detail */\n    public detail: number;\n\n    /** The global Window object. */\n    public view: WindowProxy;\n\n    /**\n     * Not supported.\n     * @deprecated since 7.0.0\n     */\n    public which: number;\n\n    /** The coordinates of the event relative to the nearest DOM layer. This is a non-standard property. */\n    public layer: Point = new Point();\n\n    /** @readonly */\n    get layerX(): number { return this.layer.x; }\n\n    /** @readonly */\n    get layerY(): number { return this.layer.y; }\n\n    /** The coordinates of the event relative to the DOM document. This is a non-standard property. */\n    public page: Point = new Point();\n\n    /** @readonly */\n    get pageX(): number { return this.page.x; }\n\n    /** @readonly */\n    get pageY(): number { return this.page.y; }\n\n    /**\n     * @param manager - The event boundary which manages this event. Propagation can only occur\n     *  within the boundary's jurisdiction.\n     */\n    constructor(manager: EventBoundary)\n    {\n        this.manager = manager;\n    }\n\n    /**\n     * Fallback for the deprecated @code{InteractionEvent.data}.\n     * @deprecated since 7.0.0\n     */\n    get data(): this\n    {\n        return this;\n    }\n\n    /** The propagation path for this event. Alias for {@link EventBoundary.propagationPath}. */\n    public composedPath(): Container[]\n    {\n        // Find the propagation path if it isn't cached or if the target has changed since since\n        // the last evaluation.\n        if (this.manager && (!this.path || this.path[this.path.length - 1] !== this.target))\n        {\n            this.path = this.target ? this.manager.propagationPath(this.target) : [];\n        }\n\n        return this.path;\n    }\n\n    /**\n     * Unimplemented method included for implementing the DOM interface {@code Event}. It will throw an {@code Error}.\n     * @deprecated\n     * @param _type\n     * @param _bubbles\n     * @param _cancelable\n     */\n    public initEvent(_type: string, _bubbles?: boolean, _cancelable?: boolean): void\n    {\n        throw new Error('initEvent() is a legacy DOM API. It is not implemented in the Federated Events API.');\n    }\n\n    /**\n     * Unimplemented method included for implementing the DOM interface {@code UIEvent}. It will throw an {@code Error}.\n     * @deprecated\n     * @param _typeArg\n     * @param _bubblesArg\n     * @param _cancelableArg\n     * @param _viewArg\n     * @param _detailArg\n     */\n    public initUIEvent(_typeArg: string, _bubblesArg?: boolean, _cancelableArg?: boolean, _viewArg?: Window | null,\n        _detailArg?: number): void\n    {\n        throw new Error('initUIEvent() is a legacy DOM API. It is not implemented in the Federated Events API.');\n    }\n\n    /** Prevent default behavior of PixiJS and the user agent. */\n    public preventDefault(): void\n    {\n        if (this.nativeEvent instanceof Event && this.nativeEvent.cancelable)\n        {\n            this.nativeEvent.preventDefault();\n        }\n\n        this.defaultPrevented = true;\n    }\n\n    /**\n     * Stop this event from propagating to any addition listeners, including on the\n     * {@link FederatedEventTarget.currentTarget currentTarget} and also the following\n     * event targets on the propagation path.\n     */\n    public stopImmediatePropagation(): void\n    {\n        this.propagationImmediatelyStopped = true;\n    }\n\n    /**\n     * Stop this event from propagating to the next {@link FederatedEventTarget}. The rest of the listeners\n     * on the {@link FederatedEventTarget.currentTarget currentTarget} will still be notified.\n     */\n    public stopPropagation(): void\n    {\n        this.propagationStopped = true;\n    }\n\n    public readonly NONE = 0;\n    public readonly CAPTURING_PHASE = 1;\n    public readonly AT_TARGET = 2;\n    public readonly BUBBLING_PHASE = 3;\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 249, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 255, "column": 0}, "map": {"version":3,"file":"AccessibilitySystem.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/accessibility/AccessibilitySystem.ts"],"sourcesContent":["import { FederatedEvent } from '../events/FederatedEvent';\nimport { ExtensionType } from '../extensions/Extensions';\nimport { isMobile } from '../utils/browser/isMobile';\nimport { removeItems } from '../utils/data/removeItems';\nimport { type AccessibleHTMLElement } from './accessibilityTarget';\n\nimport type { Rectangle } from '../maths/shapes/Rectangle';\nimport type { System } from '../rendering/renderers/shared/system/System';\nimport type { Renderer } from '../rendering/renderers/types';\nimport type { Container } from '../scene/container/Container';\nimport type { isMobileResult } from '../utils/browser/isMobile';\n\n/**\n * The accessibility module recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * This module is a mixin for {@link AbstractRenderer} and will need to be imported if you are managing your own renderer.\n * Usage:\n * ```js\n * import 'pixi.js/accessibility';\n * ```\n * To make an object accessible do the following:\n * ```js\n * container.accessible = true; // object is now accessible to screen readers!\n * ```\n * See {@link accessibility.AccessibleOptions} for more accessibility related properties that can be set.\n * @namespace accessibility\n */\n\n/** @ignore */\nconst KEY_CODE_TAB = 9;\n\nconst DIV_TOUCH_SIZE = 100;\nconst DIV_TOUCH_POS_X = 0;\nconst DIV_TOUCH_POS_Y = 0;\nconst DIV_TOUCH_ZINDEX = 2;\n\nconst DIV_HOOK_SIZE = 1;\nconst DIV_HOOK_POS_X = -1000;\nconst DIV_HOOK_POS_Y = -1000;\nconst DIV_HOOK_ZINDEX = 2;\n\n/** @ignore */\nexport interface AccessibilityOptions\n{\n    /** Setting this to true will visually show the divs. */\n    debug?: boolean;\n}\n\n/**\n * The Accessibility system recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A Container can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.accessibility`\n * @memberof accessibility\n */\nexport class AccessibilitySystem implements System<AccessibilityOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'accessibility',\n    } as const;\n\n    /** Setting this to true will visually show the divs. */\n    public debug = false;\n\n    /**\n     * The renderer this accessibility manager works for.\n     * @type {WebGLRenderer|WebGPURenderer}\n     */\n    private _renderer: Renderer;\n\n    /** Internal variable, see isActive getter. */\n    private _isActive = false;\n\n    /** Internal variable, see isMobileAccessibility getter. */\n    private _isMobileAccessibility = false;\n\n    /** Button element for handling touch hooks. */\n    private _hookDiv: HTMLElement | null;\n\n    /** This is the dom element that will sit over the PixiJS element. This is where the div overlays will go. */\n    private _div: HTMLElement;\n\n    /** A simple pool for storing divs. */\n    private _pool: AccessibleHTMLElement[] = [];\n\n    /** This is a tick used to check if an object is no longer being rendered. */\n    private _renderId = 0;\n\n    /** The array of currently active accessible items. */\n    private _children: Container[] = [];\n\n    /** Count to throttle div updates on android devices. */\n    private _androidUpdateCount = 0;\n\n    /**  The frequency to update the div elements. */\n    private readonly _androidUpdateFrequency = 500; // 2fps\n\n    // eslint-disable-next-line jsdoc/require-param\n    /**\n     * @param {WebGLRenderer|WebGPURenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: Renderer, private readonly _mobileInfo: isMobileResult = isMobile)\n    {\n        this._hookDiv = null;\n\n        if (_mobileInfo.tablet || _mobileInfo.phone)\n        {\n            this._createTouchHook();\n        }\n\n        // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n        const div = document.createElement('div');\n\n        div.style.width = `${DIV_TOUCH_SIZE}px`;\n        div.style.height = `${DIV_TOUCH_SIZE}px`;\n        div.style.position = 'absolute';\n        div.style.top = `${DIV_TOUCH_POS_X}px`;\n        div.style.left = `${DIV_TOUCH_POS_Y}px`;\n        div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n\n        this._div = div;\n        this._renderer = renderer;\n\n        /**\n         * pre-bind the functions\n         * @type {Function}\n         * @private\n         */\n        this._onKeyDown = this._onKeyDown.bind(this);\n\n        /**\n         * pre-bind the functions\n         * @type {Function}\n         * @private\n         */\n        this._onMouseMove = this._onMouseMove.bind(this);\n\n        // let listen for tab.. once pressed we can fire up and show the accessibility layer\n        globalThis.addEventListener('keydown', this._onKeyDown, false);\n    }\n\n    /**\n     * Value of `true` if accessibility is currently active and accessibility layers are showing.\n     * @member {boolean}\n     * @readonly\n     */\n    get isActive(): boolean\n    {\n        return this._isActive;\n    }\n\n    /**\n     * Value of `true` if accessibility is enabled for touch devices.\n     * @member {boolean}\n     * @readonly\n     */\n    get isMobileAccessibility(): boolean\n    {\n        return this._isMobileAccessibility;\n    }\n\n    get hookDiv()\n    {\n        return this._hookDiv;\n    }\n\n    /**\n     * Creates the touch hooks.\n     * @private\n     */\n    private _createTouchHook(): void\n    {\n        const hookDiv = document.createElement('button');\n\n        hookDiv.style.width = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.height = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.position = 'absolute';\n        hookDiv.style.top = `${DIV_HOOK_POS_X}px`;\n        hookDiv.style.left = `${DIV_HOOK_POS_Y}px`;\n        hookDiv.style.zIndex = DIV_HOOK_ZINDEX.toString();\n        hookDiv.style.backgroundColor = '#FF0000';\n        hookDiv.title = 'select to enable accessibility for this content';\n\n        hookDiv.addEventListener('focus', () =>\n        {\n            this._isMobileAccessibility = true;\n            this._activate();\n            this._destroyTouchHook();\n        });\n\n        document.body.appendChild(hookDiv);\n        this._hookDiv = hookDiv;\n    }\n\n    /**\n     * Destroys the touch hooks.\n     * @private\n     */\n    private _destroyTouchHook(): void\n    {\n        if (!this._hookDiv)\n        {\n            return;\n        }\n        document.body.removeChild(this._hookDiv);\n        this._hookDiv = null;\n    }\n\n    /**\n     * Activating will cause the Accessibility layer to be shown.\n     * This is called when a user presses the tab key.\n     * @private\n     */\n    private _activate(): void\n    {\n        if (this._isActive)\n        {\n            return;\n        }\n\n        this._isActive = true;\n\n        globalThis.document.addEventListener('mousemove', this._onMouseMove, true);\n        globalThis.removeEventListener('keydown', this._onKeyDown, false);\n\n        this._renderer.runners.postrender.add(this);\n        this._renderer.view.canvas.parentNode?.appendChild(this._div);\n    }\n\n    /**\n     * Deactivating will cause the Accessibility layer to be hidden.\n     * This is called when a user moves the mouse.\n     * @private\n     */\n    private _deactivate(): void\n    {\n        if (!this._isActive || this._isMobileAccessibility)\n        {\n            return;\n        }\n\n        this._isActive = false;\n\n        globalThis.document.removeEventListener('mousemove', this._onMouseMove, true);\n        globalThis.addEventListener('keydown', this._onKeyDown, false);\n\n        this._renderer.runners.postrender.remove(this);\n        this._div.parentNode?.removeChild(this._div);\n    }\n\n    /**\n     * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n     * @private\n     * @param {Container} container - The Container to check.\n     */\n    private _updateAccessibleObjects(container: Container): void\n    {\n        if (!container.visible || !container.accessibleChildren)\n        {\n            return;\n        }\n\n        if (container.accessible && container.isInteractive())\n        {\n            if (!container._accessibleActive)\n            {\n                this._addChild(container);\n            }\n\n            container._renderId = this._renderId;\n        }\n\n        const children = container.children;\n\n        if (children)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                this._updateAccessibleObjects(children[i] as Container);\n            }\n        }\n    }\n\n    /**\n     * Runner init called, view is available at this point.\n     * @ignore\n     */\n    public init(options?: AccessibilityOptions)\n    {\n        this.debug = options?.debug ?? this.debug;\n        this._renderer.runners.postrender.remove(this);\n    }\n\n    /**\n     * Runner postrender was called, ensure that all divs are mapped correctly to their Containers.\n     * Only fires while active.\n     * @ignore\n     */\n    public postrender(): void\n    {\n        /* On Android default web browser, tab order seems to be calculated by position rather than tabIndex,\n        *  moving buttons can cause focus to flicker between two buttons making it hard/impossible to navigate,\n        *  so I am just running update every half a second, seems to fix it.\n        */\n        const now = performance.now();\n\n        if (this._mobileInfo.android.device && now < this._androidUpdateCount)\n        {\n            return;\n        }\n\n        this._androidUpdateCount = now + this._androidUpdateFrequency;\n\n        if (!this._renderer.renderingToScreen || !this._renderer.view.canvas)\n        {\n            return;\n        }\n\n        // update children...\n        if (this._renderer.lastObjectRendered)\n        {\n            this._updateAccessibleObjects(this._renderer.lastObjectRendered as Container);\n        }\n\n        const { x, y, width, height } = this._renderer.view.canvas.getBoundingClientRect();\n        const { width: viewWidth, height: viewHeight, resolution } = this._renderer;\n\n        const sx = (width / viewWidth) * resolution;\n        const sy = (height / viewHeight) * resolution;\n\n        let div = this._div;\n\n        div.style.left = `${x}px`;\n        div.style.top = `${y}px`;\n        div.style.width = `${viewWidth}px`;\n        div.style.height = `${viewHeight}px`;\n\n        for (let i = 0; i < this._children.length; i++)\n        {\n            const child = this._children[i];\n\n            if (child._renderId !== this._renderId)\n            {\n                child._accessibleActive = false;\n\n                removeItems(this._children, i, 1);\n                this._div.removeChild(child._accessibleDiv);\n                this._pool.push(child._accessibleDiv);\n                child._accessibleDiv = null;\n\n                i--;\n            }\n            else\n            {\n                // map div to display..\n                div = child._accessibleDiv;\n                let hitArea = child.hitArea as Rectangle;\n                const wt = child.worldTransform;\n\n                if (child.hitArea)\n                {\n                    div.style.left = `${(wt.tx + (hitArea.x * wt.a)) * sx}px`;\n                    div.style.top = `${(wt.ty + (hitArea.y * wt.d)) * sy}px`;\n\n                    div.style.width = `${hitArea.width * wt.a * sx}px`;\n                    div.style.height = `${hitArea.height * wt.d * sy}px`;\n                }\n                else\n                {\n                    hitArea = child.getBounds().rectangle;\n\n                    this._capHitArea(hitArea);\n\n                    div.style.left = `${hitArea.x * sx}px`;\n                    div.style.top = `${hitArea.y * sy}px`;\n\n                    div.style.width = `${hitArea.width * sx}px`;\n                    div.style.height = `${hitArea.height * sy}px`;\n\n                    // update button titles and hints if they exist and they've changed\n                    if (div.title !== child.accessibleTitle && child.accessibleTitle !== null)\n                    {\n                        div.title = child.accessibleTitle || '';\n                    }\n                    if (div.getAttribute('aria-label') !== child.accessibleHint\n                        && child.accessibleHint !== null)\n                    {\n                        div.setAttribute('aria-label', child.accessibleHint || '');\n                    }\n                }\n\n                // the title or index may have changed, if so lets update it!\n                if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex)\n                {\n                    div.title = child.accessibleTitle || '';\n                    div.tabIndex = child.tabIndex;\n                    if (this.debug)\n                    {\n                        this._updateDebugHTML(div);\n                    }\n                }\n            }\n        }\n\n        // increment the render id..\n        this._renderId++;\n    }\n\n    /**\n     * private function that will visually add the information to the\n     * accessibility div\n     * @param {HTMLElement} div -\n     */\n    private _updateDebugHTML(div: AccessibleHTMLElement): void\n    {\n        div.innerHTML = `type: ${div.type}</br> title : ${div.title}</br> tabIndex: ${div.tabIndex}`;\n    }\n\n    /**\n     * Adjust the hit area based on the bounds of a display object\n     * @param {Rectangle} hitArea - Bounds of the child\n     */\n    private _capHitArea(hitArea: Rectangle): void\n    {\n        if (hitArea.x < 0)\n        {\n            hitArea.width += hitArea.x;\n            hitArea.x = 0;\n        }\n\n        if (hitArea.y < 0)\n        {\n            hitArea.height += hitArea.y;\n            hitArea.y = 0;\n        }\n\n        const { width: viewWidth, height: viewHeight } = this._renderer;\n\n        if (hitArea.x + hitArea.width > viewWidth)\n        {\n            hitArea.width = viewWidth - hitArea.x;\n        }\n\n        if (hitArea.y + hitArea.height > viewHeight)\n        {\n            hitArea.height = viewHeight - hitArea.y;\n        }\n    }\n\n    /**\n     * Adds a Container to the accessibility manager\n     * @private\n     * @param {Container} container - The child to make accessible.\n     */\n    private _addChild<T extends Container>(container: T): void\n    {\n        //    this.activate();\n\n        let div = this._pool.pop();\n\n        if (!div)\n        {\n            div = document.createElement('button');\n\n            div.style.width = `${DIV_TOUCH_SIZE}px`;\n            div.style.height = `${DIV_TOUCH_SIZE}px`;\n            div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n            div.style.position = 'absolute';\n            div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n            div.style.borderStyle = 'none';\n\n            // ARIA attributes ensure that button title and hint updates are announced properly\n            if (navigator.userAgent.toLowerCase().includes('chrome'))\n            {\n                // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n                div.setAttribute('aria-live', 'off');\n            }\n            else\n            {\n                div.setAttribute('aria-live', 'polite');\n            }\n\n            if (navigator.userAgent.match(/rv:.*Gecko\\//))\n            {\n                // FireFox needs this to announce only the new button name\n                div.setAttribute('aria-relevant', 'additions');\n            }\n            else\n            {\n                // required by IE, other browsers don't much care\n                div.setAttribute('aria-relevant', 'text');\n            }\n\n            div.addEventListener('click', this._onClick.bind(this));\n            div.addEventListener('focus', this._onFocus.bind(this));\n            div.addEventListener('focusout', this._onFocusOut.bind(this));\n        }\n\n        // set pointer events\n        div.style.pointerEvents = container.accessiblePointerEvents;\n        // set the type, this defaults to button!\n        div.type = container.accessibleType;\n\n        if (container.accessibleTitle && container.accessibleTitle !== null)\n        {\n            div.title = container.accessibleTitle;\n        }\n        else if (!container.accessibleHint\n            || container.accessibleHint === null)\n        {\n            div.title = `container ${container.tabIndex}`;\n        }\n\n        if (container.accessibleHint\n            && container.accessibleHint !== null)\n        {\n            div.setAttribute('aria-label', container.accessibleHint);\n        }\n\n        if (this.debug)\n        {\n            this._updateDebugHTML(div);\n        }\n\n        container._accessibleActive = true;\n        container._accessibleDiv = div;\n        div.container = container;\n\n        this._children.push(container);\n        this._div.appendChild(container._accessibleDiv);\n        container._accessibleDiv.tabIndex = container.tabIndex;\n    }\n\n    /**\n     * Dispatch events with the EventSystem.\n     * @param e\n     * @param type\n     * @private\n     */\n    private _dispatchEvent(e: UIEvent, type: string[]): void\n    {\n        const { container: target } = e.target as AccessibleHTMLElement;\n        const boundary = this._renderer.events.rootBoundary;\n        const event: FederatedEvent = Object.assign(new FederatedEvent(boundary), { target });\n\n        boundary.rootTarget = this._renderer.lastObjectRendered as Container;\n        type.forEach((type) => boundary.dispatchEvent(event, type));\n    }\n\n    /**\n     * Maps the div button press to pixi's EventSystem (click)\n     * @private\n     * @param {MouseEvent} e - The click event.\n     */\n    private _onClick(e: MouseEvent): void\n    {\n        this._dispatchEvent(e, ['click', 'pointertap', 'tap']);\n    }\n\n    /**\n     * Maps the div focus events to pixi's EventSystem (mouseover)\n     * @private\n     * @param {FocusEvent} e - The focus event.\n     */\n    private _onFocus(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'assertive');\n        }\n\n        this._dispatchEvent(e, ['mouseover']);\n    }\n\n    /**\n     * Maps the div focus events to pixi's EventSystem (mouseout)\n     * @private\n     * @param {FocusEvent} e - The focusout event.\n     */\n    private _onFocusOut(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'polite');\n        }\n\n        this._dispatchEvent(e, ['mouseout']);\n    }\n\n    /**\n     * Is called when a key is pressed\n     * @private\n     * @param {KeyboardEvent} e - The keydown event.\n     */\n    private _onKeyDown(e: KeyboardEvent): void\n    {\n        if (e.keyCode !== KEY_CODE_TAB)\n        {\n            return;\n        }\n\n        this._activate();\n    }\n\n    /**\n     * Is called when the mouse moves across the renderer element\n     * @private\n     * @param {MouseEvent} e - The mouse event.\n     */\n    private _onMouseMove(e: MouseEvent): void\n    {\n        if (e.movementX === 0 && e.movementY === 0)\n        {\n            return;\n        }\n\n        this._deactivate();\n    }\n\n    /** Destroys the accessibility manager */\n    public destroy(): void\n    {\n        this._destroyTouchHook();\n        this._div = null;\n\n        globalThis.document.removeEventListener('mousemove', this._onMouseMove, true);\n        globalThis.removeEventListener('keydown', this._onKeyDown);\n\n        this._pool = null;\n        this._children = null;\n        this._renderer = null;\n    }\n}\n"],"names":["type"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 643, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 649, "column": 0}, "map": {"version":3,"file":"accessibilityTarget.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/accessibility/accessibilityTarget.ts"],"sourcesContent":["import type { Container } from '../scene/container/Container';\n\n/**\n * The type of the pointer event to listen for.\n * Can be any of the following:\n * - `auto`\n * - `none`\n * - `visiblePainted`\n * - `visibleFill`\n * - `visibleStroke`\n * - `visible`\n * - `painted`\n * - `fill`\n * - `stroke`\n * - `all`\n * - `inherit`\n * @memberof accessibility\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events\n */\nexport type PointerEvents = 'auto'\n| 'none'\n| 'visiblePainted'\n| 'visibleFill'\n| 'visibleStroke'\n| 'visible'\n| 'painted'\n| 'fill'\n| 'stroke'\n| 'all'\n| 'inherit';\n\n/**\n * When `accessible` is enabled on any display object, these properties will affect its accessibility.\n * @memberof accessibility\n */\nexport interface AccessibleOptions\n{\n    /**\n     * Flag for if the object is accessible. If true AccessibilityManager will overlay a\n     * shadow div with attributes set\n     * @default false\n     */\n    accessible: boolean;\n    /**\n     * Sets the title attribute of the shadow div\n     * If accessibleTitle AND accessibleHint has not been this will default to 'container [tabIndex]'\n     * @member {string}\n     */\n    accessibleTitle: string | null;\n    /** Sets the aria-label attribute of the shadow div */\n    accessibleHint: string | null;\n    /**\n     * @default 0\n     */\n    tabIndex: number;\n    /**\n     * Specify the type of div the accessible layer is. Screen readers treat the element differently\n     * depending on this type. Defaults to button.\n     * @default 'button'\n     */\n    accessibleType: string;\n    /**\n     * Specify the pointer-events the accessible div will use\n     * Defaults to auto.\n     * @default 'auto'\n     * @type {accessibility.PointerEvents}\n     */\n    accessiblePointerEvents: PointerEvents;\n    /**\n     * Setting to false will prevent any children inside this container to\n     * be accessible. Defaults to true.\n     * @default true\n     */\n    accessibleChildren: boolean;\n}\n\n/**\n * The Accessibility object is attached to the {@link Container}.\n * @private\n */\nexport interface AccessibleTarget extends AccessibleOptions\n{\n    _accessibleActive: boolean;\n    _accessibleDiv: AccessibleHTMLElement | null;\n    _renderId: number;\n}\n\nexport interface AccessibleHTMLElement extends HTMLElement\n{\n    type?: string;\n    container?: Container;\n}\n\n/**\n * Default property values of accessible objects\n * used by {@link AccessibilitySystem}.\n * @private\n * @example\n * import { accessibleTarget } from 'pixi.js';\n *\n * function MyObject() {}\n * Object.assign(MyObject.prototype, accessibleTarget);\n */\nexport const accessibilityTarget: AccessibleTarget = {\n    /**\n     * Flag for if the object is accessible. If true AccessibilityManager will overlay a\n     * shadow div with attributes set\n     * @member {boolean}\n     * @memberof scene.Container#\n     */\n    accessible: false,\n\n    /**\n     * Sets the title attribute of the shadow div\n     * If accessibleTitle AND accessibleHint has not been this will default to 'container [tabIndex]'\n     * @member {string}\n     * @memberof scene.Container#\n     */\n    accessibleTitle: null,\n\n    /**\n     * Sets the aria-label attribute of the shadow div\n     * @member {string}\n     * @memberof scene.Container#\n     */\n    accessibleHint: null,\n\n    /**\n     * @member {number}\n     * @memberof scene.Container#\n     * @todo Needs docs.\n     */\n    tabIndex: 0,\n\n    /**\n     * @member {boolean}\n     * @memberof scene.Container#\n     * @private\n     */\n    _accessibleActive: false,\n\n    /**\n     * @memberof scene.Container#\n     * @private\n     */\n    _accessibleDiv: null,\n\n    /**\n     * Specify the type of div the accessible layer is. Screen readers treat the element differently\n     * depending on this type. Defaults to button.\n     * @member {string}\n     * @memberof scene.Container#\n     * @default 'button'\n     */\n    accessibleType: 'button',\n\n    /**\n     * Specify the pointer-events the accessible div will use\n     * Defaults to auto.\n     * @type {PointerEvents}\n     * @memberof scene.Container#\n     * @default 'auto'\n     */\n    accessiblePointerEvents: 'auto',\n\n    /**\n     * Setting to false will prevent any children inside this container to\n     * be accessible. Defaults to true.\n     * @member {boolean}\n     * @memberof scene.Container#\n     * @default true\n     */\n    accessibleChildren: true,\n\n    /**\n     * @member {number}\n     * @memberof scene.Container#\n     * @private\n     */\n    _renderId: -1,\n};\n"],"names":[],"mappings":";;;;AAuGO,MAAM,mBAAwC,GAAA;IAAA;;;;;GAAA,GAOjD,UAAY,EAAA,KAAA;IAAA;;;;;GAAA,GAQZ,eAAiB,EAAA,IAAA;IAAA;;;;GAAA,GAOjB,cAAgB,EAAA,IAAA;IAAA;;;;GAAA,GAOhB,QAAU,EAAA,CAAA;IAAA;;;;GAAA,GAOV,iBAAmB,EAAA,KAAA;IAAA;;;GAAA,GAMnB,cAAgB,EAAA,IAAA;IAAA;;;;;;GAAA,GAShB,cAAgB,EAAA,QAAA;IAAA;;;;;;GAAA,GAShB,uBAAyB,EAAA,MAAA;IAAA;;;;;;GAAA,GASzB,kBAAoB,EAAA,IAAA;IAAA;;;;GAAA,GAOpB,SAAW,EAAA,CAAA,CAAA;AACf","ignoreList":[0]}},
    {"offset": {"line": 714, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 720, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/accessibility/init.ts"],"sourcesContent":["import { extensions } from '../extensions/Extensions';\nimport { Container } from '../scene/container/Container';\nimport { AccessibilitySystem } from './AccessibilitySystem';\nimport { accessibilityTarget } from './accessibilityTarget';\n\nextensions.add(AccessibilitySystem);\nContainer.mixin(accessibilityTarget);\n"],"names":[],"mappings":";;;;;;;;;;+JAKA,aAAA,CAAW,GAAA,4KAAI,sBAAmB,CAAA,CAAA;sKAClC,YAAA,CAAU,KAAA,4KAAM,sBAAmB,CAAA","ignoreList":[0]}},
    {"offset": {"line": 732, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 738, "column": 0}, "map": {"version":3,"file":"ResizePlugin.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/app/ResizePlugin.ts"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\nimport type { Renderer } from '../rendering/renderers/types';\n\ntype ResizeableRenderer = Pick<Renderer, 'resize'>;\n\n/**\n * Application options for the {@link app.ResizePlugin}.\n * @memberof app\n * @property {Window|HTMLElement} [resizeTo=window] - Element to automatically resize the renderer to.\n */\nexport interface ResizePluginOptions\n{\n    /**\n     * Element to automatically resize the renderer to.\n     * @memberof app.ApplicationOptions\n     */\n    resizeTo?: Window | HTMLElement;\n}\n\n/**\n * Middleware for Application's resize functionality.\n *\n * Adds the following methods to {@link app.Application}:\n * * {@link app.Application#resizeTo}\n * * {@link app.Application#resize}\n * * {@link app.Application#queueResize}\n * * {@link app.Application#cancelResize}\n * @example\n * import { extensions, ResizePlugin } from 'pixi.js';\n *\n * extensions.add(ResizePlugin);\n * @memberof app\n */\nexport class ResizePlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static resizeTo: Window | HTMLElement;\n    public static resize: () => void;\n    public static renderer: ResizeableRenderer;\n    public static queueResize: () => void;\n    public static render: () => void;\n    private static _resizeId: number;\n    private static _resizeTo: Window | HTMLElement;\n    private static _cancelResize: () => void;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options: ResizePluginOptions): void\n    {\n        Object.defineProperty(this, 'resizeTo',\n            /**\n             * The HTML element or window to automatically resize the\n             * renderer's view element to match width and height.\n             * @member {Window|HTMLElement}\n             * @name resizeTo\n             * @memberof app.Application#\n             */\n            {\n                set(dom: Window | HTMLElement)\n                {\n                    globalThis.removeEventListener('resize', this.queueResize);\n                    this._resizeTo = dom;\n                    if (dom)\n                    {\n                        globalThis.addEventListener('resize', this.queueResize);\n                        this.resize();\n                    }\n                },\n                get()\n                {\n                    return this._resizeTo;\n                },\n            });\n\n        /**\n         * Resize is throttled, so it's safe to call this multiple times per frame and it'll\n         * only be called once.\n         * @memberof app.Application#\n         * @method queueResize\n         * @private\n         */\n        this.queueResize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            this._cancelResize();\n\n            // // Throttle resize events per raf\n            this._resizeId = requestAnimationFrame(() => this.resize());\n        };\n\n        /**\n         * Cancel the resize queue.\n         * @memberof app.Application#\n         * @method cancelResize\n         * @private\n         */\n        this._cancelResize = (): void =>\n        {\n            if (this._resizeId)\n            {\n                cancelAnimationFrame(this._resizeId);\n                this._resizeId = null;\n            }\n        };\n\n        /**\n         * Execute an immediate resize on the renderer, this is not\n         * throttled and can be expensive to call many times in a row.\n         * Will resize only if `resizeTo` property is set.\n         * @memberof app.Application#\n         * @method resize\n         */\n        this.resize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            // clear queue resize\n            this._cancelResize();\n\n            let width: number;\n            let height: number;\n\n            // Resize to the window\n            if (this._resizeTo === globalThis.window)\n            {\n                width = globalThis.innerWidth;\n                height = globalThis.innerHeight;\n            }\n            // Resize to other HTML entities\n            else\n            {\n                const { clientWidth, clientHeight } = this._resizeTo as HTMLElement;\n\n                width = clientWidth;\n                height = clientHeight;\n            }\n\n            this.renderer.resize(width, height);\n            this.render();\n        };\n\n        // On resize\n        this._resizeId = null;\n        this._resizeTo = null;\n        this.resizeTo = options.resizeTo || null;\n    }\n\n    /**\n     * Clean up the ticker, scoped to application\n     * @static\n     * @private\n     */\n    public static destroy(): void\n    {\n        globalThis.removeEventListener('resize', this.queueResize);\n        this._cancelResize();\n        this._cancelResize = null;\n        this.queueResize = null;\n        this.resizeTo = null;\n        this.resize = null;\n    }\n}\n"],"names":[],"mappings":";;;;;;AAmCO,MAAM,YACb,CAAA;IAAA;;;;;GAAA,GAmBI,OAAc,KAAK,OACnB,EAAA;QACW,MAAA,CAAA,cAAA,CAAe,IAAA,EAAM,UAAA,EAAA;;;;;;OAAA,GAQxB;YACI,KAAI,GACJ,EAAA;gBACe,UAAA,CAAA,mBAAA,CAAoB,QAAU,EAAA,IAAA,CAAK,WAAW,CAAA,CAAA;gBACzD,IAAA,CAAK,SAAY,GAAA,GAAA,CAAA;gBACjB,IAAI,GACJ,EAAA;oBACe,UAAA,CAAA,gBAAA,CAAiB,QAAU,EAAA,IAAA,CAAK,WAAW,CAAA,CAAA;oBACtD,IAAA,CAAK,MAAO,EAAA,CAAA;gBAAA,CAChB;YAAA,CACJ;YACA,GACA,GAAA;gBACI,OAAO,IAAK,CAAA,SAAA,CAAA;YAAA,CAChB;QAAA,CACJ;QASJ,IAAA,CAAK,WAAA,GAAc,MACnB;YACQ,IAAA,CAAC,IAAA,CAAK,SACV,EAAA;gBACI,OAAA;YAAA,CACJ;YAEA,IAAA,CAAK,aAAc,EAAA,CAAA;YAGnB,IAAA,CAAK,SAAY,GAAA,qBAAA,CAAsB,IAAM,IAAA,CAAK,MAAA,EAAQ,CAAA,CAAA;QAAA,CAC9D,CAAA;QAQA,IAAA,CAAK,aAAA,GAAgB,MACrB;YACI,IAAI,IAAA,CAAK,SACT,EAAA;gBACI,oBAAA,CAAqB,IAAA,CAAK,SAAS,CAAA,CAAA;gBACnC,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;YAAA,CACrB;QAAA,CACJ,CAAA;QASA,IAAA,CAAK,MAAA,GAAS,MACd;YACQ,IAAA,CAAC,IAAA,CAAK,SACV,EAAA;gBACI,OAAA;YAAA,CACJ;YAGA,IAAA,CAAK,aAAc,EAAA,CAAA;YAEf,IAAA,KAAA,CAAA;YACA,IAAA,MAAA,CAAA;YAGA,IAAA,IAAA,CAAK,SAAc,KAAA,UAAA,CAAW,MAClC,EAAA;gBACI,KAAA,GAAQ,UAAW,CAAA,UAAA,CAAA;gBACnB,MAAA,GAAS,UAAW,CAAA,WAAA,CAAA;YAAA,CAIxB,MAAA;gBACI,MAAM,EAAE,WAAA,EAAa,YAAa,EAAA,GAAI,IAAK,CAAA,SAAA,CAAA;gBAEnC,KAAA,GAAA,WAAA,CAAA;gBACC,MAAA,GAAA,YAAA,CAAA;YAAA,CACb;YAEK,IAAA,CAAA,QAAA,CAAS,MAAO,CAAA,KAAA,EAAO,MAAM,CAAA,CAAA;YAClC,IAAA,CAAK,MAAO,EAAA,CAAA;QAAA,CAChB,CAAA;QAGA,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;QACjB,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;QACZ,IAAA,CAAA,QAAA,GAAW,QAAQ,QAAY,IAAA,IAAA,CAAA;IAAA,CACxC;IAAA;;;;GAAA,GAOA,OAAc,OACd,GAAA;QACe,UAAA,CAAA,mBAAA,CAAoB,QAAU,EAAA,IAAA,CAAK,WAAW,CAAA,CAAA;QACzD,IAAA,CAAK,aAAc,EAAA,CAAA;QACnB,IAAA,CAAK,aAAgB,GAAA,IAAA,CAAA;QACrB,IAAA,CAAK,WAAc,GAAA,IAAA,CAAA;QACnB,IAAA,CAAK,QAAW,GAAA,IAAA,CAAA;QAChB,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;IAAA,CAClB;AACJ,CAAA;AAAA,YAAA,GA7Ia,YAAA,CAGK,SAAA,kKAA+B,gBAAc,CAAA,WAAA","ignoreList":[0]}},
    {"offset": {"line": 821, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 827, "column": 0}, "map": {"version":3,"file":"TickerPlugin.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/app/TickerPlugin.ts"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions';\nimport { UPDATE_PRIORITY } from '../ticker/const';\nimport { Ticker } from '../ticker/Ticker';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\n\n/**\n * Application options for the {@link app.TickerPlugin}.\n * @memberof app\n * @property {boolean} [autoStart=true] - Automatically starts the rendering after the construction.\n * **Note**: Setting this parameter to `false` does NOT stop the shared ticker even if you set\n * `options.sharedTicker` to `true` in case that it is already started. Stop it by your own.\n * @property {boolean} [sharedTicker=false] - Set`true` to use `Ticker.shared`, `false` to create new ticker.\n * If set to `false`, you cannot register a handler to occur before anything that runs on the shared ticker.\n * The system ticker will always run before both the shared ticker and the app ticker.\n */\nexport interface TickerPluginOptions\n{\n    /**\n     * Automatically starts the rendering after the construction.\n     *  **Note**: Setting this parameter to `false` does NOT stop the shared ticker even if you set\n     *  `options.sharedTicker` to `true` in case that it is already started. Stop it by your own.\n     * @memberof app.ApplicationOptions\n     * @default true\n     */\n    autoStart?: boolean;\n    /**\n     * Set`true` to use `Ticker.shared`, `false` to create new ticker.\n     *  If set to `false`, you cannot register a handler to occur before anything that runs on the shared ticker.\n     *  The system ticker will always run before both the shared ticker and the app ticker.\n     * @memberof app.ApplicationOptions\n     * @default false\n     */\n    sharedTicker?: boolean;\n}\n\n/**\n * Middleware for Application's {@link ticker.Ticker} functionality.\n *\n * Adds the following methods to {@link app.Application}:\n * * {@link app.Application#start}\n * * {@link app.Application#stop}\n * * {@link app.Application#ticker}\n * @example\n * import { extensions, TickerPlugin } from 'pixi.js';\n *\n * extensions.add(TickerPlugin);\n * @memberof app\n */\nexport class TickerPlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static start: () => void;\n    public static stop: () => void;\n    private static _ticker: Ticker;\n    public static ticker: Ticker;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options?: PixiMixins.ApplicationOptions): void\n    {\n        // Set default\n        options = Object.assign({\n            autoStart: true,\n            sharedTicker: false,\n        }, options);\n\n        // Create ticker setter\n        Object.defineProperty(this, 'ticker',\n            {\n                set(ticker)\n                {\n                    if (this._ticker)\n                    {\n                        this._ticker.remove(this.render, this);\n                    }\n                    this._ticker = ticker;\n                    if (ticker)\n                    {\n                        ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n                    }\n                },\n                get()\n                {\n                    return this._ticker;\n                },\n            });\n\n        /**\n         * Convenience method for stopping the render.\n         * @method\n         * @memberof app.Application\n         * @instance\n         */\n        this.stop = (): void =>\n        {\n            this._ticker.stop();\n        };\n\n        /**\n         * Convenience method for starting the render.\n         * @method\n         * @memberof app.Application\n         * @instance\n         */\n        this.start = (): void =>\n        {\n            this._ticker.start();\n        };\n\n        /**\n         * Internal reference to the ticker.\n         * @type {Ticker}\n         * @name _ticker\n         * @memberof app.Application#\n         * @private\n         */\n        this._ticker = null;\n\n        /**\n         * Ticker for doing render updates.\n         * @type {ticker.Ticker}\n         * @name ticker\n         * @memberof app.Application#\n         * @default Ticker.shared\n         */\n        this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n\n        // Start the rendering\n        if (options.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Clean up the ticker, scoped to application.\n     * @static\n     * @private\n     */\n    public static destroy(): void\n    {\n        if (this._ticker)\n        {\n            const oldTicker = this._ticker;\n\n            this.ticker = null;\n            oldTicker.destroy();\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;AAiDO,MAAM,YACb,CAAA;IAAA;;;;;GAAA,GAeI,OAAc,KAAK,OACnB,EAAA;QAEI,OAAA,GAAU,OAAO,MAAO,CAAA;YACpB,SAAW,EAAA,IAAA;YACX,YAAc,EAAA,KAAA;QAAA,GACf,OAAO,CAAA,CAAA;QAGH,MAAA,CAAA,cAAA,CAAe,IAAA,EAAM,QAAA,EACxB;YACI,KAAI,MACJ,EAAA;gBACI,IAAI,IAAA,CAAK,OACT,EAAA;oBACI,IAAA,CAAK,OAAQ,CAAA,MAAA,CAAO,IAAK,CAAA,MAAA,EAAQ,IAAI,CAAA,CAAA;gBAAA,CACzC;gBACA,IAAA,CAAK,OAAU,GAAA,MAAA,CAAA;gBACf,IAAI,MACJ,EAAA;oBACI,MAAA,CAAO,GAAI,CAAA,IAAA,CAAK,MAAQ,EAAA,IAAA,wJAAM,kBAAA,CAAgB,GAAG,CAAA,CAAA;gBAAA,CACrD;YAAA,CACJ;YACA,GACA,GAAA;gBACI,OAAO,IAAK,CAAA,OAAA,CAAA;YAAA,CAChB;QAAA,CACJ;QAQJ,IAAA,CAAK,IAAA,GAAO,MACZ;YACI,IAAA,CAAK,OAAA,CAAQ,IAAK,EAAA,CAAA;QAAA,CACtB,CAAA;QAQA,IAAA,CAAK,KAAA,GAAQ,MACb;YACI,IAAA,CAAK,OAAA,CAAQ,KAAM,EAAA,CAAA;QAAA,CACvB,CAAA;QASA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAA;QASf,IAAA,CAAK,MAAA,GAAS,OAAQ,CAAA,YAAA,yJAAe,UAAO,CAAA,MAAA,GAAS,2JAAI,SAAO,EAAA,CAAA;QAGhE,IAAI,QAAQ,SACZ,EAAA;YACI,IAAA,CAAK,KAAM,EAAA,CAAA;QAAA,CACf;IAAA,CACJ;IAAA;;;;GAAA,GAOA,OAAc,OACd,GAAA;QACI,IAAI,IAAA,CAAK,OACT,EAAA;YACI,MAAM,YAAY,IAAK,CAAA,OAAA,CAAA;YAEvB,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;YACd,SAAA,CAAU,OAAQ,EAAA,CAAA;QAAA,CACtB;IAAA,CACJ;AACJ,CAAA;AAAA,YAAA,GA3Ga,YAAA,CAGK,SAAA,kKAA+B,gBAAc,CAAA,WAAA","ignoreList":[0]}},
    {"offset": {"line": 889, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 895, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/app/init.ts"],"sourcesContent":["import { extensions } from '../extensions/Extensions';\nimport { ResizePlugin } from './ResizePlugin';\nimport { TickerPlugin } from './TickerPlugin';\n\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n"],"names":[],"mappings":";;;;;;;;+JAIA,aAAA,CAAW,GAAA,2JAAI,eAAY,CAAA,CAAA;+JAC3B,aAAA,CAAW,GAAA,2JAAI,eAAY,CAAA","ignoreList":[0]}},
    {"offset": {"line": 905, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 911, "column": 0}, "map": {"version":3,"file":"EventTicker.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/events/EventTicker.ts"],"sourcesContent":["import { UPDATE_PRIORITY } from '../ticker/const';\nimport { Ticker } from '../ticker/Ticker';\n\nimport type { EventSystem } from './EventSystem';\n\n/**\n * This class handles automatic firing of PointerEvents\n * in the case where the pointer is stationary for too long.\n * This is to ensure that hit-tests are still run on moving objects.\n * @since 7.2.0\n * @memberof events\n * @class EventsTicker\n */\nclass EventsTickerClass\n{\n    /** The event system. */\n    public events: EventSystem;\n    /** The DOM element to listen to events on. */\n    public domElement: HTMLElement;\n    /** The frequency that fake events will be fired. */\n    public interactionFrequency = 10;\n\n    private _deltaTime = 0;\n    private _didMove = false;\n    private _tickerAdded = false;\n    private _pauseUpdate = true;\n\n    /**\n     * Initializes the event ticker.\n     * @param events - The event system.\n     */\n    public init(events: EventSystem): void\n    {\n        this.removeTickerListener();\n        this.events = events;\n        this.interactionFrequency = 10;\n        this._deltaTime = 0;\n        this._didMove = false;\n        this._tickerAdded = false;\n        this._pauseUpdate = true;\n    }\n\n    /** Whether to pause the update checks or not. */\n    get pauseUpdate(): boolean\n    {\n        return this._pauseUpdate;\n    }\n\n    set pauseUpdate(paused: boolean)\n    {\n        this._pauseUpdate = paused;\n    }\n\n    /** Adds the ticker listener. */\n    public addTickerListener(): void\n    {\n        if (this._tickerAdded || !this.domElement)\n        {\n            return;\n        }\n\n        Ticker.system.add(this._tickerUpdate, this, UPDATE_PRIORITY.INTERACTION);\n\n        this._tickerAdded = true;\n    }\n\n    /** Removes the ticker listener. */\n    public removeTickerListener(): void\n    {\n        if (!this._tickerAdded)\n        {\n            return;\n        }\n\n        Ticker.system.remove(this._tickerUpdate, this);\n\n        this._tickerAdded = false;\n    }\n\n    /** Sets flag to not fire extra events when the user has already moved there mouse */\n    public pointerMoved(): void\n    {\n        this._didMove = true;\n    }\n\n    /** Updates the state of interactive objects. */\n    private _update(): void\n    {\n        if (!this.domElement || this._pauseUpdate)\n        {\n            return;\n        }\n\n        // if the user move the mouse this check has already been done using the mouse move!\n        if (this._didMove)\n        {\n            this._didMove = false;\n\n            return;\n        }\n\n        // eslint-disable-next-line dot-notation\n        const rootPointerEvent = this.events['_rootPointerEvent'];\n\n        if (this.events.supportsTouchEvents && (rootPointerEvent as PointerEvent).pointerType === 'touch')\n        {\n            return;\n        }\n\n        globalThis.document.dispatchEvent(new PointerEvent('pointermove', {\n            clientX: rootPointerEvent.clientX,\n            clientY: rootPointerEvent.clientY,\n            pointerType: rootPointerEvent.pointerType,\n            pointerId: rootPointerEvent.pointerId,\n        }));\n    }\n\n    /**\n     * Updates the state of interactive objects if at least {@link interactionFrequency}\n     * milliseconds have passed since the last invocation.\n     *\n     * Invoked by a throttled ticker update from {@link Ticker.system}.\n     * @param ticker - The throttled ticker.\n     */\n    private _tickerUpdate(ticker: Ticker): void\n    {\n        this._deltaTime += ticker.deltaTime;\n\n        if (this._deltaTime < this.interactionFrequency)\n        {\n            return;\n        }\n\n        this._deltaTime = 0;\n\n        this._update();\n    }\n}\n\nexport const EventsTicker = new EventsTickerClass();\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 999, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1005, "column": 0}, "map": {"version":3,"file":"FederatedMouseEvent.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/events/FederatedMouseEvent.ts"],"sourcesContent":["import { Point } from '../maths/point/Point';\nimport { FederatedEvent } from './FederatedEvent';\n\nimport type { PointData } from '../maths/point/PointData';\nimport type { Container } from '../scene/container/Container';\nimport type { PixiTouch } from './FederatedEvent';\n\n/**\n * A {@link FederatedEvent} for mouse events.\n * @memberof events\n */\nexport class FederatedMouseEvent extends FederatedEvent<\nMouseEvent | PointerEvent | PixiTouch\n> implements MouseEvent\n{\n    /** Whether the \"alt\" key was pressed when this mouse event occurred. */\n    public altKey: boolean;\n\n    /** The specific button that was pressed in this mouse event. */\n    public button: number;\n\n    /** The button depressed when this event occurred. */\n    public buttons: number;\n\n    /** Whether the \"control\" key was pressed when this mouse event occurred. */\n    public ctrlKey: boolean;\n\n    /** Whether the \"meta\" key was pressed when this mouse event occurred. */\n    public metaKey: boolean;\n\n    /** This is currently not implemented in the Federated Events API. */\n    public relatedTarget: EventTarget;\n\n    /** Whether the \"shift\" key was pressed when this mouse event occurred. */\n    public shiftKey: boolean;\n\n    /** The coordinates of the mouse event relative to the canvas. */\n    public client: Point = new Point();\n\n    /** @readonly */\n    public get clientX(): number { return this.client.x; }\n\n    /** @readonly */\n    public get clientY(): number { return this.client.y; }\n\n    /**\n     * Alias for {@link FederatedMouseEvent.clientX this.clientX}.\n     * @readonly\n     */\n    get x(): number { return this.clientX; }\n\n    /**\n     * Alias for {@link FederatedMouseEvent.clientY this.clientY}.\n     * @readonly\n     */\n    get y(): number { return this.clientY; }\n\n    /** This is the number of clicks that occurs in 200ms/click of each other. */\n    public detail: number;\n\n    /** The movement in this pointer relative to the last `mousemove` event. */\n    public movement: Point = new Point();\n\n    /** @readonly */\n    get movementX(): number { return this.movement.x; }\n\n    /** @readonly */\n    get movementY(): number { return this.movement.y; }\n\n    /** The offset of the pointer coordinates w.r.t. target Container in world space. This is not supported at the moment. */\n    public offset: Point = new Point();\n\n    /** @readonly */\n    get offsetX(): number { return this.offset.x; }\n\n    /** @readonly */\n    get offsetY(): number { return this.offset.y; }\n\n    /** The pointer coordinates in world space. */\n    public global: Point = new Point();\n\n    /** @readonly */\n    get globalX(): number { return this.global.x; }\n\n    /** @readonly */\n    get globalY(): number { return this.global.y; }\n\n    /**\n     * The pointer coordinates in the renderer's {@link Renderer.screen screen}. This has slightly\n     * different semantics than native PointerEvent screenX/screenY.\n     */\n    public screen: Point = new Point();\n\n    /**\n     * The pointer coordinates in the renderer's screen. Alias for {@code screen.x}.\n     * @readonly\n     */\n    get screenX(): number { return this.screen.x; }\n\n    /**\n     * The pointer coordinates in the renderer's screen. Alias for {@code screen.y}.\n     * @readonly\n     */\n    get screenY(): number { return this.screen.y; }\n\n    /**\n     * This will return the local coordinates of the specified container for this InteractionData\n     * @param {Container} container - The Container that you would like the local\n     *  coords off\n     * @param {PointData} point - A Point object in which to store the value, optional (otherwise\n     *  will create a new point)\n     * @param {PointData} globalPos - A Point object containing your custom global coords, optional\n     *  (otherwise will use the current global coords)\n     * @returns - A point containing the coordinates of the InteractionData position relative\n     *  to the Container\n     */\n    public getLocalPosition<P extends PointData = Point>(container: Container, point?: P, globalPos?: PointData): P\n    {\n        return container.worldTransform.applyInverse<P>(globalPos || this.global, point);\n    }\n\n    /**\n     * Whether the modifier key was pressed when this event natively occurred.\n     * @param key - The modifier key.\n     */\n    public getModifierState(key: string): boolean\n    {\n        return 'getModifierState' in this.nativeEvent && this.nativeEvent.getModifierState(key);\n    }\n\n    /**\n     * Not supported.\n     * @param _typeArg\n     * @param _canBubbleArg\n     * @param _cancelableArg\n     * @param _viewArg\n     * @param _detailArg\n     * @param _screenXArg\n     * @param _screenYArg\n     * @param _clientXArg\n     * @param _clientYArg\n     * @param _ctrlKeyArg\n     * @param _altKeyArg\n     * @param _shiftKeyArg\n     * @param _metaKeyArg\n     * @param _buttonArg\n     * @param _relatedTargetArg\n     * @deprecated since 7.0.0\n     */\n    // eslint-disable-next-line max-params\n    public initMouseEvent(\n        _typeArg: string,\n        _canBubbleArg: boolean,\n        _cancelableArg: boolean,\n        _viewArg: Window,\n        _detailArg: number,\n        _screenXArg: number,\n        _screenYArg: number,\n        _clientXArg: number,\n        _clientYArg: number,\n        _ctrlKeyArg: boolean,\n        _altKeyArg: boolean,\n        _shiftKeyArg: boolean,\n        _metaKeyArg: boolean,\n        _buttonArg: number,\n        _relatedTargetArg: EventTarget\n    ): void\n    {\n        throw new Error('Method not implemented.');\n    }\n}\n"],"names":[],"mappings":";;;;;;;;AAWO,MAAM,2LAA4B,iBAGzC,CAAA;IAHO,WAAA,EAAA;QAAA,KAAA,CAAA,GAAA,SAAA,CAAA,CAAA;QA0BH,+DAAA,GAAO,IAAA,CAAA,MAAA,GAAgB,kKAAI,QAAM,EAAA,CAAA;QAwBjC,yEAAA,GAAO,IAAA,CAAA,QAAA,GAAkB,kKAAI,QAAM,EAAA,CAAA;QASnC,uHAAA,GAAO,IAAA,CAAA,MAAA,GAAgB,kKAAI,QAAM,EAAA,CAAA;QASjC,4CAAA,GAAO,IAAA,CAAA,MAAA,GAAgB,kKAAI,QAAM,EAAA,CAAA;QAYjC;;;KAAA,GAAO,IAAA,CAAA,MAAA,GAAgB,kKAAI,QAAM,EAAA,CAAA;IAAA,CAAA;IAAA,cAAA,GAnDjC,IAAW,OAAkB,GAAA;QAAE,OAAO,IAAA,CAAK,MAAO,CAAA,CAAA,CAAA;IAAA,CAAG;IAAA,cAAA,GAGrD,IAAW,OAAkB,GAAA;QAAE,OAAO,IAAA,CAAK,MAAO,CAAA,CAAA,CAAA;IAAA,CAAG;IAAA;;;GAAA,GAMrD,IAAI,CAAY,GAAA;QAAE,OAAO,IAAK,CAAA,OAAA,CAAA;IAAA,CAAS;IAAA;;;GAAA,GAMvC,IAAI,CAAY,GAAA;QAAE,OAAO,IAAK,CAAA,OAAA,CAAA;IAAA,CAAS;IAAA,cAAA,GASvC,IAAI,SAAoB,GAAA;QAAE,OAAO,IAAA,CAAK,QAAS,CAAA,CAAA,CAAA;IAAA,CAAG;IAAA,cAAA,GAGlD,IAAI,SAAoB,GAAA;QAAE,OAAO,IAAA,CAAK,QAAS,CAAA,CAAA,CAAA;IAAA,CAAG;IAAA,cAAA,GAMlD,IAAI,OAAkB,GAAA;QAAE,OAAO,IAAA,CAAK,MAAO,CAAA,CAAA,CAAA;IAAA,CAAG;IAAA,cAAA,GAG9C,IAAI,OAAkB,GAAA;QAAE,OAAO,IAAA,CAAK,MAAO,CAAA,CAAA,CAAA;IAAA,CAAG;IAAA,cAAA,GAM9C,IAAI,OAAkB,GAAA;QAAE,OAAO,IAAA,CAAK,MAAO,CAAA,CAAA,CAAA;IAAA,CAAG;IAAA,cAAA,GAG9C,IAAI,OAAkB,GAAA;QAAE,OAAO,IAAA,CAAK,MAAO,CAAA,CAAA,CAAA;IAAA,CAAG;IAAA;;;GAAA,GAY9C,IAAI,OAAkB,GAAA;QAAE,OAAO,IAAA,CAAK,MAAO,CAAA,CAAA,CAAA;IAAA,CAAG;IAAA;;;GAAA,GAM9C,IAAI,OAAkB,GAAA;QAAE,OAAO,IAAA,CAAK,MAAO,CAAA,CAAA,CAAA;IAAA,CAAG;IAAA;;;;;;;;;;GAAA,GAavC,gBAAA,CAA8C,SAAsB,EAAA,KAAA,EAAW,SACtF,EAAA;QACI,OAAO,UAAU,cAAe,CAAA,YAAA,CAAgB,SAAa,IAAA,IAAA,CAAK,MAAA,EAAQ,KAAK,CAAA,CAAA;IAAA,CACnF;IAAA;;;GAAA,GAMO,iBAAiB,GACxB,EAAA;QACI,OAAO,sBAAsB,IAAK,CAAA,WAAA,IAAe,IAAK,CAAA,WAAA,CAAY,gBAAA,CAAiB,GAAG,CAAA,CAAA;IAAA,CAC1F;IAAA;;;;;;;;;;;;;;;;;;GAAA,GAAA,sCAAA;IAsBO,cACH,CAAA,QAAA,EACA,aACA,EAAA,cAAA,EACA,QAAA,EACA,UACA,EAAA,WAAA,EACA,WACA,EAAA,WAAA,EACA,WAAA,EACA,WACA,EAAA,UAAA,EACA,YACA,EAAA,WAAA,EACA,UAAA,EACA,iBAEJ,EAAA;QACU,MAAA,IAAI,MAAM,yBAAyB,CAAA,CAAA;IAAA,CAC7C;AACJ","ignoreList":[0]}},
    {"offset": {"line": 1117, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1123, "column": 0}, "map": {"version":3,"file":"FederatedPointerEvent.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/events/FederatedPointerEvent.ts"],"sourcesContent":["import { FederatedMouseEvent } from './FederatedMouseEvent';\n\n/**\n * A {@link FederatedEvent} for pointer events.\n * @memberof events\n */\nexport class FederatedPointerEvent extends FederatedMouseEvent implements PointerEvent\n{\n    /**\n     * The unique identifier of the pointer.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId}\n     */\n    public pointerId: number;\n\n    /**\n     * The width of the pointer's contact along the x-axis, measured in CSS pixels.\n     * radiusX of TouchEvents will be represented by this value.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width\n     */\n    public width = 0;\n\n    /**\n     * The height of the pointer's contact along the y-axis, measured in CSS pixels.\n     * radiusY of TouchEvents will be represented by this value.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height\n     */\n    public height = 0;\n\n    /**\n     * Indicates whether or not the pointer device that created the event is the primary pointer.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary\n     */\n    public isPrimary = false;\n\n    /**\n     * The type of pointer that triggered the event.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\n     */\n    public pointerType: string;\n\n    /**\n     * Pressure applied by the pointing device during the event.\n     *s\n     * A Touch's force property will be represented by this value.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure\n     */\n    public pressure: number;\n\n    /**\n     * Barrel pressure on a stylus pointer.\n     * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n     */\n    public tangentialPressure: number;\n\n    /**\n     * The angle, in degrees, between the pointer device and the screen.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX\n     */\n    public tiltX: number;\n\n    /**\n     * The angle, in degrees, between the pointer device and the screen.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY\n     */\n    public tiltY: number;\n\n    /**\n     * Twist of a stylus pointer.\n     * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n     */\n    public twist: number;\n\n    /** This is the number of clicks that occurs in 200ms/click of each other. */\n    public detail: number;\n\n    // Only included for completeness for now\n    public getCoalescedEvents(): PointerEvent[]\n    {\n        if (this.type === 'pointermove' || this.type === 'mousemove' || this.type === 'touchmove')\n        {\n            return [this];\n        }\n\n        return [];\n    }\n\n    // Only included for completeness for now\n    public getPredictedEvents(): PointerEvent[]\n    {\n        throw new Error('getPredictedEvents is not supported!');\n    }\n}\n"],"names":[],"mappings":";;;;;;AAMO,MAAM,kMAA8B,sBAC3C,CAAA;IADO,WAAA,EAAA;QAAA,KAAA,CAAA,GAAA,SAAA,CAAA,CAAA;QAaH;;;;KAAA,GAAA,IAAA,CAAO,KAAQ,GAAA,CAAA,CAAA;QAOf;;;;KAAA,GAAA,IAAA,CAAO,MAAS,GAAA,CAAA,CAAA;QAMhB;;;KAAA,GAAA,IAAA,CAAO,SAAY,GAAA,KAAA,CAAA;IAAA,CAAA;IAAA,yCAAA;IA4CZ,kBACP,GAAA;QACQ,IAAA,IAAA,CAAK,IAAA,KAAS,aAAiB,IAAA,IAAA,CAAK,IAAA,KAAS,WAAe,IAAA,IAAA,CAAK,IAAA,KAAS,WAC9E,EAAA;YACI,OAAO;gBAAC,IAAI;aAAA,CAAA;QAAA,CAChB;QAEA,OAAO,EAAC,CAAA;IAAA,CACZ;IAAA,yCAAA;IAGO,kBACP,GAAA;QACU,MAAA,IAAI,MAAM,sCAAsC,CAAA,CAAA;IAAA,CAC1D;AACJ","ignoreList":[0]}},
    {"offset": {"line": 1163, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1169, "column": 0}, "map": {"version":3,"file":"FederatedWheelEvent.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/events/FederatedWheelEvent.ts"],"sourcesContent":["import { FederatedMouseEvent } from './FederatedMouseEvent';\n\n/**\n * A {@link FederatedEvent} for wheel events.\n * @memberof events\n */\nexport class FederatedWheelEvent extends FederatedMouseEvent implements WheelEvent\n{\n    /**\n     * The units of `deltaX`, `deltaY`, and `deltaZ`. This is one of `DOM_DELTA_LINE`,\n     * `DOM_DELTA_PAGE`, `DOM_DELTA_PIXEL`.\n     */\n    public deltaMode: number;\n\n    /** Horizontal scroll amount */\n    public deltaX: number;\n\n    /** Vertical scroll amount */\n    public deltaY: number;\n\n    /** z-axis scroll amount. */\n    public deltaZ: number;\n\n    /** Units specified in pixels. */\n    public static readonly DOM_DELTA_PIXEL = 0;\n\n    /** Units specified in pixels. */\n    public readonly DOM_DELTA_PIXEL = 0;\n\n    /** Units specified in lines. */\n    public static readonly DOM_DELTA_LINE = 1;\n\n    /** Units specified in lines. */\n    public readonly DOM_DELTA_LINE = 1;\n\n    /** Units specified in pages. */\n    public static readonly DOM_DELTA_PAGE = 2;\n\n    /** Units specified in pages. */\n    public readonly DOM_DELTA_PAGE = 2;\n}\n"],"names":[],"mappings":";;;;;;AAMO,MAAM,gMAA4B,sBACzC,CAAA;IADO,WAAA,EAAA;QAAA,KAAA,CAAA,GAAA,SAAA,CAAA,CAAA;QAqBH,+BAAA,GAAA,IAAA,CAAgB,eAAkB,GAAA,CAAA,CAAA;QAMlC,8BAAA,GAAA,IAAA,CAAgB,cAAiB,GAAA,CAAA,CAAA;QAMjC,8BAAA,GAAA,IAAA,CAAgB,cAAiB,GAAA,CAAA,CAAA;IAAA,CAAA;AACrC,CAAA;AAAA,+BAAA,GAlCa,mBAAA,CAkBc,eAAkB,GAAA,CAAA,CAAA;AAAA,8BAAA,GAlBhC,mBAAA,CAwBc,cAAiB,GAAA,CAAA,CAAA;AAAA,8BAAA,GAxB/B,mBAAA,CA8Bc,cAAiB,GAAA,CAAA","ignoreList":[0]}},
    {"offset": {"line": 1188, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1194, "column": 0}, "map": {"version":3,"file":"EventBoundary.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/events/EventBoundary.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { Point } from '../maths/point/Point';\nimport { warn } from '../utils/logging/warn';\nimport { EventsTicker } from './EventTicker';\nimport { FederatedMouseEvent } from './FederatedMouseEvent';\nimport { FederatedPointerEvent } from './FederatedPointerEvent';\nimport { FederatedWheelEvent } from './FederatedWheelEvent';\n\nimport type { Renderable } from '../rendering/renderers/shared/Renderable';\nimport type { Container } from '../scene/container/Container';\nimport type { EmitterListeners, TrackingData } from './EventBoundaryTypes';\nimport type { FederatedEvent } from './FederatedEvent';\nimport type {\n    Cursor, EventMode, FederatedEventHandler,\n} from './FederatedEventTarget';\n\n// The maximum iterations used in propagation. This prevent infinite loops.\nconst PROPAGATION_LIMIT = 2048;\n\nconst tempHitLocation = new Point();\nconst tempLocalMapping = new Point();\n\n/**\n * Event boundaries are \"barriers\" where events coming from an upstream scene are modified before downstream propagation.\n *\n * ## Root event boundary\n *\n * The {@link EventSystem#rootBoundary rootBoundary} handles events coming from the &lt;canvas /&gt;.\n * {@link EventSystem} handles the normalization from native {@link https://dom.spec.whatwg.org/#event Events}\n * into {@link FederatedEvent FederatedEvents}. The rootBoundary then does the hit-testing and event dispatch\n * for the upstream normalized event.\n *\n * ## Additional event boundaries\n *\n * An additional event boundary may be desired within an application's scene graph. For example, if a portion of the scene is\n * is flat with many children at one level - a spatial hash maybe needed to accelerate hit testing. In this scenario, the\n * container can be detached from the scene and glued using a custom event boundary.\n *\n * ```ts\n * import { Container } from 'pixi.js';\n * import { EventBoundary } from 'pixi.js';\n * import { SpatialHash } from 'pixi-spatial-hash';\n *\n * class HashedHitTestingEventBoundary\n * {\n *     private spatialHash: SpatialHash;\n *\n *     constructor(scene: Container, spatialHash: SpatialHash)\n *     {\n *         super(scene);\n *         this.spatialHash = spatialHash;\n *     }\n *\n *     hitTestRecursive(...)\n *     {\n *         // TODO: If target === this.rootTarget, then use spatial hash to get a\n *         // list of possible children that match the given (x,y) coordinates.\n *     }\n * }\n *\n * class VastScene extends Container\n * {\n *     protected eventBoundary: EventBoundary;\n *     protected scene: Container;\n *     protected spatialHash: SpatialHash;\n *\n *     constructor()\n *     {\n *         this.scene = new Container();\n *         this.spatialHash = new SpatialHash();\n *         this.eventBoundary = new HashedHitTestingEventBoundary(this.scene, this.spatialHash);\n *\n *         // Populate this.scene with a ton of children, while updating this.spatialHash\n *     }\n * }\n * ```\n * @memberof events\n */\nexport class EventBoundary\n{\n    /**\n     * The root event-target residing below the event boundary.\n     * All events are dispatched trickling down and bubbling up to this `rootTarget`.\n     */\n    public rootTarget: Container;\n\n    /**\n     * Emits events after they were dispatched into the scene graph.\n     *\n     * This can be used for global events listening, regardless of the scene graph being used. It should\n     * not be used by interactive libraries for normal use.\n     *\n     * Special events that do not bubble all the way to the root target are not emitted from here,\n     * e.g. pointerenter, pointerleave, click.\n     */\n    public dispatch: EventEmitter = new EventEmitter();\n\n    /** The cursor preferred by the event targets underneath this boundary. */\n    public cursor: Cursor | string;\n\n    /**\n     * This flag would emit `pointermove`, `touchmove`, and `mousemove` events on all Containers.\n     *\n     * The `moveOnAll` semantics mirror those of earlier versions of PixiJS. This was disabled in favor of\n     * the Pointer Event API's approach.\n     */\n    public moveOnAll = false;\n\n    /** Enables the global move events. `globalpointermove`, `globaltouchmove`, and `globalmousemove` */\n    public enableGlobalMoveEvents = true;\n\n    /**\n     * Maps event types to forwarding handles for them.\n     *\n     * {@link EventBoundary EventBoundary} provides mapping for \"pointerdown\", \"pointermove\",\n     * \"pointerout\", \"pointerleave\", \"pointerover\", \"pointerup\", and \"pointerupoutside\" by default.\n     * @see EventBoundary#addEventMapping\n     */\n    protected mappingTable: Record<string, Array<{\n        fn: (e: FederatedEvent) => void,\n        priority: number\n    }>>;\n\n    /**\n     * State object for mapping methods.\n     * @see EventBoundary#trackingData\n     */\n    protected mappingState: Record<string, any> = {\n        trackingData: {}\n    };\n\n    /**\n     * The event pool maps event constructors to an free pool of instances of those specific events.\n     * @see EventBoundary#allocateEvent\n     * @see EventBoundary#freeEvent\n     */\n    protected eventPool: Map<typeof FederatedEvent, FederatedEvent[]> = new Map();\n\n    /** Every interactive element gathered from the scene. Only used in `pointermove` */\n    private readonly _allInteractiveElements: Container[] = [];\n    /** Every element that passed the hit test. Only used in `pointermove` */\n    private _hitElements: Container[] = [];\n    /** Whether or not to collect all the interactive elements from the scene. Enabled in `pointermove` */\n    private _isPointerMoveEvent = false;\n\n    /**\n     * @param rootTarget - The holder of the event boundary.\n     */\n    constructor(rootTarget?: Container)\n    {\n        this.rootTarget = rootTarget;\n\n        this.hitPruneFn = this.hitPruneFn.bind(this);\n        this.hitTestFn = this.hitTestFn.bind(this);\n        this.mapPointerDown = this.mapPointerDown.bind(this);\n        this.mapPointerMove = this.mapPointerMove.bind(this);\n        this.mapPointerOut = this.mapPointerOut.bind(this);\n        this.mapPointerOver = this.mapPointerOver.bind(this);\n        this.mapPointerUp = this.mapPointerUp.bind(this);\n        this.mapPointerUpOutside = this.mapPointerUpOutside.bind(this);\n        this.mapWheel = this.mapWheel.bind(this);\n\n        this.mappingTable = {};\n        this.addEventMapping('pointerdown', this.mapPointerDown);\n        this.addEventMapping('pointermove', this.mapPointerMove);\n        this.addEventMapping('pointerout', this.mapPointerOut);\n        this.addEventMapping('pointerleave', this.mapPointerOut);\n        this.addEventMapping('pointerover', this.mapPointerOver);\n        this.addEventMapping('pointerup', this.mapPointerUp);\n        this.addEventMapping('pointerupoutside', this.mapPointerUpOutside);\n        this.addEventMapping('wheel', this.mapWheel);\n    }\n\n    /**\n     * Adds an event mapping for the event `type` handled by `fn`.\n     *\n     * Event mappings can be used to implement additional or custom events. They take an event\n     * coming from the upstream scene (or directly from the {@link EventSystem}) and dispatch new downstream events\n     * generally trickling down and bubbling up to {@link EventBoundary.rootTarget this.rootTarget}.\n     *\n     * To modify the semantics of existing events, the built-in mapping methods of EventBoundary should be overridden\n     * instead.\n     * @param type - The type of upstream event to map.\n     * @param fn - The mapping method. The context of this function must be bound manually, if desired.\n     */\n    public addEventMapping(type: string, fn: (e: FederatedEvent) => void): void\n    {\n        if (!this.mappingTable[type])\n        {\n            this.mappingTable[type] = [];\n        }\n\n        this.mappingTable[type].push({\n            fn,\n            priority: 0,\n        });\n        this.mappingTable[type].sort((a, b) => a.priority - b.priority);\n    }\n\n    /**\n     * Dispatches the given event\n     * @param e - The event to dispatch.\n     * @param type - The type of event to dispatch. Defaults to `e.type`.\n     */\n    public dispatchEvent(e: FederatedEvent, type?: string): void\n    {\n        e.propagationStopped = false;\n        e.propagationImmediatelyStopped = false;\n\n        this.propagate(e, type);\n        this.dispatch.emit(type || e.type, e);\n    }\n\n    /**\n     * Maps the given upstream event through the event boundary and propagates it downstream.\n     * @param e - The event to map.\n     */\n    public mapEvent(e: FederatedEvent): void\n    {\n        if (!this.rootTarget)\n        {\n            return;\n        }\n\n        const mappers = this.mappingTable[e.type];\n\n        if (mappers)\n        {\n            for (let i = 0, j = mappers.length; i < j; i++)\n            {\n                mappers[i].fn(e);\n            }\n        }\n        else\n        {\n            // #if _DEBUG\n            warn(`[EventBoundary]: Event mapping not defined for ${e.type}`);\n            // #endif\n        }\n    }\n\n    /**\n     * Finds the Container that is the target of a event at the given coordinates.\n     *\n     * The passed (x,y) coordinates are in the world space above this event boundary.\n     * @param x - The x coordinate of the event.\n     * @param y - The y coordinate of the event.\n     */\n    public hitTest(\n        x: number,\n        y: number,\n    ): Container\n    {\n        EventsTicker.pauseUpdate = true;\n        // if we are using global move events, we need to hit test the whole scene graph\n        const useMove = this._isPointerMoveEvent && this.enableGlobalMoveEvents;\n        const fn = useMove ? 'hitTestMoveRecursive' : 'hitTestRecursive';\n        const invertedPath = this[fn](\n            this.rootTarget,\n            this.rootTarget.eventMode,\n            tempHitLocation.set(x, y),\n            this.hitTestFn,\n            this.hitPruneFn,\n        );\n\n        return invertedPath && invertedPath[0];\n    }\n\n    /**\n     * Propagate the passed event from from {@link EventBoundary.rootTarget this.rootTarget} to its\n     * target {@code e.target}.\n     * @param e - The event to propagate.\n     * @param type - The type of event to propagate. Defaults to `e.type`.\n     */\n    public propagate(e: FederatedEvent, type?: string): void\n    {\n        if (!e.target)\n        {\n            // This usually occurs when the scene graph is not interactive.\n            return;\n        }\n\n        const composedPath = e.composedPath();\n\n        // Capturing phase\n        e.eventPhase = e.CAPTURING_PHASE;\n\n        for (let i = 0, j = composedPath.length - 1; i < j; i++)\n        {\n            e.currentTarget = composedPath[i];\n\n            this.notifyTarget(e, type);\n\n            if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n        }\n\n        // At target phase\n        e.eventPhase = e.AT_TARGET;\n        e.currentTarget = e.target;\n\n        this.notifyTarget(e, type);\n\n        if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n\n        // Bubbling phase\n        e.eventPhase = e.BUBBLING_PHASE;\n\n        for (let i = composedPath.length - 2; i >= 0; i--)\n        {\n            e.currentTarget = composedPath[i];\n\n            this.notifyTarget(e, type);\n\n            if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n        }\n    }\n\n    /**\n     * Emits the event {@code e} to all interactive containers. The event is propagated in the bubbling phase always.\n     *\n     * This is used in the `globalpointermove` event.\n     * @param e - The emitted event.\n     * @param type - The listeners to notify.\n     * @param targets - The targets to notify.\n     */\n    public all(e: FederatedEvent, type?: string | string[], targets = this._allInteractiveElements): void\n    {\n        if (targets.length === 0) return;\n\n        e.eventPhase = e.BUBBLING_PHASE;\n\n        const events = Array.isArray(type) ? type : [type];\n\n        // loop through all interactive elements and notify them of the event\n        // loop through targets backwards\n        for (let i = targets.length - 1; i >= 0; i--)\n        {\n            events.forEach((event) =>\n            {\n                e.currentTarget = targets[i];\n                this.notifyTarget(e, event);\n            });\n        }\n    }\n\n    /**\n     * Finds the propagation path from {@link EventBoundary.rootTarget rootTarget} to the passed\n     * {@code target}. The last element in the path is {@code target}.\n     * @param target - The target to find the propagation path to.\n     */\n    public propagationPath(target: Container): Container[]\n    {\n        const propagationPath = [target];\n\n        for (let i = 0; i < PROPAGATION_LIMIT && (target !== this.rootTarget && target.parent); i++)\n        {\n            if (!target.parent)\n            {\n                throw new Error('Cannot find propagation path to disconnected target');\n            }\n\n            propagationPath.push(target.parent);\n\n            target = target.parent;\n        }\n\n        propagationPath.reverse();\n\n        return propagationPath;\n    }\n\n    protected hitTestMoveRecursive(\n        currentTarget: Container,\n        eventMode: EventMode,\n        location: Point,\n        testFn: (object: Container, pt: Point) => boolean,\n        pruneFn: (object: Container, pt: Point) => boolean,\n        ignore = false\n    ): Container[]\n    {\n        let shouldReturn = false;\n\n        // only bail out early if it is not interactive\n        if (this._interactivePrune(currentTarget)) return null;\n\n        if (currentTarget.eventMode === 'dynamic' || eventMode === 'dynamic')\n        {\n            EventsTicker.pauseUpdate = false;\n        }\n\n        if (currentTarget.interactiveChildren && currentTarget.children)\n        {\n            const children = currentTarget.children;\n\n            for (let i = children.length - 1; i >= 0; i--)\n            {\n                const child = children[i] as Container;\n\n                const nestedHit = this.hitTestMoveRecursive(\n                    child,\n                    this._isInteractive(eventMode) ? eventMode : child.eventMode,\n                    location,\n                    testFn,\n                    pruneFn,\n                    ignore || pruneFn(currentTarget, location)\n                );\n\n                if (nestedHit)\n                {\n                    // Its a good idea to check if a child has lost its parent.\n                    // this means it has been removed whilst looping so its best\n                    if (nestedHit.length > 0 && !nestedHit[nestedHit.length - 1].parent)\n                    {\n                        continue;\n                    }\n\n                    // Only add the current hit-test target to the hit-test chain if the chain\n                    // has already started (i.e. the event target has been found) or if the current\n                    // target is interactive (i.e. it becomes the event target).\n                    const isInteractive = currentTarget.isInteractive();\n\n                    if (nestedHit.length > 0 || isInteractive)\n                    {\n                        if (isInteractive) this._allInteractiveElements.push(currentTarget);\n                        nestedHit.push(currentTarget);\n                    }\n\n                    // store all hit elements to be returned once we have traversed the whole tree\n                    if (this._hitElements.length === 0) this._hitElements = nestedHit;\n\n                    shouldReturn = true;\n                }\n            }\n        }\n\n        const isInteractiveMode = this._isInteractive(eventMode);\n        const isInteractiveTarget = currentTarget.isInteractive();\n\n        if (isInteractiveTarget && isInteractiveTarget) this._allInteractiveElements.push(currentTarget);\n\n        // we don't carry on hit testing something once we have found a hit,\n        // now only care about gathering the interactive elements\n        if (ignore || this._hitElements.length > 0) return null;\n\n        if (shouldReturn) return this._hitElements as Container[];\n\n        // Finally, hit test this Container itself.\n        if (isInteractiveMode && (!pruneFn(currentTarget, location) && testFn(currentTarget, location)))\n        {\n            // The current hit-test target is the event's target only if it is interactive. Otherwise,\n            // the first interactive ancestor will be the event's target.\n            return isInteractiveTarget ? [currentTarget] : [];\n        }\n\n        return null;\n    }\n\n    /**\n     * Recursive implementation for {@link EventBoundary.hitTest hitTest}.\n     * @param currentTarget - The Container that is to be hit tested.\n     * @param eventMode - The event mode for the `currentTarget` or one of its parents.\n     * @param location - The location that is being tested for overlap.\n     * @param testFn - Callback that determines whether the target passes hit testing. This callback\n     *  can assume that `pruneFn` failed to prune the container.\n     * @param pruneFn - Callback that determiness whether the target and all of its children\n     *  cannot pass the hit test. It is used as a preliminary optimization to prune entire subtrees\n     *  of the scene graph.\n     * @returns An array holding the hit testing target and all its ancestors in order. The first element\n     *  is the target itself and the last is {@link EventBoundary.rootTarget rootTarget}. This is the opposite\n     *  order w.r.t. the propagation path. If no hit testing target is found, null is returned.\n     */\n    protected hitTestRecursive(\n        currentTarget: Container,\n        eventMode: EventMode,\n        location: Point,\n        testFn: (object: Container, pt: Point) => boolean,\n        pruneFn: (object: Container, pt: Point) => boolean\n    ): Container[]\n    {\n        // Attempt to prune this Container and its subtree as an optimization.\n        if (this._interactivePrune(currentTarget) || pruneFn(currentTarget, location))\n        {\n            return null;\n        }\n        if (currentTarget.eventMode === 'dynamic' || eventMode === 'dynamic')\n        {\n            EventsTicker.pauseUpdate = false;\n        }\n\n        // Find a child that passes the hit testing and return one, if any.\n        if (currentTarget.interactiveChildren && currentTarget.children)\n        {\n            const children = currentTarget.children;\n            const relativeLocation = location;\n\n            for (let i = children.length - 1; i >= 0; i--)\n            {\n                const child = children[i] as Container;\n\n                const nestedHit = this.hitTestRecursive(\n                    child,\n                    this._isInteractive(eventMode) ? eventMode : child.eventMode,\n                    relativeLocation,\n                    testFn,\n                    pruneFn\n                );\n\n                if (nestedHit)\n                {\n                    // Its a good idea to check if a child has lost its parent.\n                    // this means it has been removed whilst looping so its best\n                    if (nestedHit.length > 0 && !nestedHit[nestedHit.length - 1].parent)\n                    {\n                        continue;\n                    }\n\n                    // Only add the current hit-test target to the hit-test chain if the chain\n                    // has already started (i.e. the event target has been found) or if the current\n                    // target is interactive (i.e. it becomes the event target).\n                    const isInteractive = currentTarget.isInteractive();\n\n                    if (nestedHit.length > 0 || isInteractive) nestedHit.push(currentTarget);\n\n                    return nestedHit;\n                }\n            }\n        }\n\n        const isInteractiveMode = this._isInteractive(eventMode);\n        const isInteractiveTarget = currentTarget.isInteractive();\n\n        // Finally, hit test this Container itself.\n        if (isInteractiveMode && testFn(currentTarget, location))\n        {\n            // The current hit-test target is the event's target only if it is interactive. Otherwise,\n            // the first interactive ancestor will be the event's target.\n            return isInteractiveTarget ? [currentTarget] : [];\n        }\n\n        return null;\n    }\n\n    private _isInteractive(int: EventMode): int is 'static' | 'dynamic'\n    {\n        return int === 'static' || int === 'dynamic';\n    }\n\n    private _interactivePrune(container: Container): boolean\n    {\n        // If container is a mask, invisible, or not renderable then it cannot be hit directly.\n        if (!container || !container.visible || !container.renderable || !container.measurable)\n        {\n            return true;\n        }\n\n        // If this Container is none then it cannot be hit by anything.\n        if (container.eventMode === 'none')\n        {\n            return true;\n        }\n\n        // If this Container is passive and it has no interactive children then it cannot be hit\n        if (container.eventMode === 'passive' && !container.interactiveChildren)\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks whether the container or any of its children cannot pass the hit test at all.\n     *\n     * {@link EventBoundary}'s implementation uses the {@link Container.hitArea hitArea}\n     * and {@link Container._maskEffect} for pruning.\n     * @param container - The container to prune.\n     * @param location - The location to test for overlap.\n     */\n    protected hitPruneFn(container: Container, location: Point): boolean\n    {\n        if (container.hitArea)\n        {\n            container.worldTransform.applyInverse(location, tempLocalMapping);\n\n            if (!container.hitArea.contains(tempLocalMapping.x, tempLocalMapping.y))\n            {\n                return true;\n            }\n        }\n\n        if (container.effects && container.effects.length)\n        {\n            for (let i = 0; i < container.effects.length; i++)\n            {\n                const effect = container.effects[i];\n\n                if (effect.containsPoint)\n                {\n                    const effectContainsPoint = effect.containsPoint(location, this.hitTestFn);\n\n                    if (!effectContainsPoint)\n                    {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks whether the container passes hit testing for the given location.\n     * @param container - The container to test.\n     * @param location - The location to test for overlap.\n     * @returns - Whether `container` passes hit testing for `location`.\n     */\n    protected hitTestFn(container: Container, location: Point): boolean\n    {\n        // If the container failed pruning with a hitArea, then it must pass it.\n        if (container.hitArea)\n        {\n            return true;\n        }\n\n        if ((container as Renderable)?.containsPoint)\n        {\n            container.worldTransform.applyInverse(location, tempLocalMapping);\n\n            return (container as Renderable).containsPoint(tempLocalMapping) as boolean;\n        }\n\n        // TODO: Should we hit test based on bounds?\n\n        return false;\n    }\n\n    /**\n     * Notify all the listeners to the event's `currentTarget`.\n     *\n     * If the `currentTarget` contains the property `on<type>`, then it is called here,\n     * simulating the behavior from version 6.x and prior.\n     * @param e - The event passed to the target.\n     * @param type - The type of event to notify. Defaults to `e.type`.\n     */\n    protected notifyTarget(e: FederatedEvent, type?: string): void\n    {\n        if (!e.currentTarget.isInteractive())\n        {\n            return;\n        }\n\n        type ??= e.type;\n\n        // call the `on${type}` for the current target if it exists\n        const handlerKey = `on${type}` as keyof Container;\n\n        (e.currentTarget[handlerKey] as FederatedEventHandler<FederatedEvent>)?.(e);\n\n        const key = e.eventPhase === e.CAPTURING_PHASE || e.eventPhase === e.AT_TARGET ? `${type}capture` : type;\n\n        this._notifyListeners(e, key);\n\n        if (e.eventPhase === e.AT_TARGET)\n        {\n            this._notifyListeners(e, type);\n        }\n    }\n\n    /**\n     * Maps the upstream `pointerdown` events to a downstream `pointerdown` event.\n     *\n     * `touchstart`, `rightdown`, `mousedown` events are also dispatched for specific pointer types.\n     * @param from - The upstream `pointerdown` event.\n     */\n    protected mapPointerDown(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            // #if _DEBUG\n            warn('EventBoundary cannot map a non-pointer event as a pointer event');\n            // #endif\n\n            return;\n        }\n\n        const e = this.createPointerEvent(from);\n\n        this.dispatchEvent(e, 'pointerdown');\n\n        if (e.pointerType === 'touch')\n        {\n            this.dispatchEvent(e, 'touchstart');\n        }\n        else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n        {\n            const isRightButton = e.button === 2;\n\n            this.dispatchEvent(e, isRightButton ? 'rightdown' : 'mousedown');\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n\n        trackingData.pressTargetsByButton[from.button] = e.composedPath();\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `pointermove` to downstream `pointerout`, `pointerover`, and `pointermove` events, in that order.\n     *\n     * The tracking data for the specific pointer has an updated `overTarget`. `mouseout`, `mouseover`,\n     * `mousemove`, and `touchmove` events are fired as well for specific pointer types.\n     * @param from - The upstream `pointermove` event.\n     */\n    protected mapPointerMove(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            // #if _DEBUG\n            warn('EventBoundary cannot map a non-pointer event as a pointer event');\n            // #endif\n\n            return;\n        }\n\n        this._allInteractiveElements.length = 0;\n        this._hitElements.length = 0;\n        this._isPointerMoveEvent = true;\n        const e = this.createPointerEvent(from);\n\n        this._isPointerMoveEvent = false;\n        const isMouse = e.pointerType === 'mouse' || e.pointerType === 'pen';\n        const trackingData = this.trackingData(from.pointerId);\n        const outTarget = this.findMountedTarget(trackingData.overTargets);\n\n        // First pointerout/pointerleave\n        if (trackingData.overTargets?.length > 0 && outTarget !== e.target)\n        {\n            // pointerout always occurs on the overTarget when the pointer hovers over another element.\n            const outType = from.type === 'mousemove' ? 'mouseout' : 'pointerout';\n            const outEvent = this.createPointerEvent(from, outType, outTarget);\n\n            this.dispatchEvent(outEvent, 'pointerout');\n            if (isMouse) this.dispatchEvent(outEvent, 'mouseout');\n\n            // If the pointer exits overTarget and its descendants, then a pointerleave event is also fired. This event\n            // is dispatched to all ancestors that no longer capture the pointer.\n            if (!e.composedPath().includes(outTarget))\n            {\n                const leaveEvent = this.createPointerEvent(from, 'pointerleave', outTarget);\n\n                leaveEvent.eventPhase = leaveEvent.AT_TARGET;\n\n                while (leaveEvent.target && !e.composedPath().includes(leaveEvent.target))\n                {\n                    leaveEvent.currentTarget = leaveEvent.target;\n\n                    this.notifyTarget(leaveEvent);\n                    if (isMouse) this.notifyTarget(leaveEvent, 'mouseleave');\n\n                    leaveEvent.target = leaveEvent.target.parent;\n                }\n\n                this.freeEvent(leaveEvent);\n            }\n\n            this.freeEvent(outEvent);\n        }\n\n        // Then pointerover\n        if (outTarget !== e.target)\n        {\n            // pointerover always occurs on the new overTarget\n            const overType = from.type === 'mousemove' ? 'mouseover' : 'pointerover';\n            const overEvent = this.clonePointerEvent(e, overType);// clone faster\n\n            this.dispatchEvent(overEvent, 'pointerover');\n            if (isMouse) this.dispatchEvent(overEvent, 'mouseover');\n\n            // Probe whether the newly hovered Container is an ancestor of the original overTarget.\n            let overTargetAncestor = outTarget?.parent;\n\n            while (overTargetAncestor && overTargetAncestor !== this.rootTarget.parent)\n            {\n                if (overTargetAncestor === e.target) break;\n\n                overTargetAncestor = overTargetAncestor.parent;\n            }\n\n            // The pointer has entered a non-ancestor of the original overTarget. This means we need a pointerentered\n            // event.\n            const didPointerEnter = !overTargetAncestor || overTargetAncestor === this.rootTarget.parent;\n\n            if (didPointerEnter)\n            {\n                const enterEvent = this.clonePointerEvent(e, 'pointerenter');\n\n                enterEvent.eventPhase = enterEvent.AT_TARGET;\n\n                while (enterEvent.target\n                        && enterEvent.target !== outTarget\n                        && enterEvent.target !== this.rootTarget.parent)\n                {\n                    enterEvent.currentTarget = enterEvent.target;\n\n                    this.notifyTarget(enterEvent);\n                    if (isMouse) this.notifyTarget(enterEvent, 'mouseenter');\n\n                    enterEvent.target = enterEvent.target.parent;\n                }\n\n                this.freeEvent(enterEvent);\n            }\n\n            this.freeEvent(overEvent);\n        }\n\n        const allMethods: string[] = [];\n        const allowGlobalPointerEvents = this.enableGlobalMoveEvents ?? true;\n\n        this.moveOnAll ? allMethods.push('pointermove') : this.dispatchEvent(e, 'pointermove');\n        allowGlobalPointerEvents && allMethods.push('globalpointermove');\n\n        // Then pointermove\n        if (e.pointerType === 'touch')\n        {\n            this.moveOnAll ? allMethods.splice(1, 0, 'touchmove') : this.dispatchEvent(e, 'touchmove');\n            allowGlobalPointerEvents && allMethods.push('globaltouchmove');\n        }\n\n        if (isMouse)\n        {\n            this.moveOnAll ? allMethods.splice(1, 0, 'mousemove') : this.dispatchEvent(e, 'mousemove');\n            allowGlobalPointerEvents && allMethods.push('globalmousemove');\n            this.cursor = e.target?.cursor;\n        }\n\n        if (allMethods.length > 0)\n        {\n            this.all(e, allMethods);\n        }\n        this._allInteractiveElements.length = 0;\n        this._hitElements.length = 0;\n\n        trackingData.overTargets = e.composedPath();\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `pointerover` to downstream `pointerover` and `pointerenter` events, in that order.\n     *\n     * The tracking data for the specific pointer gets a new `overTarget`.\n     * @param from - The upstream `pointerover` event.\n     */\n    protected mapPointerOver(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            // #if _DEBUG\n            warn('EventBoundary cannot map a non-pointer event as a pointer event');\n            // #endif\n\n            return;\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n        const e = this.createPointerEvent(from);\n        const isMouse = e.pointerType === 'mouse' || e.pointerType === 'pen';\n\n        this.dispatchEvent(e, 'pointerover');\n        if (isMouse) this.dispatchEvent(e, 'mouseover');\n        if (e.pointerType === 'mouse') this.cursor = e.target?.cursor;\n\n        // pointerenter events must be fired since the pointer entered from upstream.\n        const enterEvent = this.clonePointerEvent(e, 'pointerenter');\n\n        enterEvent.eventPhase = enterEvent.AT_TARGET;\n\n        while (enterEvent.target && enterEvent.target !== this.rootTarget.parent)\n        {\n            enterEvent.currentTarget = enterEvent.target;\n\n            this.notifyTarget(enterEvent);\n            if (isMouse) this.notifyTarget(enterEvent, 'mouseenter');\n\n            enterEvent.target = enterEvent.target.parent;\n        }\n\n        trackingData.overTargets = e.composedPath();\n\n        this.freeEvent(e);\n        this.freeEvent(enterEvent);\n    }\n\n    /**\n     * Maps the upstream `pointerout` to downstream `pointerout`, `pointerleave` events, in that order.\n     *\n     * The tracking data for the specific pointer is cleared of a `overTarget`.\n     * @param from - The upstream `pointerout` event.\n     */\n    protected mapPointerOut(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            // #if _DEBUG\n            warn('EventBoundary cannot map a non-pointer event as a pointer event');\n            // #endif\n\n            return;\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n\n        if (trackingData.overTargets)\n        {\n            const isMouse = from.pointerType === 'mouse' || from.pointerType === 'pen';\n            const outTarget = this.findMountedTarget(trackingData.overTargets);\n\n            // pointerout first\n            const outEvent = this.createPointerEvent(from, 'pointerout', outTarget);\n\n            this.dispatchEvent(outEvent);\n            if (isMouse) this.dispatchEvent(outEvent, 'mouseout');\n\n            // pointerleave(s) are also dispatched b/c the pointer must've left rootTarget and its descendants to\n            // get an upstream pointerout event (upstream events do not know rootTarget has descendants).\n            const leaveEvent = this.createPointerEvent(from, 'pointerleave', outTarget);\n\n            leaveEvent.eventPhase = leaveEvent.AT_TARGET;\n\n            while (leaveEvent.target && leaveEvent.target !== this.rootTarget.parent)\n            {\n                leaveEvent.currentTarget = leaveEvent.target;\n\n                this.notifyTarget(leaveEvent);\n                if (isMouse) this.notifyTarget(leaveEvent, 'mouseleave');\n\n                leaveEvent.target = leaveEvent.target.parent;\n            }\n\n            trackingData.overTargets = null;\n\n            this.freeEvent(outEvent);\n            this.freeEvent(leaveEvent);\n        }\n\n        this.cursor = null;\n    }\n\n    /**\n     * Maps the upstream `pointerup` event to downstream `pointerup`, `pointerupoutside`,\n     * and `click`/`rightclick`/`pointertap` events, in that order.\n     *\n     * The `pointerupoutside` event bubbles from the original `pointerdown` target to the most specific\n     * ancestor of the `pointerdown` and `pointerup` targets, which is also the `click` event's target. `touchend`,\n     * `rightup`, `mouseup`, `touchendoutside`, `rightupoutside`, `mouseupoutside`, and `tap` are fired as well for\n     * specific pointer types.\n     * @param from - The upstream `pointerup` event.\n     */\n    protected mapPointerUp(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            // #if _DEBUG\n            warn('EventBoundary cannot map a non-pointer event as a pointer event');\n            // #endif\n\n            return;\n        }\n\n        const now = performance.now();\n        const e = this.createPointerEvent(from);\n\n        this.dispatchEvent(e, 'pointerup');\n\n        if (e.pointerType === 'touch')\n        {\n            this.dispatchEvent(e, 'touchend');\n        }\n        else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n        {\n            const isRightButton = e.button === 2;\n\n            this.dispatchEvent(e, isRightButton ? 'rightup' : 'mouseup');\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n        const pressTarget = this.findMountedTarget(trackingData.pressTargetsByButton[from.button]);\n\n        let clickTarget = pressTarget;\n\n        // pointerupoutside only bubbles. It only bubbles upto the parent that doesn't contain\n        // the pointerup location.\n        if (pressTarget && !e.composedPath().includes(pressTarget))\n        {\n            let currentTarget = pressTarget;\n\n            while (currentTarget && !e.composedPath().includes(currentTarget))\n            {\n                e.currentTarget = currentTarget;\n\n                this.notifyTarget(e, 'pointerupoutside');\n\n                if (e.pointerType === 'touch')\n                {\n                    this.notifyTarget(e, 'touchendoutside');\n                }\n                else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n                {\n                    const isRightButton = e.button === 2;\n\n                    this.notifyTarget(e, isRightButton ? 'rightupoutside' : 'mouseupoutside');\n                }\n\n                currentTarget = currentTarget.parent;\n            }\n\n            delete trackingData.pressTargetsByButton[from.button];\n\n            // currentTarget is the most specific ancestor holding both the pointerdown and pointerup\n            // targets. That is - it's our click target!\n            clickTarget = currentTarget;\n        }\n\n        // click!\n        if (clickTarget)\n        {\n            const clickEvent = this.clonePointerEvent(e, 'click');\n\n            clickEvent.target = clickTarget;\n            clickEvent.path = null;\n\n            if (!trackingData.clicksByButton[from.button])\n            {\n                trackingData.clicksByButton[from.button] = {\n                    clickCount: 0,\n                    target: clickEvent.target,\n                    timeStamp: now,\n                };\n            }\n\n            const clickHistory = trackingData.clicksByButton[from.button];\n\n            if (clickHistory.target === clickEvent.target\n                && now - clickHistory.timeStamp < 200)\n            {\n                ++clickHistory.clickCount;\n            }\n            else\n            {\n                clickHistory.clickCount = 1;\n            }\n\n            clickHistory.target = clickEvent.target;\n            clickHistory.timeStamp = now;\n\n            clickEvent.detail = clickHistory.clickCount;\n\n            if (clickEvent.pointerType === 'mouse')\n            {\n                const isRightButton = clickEvent.button === 2;\n\n                this.dispatchEvent(clickEvent, isRightButton ? 'rightclick' : 'click');\n            }\n            else if (clickEvent.pointerType === 'touch')\n            {\n                this.dispatchEvent(clickEvent, 'tap');\n            }\n\n            this.dispatchEvent(clickEvent, 'pointertap');\n\n            this.freeEvent(clickEvent);\n        }\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `pointerupoutside` event to a downstream `pointerupoutside` event, bubbling from the original\n     * `pointerdown` target to `rootTarget`.\n     *\n     * (The most specific ancestor of the `pointerdown` event and the `pointerup` event must the\n     * `{@link EventBoundary}'s root because the `pointerup` event occurred outside of the boundary.)\n     *\n     * `touchendoutside`, `mouseupoutside`, and `rightupoutside` events are fired as well for specific pointer\n     * types. The tracking data for the specific pointer is cleared of a `pressTarget`.\n     * @param from - The upstream `pointerupoutside` event.\n     */\n    protected mapPointerUpOutside(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            // #if _DEBUG\n            warn('EventBoundary cannot map a non-pointer event as a pointer event');\n            // #endif\n\n            return;\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n        const pressTarget = this.findMountedTarget(trackingData.pressTargetsByButton[from.button]);\n        const e = this.createPointerEvent(from);\n\n        if (pressTarget)\n        {\n            let currentTarget = pressTarget;\n\n            while (currentTarget)\n            {\n                e.currentTarget = currentTarget;\n\n                this.notifyTarget(e, 'pointerupoutside');\n\n                if (e.pointerType === 'touch')\n                {\n                    this.notifyTarget(e, 'touchendoutside');\n                }\n                else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n                {\n                    this.notifyTarget(e, e.button === 2 ? 'rightupoutside' : 'mouseupoutside');\n                }\n\n                currentTarget = currentTarget.parent;\n            }\n\n            delete trackingData.pressTargetsByButton[from.button];\n        }\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `wheel` event to a downstream `wheel` event.\n     * @param from - The upstream `wheel` event.\n     */\n    protected mapWheel(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedWheelEvent))\n        {\n            // #if _DEBUG\n            warn('EventBoundary cannot map a non-wheel event as a wheel event');\n            // #endif\n\n            return;\n        }\n\n        const wheelEvent = this.createWheelEvent(from);\n\n        this.dispatchEvent(wheelEvent);\n        this.freeEvent(wheelEvent);\n    }\n\n    /**\n     * Finds the most specific event-target in the given propagation path that is still mounted in the scene graph.\n     *\n     * This is used to find the correct `pointerup` and `pointerout` target in the case that the original `pointerdown`\n     * or `pointerover` target was unmounted from the scene graph.\n     * @param propagationPath - The propagation path was valid in the past.\n     * @returns - The most specific event-target still mounted at the same location in the scene graph.\n     */\n    protected findMountedTarget(propagationPath: Container[]): Container\n    {\n        if (!propagationPath)\n        {\n            return null;\n        }\n\n        let currentTarget = propagationPath[0];\n\n        for (let i = 1; i < propagationPath.length; i++)\n        {\n            // Set currentTarget to the next target in the path only if it is still attached to the\n            // scene graph (i.e. parent still points to the expected ancestor).\n            if (propagationPath[i].parent === currentTarget)\n            {\n                currentTarget = propagationPath[i];\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        return currentTarget;\n    }\n\n    /**\n     * Creates an event whose {@code originalEvent} is {@code from}, with an optional `type` and `target` override.\n     *\n     * The event is allocated using {@link EventBoundary#allocateEvent this.allocateEvent}.\n     * @param from - The {@code originalEvent} for the returned event.\n     * @param [type=from.type] - The type of the returned event.\n     * @param target - The target of the returned event.\n     */\n    protected createPointerEvent(\n        from: FederatedPointerEvent,\n        type?: string,\n        target?: Container\n    ): FederatedPointerEvent\n    {\n        const event = this.allocateEvent(FederatedPointerEvent);\n\n        this.copyPointerData(from, event);\n        this.copyMouseData(from, event);\n        this.copyData(from, event);\n\n        event.nativeEvent = from.nativeEvent;\n        event.originalEvent = from;\n        event.target = target\n            ?? this.hitTest(event.global.x, event.global.y) as Container\n            ?? this._hitElements[0];\n\n        if (typeof type === 'string')\n        {\n            event.type = type;\n        }\n\n        return event;\n    }\n\n    /**\n     * Creates a wheel event whose {@code originalEvent} is {@code from}.\n     *\n     * The event is allocated using {@link EventBoundary#allocateEvent this.allocateEvent}.\n     * @param from - The upstream wheel event.\n     */\n    protected createWheelEvent(from: FederatedWheelEvent): FederatedWheelEvent\n    {\n        const event = this.allocateEvent(FederatedWheelEvent);\n\n        this.copyWheelData(from, event);\n        this.copyMouseData(from, event);\n        this.copyData(from, event);\n\n        event.nativeEvent = from.nativeEvent;\n        event.originalEvent = from;\n        event.target = this.hitTest(event.global.x, event.global.y);\n\n        return event;\n    }\n\n    /**\n     * Clones the event {@code from}, with an optional {@code type} override.\n     *\n     * The event is allocated using {@link EventBoundary#allocateEvent this.allocateEvent}.\n     * @param from - The event to clone.\n     * @param [type=from.type] - The type of the returned event.\n     */\n    protected clonePointerEvent(from: FederatedPointerEvent, type?: string): FederatedPointerEvent\n    {\n        const event = this.allocateEvent(FederatedPointerEvent);\n\n        event.nativeEvent = from.nativeEvent;\n        event.originalEvent = from.originalEvent;\n\n        this.copyPointerData(from, event);\n        this.copyMouseData(from, event);\n        this.copyData(from, event);\n\n        // copy propagation path for perf\n        event.target = from.target;\n        event.path = from.composedPath().slice();\n        event.type = type ?? event.type;\n\n        return event;\n    }\n\n    /**\n     * Copies wheel {@link FederatedWheelEvent} data from {@code from} into {@code to}.\n     *\n     * The following properties are copied:\n     * + deltaMode\n     * + deltaX\n     * + deltaY\n     * + deltaZ\n     * @param from - The event to copy data from.\n     * @param to - The event to copy data into.\n     */\n    protected copyWheelData(from: FederatedWheelEvent, to: FederatedWheelEvent): void\n    {\n        to.deltaMode = from.deltaMode;\n        to.deltaX = from.deltaX;\n        to.deltaY = from.deltaY;\n        to.deltaZ = from.deltaZ;\n    }\n\n    /**\n     * Copies pointer {@link FederatedPointerEvent} data from {@code from} into {@code to}.\n     *\n     * The following properties are copied:\n     * + pointerId\n     * + width\n     * + height\n     * + isPrimary\n     * + pointerType\n     * + pressure\n     * + tangentialPressure\n     * + tiltX\n     * + tiltY\n     * @param from - The event to copy data from.\n     * @param to - The event to copy data into.\n     */\n    protected copyPointerData(from: FederatedEvent, to: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent && to instanceof FederatedPointerEvent)) return;\n\n        to.pointerId = from.pointerId;\n        to.width = from.width;\n        to.height = from.height;\n        to.isPrimary = from.isPrimary;\n        to.pointerType = from.pointerType;\n        to.pressure = from.pressure;\n        to.tangentialPressure = from.tangentialPressure;\n        to.tiltX = from.tiltX;\n        to.tiltY = from.tiltY;\n        to.twist = from.twist;\n    }\n\n    /**\n     * Copies mouse {@link FederatedMouseEvent} data from {@code from} to {@code to}.\n     *\n     * The following properties are copied:\n     * + altKey\n     * + button\n     * + buttons\n     * + clientX\n     * + clientY\n     * + metaKey\n     * + movementX\n     * + movementY\n     * + pageX\n     * + pageY\n     * + x\n     * + y\n     * + screen\n     * + shiftKey\n     * + global\n     * @param from - The event to copy data from.\n     * @param to - The event to copy data into.\n     */\n    protected copyMouseData(from: FederatedEvent, to: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedMouseEvent && to instanceof FederatedMouseEvent)) return;\n\n        to.altKey = from.altKey;\n        to.button = from.button;\n        to.buttons = from.buttons;\n        to.client.copyFrom(from.client);\n        to.ctrlKey = from.ctrlKey;\n        to.metaKey = from.metaKey;\n        to.movement.copyFrom(from.movement);\n        to.screen.copyFrom(from.screen);\n        to.shiftKey = from.shiftKey;\n        to.global.copyFrom(from.global);\n    }\n\n    /**\n     * Copies base {@link FederatedEvent} data from {@code from} into {@code to}.\n     *\n     * The following properties are copied:\n     * + isTrusted\n     * + srcElement\n     * + timeStamp\n     * + type\n     * @param from - The event to copy data from.\n     * @param to - The event to copy data into.\n     */\n    protected copyData(from: FederatedEvent, to: FederatedEvent): void\n    {\n        to.isTrusted = from.isTrusted;\n        to.srcElement = from.srcElement;\n        to.timeStamp = performance.now();\n        to.type = from.type;\n        to.detail = from.detail;\n        to.view = from.view;\n        to.which = from.which;\n        to.layer.copyFrom(from.layer);\n        to.page.copyFrom(from.page);\n    }\n\n    /**\n     * @param id - The pointer ID.\n     * @returns The tracking data stored for the given pointer. If no data exists, a blank\n     *  state will be created.\n     */\n    protected trackingData(id: number): TrackingData\n    {\n        if (!this.mappingState.trackingData[id])\n        {\n            this.mappingState.trackingData[id] = {\n                pressTargetsByButton: {},\n                clicksByButton: {},\n                overTarget: null\n            };\n        }\n\n        return this.mappingState.trackingData[id];\n    }\n\n    /**\n     * Allocate a specific type of event from {@link EventBoundary#eventPool this.eventPool}.\n     *\n     * This allocation is constructor-agnostic, as long as it only takes one argument - this event\n     * boundary.\n     * @param constructor - The event's constructor.\n     */\n    protected allocateEvent<T extends FederatedEvent>(\n        constructor: { new(boundary: EventBoundary): T }\n    ): T\n    {\n        if (!this.eventPool.has(constructor as any))\n        {\n            this.eventPool.set(constructor as any, []);\n        }\n\n        const event = this.eventPool.get(constructor as any).pop() as T\n            || new constructor(this);\n\n        event.eventPhase = event.NONE;\n        event.currentTarget = null;\n        event.defaultPrevented = false;\n        event.path = null;\n        event.target = null;\n\n        return event;\n    }\n\n    /**\n     * Frees the event and puts it back into the event pool.\n     *\n     * It is illegal to reuse the event until it is allocated again, using `this.allocateEvent`.\n     *\n     * It is also advised that events not allocated from {@link EventBoundary#allocateEvent this.allocateEvent}\n     * not be freed. This is because of the possibility that the same event is freed twice, which can cause\n     * it to be allocated twice & result in overwriting.\n     * @param event - The event to be freed.\n     * @throws Error if the event is managed by another event boundary.\n     */\n    protected freeEvent<T extends FederatedEvent>(event: T): void\n    {\n        if (event.manager !== this) throw new Error('It is illegal to free an event not managed by this EventBoundary!');\n\n        const constructor = event.constructor;\n\n        if (!this.eventPool.has(constructor as any))\n        {\n            this.eventPool.set(constructor as any, []);\n        }\n\n        this.eventPool.get(constructor as any).push(event);\n    }\n\n    /**\n     * Similar to {@link EventEmitter.emit}, except it stops if the `propagationImmediatelyStopped` flag\n     * is set on the event.\n     * @param e - The event to call each listener with.\n     * @param type - The event key.\n     */\n    private _notifyListeners(e: FederatedEvent, type: string): void\n    {\n        const listeners = ((e.currentTarget as any)._events as EmitterListeners)[type];\n\n        if (!listeners) return;\n\n        if ('fn' in listeners)\n        {\n            if (listeners.once) e.currentTarget.removeListener(type, listeners.fn, undefined, true);\n            listeners.fn.call(listeners.context, e);\n        }\n        else\n        {\n            for (\n                let i = 0, j = listeners.length;\n                i < j && !e.propagationImmediatelyStopped;\n                i++)\n            {\n                if (listeners[i].once) e.currentTarget.removeListener(type, listeners[i].fn, undefined, true);\n                listeners[i].fn.call(listeners[i].context, e);\n            }\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2080, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2086, "column": 0}, "map": {"version":3,"file":"EventSystem.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/events/EventSystem.ts"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions';\nimport { EventBoundary } from './EventBoundary';\nimport { EventsTicker } from './EventTicker';\nimport { FederatedPointerEvent } from './FederatedPointerEvent';\nimport { FederatedWheelEvent } from './FederatedWheelEvent';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\nimport type { PointData } from '../maths/point/PointData';\nimport type { System } from '../rendering/renderers/shared/system/System';\nimport type { Renderer } from '../rendering/renderers/types';\nimport type { PixiTouch } from './FederatedEvent';\nimport type { EventMode } from './FederatedEventTarget';\nimport type { FederatedMouseEvent } from './FederatedMouseEvent';\n\nconst MOUSE_POINTER_ID = 1;\nconst TOUCH_TO_POINTER: Record<string, string> = {\n    touchstart: 'pointerdown',\n    touchend: 'pointerup',\n    touchendoutside: 'pointerupoutside',\n    touchmove: 'pointermove',\n    touchcancel: 'pointercancel',\n};\n\n/** @ignore */\nexport interface EventSystemOptions\n{\n    /**\n     * The default event mode mode for all display objects.\n     * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n     */\n    eventMode?: EventMode;\n\n    /**\n     * The event features that are enabled by the EventSystem\n     * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n     * @example\n     * const app = new Application({\n     *   view: canvas,\n     *   events: {\n     *     move: true,\n     *     globalMove: false,\n     *     click: true,\n     *     wheel: true,\n     *   },\n     * });\n     */\n    eventFeatures?: Partial<EventSystemFeatures>\n}\n\n/**\n * The event features that are enabled by the EventSystem\n * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n * @since 7.2.0\n * @memberof events\n */\nexport interface EventSystemFeatures\n{\n    /**\n     * Enables pointer events associated with pointer movement:\n     * - `pointermove` / `mousemove` / `touchmove`\n     * - `pointerout` / `mouseout`\n     * - `pointerover` / `mouseover`\n     */\n    move: boolean;\n    // eslint-disable-next-line jsdoc/multiline-blocks\n    /**\n     * Enables global pointer move events:\n     * - `globalpointermove`\n     * - `globalmousemove`\n     * - `globaltouchemove`\n     */\n    globalMove: boolean;\n    /**\n     * Enables pointer events associated with clicking:\n     * - `pointerup` / `mouseup` / `touchend` / 'rightup'\n     * - `pointerupoutside` / `mouseupoutside` / `touchendoutside` / 'rightupoutside'\n     * - `pointerdown` / 'mousedown' / `touchstart` / 'rightdown'\n     * - `click` / `tap`\n     */\n    click: boolean;\n    /** - Enables wheel events. */\n    wheel: boolean;\n}\n\n/**\n * The system for handling UI events.\n * @memberof events\n */\nexport class EventSystem implements System<EventSystemOptions>\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = {\n        name: 'events',\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.CanvasSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        priority: -1,\n    };\n\n    /**\n     * The event features that are enabled by the EventSystem\n     * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n     * @since 7.2.0\n     */\n    public static defaultEventFeatures: EventSystemFeatures = {\n        /** Enables pointer events associated with pointer movement. */\n        move: true,\n        /** Enables global pointer move events. */\n        globalMove: true,\n        /** Enables pointer events associated with clicking. */\n        click: true,\n        /** Enables wheel events. */\n        wheel: true,\n    };\n\n    private static _defaultEventMode: EventMode;\n\n    /**\n     * The default interaction mode for all display objects.\n     * @see Container.eventMode\n     * @type {EventMode}\n     * @readonly\n     * @since 7.2.0\n     */\n    public static get defaultEventMode()\n    {\n        return this._defaultEventMode;\n    }\n\n    /**\n     * The {@link EventBoundary} for the stage.\n     *\n     * The {@link EventBoundary#rootTarget rootTarget} of this root boundary is automatically set to\n     * the last rendered object before any event processing is initiated. This means the main scene\n     * needs to be rendered atleast once before UI events will start propagating.\n     *\n     * The root boundary should only be changed during initialization. Otherwise, any state held by the\n     * event boundary may be lost (like hovered & pressed Containers).\n     */\n    public readonly rootBoundary: EventBoundary;\n\n    /** Does the device support touch events https://www.w3.org/TR/touch-events/ */\n    public readonly supportsTouchEvents = 'ontouchstart' in globalThis;\n\n    /** Does the device support pointer events https://www.w3.org/Submission/pointer-events/ */\n    public readonly supportsPointerEvents = !!globalThis.PointerEvent;\n\n    /**\n     * Should default browser actions automatically be prevented.\n     * Does not apply to pointer events for backwards compatibility\n     * preventDefault on pointer events stops mouse events from firing\n     * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.\n     * @default true\n     */\n    public autoPreventDefault: boolean;\n\n    /**\n     * Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor\n     * values, objects are handled as dictionaries of CSS values for {@code domElement},\n     * and functions are called instead of changing the CSS.\n     * Default CSS cursor values are provided for 'default' and 'pointer' modes.\n     */\n    public cursorStyles: Record<string, string | ((mode: string) => void) | CSSStyleDeclaration>;\n\n    /**\n     * The DOM element to which the root event listeners are bound. This is automatically set to\n     * the renderer's {@link Renderer#view view}.\n     */\n    public domElement: HTMLElement = null;\n\n    /** The resolution used to convert between the DOM client space into world space. */\n    public resolution = 1;\n\n    /** The renderer managing this {@link EventSystem}. */\n    public renderer: Renderer;\n\n    /**\n     * The event features that are enabled by the EventSystem\n     * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n     * @since 7.2.0\n     * @example\n     * const app = new Application()\n     * app.renderer.events.features.globalMove = false\n     *\n     * // to override all features use Object.assign\n     * Object.assign(app.renderer.events.features, {\n     *  move: false,\n     *  globalMove: false,\n     *  click: false,\n     *  wheel: false,\n     * })\n     */\n    public readonly features: EventSystemFeatures;\n\n    private _currentCursor: string;\n    private readonly _rootPointerEvent: FederatedPointerEvent;\n    private readonly _rootWheelEvent: FederatedWheelEvent;\n    private _eventsAdded: boolean;\n\n    /**\n     * @param {Renderer} renderer\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n        this.rootBoundary = new EventBoundary(null);\n        EventsTicker.init(this);\n\n        this.autoPreventDefault = true;\n        this._eventsAdded = false;\n\n        this._rootPointerEvent = new FederatedPointerEvent(null);\n        this._rootWheelEvent = new FederatedWheelEvent(null);\n\n        this.cursorStyles = {\n            default: 'inherit',\n            pointer: 'pointer',\n        };\n\n        this.features = new Proxy({ ...EventSystem.defaultEventFeatures }, {\n            set: (target, key, value) =>\n            {\n                if (key === 'globalMove')\n                {\n                    this.rootBoundary.enableGlobalMoveEvents = value;\n                }\n                target[key as keyof EventSystemFeatures] = value;\n\n                return true;\n            }\n        });\n\n        this._onPointerDown = this._onPointerDown.bind(this);\n        this._onPointerMove = this._onPointerMove.bind(this);\n        this._onPointerUp = this._onPointerUp.bind(this);\n        this._onPointerOverOut = this._onPointerOverOut.bind(this);\n        this.onWheel = this.onWheel.bind(this);\n    }\n\n    /**\n     * Runner init called, view is available at this point.\n     * @ignore\n     */\n    public init(options: EventSystemOptions): void\n    {\n        const { canvas, resolution } = this.renderer;\n\n        this.setTargetElement(canvas as HTMLCanvasElement);\n        this.resolution = resolution;\n        EventSystem._defaultEventMode = options.eventMode ?? 'passive';\n        Object.assign(this.features, options.eventFeatures ?? {});\n        this.rootBoundary.enableGlobalMoveEvents = this.features.globalMove;\n    }\n\n    /**\n     * Handle changing resolution.\n     * @ignore\n     */\n    public resolutionChange(resolution: number): void\n    {\n        this.resolution = resolution;\n    }\n\n    /** Destroys all event listeners and detaches the renderer. */\n    public destroy(): void\n    {\n        this.setTargetElement(null);\n        this.renderer = null;\n        this._currentCursor = null;\n    }\n\n    /**\n     * Sets the current cursor mode, handling any callbacks or CSS style changes.\n     * @param mode - cursor mode, a key from the cursorStyles dictionary\n     */\n    public setCursor(mode: string): void\n    {\n        mode ||= 'default';\n        let applyStyles = true;\n\n        // offscreen canvas does not support setting styles, but cursor modes can be functions,\n        // in order to handle pixi rendered cursors, so we can't bail\n        if (globalThis.OffscreenCanvas && this.domElement instanceof OffscreenCanvas)\n        {\n            applyStyles = false;\n        }\n        // if the mode didn't actually change, bail early\n        if (this._currentCursor === mode)\n        {\n            return;\n        }\n        this._currentCursor = mode;\n        const style = this.cursorStyles[mode];\n\n        // only do things if there is a cursor style for it\n        if (style)\n        {\n            switch (typeof style)\n            {\n                case 'string':\n                    // string styles are handled as cursor CSS\n                    if (applyStyles)\n                    {\n                        this.domElement.style.cursor = style;\n                    }\n                    break;\n                case 'function':\n                    // functions are just called, and passed the cursor mode\n                    style(mode);\n                    break;\n                case 'object':\n                    // if it is an object, assume that it is a dictionary of CSS styles,\n                    // apply it to the interactionDOMElement\n                    if (applyStyles)\n                    {\n                        Object.assign(this.domElement.style, style);\n                    }\n                    break;\n            }\n        }\n        else if (applyStyles && typeof mode === 'string' && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode))\n        {\n            // if it mode is a string (not a Symbol) and cursorStyles doesn't have any entry\n            // for the mode, then assume that the dev wants it to be CSS for the cursor.\n            this.domElement.style.cursor = mode;\n        }\n    }\n\n    /**\n     * The global pointer event.\n     * Useful for getting the pointer position without listening to events.\n     * @since 7.2.0\n     */\n    public get pointer(): Readonly<FederatedPointerEvent>\n    {\n        return this._rootPointerEvent;\n    }\n\n    /**\n     * Event handler for pointer down events on {@link EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch event.\n     */\n    private _onPointerDown(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        if (!this.features.click) return;\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n\n        const events = this._normalizeToPointerData(nativeEvent);\n\n        /*\n         * No need to prevent default on natural pointer events, as there are no side effects\n         * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,\n         * so still need to be prevented.\n         */\n\n        // Guaranteed that there will be at least one event in events, and all events must have the same pointer type\n\n        if (this.autoPreventDefault && (events[0] as any).isNormalized)\n        {\n            const cancelable = nativeEvent.cancelable || !('cancelable' in nativeEvent);\n\n            if (cancelable)\n            {\n                nativeEvent.preventDefault();\n            }\n        }\n\n        for (let i = 0, j = events.length; i < j; i++)\n        {\n            const nativeEvent = events[i];\n            const federatedEvent = this._bootstrapEvent(this._rootPointerEvent, nativeEvent);\n\n            this.rootBoundary.mapEvent(federatedEvent);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Event handler for pointer move events on on {@link EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch events.\n     */\n    private _onPointerMove(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        if (!this.features.move) return;\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n\n        EventsTicker.pointerMoved();\n\n        const normalizedEvents = this._normalizeToPointerData(nativeEvent);\n\n        for (let i = 0, j = normalizedEvents.length; i < j; i++)\n        {\n            const event = this._bootstrapEvent(this._rootPointerEvent, normalizedEvents[i]);\n\n            this.rootBoundary.mapEvent(event);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Event handler for pointer up events on {@link EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch event.\n     */\n    private _onPointerUp(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        if (!this.features.click) return;\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n\n        let target = nativeEvent.target;\n\n        // if in shadow DOM use composedPath to access target\n        if (nativeEvent.composedPath && nativeEvent.composedPath().length > 0)\n        {\n            target = nativeEvent.composedPath()[0];\n        }\n\n        const outside = target !== this.domElement ? 'outside' : '';\n        const normalizedEvents = this._normalizeToPointerData(nativeEvent);\n\n        for (let i = 0, j = normalizedEvents.length; i < j; i++)\n        {\n            const event = this._bootstrapEvent(this._rootPointerEvent, normalizedEvents[i]);\n\n            event.type += outside;\n\n            this.rootBoundary.mapEvent(event);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Event handler for pointer over & out events on {@link EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch event.\n     */\n    private _onPointerOverOut(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        if (!this.features.click) return;\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n\n        const normalizedEvents = this._normalizeToPointerData(nativeEvent);\n\n        for (let i = 0, j = normalizedEvents.length; i < j; i++)\n        {\n            const event = this._bootstrapEvent(this._rootPointerEvent, normalizedEvents[i]);\n\n            this.rootBoundary.mapEvent(event);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Passive handler for `wheel` events on {@link EventSystem.domElement this.domElement}.\n     * @param nativeEvent - The native wheel event.\n     */\n    protected onWheel(nativeEvent: WheelEvent): void\n    {\n        if (!this.features.wheel) return;\n        const wheelEvent = this.normalizeWheelEvent(nativeEvent);\n\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n        this.rootBoundary.mapEvent(wheelEvent);\n    }\n\n    /**\n     * Sets the {@link EventSystem#domElement domElement} and binds event listeners.\n     *\n     * To deregister the current DOM element without setting a new one, pass {@code null}.\n     * @param element - The new DOM element.\n     */\n    public setTargetElement(element: HTMLElement): void\n    {\n        this._removeEvents();\n        this.domElement = element;\n        EventsTicker.domElement = element;\n        this._addEvents();\n    }\n\n    /** Register event listeners on {@link Renderer#domElement this.domElement}. */\n    private _addEvents(): void\n    {\n        if (this._eventsAdded || !this.domElement)\n        {\n            return;\n        }\n\n        EventsTicker.addTickerListener();\n\n        const style = this.domElement.style as CrossCSSStyleDeclaration;\n\n        if (style)\n        {\n            if ((globalThis.navigator as any).msPointerEnabled)\n            {\n                style.msContentZooming = 'none';\n                style.msTouchAction = 'none';\n            }\n            else if (this.supportsPointerEvents)\n            {\n                style.touchAction = 'none';\n            }\n        }\n\n        /*\n         * These events are added first, so that if pointer events are normalized, they are fired\n         * in the same order as non-normalized events. ie. pointer event 1st, mouse / touch 2nd\n         */\n        if (this.supportsPointerEvents)\n        {\n            globalThis.document.addEventListener('pointermove', this._onPointerMove, true);\n            this.domElement.addEventListener('pointerdown', this._onPointerDown, true);\n            // pointerout is fired in addition to pointerup (for touch events) and pointercancel\n            // we already handle those, so for the purposes of what we do in onPointerOut, we only\n            // care about the pointerleave event\n            this.domElement.addEventListener('pointerleave', this._onPointerOverOut, true);\n            this.domElement.addEventListener('pointerover', this._onPointerOverOut, true);\n            // globalThis.addEventListener('pointercancel', this.onPointerCancel, true);\n            globalThis.addEventListener('pointerup', this._onPointerUp, true);\n        }\n        else\n        {\n            globalThis.document.addEventListener('mousemove', this._onPointerMove, true);\n            this.domElement.addEventListener('mousedown', this._onPointerDown, true);\n            this.domElement.addEventListener('mouseout', this._onPointerOverOut, true);\n            this.domElement.addEventListener('mouseover', this._onPointerOverOut, true);\n            globalThis.addEventListener('mouseup', this._onPointerUp, true);\n\n            if (this.supportsTouchEvents)\n            {\n                this.domElement.addEventListener('touchstart', this._onPointerDown, true);\n                // this.domElement.addEventListener('touchcancel', this.onPointerCancel, true);\n                this.domElement.addEventListener('touchend', this._onPointerUp, true);\n                this.domElement.addEventListener('touchmove', this._onPointerMove, true);\n            }\n        }\n\n        this.domElement.addEventListener('wheel', this.onWheel, {\n            passive: true,\n            capture: true,\n        });\n\n        this._eventsAdded = true;\n    }\n\n    /** Unregister event listeners on {@link EventSystem#domElement this.domElement}. */\n    private _removeEvents(): void\n    {\n        if (!this._eventsAdded || !this.domElement)\n        {\n            return;\n        }\n\n        EventsTicker.removeTickerListener();\n\n        const style = this.domElement.style as CrossCSSStyleDeclaration;\n\n        // offscreen canvas does not have style, so check first\n        if (style)\n        {\n            if ((globalThis.navigator as any).msPointerEnabled)\n            {\n                style.msContentZooming = '';\n                style.msTouchAction = '';\n            }\n            else if (this.supportsPointerEvents)\n            {\n                style.touchAction = '';\n            }\n        }\n\n        if (this.supportsPointerEvents)\n        {\n            globalThis.document.removeEventListener('pointermove', this._onPointerMove, true);\n            this.domElement.removeEventListener('pointerdown', this._onPointerDown, true);\n            this.domElement.removeEventListener('pointerleave', this._onPointerOverOut, true);\n            this.domElement.removeEventListener('pointerover', this._onPointerOverOut, true);\n            // globalThis.removeEventListener('pointercancel', this.onPointerCancel, true);\n            globalThis.removeEventListener('pointerup', this._onPointerUp, true);\n        }\n        else\n        {\n            globalThis.document.removeEventListener('mousemove', this._onPointerMove, true);\n            this.domElement.removeEventListener('mousedown', this._onPointerDown, true);\n            this.domElement.removeEventListener('mouseout', this._onPointerOverOut, true);\n            this.domElement.removeEventListener('mouseover', this._onPointerOverOut, true);\n            globalThis.removeEventListener('mouseup', this._onPointerUp, true);\n\n            if (this.supportsTouchEvents)\n            {\n                this.domElement.removeEventListener('touchstart', this._onPointerDown, true);\n                // this.domElement.removeEventListener('touchcancel', this.onPointerCancel, true);\n                this.domElement.removeEventListener('touchend', this._onPointerUp, true);\n                this.domElement.removeEventListener('touchmove', this._onPointerMove, true);\n            }\n        }\n\n        this.domElement.removeEventListener('wheel', this.onWheel, true);\n\n        this.domElement = null;\n        this._eventsAdded = false;\n    }\n\n    /**\n     * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\n     * resulting value is stored in the point. This takes into account the fact that the DOM\n     * element could be scaled and positioned anywhere on the screen.\n     * @param  {PointData} point - the point that the result will be stored in\n     * @param  {number} x - the x coord of the position to map\n     * @param  {number} y - the y coord of the position to map\n     */\n    public mapPositionToPoint(point: PointData, x: number, y: number): void\n    {\n        const rect = this.domElement.isConnected\n            ? this.domElement.getBoundingClientRect()\n            : {\n                x: 0,\n                y: 0,\n                width: (this.domElement as any).width,\n                height: (this.domElement as any).height,\n                left: 0,\n                top: 0\n            };\n\n        const resolutionMultiplier = 1.0 / this.resolution;\n\n        point.x = ((x - rect.left) * ((this.domElement as any).width / rect.width)) * resolutionMultiplier;\n        point.y = ((y - rect.top) * ((this.domElement as any).height / rect.height)) * resolutionMultiplier;\n    }\n\n    /**\n     * Ensures that the original event object contains all data that a regular pointer event would have\n     * @param event - The original event data from a touch or mouse event\n     * @returns An array containing a single normalized pointer event, in the case of a pointer\n     *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches\n     */\n    private _normalizeToPointerData(event: TouchEvent | MouseEvent | PointerEvent): PointerEvent[]\n    {\n        const normalizedEvents = [];\n\n        if (this.supportsTouchEvents && event instanceof TouchEvent)\n        {\n            for (let i = 0, li = event.changedTouches.length; i < li; i++)\n            {\n                const touch = event.changedTouches[i] as PixiTouch;\n\n                if (typeof touch.button === 'undefined') touch.button = 0;\n                if (typeof touch.buttons === 'undefined') touch.buttons = 1;\n                if (typeof touch.isPrimary === 'undefined')\n                {\n                    touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';\n                }\n                if (typeof touch.width === 'undefined') touch.width = touch.radiusX || 1;\n                if (typeof touch.height === 'undefined') touch.height = touch.radiusY || 1;\n                if (typeof touch.tiltX === 'undefined') touch.tiltX = 0;\n                if (typeof touch.tiltY === 'undefined') touch.tiltY = 0;\n                if (typeof touch.pointerType === 'undefined') touch.pointerType = 'touch';\n                if (typeof touch.pointerId === 'undefined') touch.pointerId = touch.identifier || 0;\n                if (typeof touch.pressure === 'undefined') touch.pressure = touch.force || 0.5;\n                if (typeof touch.twist === 'undefined') touch.twist = 0;\n                if (typeof touch.tangentialPressure === 'undefined') touch.tangentialPressure = 0;\n                // TODO: Remove these, as layerX/Y is not a standard, is deprecated, has uneven\n                // support, and the fill ins are not quite the same\n                // offsetX/Y might be okay, but is not the same as clientX/Y when the canvas's top\n                // left is not 0,0 on the page\n                if (typeof touch.layerX === 'undefined') touch.layerX = touch.offsetX = touch.clientX;\n                if (typeof touch.layerY === 'undefined') touch.layerY = touch.offsetY = touch.clientY;\n\n                // mark the touch as normalized, just so that we know we did it\n                touch.isNormalized = true;\n                touch.type = event.type;\n\n                normalizedEvents.push(touch);\n            }\n        }\n        // apparently PointerEvent subclasses MouseEvent, so yay\n        else if (!globalThis.MouseEvent\n            || (event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof globalThis.PointerEvent))))\n        {\n            const tempEvent = event as PixiPointerEvent;\n\n            if (typeof tempEvent.isPrimary === 'undefined') tempEvent.isPrimary = true;\n            if (typeof tempEvent.width === 'undefined') tempEvent.width = 1;\n            if (typeof tempEvent.height === 'undefined') tempEvent.height = 1;\n            if (typeof tempEvent.tiltX === 'undefined') tempEvent.tiltX = 0;\n            if (typeof tempEvent.tiltY === 'undefined') tempEvent.tiltY = 0;\n            if (typeof tempEvent.pointerType === 'undefined') tempEvent.pointerType = 'mouse';\n            if (typeof tempEvent.pointerId === 'undefined') tempEvent.pointerId = MOUSE_POINTER_ID;\n            if (typeof tempEvent.pressure === 'undefined') tempEvent.pressure = 0.5;\n            if (typeof tempEvent.twist === 'undefined') tempEvent.twist = 0;\n            if (typeof tempEvent.tangentialPressure === 'undefined') tempEvent.tangentialPressure = 0;\n\n            // mark the mouse event as normalized, just so that we know we did it\n            tempEvent.isNormalized = true;\n\n            normalizedEvents.push(tempEvent);\n        }\n        else\n        {\n            normalizedEvents.push(event);\n        }\n\n        return normalizedEvents as PointerEvent[];\n    }\n\n    /**\n     * Normalizes the native {@link https://w3c.github.io/uievents/#interface-wheelevent WheelEvent}.\n     *\n     * The returned {@link FederatedWheelEvent} is a shared instance. It will not persist across\n     * multiple native wheel events.\n     * @param nativeEvent - The native wheel event that occurred on the canvas.\n     * @returns A federated wheel event.\n     */\n    protected normalizeWheelEvent(nativeEvent: WheelEvent): FederatedWheelEvent\n    {\n        const event = this._rootWheelEvent;\n\n        this._transferMouseData(event, nativeEvent);\n\n        // When WheelEvent is triggered by scrolling with mouse wheel, reading WheelEvent.deltaMode\n        // before deltaX/deltaY/deltaZ on Firefox will result in WheelEvent.DOM_DELTA_LINE (1),\n        // while reading WheelEvent.deltaMode after deltaX/deltaY/deltaZ on Firefox or reading\n        // in any order on other browsers will result in WheelEvent.DOM_DELTA_PIXEL (0).\n        // Therefore, we need to read WheelEvent.deltaMode after deltaX/deltaY/deltaZ in order to\n        // make its behavior more consistent across browsers.\n        // @see https://github.com/pixijs/pixijs/issues/8970\n        event.deltaX = nativeEvent.deltaX;\n        event.deltaY = nativeEvent.deltaY;\n        event.deltaZ = nativeEvent.deltaZ;\n        event.deltaMode = nativeEvent.deltaMode;\n\n        this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY);\n        event.global.copyFrom(event.screen);\n        event.offset.copyFrom(event.screen);\n\n        event.nativeEvent = nativeEvent;\n        event.type = nativeEvent.type;\n\n        return event;\n    }\n\n    /**\n     * Normalizes the `nativeEvent` into a federateed {@link FederatedPointerEvent}.\n     * @param event\n     * @param nativeEvent\n     */\n    private _bootstrapEvent(event: FederatedPointerEvent, nativeEvent: PointerEvent): FederatedPointerEvent\n    {\n        event.originalEvent = null;\n        event.nativeEvent = nativeEvent;\n\n        event.pointerId = nativeEvent.pointerId;\n        event.width = nativeEvent.width;\n        event.height = nativeEvent.height;\n        event.isPrimary = nativeEvent.isPrimary;\n        event.pointerType = nativeEvent.pointerType;\n        event.pressure = nativeEvent.pressure;\n        event.tangentialPressure = nativeEvent.tangentialPressure;\n        event.tiltX = nativeEvent.tiltX;\n        event.tiltY = nativeEvent.tiltY;\n        event.twist = nativeEvent.twist;\n        this._transferMouseData(event, nativeEvent);\n\n        this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY);\n        event.global.copyFrom(event.screen);// global = screen for top-level\n        event.offset.copyFrom(event.screen);// EventBoundary recalculates using its rootTarget\n\n        event.isTrusted = nativeEvent.isTrusted;\n        if (event.type === 'pointerleave')\n        {\n            event.type = 'pointerout';\n        }\n        if (event.type.startsWith('mouse'))\n        {\n            event.type = event.type.replace('mouse', 'pointer');\n        }\n        if (event.type.startsWith('touch'))\n        {\n            event.type = TOUCH_TO_POINTER[event.type] || event.type;\n        }\n\n        return event;\n    }\n\n    /**\n     * Transfers base & mouse event data from the {@code nativeEvent} to the federated event.\n     * @param event\n     * @param nativeEvent\n     */\n    private _transferMouseData(event: FederatedMouseEvent, nativeEvent: MouseEvent): void\n    {\n        event.isTrusted = nativeEvent.isTrusted;\n        event.srcElement = nativeEvent.srcElement;\n        event.timeStamp = performance.now();\n        event.type = nativeEvent.type;\n\n        event.altKey = nativeEvent.altKey;\n        event.button = nativeEvent.button;\n        event.buttons = nativeEvent.buttons;\n        event.client.x = nativeEvent.clientX;\n        event.client.y = nativeEvent.clientY;\n        event.ctrlKey = nativeEvent.ctrlKey;\n        event.metaKey = nativeEvent.metaKey;\n        event.movement.x = nativeEvent.movementX;\n        event.movement.y = nativeEvent.movementY;\n        event.page.x = nativeEvent.pageX;\n        event.page.y = nativeEvent.pageY;\n        event.relatedTarget = null;\n        event.shiftKey = nativeEvent.shiftKey;\n    }\n}\n\ninterface CrossCSSStyleDeclaration extends CSSStyleDeclaration\n{\n    msContentZooming: string;\n    msTouchAction: string;\n}\n\ninterface PixiPointerEvent extends PointerEvent\n{\n    isPrimary: boolean;\n    width: number;\n    height: number;\n    tiltX: number;\n    tiltY: number;\n    pointerType: string;\n    pointerId: number;\n    pressure: number;\n    twist: number;\n    tangentialPressure: number;\n    isNormalized: boolean;\n    type: string;\n}\n"],"names":["nativeEvent"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2548, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2554, "column": 0}, "map": {"version":3,"file":"FederatedEventTarget.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/events/FederatedEventTarget.ts"],"sourcesContent":["import { EventSystem } from './EventSystem';\nimport { FederatedEvent } from './FederatedEvent';\n\nimport type EventEmitter from 'eventemitter3';\nimport type { Container } from '../scene/container/Container';\nimport type { AllFederatedEventMap } from './FederatedEventMap';\nimport type { FederatedPointerEvent } from './FederatedPointerEvent';\nimport type { FederatedWheelEvent } from './FederatedWheelEvent';\n\n/**\n * The type of cursor to use when the mouse pointer is hovering over.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\n *\n * Can be any valid CSS cursor value:\n * `auto`, `default`, `none`, `context-menu`, `help`, `pointer`, `progress`,\n * `wait`, `cell`, `crosshair`, `text`, `verticaltext`, `alias`, `copy`, `move`,\n * `nodrop`, `notallowed`, `eresize`, `nresize`, `neresize`, `nwresize`, `sresize`,\n *  `seresize`, `swresize`, `wresize`, `nsresize`, `ewresize`, `neswresize`, `colresize`,\n *  `nwseresize`, `rowresize`, `allscroll`, `zoomin`, `zoomout`, `grab`, `grabbing`\n * @memberof events\n */\nexport type Cursor = 'auto'\n| 'default'\n| 'none'\n| 'context-menu'\n| 'help'\n| 'pointer'\n| 'progress'\n| 'wait'\n| 'cell'\n| 'crosshair'\n| 'text'\n| 'vertical-text'\n| 'alias'\n| 'copy'\n| 'move'\n| 'no-drop'\n| 'not-allowed'\n| 'e-resize'\n| 'n-resize'\n| 'ne-resize'\n| 'nw-resize'\n| 's-resize'\n| 'se-resize'\n| 'sw-resize'\n| 'w-resize'\n| 'ns-resize'\n| 'ew-resize'\n| 'nesw-resize'\n| 'col-resize'\n| 'nwse-resize'\n| 'row-resize'\n| 'all-scroll'\n| 'zoom-in'\n| 'zoom-out'\n| 'grab'\n| 'grabbing';\n\n/**\n * The hit area specifies the area for which pointer events should be captured by this event target.\n * @memberof events\n */\nexport interface IHitArea\n{\n    /**\n     * Checks if the x and y coordinates given are contained within this hit area.\n     * @returns Whether the x and y coordinates are contained within this hit area.\n     */\n    contains(x: number, y: number): boolean;\n}\n\n/**\n * Function type for handlers, e.g., onclick\n * @memberof events\n */\nexport type FederatedEventHandler<T = FederatedPointerEvent> = (event: T) => void;\n\n/**\n * The type of interaction a Container can be.\n * This is the {@link scene.Container#eventMode|Container.eventMode} property of any {@link scene.Container}.\n *\n * Can be one of the following:\n * - `'none'`: Ignores all interaction events, even on its children.\n * - `'passive'`: **(default)** Does not emit events and ignores all hit testing on itself and non-interactive children.\n * Interactive children will still emit events.\n * - `'auto'`: Does not emit events but is hit tested if parent is interactive. Same as `interactive = false` in v7\n * - `'static'`: Emit events and is hit tested. Same as `interaction = true` in v7\n * - `'dynamic'`: Emits events and is hit tested but will also receive mock interaction events fired from a ticker to\n * allow for interaction when the mouse isn't moving\n *\n * `none` and `passive` are useful for optimizing interaction events on objects as it reduces the number of hit tests\n * PixiJS has to do. `auto` is useful for when you want to recreate how the DOM handles interaction events with\n * `pointer-events: auto`.\n * @since 7.2.0\n * @memberof events\n */\nexport type EventMode = 'none' | 'passive' | 'auto' | 'static' | 'dynamic';\n\n/**\n * The properties available for any interactive object.\n * @memberof events\n */\nexport interface FederatedOptions\n{\n    /** The cursor preferred when the mouse pointer is hovering over. */\n    cursor?: Cursor | string;\n    /** The mode of interaction for this object */\n    eventMode?: EventMode;\n    /** Whether this event target should fire UI events. */\n    interactive?: boolean\n    /** Whether this event target has any children that need UI events. This can be used optimize event propagation. */\n    interactiveChildren?: boolean;\n    /** The hit-area specifies the area for which pointer events should be captured by this event target. */\n    hitArea?: IHitArea | null;\n    /** Handler for 'click' event */\n    onclick?: FederatedEventHandler | null;\n    /** Handler for 'mousedown' event */\n    onmousedown?: FederatedEventHandler | null;\n    /** Handler for 'mouseenter' event */\n    onmouseenter?: FederatedEventHandler | null;\n    /** Handler for 'mouseleave' event */\n    onmouseleave?: FederatedEventHandler | null;\n    /** Handler for 'mousemove' event */\n    onmousemove?: FederatedEventHandler | null;\n    /** Handler for 'globalmousemove' event */\n    onglobalmousemove?: FederatedEventHandler | null;\n    /** Handler for 'mouseout' event */\n    onmouseout?: FederatedEventHandler | null;\n    /** Handler for 'mouseover' event */\n    onmouseover?: FederatedEventHandler | null;\n    /** Handler for 'mouseup' event */\n    onmouseup?: FederatedEventHandler | null;\n    /** Handler for 'mouseupoutside' event */\n    onmouseupoutside?: FederatedEventHandler | null;\n    /** Handler for 'pointercancel' event */\n    onpointercancel?: FederatedEventHandler | null;\n    /** Handler for 'pointerdown' event */\n    onpointerdown?: FederatedEventHandler | null;\n    /** Handler for 'pointerenter' event */\n    onpointerenter?: FederatedEventHandler | null;\n    /** Handler for 'pointerleave' event */\n    onpointerleave?: FederatedEventHandler | null;\n    /** Handler for 'pointermove' event */\n    onpointermove?: FederatedEventHandler | null;\n    /** Handler for 'globalpointermove' event */\n    onglobalpointermove?: FederatedEventHandler | null;\n    /** Handler for 'pointerout' event */\n    onpointerout?: FederatedEventHandler | null;\n    /** Handler for 'pointerover' event */\n    onpointerover?: FederatedEventHandler | null;\n    /** Handler for 'pointertap' event */\n    onpointertap?: FederatedEventHandler | null;\n    /** Handler for 'pointerup' event */\n    onpointerup?: FederatedEventHandler | null;\n    /** Handler for 'pointerupoutside' event */\n    onpointerupoutside?: FederatedEventHandler | null;\n    /** Handler for 'rightclick' event */\n    onrightclick?: FederatedEventHandler | null;\n    /** Handler for 'rightdown' event */\n    onrightdown?: FederatedEventHandler | null;\n    /** Handler for 'rightup' event */\n    onrightup?: FederatedEventHandler | null;\n    /** Handler for 'rightupoutside' event */\n    onrightupoutside?: FederatedEventHandler | null;\n    /** Handler for 'tap' event */\n    ontap?: FederatedEventHandler | null;\n    /** Handler for 'touchcancel' event */\n    ontouchcancel?: FederatedEventHandler | null;\n    /** Handler for 'touchend' event */\n    ontouchend?: FederatedEventHandler | null;\n    /** Handler for 'touchendoutside' event */\n    ontouchendoutside?: FederatedEventHandler | null;\n    /** Handler for 'touchmove' event */\n    ontouchmove?: FederatedEventHandler | null;\n    /** Handler for 'globaltouchmove' event */\n    onglobaltouchmove?: FederatedEventHandler | null;\n    /** Handler for 'touchstart' event */\n    ontouchstart?: FederatedEventHandler | null;\n    /** Handler for 'wheel' event */\n    onwheel?: FederatedEventHandler<FederatedWheelEvent> | null;\n}\n\ntype AddListenerOptions = boolean | AddEventListenerOptions;\ntype RemoveListenerOptions = boolean | EventListenerOptions;\n\nexport interface IFederatedContainer extends FederatedOptions\n{\n    /** The parent of this event target. */\n    readonly parent?: Container;\n\n    /** The children of this event target. */\n    readonly children?: ReadonlyArray<Container>;\n\n    _internalEventMode: EventMode;\n\n    /** Returns true if the Container has interactive 'static' or 'dynamic' */\n    isInteractive: () => boolean;\n    addEventListener<K extends keyof AllFederatedEventMap>(\n        type: K,\n        listener: (e: AllFederatedEventMap[K]) => any,\n        options?: AddListenerOptions\n    ): void;\n    addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: AddListenerOptions\n    ): void;\n    removeEventListener<K extends keyof AllFederatedEventMap>(\n        type: K,\n        listener: (e: AllFederatedEventMap[K]) => any,\n        options?: RemoveListenerOptions\n    ): void;\n    removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: RemoveListenerOptions\n    ): void;\n    dispatchEvent(e: FederatedEvent): boolean;\n}\n\nexport const FederatedContainer: IFederatedContainer = {\n\n    /**\n     * Property-based event handler for the `click` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onclick = (event) => {\n     *  //some function here that happens on click\n     * }\n     */\n    onclick: null,\n\n    /**\n     * Property-based event handler for the `mousedown` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onmousedown = (event) => {\n     *  //some function here that happens on mousedown\n     * }\n     */\n    onmousedown: null,\n\n    /**\n     * Property-based event handler for the `mouseenter` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onmouseenter = (event) => {\n     *  //some function here that happens on mouseenter\n     * }\n     */\n    onmouseenter: null,\n\n    /**\n     * Property-based event handler for the `mouseleave` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onmouseleave = (event) => {\n     *  //some function here that happens on mouseleave\n     * }\n     */\n    onmouseleave: null,\n\n    /**\n     * Property-based event handler for the `mousemove` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onmousemove = (event) => {\n     *  //some function here that happens on mousemove\n     * }\n     */\n    onmousemove: null,\n\n    /**\n     * Property-based event handler for the `globalmousemove` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onglobalmousemove = (event) => {\n     *  //some function here that happens on globalmousemove\n     * }\n     */\n    onglobalmousemove: null,\n\n    /**\n     * Property-based event handler for the `mouseout` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onmouseout = (event) => {\n     *  //some function here that happens on mouseout\n     * }\n     */\n    onmouseout: null,\n\n    /**\n     * Property-based event handler for the `mouseover` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onmouseover = (event) => {\n     *  //some function here that happens on mouseover\n     * }\n     */\n    onmouseover:  null,\n\n    /**\n     * Property-based event handler for the `mouseup` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onmouseup = (event) => {\n     *  //some function here that happens on mouseup\n     * }\n     */\n    onmouseup:  null,\n\n    /**\n     * Property-based event handler for the `mouseupoutside` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onmouseupoutside = (event) => {\n     *  //some function here that happens on mouseupoutside\n     * }\n     */\n    onmouseupoutside: null,\n\n    /**\n     * Property-based event handler for the `pointercancel` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onpointercancel = (event) => {\n     *  //some function here that happens on pointercancel\n     * }\n     */\n    onpointercancel: null,\n\n    /**\n     * Property-based event handler for the `pointerdown` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onpointerdown = (event) => {\n     *  //some function here that happens on pointerdown\n     * }\n     */\n    onpointerdown:  null,\n\n    /**\n     * Property-based event handler for the `pointerenter` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onpointerenter = (event) => {\n     *  //some function here that happens on pointerenter\n     * }\n     */\n    onpointerenter: null,\n\n    /**\n     * Property-based event handler for the `pointerleave` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onpointerleave = (event) => {\n     *  //some function here that happens on pointerleave\n     * }\n     */\n    onpointerleave:  null,\n\n    /**\n     * Property-based event handler for the `pointermove` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onpointermove = (event) => {\n     *  //some function here that happens on pointermove\n     * }\n     */\n    onpointermove:  null,\n\n    /**\n     * Property-based event handler for the `globalpointermove` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onglobalpointermove = (event) => {\n     *  //some function here that happens on globalpointermove\n     * }\n     */\n    onglobalpointermove:  null,\n\n    /**\n     * Property-based event handler for the `pointerout` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onpointerout = (event) => {\n     *  //some function here that happens on pointerout\n     * }\n     */\n    onpointerout:  null,\n\n    /**\n     * Property-based event handler for the `pointerover` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onpointerover = (event) => {\n     *  //some function here that happens on pointerover\n     * }\n     */\n    onpointerover:  null,\n\n    /**\n     * Property-based event handler for the `pointertap` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onpointertap = (event) => {\n     *  //some function here that happens on pointertap\n     * }\n     */\n    onpointertap:  null,\n\n    /**\n     * Property-based event handler for the `pointerup` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onpointerup = (event) => {\n     *  //some function here that happens on pointerup\n     * }\n     */\n    onpointerup:  null,\n\n    /**\n     * Property-based event handler for the `pointerupoutside` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onpointerupoutside = (event) => {\n     *  //some function here that happens on pointerupoutside\n     * }\n     */\n    onpointerupoutside:  null,\n\n    /**\n     * Property-based event handler for the `rightclick` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onrightclick = (event) => {\n     *  //some function here that happens on rightclick\n     * }\n     */\n    onrightclick:  null,\n\n    /**\n     * Property-based event handler for the `rightdown` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onrightdown = (event) => {\n     *  //some function here that happens on rightdown\n     * }\n     */\n    onrightdown:  null,\n\n    /**\n     * Property-based event handler for the `rightup` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onrightup = (event) => {\n     *  //some function here that happens on rightup\n     * }\n     */\n    onrightup:  null,\n\n    /**\n     * Property-based event handler for the `rightupoutside` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onrightupoutside = (event) => {\n     *  //some function here that happens on rightupoutside\n     * }\n     */\n    onrightupoutside:  null,\n\n    /**\n     * Property-based event handler for the `tap` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.ontap = (event) => {\n     *  //some function here that happens on tap\n     * }\n     */\n    ontap:  null,\n\n    /**\n     * Property-based event handler for the `touchcancel` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.ontouchcancel = (event) => {\n     *  //some function here that happens on touchcancel\n     * }\n     */\n    ontouchcancel:  null,\n\n    /**\n     * Property-based event handler for the `touchend` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.ontouchend = (event) => {\n     *  //some function here that happens on touchend\n     * }\n     */\n    ontouchend:  null,\n\n    /**\n     * Property-based event handler for the `touchendoutside` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.ontouchendoutside = (event) => {\n     *  //some function here that happens on touchendoutside\n     * }\n     */\n    ontouchendoutside:  null,\n\n    /**\n     * Property-based event handler for the `touchmove` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.ontouchmove = (event) => {\n     *  //some function here that happens on touchmove\n     * }\n     */\n    ontouchmove:  null,\n\n    /**\n     * Property-based event handler for the `globaltouchmove` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onglobaltouchmove = (event) => {\n     *  //some function here that happens on globaltouchmove\n     * }\n     */\n    onglobaltouchmove:  null,\n\n    /**\n     * Property-based event handler for the `touchstart` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.ontouchstart = (event) => {\n     *  //some function here that happens on touchstart\n     * }\n     */\n    ontouchstart:  null,\n\n    /**\n     * Property-based event handler for the `wheel` event.\n     * @memberof scene.Container#\n     * @default null\n     * @example\n     * this.onwheel = (event) => {\n     *  //some function here that happens on wheel\n     * }\n     */\n    onwheel:  null,\n    /**\n     * Enable interaction events for the Container. Touch, pointer and mouse\n     * @memberof scene.Container#\n     */\n    get interactive()\n    {\n        return this.eventMode === 'dynamic' || this.eventMode === 'static';\n    },\n    set interactive(value: boolean)\n    {\n        this.eventMode = value ? 'static' : 'passive';\n    },\n    /**\n     * @ignore\n     */\n    _internalEventMode: undefined,\n    /**\n     * Enable interaction events for the Container. Touch, pointer and mouse.\n     * There are 5 types of interaction settings:\n     * - `'none'`: Ignores all interaction events, even on its children.\n     * - `'passive'`: **(default)** Does not emit events and ignores all hit testing on itself and non-interactive children.\n     * Interactive children will still emit events.\n     * - `'auto'`: Does not emit events but is hit tested if parent is interactive. Same as `interactive = false` in v7\n     * - `'static'`: Emit events and is hit tested. Same as `interaction = true` in v7\n     * - `'dynamic'`: Emits events and is hit tested but will also receive mock interaction events fired from a ticker to\n     * allow for interaction when the mouse isn't moving\n     * @example\n     * import { Sprite } from 'pixi.js';\n     *\n     * const sprite = new Sprite(texture);\n     * sprite.eventMode = 'static';\n     * sprite.on('tap', (event) => {\n     *     // Handle event\n     * });\n     * @memberof scene.Container#\n     * @since 7.2.0\n     */\n    get eventMode()\n    {\n        return this._internalEventMode ?? EventSystem.defaultEventMode;\n    },\n    set eventMode(value)\n    {\n        this._internalEventMode = value;\n    },\n\n    /**\n     * Determines if the container is interactive or not\n     * @returns {boolean} Whether the container is interactive or not\n     * @memberof scene.Container#\n     * @since 7.2.0\n     * @example\n     * import { Sprite } from 'pixi.js';\n     *\n     * const sprite = new Sprite(texture);\n     * sprite.eventMode = 'static';\n     * sprite.isInteractive(); // true\n     *\n     * sprite.eventMode = 'dynamic';\n     * sprite.isInteractive(); // true\n     *\n     * sprite.eventMode = 'none';\n     * sprite.isInteractive(); // false\n     *\n     * sprite.eventMode = 'passive';\n     * sprite.isInteractive(); // false\n     *\n     * sprite.eventMode = 'auto';\n     * sprite.isInteractive(); // false\n     */\n    isInteractive(): boolean\n    {\n        return this.eventMode === 'static' || this.eventMode === 'dynamic';\n    },\n\n    /**\n     * Determines if the children to the container can be clicked/touched\n     * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n     * @memberof scene.Container#\n     */\n    interactiveChildren: true,\n\n    /**\n     * Interaction shape. Children will be hit first, then this shape will be checked.\n     * Setting this will cause this shape to be checked in hit tests rather than the container's bounds.\n     * @example\n     * import { Rectangle, Sprite } from 'pixi.js';\n     *\n     * const sprite = new Sprite(texture);\n     * sprite.interactive = true;\n     * sprite.hitArea = new Rectangle(0, 0, 100, 100);\n     * @member {IHitArea}\n     * @memberof scene.Container#\n     */\n    hitArea: null,\n\n    /**\n     * Unlike `on` or `addListener` which are methods from EventEmitter, `addEventListener`\n     * seeks to be compatible with the DOM's `addEventListener` with support for options.\n     * @memberof scene.Container\n     * @param type - The type of event to listen to.\n     * @param listener - The listener callback or object.\n     * @param options - Listener options, used for capture phase.\n     * @example\n     * // Tell the user whether they did a single, double, triple, or nth click.\n     * button.addEventListener('click', {\n     *     handleEvent(e): {\n     *         let prefix;\n     *\n     *         switch (e.detail) {\n     *             case 1: prefix = 'single'; break;\n     *             case 2: prefix = 'double'; break;\n     *             case 3: prefix = 'triple'; break;\n     *             default: prefix = e.detail + 'th'; break;\n     *         }\n     *\n     *         console.log('That was a ' + prefix + 'click');\n     *     }\n     * });\n     *\n     * // But skip the first click!\n     * button.parent.addEventListener('click', function blockClickOnce(e) {\n     *     e.stopImmediatePropagation();\n     *     button.parent.removeEventListener('click', blockClickOnce, true);\n     * }, {\n     *     capture: true,\n     * });\n     */\n    addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: AddListenerOptions\n    )\n    {\n        const capture = (typeof options === 'boolean' && options)\n        || (typeof options === 'object' && options.capture);\n        const signal = typeof options === 'object' ? options.signal : undefined;\n        const once = typeof options === 'object' ? (options.once === true) : false;\n        const context = typeof listener === 'function' ? undefined : listener;\n\n        type = capture ? `${type}capture` : type;\n        const listenerFn = typeof listener === 'function' ? listener : listener.handleEvent;\n\n        const emitter = (this as unknown as EventEmitter);\n\n        if (signal)\n        {\n            signal.addEventListener('abort', () =>\n            {\n                emitter.off(type, listenerFn, context);\n            });\n        }\n\n        if (once)\n        {\n            emitter.once(type, listenerFn, context);\n        }\n        else\n        {\n            emitter.on(type, listenerFn, context);\n        }\n    },\n\n    /**\n     * Unlike `off` or `removeListener` which are methods from EventEmitter, `removeEventListener`\n     * seeks to be compatible with the DOM's `removeEventListener` with support for options.\n     * @memberof scene.Container\n     * @param type - The type of event the listener is bound to.\n     * @param listener - The listener callback or object.\n     * @param options - The original listener options. This is required to deregister a capture phase listener.\n     */\n    removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: RemoveListenerOptions\n    )\n    {\n        const capture = (typeof options === 'boolean' && options)\n            || (typeof options === 'object' && options.capture);\n        const context = typeof listener === 'function' ? undefined : listener;\n\n        type = capture ? `${type}capture` : type;\n        listener = typeof listener === 'function' ? listener : listener.handleEvent;\n\n        (this as unknown as EventEmitter).off(type, listener, context);\n    },\n\n    /**\n     * Dispatch the event on this {@link Container} using the event's {@link EventBoundary}.\n     *\n     * The target of the event is set to `this` and the `defaultPrevented` flag is cleared before dispatch.\n     * @memberof scene.Container\n     * @param e - The event to dispatch.\n     * @returns Whether the {@link FederatedEvent.preventDefault preventDefault}() method was not invoked.\n     * @example\n     * // Reuse a click event!\n     * button.dispatchEvent(clickEvent);\n     */\n    dispatchEvent(e: Event): boolean\n    {\n        if (!(e instanceof FederatedEvent))\n        {\n            throw new Error('Container cannot propagate events outside of the Federated Events API');\n        }\n\n        e.defaultPrevented = false;\n        e.path = null;\n        e.target = this as Container;\n        e.manager.dispatchEvent(e);\n\n        return !e.defaultPrevented;\n    }\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3028, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3034, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/events/init.ts"],"sourcesContent":["import { extensions } from '../extensions/Extensions';\nimport { Container } from '../scene/container/Container';\nimport { EventSystem } from './EventSystem';\nimport { FederatedContainer } from './FederatedEventTarget';\n\n/* eslint-disable max-len */\n/**\n * PixiJS is primarily a rendering system, but it also includes support for interactivity.\n * Adding support for mouse and touch events to your project is simple and consistent.\n *\n * The new event-based system that replaced InteractionManager from v6 has expanded the definition of what a\n * Container means to be interactive. With this we have introduced `eventMode` which allows you to control\n * how an object responds to interaction events.\n * This is similar to the `interactive` property in v6 but with more options.\n *\n * <details id=\"enabling-interaction\">\n * <summary>Enabling Interaction</summary>\n *\n * Any Container-derived object (Sprite, Container, etc.) can become interactive simply by setting its `eventMode` property to any of\n * the {@link events.EventMode} values. Doing so will cause the object to emit interaction events that can be responded to in order to drive your project's behavior.\n *\n * Check out the [interaction example code](/examples/events/click).\n *\n * Container-derived objects are based on {@link https://www.npmjs.com/package/eventemitter3|EventEmitter3}\n * so you can use `on()`, `once()`, `off()` to listen to events.\n *\n * For example to respond to clicks and taps, bind to an object ike so:\n *\n * ```javascript\n * let sprite = Sprite.from('/some/texture.png');\n *\n * sprite.eventMode = 'static'; // similar to `sprite.interactive = true` in v6\n * sprite.on('pointerdown', (event) => { alert('clicked!'); });\n * ```\n *\n * Check out the **EventTypes** section below for the full list of interaction events supported.\n * </details>\n *\n * <details id=\"event-modes\">\n * <summary>Event Modes</summary>\n *\n * The new event-based system that replaced InteractionManager from v6 has expanded the definition of what a Container\n *  means to be interactive. With this we have introduced `eventMode` which allows you to control how an object responds\n * to interaction events. This is similar to the `interactive` property in v6 but with more options.\n *\n * | event mode | Description |\n * |---|---|\n * | `none` | Ignores all interaction events, similar to CSS's `pointer-events: none`, good optimization for non-interactive children |\n * |  `passive`  | Does not emit events and ignores hit testing on itself but does allow for events and hit testing only its interactive children. If you want to be compatible with v6, set this as your default `eventMode` (see options in Renderer, Application, etc) |\n * |  `auto`  | Does not emit events and but is hit tested if parent is interactive. Same as `interactive = false` in v7 |\n * |  `static`  | Emit events and is hit tested. Same as `interaction = true` in v7, useful for objects like buttons that do not move. |\n * |  `dynamic` | Emits events and is hit tested but will also receive mock interaction events fired from a ticker to allow for interaction when the mouse isn't moving. This is useful for elements that independently moving or animating. |\n * </details>\n *\n * <details id=\"event-types\">\n * <summary>Event Types</summary>\n *\n * Pixi supports the following event types for interactive objects:\n *\n * | Event Type | Fired When |\n * |---|---|\n * | `pointercancel` | Pointer device button is released outside the display object\n * that initially registered a pointerdown. |\n * | `pointerdown` | Pointer device button is pressed on the display object. |\n * | `pointerenter` | Pointer device enters the display object. |\n * | `pointerleave` | Pointer device leaves the display object. |\n * | `pointermove` | Pointer device is moved while over the display object. |\n * | `globalpointermove` | Pointer device is moved, regardless of hit-testing the current object. |\n * | `pointerout` | Pointer device is moved off the display object. |\n * | `pointerover` | Pointer device is moved onto the display object. |\n * | `pointertap` | Pointer device is tapped twice on the display object. |\n * | `pointerup` | Pointer device button is released over the display object. |\n * | `pointerupoutside` | Pointer device button is released outside the display object\n * that initially registered a pointerdown. |\n * | `mousedown ` | Mouse button is pressed on the display object. |\n * | `mouseenter` | Mouse cursor enters the display object. |\n * | `mouseleave` | Mouse cursor leaves the display object. |\n * | `mousemove ` | Mouse cursor is moved while over the display object. |\n * | `globalmousemove` | Mouse is moved, regardless of hit-testing the current object. |\n * | `mouseout ` | Mouse cursor is moved off the display object. |\n * | `mouseover ` | Mouse cursor is moved onto the display object. |\n * | `mouseup ` | Mouse button is released over the display object. |\n * | `mouseupoutside ` | Mouse button is released outside the display object that initially registered a mousedown. |\n * | `click ` | Mouse button is clicked (pressed and released) over the display object. |\n * | `touchcancel ` | Touch point is removed outside of the display object that initially registered a touchstart. |\n * | `touchend ` | Touch point is removed from the display object. |\n * | `touchendoutside ` | Touch point is removed outside of the display object that initially registered a touchstart. |\n * | `touchmove ` | Touch point is moved along the display object. |\n * | `globaltouchmove` | Touch point is moved, regardless of hit-testing the current object. |\n * | `touchstart ` | Touch point is placed on the display object. |\n * | `tap ` | Touch point is tapped twice on the display object. |\n * | `wheel ` | Mouse wheel is spun over the display object. |\n * | `rightclick ` | Right mouse button is clicked (pressed and released) over the display object. |\n * | `rightdown ` | Right mouse button is pressed on the display object. |\n * | `rightup ` | Right mouse button is released over the display object. |\n * | `rightupoutside ` | Right mouse button is released outside the display object that initially registered a rightdown. |\n * </details>\n * @namespace events\n */\n/* eslint-enable max-len */\n\nextensions.add(EventSystem);\nContainer.mixin(FederatedContainer);\n"],"names":[],"mappings":";;;;;;;;;;+JAqGA,aAAA,CAAW,GAAA,6JAAI,cAAW,CAAA,CAAA;sKAC1B,YAAA,CAAU,KAAA,sKAAM,qBAAkB,CAAA","ignoreList":[0]}},
    {"offset": {"line": 3046, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3052, "column": 0}, "map": {"version":3,"file":"State.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/shared/state/State.ts"],"sourcesContent":["import type { BLEND_MODES, CULL_MODES } from './const';\n\nconst blendModeIds = {\n    normal: 0,\n    add: 1,\n    multiply: 2,\n    screen: 3,\n    overlay: 4,\n    erase: 5,\n    'normal-npm': 6,\n    'add-npm': 7,\n    'screen-npm': 8,\n    min: 9,\n    max: 10,\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * This is a WebGL state, and is is passed to {@link StateSystem}.\n *\n * Each mesh rendered may require WebGL to be in a different state.\n * For example you may want different blend mode or to enable polygon offsets\n * @memberof rendering\n */\nexport class State\n{\n    /**\n     * The data is a unique number based on the states settings.\n     * This lets us quickly compare states with a single number rather than looking\n     * at all the individual settings.\n     */\n    public data: number;\n    public _blendModeId: number;\n    private _blendMode: BLEND_MODES;\n    private _polygonOffset: number;\n\n    constructor()\n    {\n        this.data = 0;\n\n        this.blendMode = 'normal';\n        this.polygonOffset = 0;\n\n        this.blend = true;\n        this.depthMask = true;\n    }\n\n    /**\n     * Activates blending of the computed fragment color values.\n     * @default true\n     */\n    get blend(): boolean\n    {\n        return !!(this.data & (1 << BLEND));\n    }\n\n    set blend(value: boolean)\n    {\n        if (!!(this.data & (1 << BLEND)) !== value)\n        {\n            this.data ^= (1 << BLEND);\n        }\n    }\n\n    /**\n     * Activates adding an offset to depth values of polygon's fragments\n     * @default false\n     */\n    get offsets(): boolean\n    {\n        return !!(this.data & (1 << OFFSET));\n    }\n\n    set offsets(value: boolean)\n    {\n        if (!!(this.data & (1 << OFFSET)) !== value)\n        {\n            this.data ^= (1 << OFFSET);\n        }\n    }\n\n    /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n    set cullMode(value: CULL_MODES)\n    {\n        if (value === 'none')\n        {\n            this.culling = false;\n\n            return;\n        }\n\n        this.culling = true;\n        this.clockwiseFrontFace = value === 'front';\n    }\n\n    get cullMode(): CULL_MODES\n    {\n        if (!this.culling)\n        {\n            return 'none';\n        }\n\n        return this.clockwiseFrontFace ? 'front' : 'back';\n    }\n\n    /**\n     * Activates culling of polygons.\n     * @default false\n     */\n    get culling(): boolean\n    {\n        return !!(this.data & (1 << CULLING));\n    }\n\n    set culling(value: boolean)\n    {\n        if (!!(this.data & (1 << CULLING)) !== value)\n        {\n            this.data ^= (1 << CULLING);\n        }\n    }\n\n    /**\n     * Activates depth comparisons and updates to the depth buffer.\n     * @default false\n     */\n    get depthTest(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_TEST));\n    }\n\n    set depthTest(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_TEST)) !== value)\n        {\n            this.data ^= (1 << DEPTH_TEST);\n        }\n    }\n\n    /**\n     * Enables or disables writing to the depth buffer.\n     * @default true\n     */\n    get depthMask(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_MASK));\n    }\n\n    set depthMask(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_MASK)) !== value)\n        {\n            this.data ^= (1 << DEPTH_MASK);\n        }\n    }\n\n    /**\n     * Specifies whether or not front or back-facing polygons can be culled.\n     * @default false\n     */\n    get clockwiseFrontFace(): boolean\n    {\n        return !!(this.data & (1 << WINDING));\n    }\n\n    set clockwiseFrontFace(value: boolean)\n    {\n        if (!!(this.data & (1 << WINDING)) !== value)\n        {\n            this.data ^= (1 << WINDING);\n        }\n    }\n\n    /**\n     * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n     * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n     * @default 'normal'\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this._blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.blend = (value !== 'none');\n        this._blendMode = value;\n        this._blendModeId = blendModeIds[value as keyof typeof blendModeIds] || 0;\n    }\n\n    /**\n     * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n     * @default 0\n     */\n    get polygonOffset(): number\n    {\n        return this._polygonOffset;\n    }\n\n    set polygonOffset(value: number)\n    {\n        this.offsets = !!value;\n        this._polygonOffset = value;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/core:State `\n            + `blendMode=${this.blendMode} `\n            + `clockwiseFrontFace=${this.clockwiseFrontFace} `\n            + `culling=${this.culling} `\n            + `depthMask=${this.depthMask} `\n            + `polygonOffset=${this.polygonOffset}`\n            + `]`;\n    }\n    // #endif\n\n    /**\n     * A quickly getting an instance of a State that is configured for 2d rendering.\n     * @returns a new State with values set for 2d rendering\n     */\n    public static for2d(): State\n    {\n        const state = new State();\n\n        state.depthTest = false;\n        state.blend = true;\n\n        return state;\n    }\n\n    public static default2d = State.for2d();\n}\n\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3202, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3208, "column": 0}, "map": {"version":3,"file":"colorToUniform.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/gpu/colorToUniform.ts"],"sourcesContent":["export function colorToUniform(rgb: number, alpha: number, out: Float32Array, offset: number)\n{\n    // TODO replace with Color..\n    out[offset++] = ((rgb >> 16) & 0xFF) / 255;\n    out[offset++] = ((rgb >> 8) & 0xFF) / 255;\n    out[offset++] = (rgb & 0xFF) / 255;\n    out[offset++] = alpha;\n}\n\nexport function color32BitToUniform(abgr: number, out: Float32Array, offset: number)\n{\n    const alpha = ((abgr >> 24) & 0xFF) / 255;\n\n    out[offset++] = ((abgr & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 8) & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 16) & 0xFF) / 255) * alpha;\n    out[offset++] = alpha;\n}\n"],"names":[],"mappings":";;;;;AAAO,SAAS,cAAe,CAAA,GAAA,EAAa,KAAe,EAAA,GAAA,EAAmB,MAC9E,EAAA;IAEI,GAAA,CAAI,MAAQ,EAAA,CAAA,GAAA,CAAM,GAAO,IAAA,EAAA,GAAM,GAAQ,IAAA,GAAA,CAAA;IACvC,GAAA,CAAI,MAAQ,EAAA,CAAA,GAAA,CAAM,GAAO,IAAA,CAAA,GAAK,GAAQ,IAAA,GAAA,CAAA;IAClC,GAAA,CAAA,MAAA,EAAQ,CAAK,GAAA,CAAA,GAAA,GAAM,GAAQ,IAAA,GAAA,CAAA;IAC/B,GAAA,CAAI,QAAQ,CAAI,GAAA,KAAA,CAAA;AACpB,CAAA;AAEgB,SAAA,mBAAA,CAAoB,IAAc,EAAA,GAAA,EAAmB,MACrE,EAAA;IACU,MAAA,KAAA,GAAA,CAAU,IAAQ,IAAA,EAAA,GAAM,GAAQ,IAAA,GAAA,CAAA;IAEtC,GAAA,CAAI,MAAQ,EAAA,CAAA,GAAA,CAAM,IAAO,GAAA,GAAA,IAAQ,GAAO,GAAA,KAAA,CAAA;IACxC,GAAA,CAAI,MAAQ,EAAA,CAAA,GAAA,CAAO,IAAQ,IAAA,CAAA,GAAK,GAAA,IAAQ,GAAO,GAAA,KAAA,CAAA;IAC/C,GAAA,CAAI,MAAQ,EAAA,CAAA,GAAA,CAAO,IAAQ,IAAA,EAAA,GAAM,GAAA,IAAQ,GAAO,GAAA,KAAA,CAAA;IAChD,GAAA,CAAI,QAAQ,CAAI,GAAA,KAAA,CAAA;AACpB","ignoreList":[0]}},
    {"offset": {"line": 3228, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3234, "column": 0}, "map": {"version":3,"file":"BatchableGraphics.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/BatchableGraphics.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { multiplyHexColors } from '../../container/utils/multiplyHexColors';\n\nimport type { Batch, Batcher } from '../../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableMeshElement } from '../../../rendering/batcher/shared/DefaultBatcher';\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Graphics } from './Graphics';\n\nconst identityMatrix = new Matrix();\n/**\n * A batchable graphics object.\n * @ignore\n */\n\nexport class BatchableGraphics implements DefaultBatchableMeshElement\n{\n    public readonly packAsQuad = false;\n    public batcherName = 'default';\n\n    public texture: Texture;\n\n    public topology: Topology = 'triangle-list';\n    public renderable: Graphics;\n    public indexOffset: number;\n    public indexSize: number;\n    public attributeOffset: number;\n    public attributeSize: number;\n    public baseColor: number;\n    public alpha: number;\n    public applyTransform = true;\n    public roundPixels: 0 | 1 = 0;\n\n    public _indexStart: number;\n    public _textureId: number;\n    public _attributeStart: number;\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n\n    public geometryData: { vertices: number[]; uvs: number[]; indices: number[]; };\n\n    get uvs()\n    {\n        return this.geometryData.uvs;\n    }\n\n    get positions()\n    {\n        return this.geometryData.vertices;\n    }\n\n    get indices()\n    {\n        return this.geometryData.indices;\n    }\n\n    get blendMode()\n    {\n        if (this.applyTransform)\n        {\n            return this.renderable.groupBlendMode;\n        }\n\n        return 'normal';\n    }\n    get color()\n    {\n        const rgb = this.baseColor;\n        const bgr = (rgb >> 16) | (rgb & 0xff00) | ((rgb & 0xff) << 16);\n        const renderable = this.renderable;\n\n        if (renderable)\n        {\n            return multiplyHexColors(bgr, renderable.groupColor)\n            + ((this.alpha * renderable.groupAlpha * 255) << 24);\n        }\n\n        return bgr + ((this.alpha * 255) << 24);\n    }\n\n    get transform()\n    {\n        return this.renderable?.groupTransform || identityMatrix;\n    }\n\n    public copyTo(gpuBuffer: BatchableGraphics)\n    {\n        gpuBuffer.indexOffset = this.indexOffset;\n        gpuBuffer.indexSize = this.indexSize;\n\n        gpuBuffer.attributeOffset = this.attributeOffset;\n        gpuBuffer.attributeSize = this.attributeSize;\n\n        gpuBuffer.baseColor = this.baseColor;\n        gpuBuffer.alpha = this.alpha;\n\n        gpuBuffer.texture = this.texture;\n        gpuBuffer.geometryData = this.geometryData;\n\n        gpuBuffer.topology = this.topology;\n    }\n\n    public reset()\n    {\n        this.applyTransform = true;\n        this.renderable = null;\n        this.topology = 'triangle-list';\n    }\n}\n"],"names":[],"mappings":";;;;;;;;AASA,MAAM,cAAA,GAAiB,oKAAI,SAAO,EAAA,CAAA;AAM3B,MAAM,iBACb,CAAA;IADO,WAAA,EAAA;QAEH,IAAA,CAAgB,UAAa,GAAA,KAAA,CAAA;QAC7B,IAAA,CAAO,WAAc,GAAA,SAAA,CAAA;QAIrB,IAAA,CAAO,QAAqB,GAAA,eAAA,CAAA;QAQ5B,IAAA,CAAO,cAAiB,GAAA,IAAA,CAAA;QACxB,IAAA,CAAO,WAAqB,GAAA,CAAA,CAAA;QAK5B,IAAA,CAAO,QAAoB,GAAA,IAAA,CAAA;QAC3B,IAAA,CAAO,MAAgB,GAAA,IAAA,CAAA;IAAA,CAAA;IAIvB,IAAI,GACJ,GAAA;QACI,OAAO,IAAA,CAAK,YAAa,CAAA,GAAA,CAAA;IAAA,CAC7B;IAEA,IAAI,SACJ,GAAA;QACI,OAAO,IAAA,CAAK,YAAa,CAAA,QAAA,CAAA;IAAA,CAC7B;IAEA,IAAI,OACJ,GAAA;QACI,OAAO,IAAA,CAAK,YAAa,CAAA,OAAA,CAAA;IAAA,CAC7B;IAEA,IAAI,SACJ,GAAA;QACI,IAAI,IAAA,CAAK,cACT,EAAA;YACI,OAAO,IAAA,CAAK,UAAW,CAAA,cAAA,CAAA;QAAA,CAC3B;QAEO,OAAA,QAAA,CAAA;IAAA,CACX;IACA,IAAI,KACJ,GAAA;QACI,MAAM,MAAM,IAAK,CAAA,SAAA,CAAA;QACjB,MAAM,MAAO,GAAO,IAAA,EAAA,GAAO,GAAM,GAAA,KAAA,GAAA,CAAY,MAAM,GAAS,KAAA,EAAA,CAAA;QAC5D,MAAM,aAAa,IAAK,CAAA,UAAA,CAAA;QAExB,IAAI,UACJ,EAAA;YACW,kMAAA,oBAAA,EAAkB,KAAK,UAAW,CAAA,UAAU,IAAA,CAC/C,IAAK,CAAA,KAAA,GAAQ,UAAW,CAAA,UAAA,GAAa,GAAQ,IAAA,EAAA,CAAA,CAAA;QAAA,CACrD;QAEO,OAAA,GAAA,GAAA,CAAQ,IAAK,CAAA,KAAA,GAAQ,GAAQ,IAAA,EAAA,CAAA,CAAA;IAAA,CACxC;IAEA,IAAI,SACJ,GAAA;QACW,OAAA,IAAA,CAAK,UAAA,EAAY,cAAkB,IAAA,cAAA,CAAA;IAAA,CAC9C;IAEO,OAAO,SACd,EAAA;QACI,SAAA,CAAU,WAAA,GAAc,IAAK,CAAA,WAAA,CAAA;QAC7B,SAAA,CAAU,SAAA,GAAY,IAAK,CAAA,SAAA,CAAA;QAE3B,SAAA,CAAU,eAAA,GAAkB,IAAK,CAAA,eAAA,CAAA;QACjC,SAAA,CAAU,aAAA,GAAgB,IAAK,CAAA,aAAA,CAAA;QAE/B,SAAA,CAAU,SAAA,GAAY,IAAK,CAAA,SAAA,CAAA;QAC3B,SAAA,CAAU,KAAA,GAAQ,IAAK,CAAA,KAAA,CAAA;QAEvB,SAAA,CAAU,OAAA,GAAU,IAAK,CAAA,OAAA,CAAA;QACzB,SAAA,CAAU,YAAA,GAAe,IAAK,CAAA,YAAA,CAAA;QAE9B,SAAA,CAAU,QAAA,GAAW,IAAK,CAAA,QAAA,CAAA;IAAA,CAC9B;IAEO,KACP,GAAA;QACI,IAAA,CAAK,cAAiB,GAAA,IAAA,CAAA;QACtB,IAAA,CAAK,UAAa,GAAA,IAAA,CAAA;QAClB,IAAA,CAAK,QAAW,GAAA,eAAA,CAAA;IAAA,CACpB;AACJ","ignoreList":[0]}},
    {"offset": {"line": 3299, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3305, "column": 0}, "map": {"version":3,"file":"GraphicsPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/GraphicsPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../../rendering/renderers/shared/state/State';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { color32BitToUniform } from '../gpu/colorToUniform';\nimport { BatchableGraphics } from './BatchableGraphics';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { BatchPipe, RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { RenderableGCSystem } from '../../../rendering/renderers/shared/texture/RenderableGCSystem';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Container } from '../../container/Container';\nimport type { Graphics } from './Graphics';\nimport type { GpuGraphicsContext, GraphicsContextSystem } from './GraphicsContextSystem';\n\nexport interface GraphicsAdaptor\n{\n    shader: Shader;\n    init(): void;\n    execute(graphicsPipe: GraphicsPipe, renderable: Graphics): void;\n    destroy(): void;\n}\nexport interface GraphicsSystem\n{\n    graphicsContext: GraphicsContextSystem;\n    renderableGC: RenderableGCSystem;\n    renderPipes: {\n        batch: BatchPipe\n    }\n    _roundPixels: 0 | 1;\n}\n\nexport class GraphicsPipe implements RenderPipe<Graphics>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'graphics',\n    } as const;\n\n    public renderer: GraphicsSystem;\n    public state: State = State.for2d();\n\n    // batchable graphics list, used to render batches\n    private _graphicsBatchesHash: Record<number, BatchableGraphics[]> = Object.create(null);\n    private _adaptor: GraphicsAdaptor;\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: GraphicsSystem, adaptor: GraphicsAdaptor)\n    {\n        this.renderer = renderer;\n\n        this._adaptor = adaptor;\n        this._adaptor.init();\n\n        this.renderer.renderableGC.addManagedHash(this, '_graphicsBatchesHash');\n    }\n\n    public validateRenderable(graphics: Graphics): boolean\n    {\n        // assume context is dirty..\n\n        const context = graphics.context;\n\n        const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n\n        if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable)\n        {\n            // TODO what if they are the same size??\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(graphics: Graphics, instructionSet: InstructionSet)\n    {\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n\n        // need to get batches here.. as we need to know if we can batch or not..\n        // this also overrides the current batches..\n\n        if (graphics.didViewUpdate)\n        {\n            this._rebuild(graphics);\n        }\n\n        if (gpuContext.isBatchable)\n        {\n            this._addToBatcher(graphics, instructionSet);\n        }\n        else\n        {\n            this.renderer.renderPipes.batch.break(instructionSet);\n            instructionSet.add(graphics);\n        }\n    }\n\n    public updateRenderable(graphics: Graphics)\n    {\n        const batches = this._graphicsBatchesHash[graphics.uid];\n\n        if (batches)\n        {\n            for (let i = 0; i < batches.length; i++)\n            {\n                const batch = batches[i];\n\n                batch._batcher.updateElement(batch);\n            }\n        }\n    }\n\n    public destroyRenderable(graphics: Graphics)\n    {\n        if (this._graphicsBatchesHash[graphics.uid])\n        {\n            this._removeBatchForRenderable(graphics.uid);\n        }\n\n        graphics.off('destroyed', this._destroyRenderableBound);\n    }\n\n    public execute(graphics: Graphics)\n    {\n        if (!graphics.isRenderable) return;\n\n        const renderer = this.renderer;\n        const context = graphics.context;\n        const contextSystem = renderer.graphicsContext;\n\n        // early out if there is no actual visual stuff...\n        if (!contextSystem.getGpuContext(context).batches.length)\n        { return; }\n\n        const shader = context.customShader || this._adaptor.shader;\n\n        this.state.blendMode = graphics.groupBlendMode;\n\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = graphics.groupTransform;\n        localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n\n        color32BitToUniform(\n            graphics.groupColorAlpha,\n            localUniforms.uColor,\n            0,\n        );\n\n        this._adaptor.execute(this, graphics);\n    }\n\n    private _rebuild(graphics: Graphics)\n    {\n        const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n\n        // TODO POOL the old batches!\n\n        if (wasBatched)\n        {\n            this._removeBatchForRenderable(graphics.uid);\n        }\n\n        if (gpuContext.isBatchable)\n        {\n            this._initBatchesForRenderable(graphics);\n        }\n\n        graphics.batched = gpuContext.isBatchable;\n    }\n\n    private _addToBatcher(graphics: Graphics, instructionSet: InstructionSet)\n    {\n        const batchPipe = this.renderer.renderPipes.batch;\n\n        const batches = this._getBatchesForRenderable(graphics);\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            const batch = batches[i];\n\n            batchPipe.addToBatch(batch, instructionSet);\n        }\n    }\n\n    private _getBatchesForRenderable(graphics: Graphics): BatchableGraphics[]\n    {\n        return this._graphicsBatchesHash[graphics.uid] || this._initBatchesForRenderable(graphics);\n    }\n\n    private _initBatchesForRenderable(graphics: Graphics): BatchableGraphics[]\n    {\n        const context = graphics.context;\n\n        const gpuContext: GpuGraphicsContext = this.renderer.graphicsContext.getGpuContext(context);\n\n        const roundPixels = (this.renderer._roundPixels | graphics._roundPixels) as 0 | 1;\n\n        const batches = gpuContext.batches.map((batch) =>\n        {\n            const batchClone = BigPool.get(BatchableGraphics);\n\n            batch.copyTo(batchClone);\n\n            batchClone.renderable = graphics;\n\n            batchClone.roundPixels = roundPixels;\n\n            return batchClone;\n        });\n\n        if (this._graphicsBatchesHash[graphics.uid] === undefined)\n        {\n            // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n            graphics.on('destroyed', this._destroyRenderableBound);\n        }\n\n        this._graphicsBatchesHash[graphics.uid] = batches;\n\n        return batches;\n    }\n\n    private _removeBatchForRenderable(graphicsUid: number)\n    {\n        this._graphicsBatchesHash[graphicsUid].forEach((batch) =>\n        {\n            BigPool.return(batch as PoolItem);\n        });\n\n        this._graphicsBatchesHash[graphicsUid] = null;\n    }\n\n    public destroy()\n    {\n        this.renderer = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n        this.state = null;\n\n        for (const i in this._graphicsBatchesHash)\n        {\n            this._removeBatchForRenderable(i as unknown as number);\n        }\n\n        this._graphicsBatchesHash = null;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3448, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3454, "column": 0}, "map": {"version":3,"file":"const.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/shared/buffer/const.ts"],"sourcesContent":["/**\n * Buffer usage flags. they can be combined using the bitwise OR operator\n * eg : BufferUsage.VERTEX | BufferUsage.INDEX\n * @memberof rendering\n */\nexport enum BufferUsage\n{\n    /**\n     * The buffer can be mapped for reading. (Example: calling mapAsync() with GPUMapMode.READ)\n     * May only be combined with COPY_DST.\n     */\n    MAP_READ = 0x0001,\n    /**\n     * The buffer can be mapped for writing. (Example: calling mapAsync() with GPUMapMode.WRITE)\n     * May only be combined with COPY_SRC.\n     */\n    MAP_WRITE = 0x0002,\n    /**\n     * The buffer can be used as the source of a copy operation.\n     * (Examples: as the source argument of a copyBufferToBuffer() or copyBufferToTexture() call.)\n     */\n    COPY_SRC = 0x0004,\n    /**\n     * The buffer can be used as the destination of a copy or write operation.\n     * (Examples: as the destination argument of a copyBufferToBuffer() or\n     * copyTextureToBuffer() call, or as the target of a writeBuffer() call.)\n     */\n    COPY_DST = 0x0008,\n    /** The buffer can be used as an index buffer. (Example: passed to setIndexBuffer().) */\n    INDEX = 0x0010,\n    /** The buffer can be used as a vertex buffer. (Example: passed to setVertexBuffer().) */\n    VERTEX = 0x0020,\n    /**\n     * The buffer can be used as a uniform buffer.\n     * (Example: as a bind group entry for a GPUBufferBindingLayout with a buffer.type of \"uniform\".)\n     */\n    UNIFORM = 0x0040,\n    /**\n     * The buffer can be used as a storage buffer.\n     * (Example: as a bind group entry for a GPUBufferBindingLayout with a buffer.type of \"storage\" or \"read-only-storage\".)\n     */\n    STORAGE = 0x0080,\n    /**\n     * The buffer can be used as to store indirect command arguments.\n     * (Examples: as the indirectBuffer argument of a drawIndirect() or dispatchWorkgroupsIndirect() call.)\n     */\n    INDIRECT = 0x0100,\n    /**\n     * The buffer can be used to capture query results.\n     * (Example: as the destination argument of a resolveQuerySet() call.)\n     */\n    QUERY_RESOLVE = 0x0200,\n    /** the buffer will not be updated frequently */\n    STATIC = 0x0400\n}\n"],"names":["BufferUsage"],"mappings":";;;;AAKY,IAAA,WAAA,GAAA,aAAA,GAAA,CAAA,CAAAA,YAAL,KAAA;IAMHA,YAAAA,CAAAA,YAAAA,CAAA,WAAA,GAAW,CAAX,CAAA,GAAA,UAAA,CAAA;IAKAA,YAAAA,CAAAA,YAAAA,CAAA,YAAA,GAAY,CAAZ,CAAA,GAAA,WAAA,CAAA;IAKAA,YAAAA,CAAAA,YAAAA,CAAA,WAAA,GAAW,CAAX,CAAA,GAAA,UAAA,CAAA;IAMAA,YAAAA,CAAAA,YAAAA,CAAA,WAAA,GAAW,CAAX,CAAA,GAAA,UAAA,CAAA;IAEAA,YAAAA,CAAAA,YAAAA,CAAA,QAAA,GAAQ,EAAR,CAAA,GAAA,OAAA,CAAA;IAEAA,YAAAA,CAAAA,YAAAA,CAAA,SAAA,GAAS,EAAT,CAAA,GAAA,QAAA,CAAA;IAKAA,YAAAA,CAAAA,YAAAA,CAAA,UAAA,GAAU,EAAV,CAAA,GAAA,SAAA,CAAA;IAKAA,YAAAA,CAAAA,YAAAA,CAAA,UAAA,GAAU,GAAV,CAAA,GAAA,SAAA,CAAA;IAKAA,YAAAA,CAAAA,YAAAA,CAAA,WAAA,GAAW,GAAX,CAAA,GAAA,UAAA,CAAA;IAKAA,YAAAA,CAAAA,YAAAA,CAAA,gBAAA,GAAgB,GAAhB,CAAA,GAAA,eAAA,CAAA;IAEAA,YAAAA,CAAAA,YAAAA,CAAA,SAAA,GAAS,IAAT,CAAA,GAAA,QAAA,CAAA;IAhDQA,OAAAA,YAAAA,CAAAA;AAAA,CAAA,EAAA,WAAA,IAAA,CAAA,CAAA","ignoreList":[0]}},
    {"offset": {"line": 3474, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3480, "column": 0}, "map": {"version":3,"file":"Buffer.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/shared/buffer/Buffer.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid';\nimport { BufferUsage } from './const';\n\nimport type { BindResource } from '../../gpu/shader/BindResource';\n\n/** All the various typed arrays that exist in js */\n// eslint-disable-next-line max-len\nexport type TypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array;\n\n/** Options for creating a buffer */\nexport interface BufferOptions\n{\n    /**\n     * the data to initialize the buffer with, this can be a typed array,\n     * or a regular number array. If it is a number array, it will be converted to a Float32Array\n     */\n    data?: TypedArray | number[];\n    /** the size of the buffer in bytes, if not supplied, it will be inferred from the data */\n    size?: number;\n    /** the usage of the buffer, see {@link rendering.BufferUsage} */\n    usage: number;\n    /** a label for the buffer, this is useful for debugging */\n    label?: string;\n    /**\n     * should the GPU buffer be shrunk when the data becomes smaller?\n     * changing this will cause the buffer to be destroyed and a new one created on the GPU\n     * this can be expensive, especially if the buffer is already big enough!\n     * setting this to false will prevent the buffer from being shrunk. This will yield better performance\n     * if you are constantly setting data that is changing size often.\n     * @default true\n     */\n    shrinkToFit?: boolean;\n}\n\nexport interface BufferDescriptor\n{\n    label?: string;\n    size: GPUSize64;\n    usage: BufferUsage;\n    mappedAtCreation?: boolean;\n}\n\n/**\n * A wrapper for a WebGPU/WebGL Buffer.\n * In PixiJS, the Buffer class is used to manage the data that is sent to the GPU rendering pipeline.\n * It abstracts away the underlying GPU buffer and provides an interface for uploading typed arrays or other data to the GPU,\n * They are used in the following places:\n * <br><br>\n * .1. {@link Geometry} as attribute data or index data for geometry\n * <br>\n * .2. {@link UniformGroup} as an underlying buffer for uniform data\n * <br>\n * .3. {@link BufferResource} as an underlying part of a buffer used directly by the GPU program\n * <br>\n *\n * It is important to note that you must provide a usage type when creating a buffer. This is because\n * the underlying GPU buffer needs to know how it will be used. For example, if you are creating a buffer\n * to hold vertex data, you would use `BufferUsage.VERTEX`. This will tell the GPU that this buffer will be\n * used as a vertex buffer. This is important because it will affect how you can use the buffer.\n *\n * Buffers are updated by calling the {@link Buffer.update} method. This immediately updates the buffer on the GPU.\n * Be mindful of calling this more often than you need to. It is recommended to update buffers only when needed.\n *\n * In WebGPU, a GPU buffer cannot resized. This limitation is abstracted away, but know that resizing a buffer means\n * creating a brand new one and destroying the old, so it is best to limit this if possible.\n * @example\n *\n * const buffer = new Buffer({\n *     data: new Float32Array([1, 2, 3, 4]),\n *     usage: BufferUsage.VERTEX,\n * });\n * @memberof rendering\n */\nexport class Buffer extends EventEmitter<{\n    change: BindResource,\n    update: Buffer,\n    destroy: Buffer,\n}> implements BindResource\n{\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n\n    /**\n     * emits when the underlying buffer data has been updated. letting the renderer know\n     * that it needs to update the buffer on the GPU\n     * @event update\n     */\n\n    /**\n     * emits when the buffer is destroyed. letting the renderer know that it needs to destroy the buffer on the GPU\n     * @event destroy\n     */\n\n    /** a unique id for this uniform group used through the renderer */\n    public readonly uid: number = uid('buffer');\n\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     * @ignore\n     */\n    public readonly _resourceType = 'buffer';\n\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     * @ignore\n     */\n    public _resourceId = uid('resource');\n\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     * @ignore\n     */\n    public _touched = 0;\n\n    /**\n     * a description of the buffer and how it should be set up on the GPU\n     * @internal\n     * @ignore\n     */\n    public readonly descriptor: BufferDescriptor;\n\n    /**\n     * @internal\n     * @ignore\n     */\n    public _updateID = 1;\n\n    /**\n     * @internal\n     * @ignore\n     */\n    public _updateSize: number;\n\n    private _data: TypedArray;\n\n    private _dataInt32: Int32Array = null;\n\n    /**\n     * should the GPU buffer be shrunk when the data becomes smaller?\n     * changing this will cause the buffer to be destroyed and a new one created on the GPU\n     * this can be expensive, especially if the buffer is already big enough!\n     * setting this to false will prevent the buffer from being shrunk. This will yield better performance\n     * if you are constantly setting data that is changing size often.\n     * @default true\n     */\n    public shrinkToFit = true;\n\n    /**\n     * Has the buffer been destroyed?\n     * @readonly\n     */\n    public destroyed = false;\n\n    /**\n     * Creates a new Buffer with the given options\n     * @param options - the options for the buffer\n     */\n    constructor(options: BufferOptions)\n    {\n        let { data, size } = options;\n        const { usage, label, shrinkToFit } = options;\n\n        super();\n\n        if (data instanceof Array)\n        {\n            data = new Float32Array(data as number[]);\n        }\n\n        this._data = data as TypedArray;\n\n        size ??= (data as TypedArray)?.byteLength;\n\n        const mappedAtCreation = !!data;\n\n        this.descriptor = {\n            size,\n            usage,\n            mappedAtCreation,\n            label,\n        };\n\n        this.shrinkToFit = shrinkToFit ?? true;\n    }\n\n    /** the data in the buffer */\n    get data()\n    {\n        return this._data;\n    }\n\n    set data(value: TypedArray)\n    {\n        this.setDataWithSize(value, value.length, true);\n    }\n\n    get dataInt32()\n    {\n        if (!this._dataInt32)\n        {\n            this._dataInt32 = new Int32Array((this.data as any).buffer);\n        }\n\n        return this._dataInt32;\n    }\n\n    /** whether the buffer is static or not */\n    get static()\n    {\n        return !!(this.descriptor.usage & BufferUsage.STATIC);\n    }\n\n    set static(value: boolean)\n    {\n        if (value)\n        {\n            this.descriptor.usage |= BufferUsage.STATIC;\n        }\n        else\n        {\n            this.descriptor.usage &= ~BufferUsage.STATIC;\n        }\n    }\n\n    /**\n     * Sets the data in the buffer to the given value. This will immediately update the buffer on the GPU.\n     * If you only want to update a subset of the buffer, you can pass in the size of the data.\n     * @param value - the data to set\n     * @param size - the size of the data in bytes\n     * @param syncGPU - should the buffer be updated on the GPU immediately?\n     */\n    public setDataWithSize(value: TypedArray, size: number, syncGPU: boolean)\n    {\n        // Increment update ID\n        this._updateID++;\n\n        this._updateSize = (size * value.BYTES_PER_ELEMENT);\n\n        // If the data hasn't changed, early return after emitting 'update'\n        if (this._data === value)\n        {\n            if (syncGPU) this.emit('update', this);\n\n            return;\n        }\n\n        // Cache old data and update to new value\n        const oldData = this._data;\n\n        this._data = value;\n        this._dataInt32 = null;\n\n        // Event handling\n        if (!oldData || oldData.length !== value.length)\n        {\n            if (!this.shrinkToFit && oldData && value.byteLength < oldData.byteLength)\n            {\n                if (syncGPU) this.emit('update', this);\n            }\n            else\n            {\n                this.descriptor.size = value.byteLength;\n                this._resourceId = uid('resource');\n                this.emit('change', this);\n            }\n\n            return;\n        }\n\n        if (syncGPU) this.emit('update', this);\n    }\n\n    /**\n     * updates the buffer on the GPU to reflect the data in the buffer.\n     * By default it will update the entire buffer. If you only want to update a subset of the buffer,\n     * you can pass in the size of the buffer to update.\n     * @param sizeInBytes - the new size of the buffer in bytes\n     */\n    public update(sizeInBytes?: number): void\n    {\n        this._updateSize = sizeInBytes ?? this._updateSize;\n\n        this._updateID++;\n\n        this.emit('update', this);\n    }\n\n    /** Destroys the buffer */\n    public destroy()\n    {\n        this.destroyed = true;\n\n        this.emit('destroy', this);\n        this.emit('change', this);\n\n        this._data = null;\n        (this.descriptor as null) = null;\n\n        this.removeAllListeners();\n    }\n}\n\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3628, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3634, "column": 0}, "map": {"version":3,"file":"ensureIsBuffer.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/shared/geometry/utils/ensureIsBuffer.ts"],"sourcesContent":["import { Buffer } from '../../buffer/Buffer';\nimport { BufferUsage } from '../../buffer/const';\n\nimport type { TypedArray } from '../../buffer/Buffer';\n\n/**\n * Converts something into a buffer. If it is already a buffer it will pass it through\n * if it is a number array it will convert it to a float32 array before being passed into a buffer\n * the buffer will be created with the correct usage flags for geometry attributes\n * @param buffer - number array\n * @param index - is this an index buffer?\n * @returns a buffer\n * @memberof rendering\n */\nexport function ensureIsBuffer(buffer: Buffer | TypedArray | number[], index: boolean): Buffer\n{\n    if (!(buffer instanceof Buffer))\n    {\n        let usage: number = index ? BufferUsage.INDEX : BufferUsage.VERTEX;\n\n        // its an array!\n        if (buffer instanceof Array)\n        {\n            if (index)\n            {\n                buffer = new Uint32Array(buffer);\n                usage = BufferUsage.INDEX | BufferUsage.COPY_DST;\n            }\n\n            else\n            {\n                buffer = new Float32Array(buffer);\n                usage = BufferUsage.VERTEX | BufferUsage.COPY_DST;\n            }\n        }\n\n        buffer = new Buffer({\n            data: buffer,\n            label: index ? 'index-mesh-buffer' : 'vertex-mesh-buffer',\n            usage\n        });\n    }\n\n    return buffer;\n}\n"],"names":[],"mappings":";;;;;;;;AAcgB,SAAA,cAAA,CAAe,MAAA,EAAwC,KACvE,EAAA;IACQ,IAAA,CAAA,CAAE,6MAAkB,SACxB,CAAA,EAAA;QACI,IAAI,KAAgB,GAAA,KAAA,6LAAQ,cAAY,CAAA,KAAA,6LAAQ,cAAY,CAAA,MAAA,CAAA;QAG5D,IAAI,kBAAkB,KACtB,EAAA;YACI,IAAI,KACJ,EAAA;gBACa,MAAA,GAAA,IAAI,YAAY,MAAM,CAAA,CAAA;gBACvB,KAAA,6LAAA,cAAA,CAAY,KAAA,6LAAQ,cAAY,CAAA,QAAA,CAAA;YAAA,CAI5C,MAAA;gBACa,MAAA,GAAA,IAAI,aAAa,MAAM,CAAA,CAAA;gBACxB,KAAA,6LAAA,cAAA,CAAY,MAAA,6LAAS,cAAY,CAAA,QAAA,CAAA;YAAA,CAC7C;QAAA,CACJ;QAEA,MAAA,GAAS,+LAAI,SAAO,CAAA;YAChB,IAAM,EAAA,MAAA;YACN,KAAA,EAAO,QAAQ,mBAAsB,GAAA,oBAAA;YACrC,KAAA;QAAA,CACH,CAAA,CAAA;IAAA,CACL;IAEO,OAAA,MAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 3664, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3670, "column": 0}, "map": {"version":3,"file":"getGeometryBounds.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/shared/geometry/utils/getGeometryBounds.ts"],"sourcesContent":["import type { Bounds } from '../../../../../scene/container/bounds/Bounds';\nimport type { Geometry } from '../Geometry';\n\n/**\n * Gets the 2D bounds of a geometry, based on a specific attribute.\n * @param geometry - Geometry to to measure\n * @param attributeId - AttributeId that contains the x,y data\n * @param bounds - Bounds to store the result in\n * @returns the bounds\n */\nexport function getGeometryBounds(geometry: Geometry, attributeId: string, bounds: Bounds): Bounds\n{\n    const attribute = geometry.getAttribute(attributeId);\n\n    if (!attribute)\n    {\n        bounds.minX = 0;\n        bounds.minY = 0;\n        bounds.maxX = 0;\n        bounds.maxY = 0;\n\n        return bounds;\n    }\n\n    const data = attribute.buffer.data as Float32Array;\n\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    const byteSize = data.BYTES_PER_ELEMENT;\n\n    // stride and offset MAY have not been calculated yet.. so go with assumed defaults\n    const offset = (attribute.offset || 0) / byteSize;\n    const stride = (attribute.stride || (2 * 4)) / byteSize;\n\n    for (let i = offset; i < data.length; i += stride)\n    {\n        const x = data[i];\n        const y = data[i + 1];\n\n        if (x > maxX)maxX = x;\n        if (y > maxY)maxY = y;\n        if (x < minX)minX = x;\n        if (y < minY)minY = y;\n    }\n\n    bounds.minX = minX;\n    bounds.minY = minY;\n    bounds.maxX = maxX;\n    bounds.maxY = maxY;\n\n    return bounds;\n}\n"],"names":[],"mappings":";;;;AAUgB,SAAA,iBAAA,CAAkB,QAAoB,EAAA,WAAA,EAAqB,MAC3E,EAAA;IACU,MAAA,SAAA,GAAY,QAAS,CAAA,YAAA,CAAa,WAAW,CAAA,CAAA;IAEnD,IAAI,CAAC,SACL,EAAA;QACI,MAAA,CAAO,IAAO,GAAA,CAAA,CAAA;QACd,MAAA,CAAO,IAAO,GAAA,CAAA,CAAA;QACd,MAAA,CAAO,IAAO,GAAA,CAAA,CAAA;QACd,MAAA,CAAO,IAAO,GAAA,CAAA,CAAA;QAEP,OAAA,MAAA,CAAA;IAAA,CACX;IAEM,MAAA,IAAA,GAAO,UAAU,MAAO,CAAA,IAAA,CAAA;IAE9B,IAAI,IAAO,GAAA,QAAA,CAAA;IACX,IAAI,IAAO,GAAA,QAAA,CAAA;IACX,IAAI,IAAO,GAAA,CAAA,QAAA,CAAA;IACX,IAAI,IAAO,GAAA,CAAA,QAAA,CAAA;IAEX,MAAM,WAAW,IAAK,CAAA,iBAAA,CAAA;IAGhB,MAAA,MAAA,GAAA,CAAU,SAAU,CAAA,MAAA,IAAU,CAAK,IAAA,QAAA,CAAA;IACzC,MAAM,MAAU,GAAA,CAAA,SAAA,CAAU,MAAW,IAAA,CAAA,GAAI,CAAM,IAAA,QAAA,CAAA;IAE/C,IAAA,IAAS,IAAI,MAAQ,EAAA,CAAA,GAAI,IAAK,CAAA,MAAA,EAAQ,KAAK,MAC3C,CAAA;QACU,MAAA,CAAA,GAAI,IAAA,CAAK,CAAC,CAAA,CAAA;QACV,MAAA,CAAA,GAAI,IAAK,CAAA,CAAA,GAAI,CAAC,CAAA,CAAA;QAEpB,IAAI,CAAI,GAAA,IAAA,EAAY,IAAA,GAAA,CAAA,CAAA;QACpB,IAAI,CAAI,GAAA,IAAA,EAAY,IAAA,GAAA,CAAA,CAAA;QACpB,IAAI,CAAI,GAAA,IAAA,EAAY,IAAA,GAAA,CAAA,CAAA;QACpB,IAAI,CAAI,GAAA,IAAA,EAAY,IAAA,GAAA,CAAA,CAAA;IAAA,CACxB;IAEA,MAAA,CAAO,IAAO,GAAA,IAAA,CAAA;IACd,MAAA,CAAO,IAAO,GAAA,IAAA,CAAA;IACd,MAAA,CAAO,IAAO,GAAA,IAAA,CAAA;IACd,MAAA,CAAO,IAAO,GAAA,IAAA,CAAA;IAEP,OAAA,MAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 3707, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3713, "column": 0}, "map": {"version":3,"file":"Geometry.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/shared/geometry/Geometry.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds';\nimport { uid } from '../../../../utils/data/uid';\nimport { Buffer } from '../buffer/Buffer';\nimport { ensureIsBuffer } from './utils/ensureIsBuffer';\nimport { getGeometryBounds } from './utils/getGeometryBounds';\n\nimport type { TypedArray } from '../buffer/Buffer';\nimport type { Topology, VertexFormat } from './const';\n\nexport type IndexBufferArray = Uint16Array | Uint32Array;\n\n/**\n * The attribute data for a geometries attributes\n * @memberof rendering\n */\nexport interface Attribute\n{\n    /** the buffer that this attributes data belongs to */\n    buffer: Buffer;\n    /** the format of the attribute */\n    format?: VertexFormat;\n    /** the stride of the data in the buffer - in bytes*/\n    stride?: number;\n    /** the offset of the attribute from the buffer, defaults to 0 - in bytes*/\n    offset?: number;\n    /** is this an instanced buffer? (defaults to false) */\n    instance?: boolean;\n    /** the number of elements to be rendered. If not specified, all vertices after the starting vertex will be drawn. */\n    size?: number;\n    /**\n     * the starting vertex in the geometry to start drawing from. If not specified,\n     *  drawing will start from the first vertex.\n     */\n    start?: number;\n    /**\n     * attribute divisor for instanced rendering. Note: this is a **WebGL-only** feature, the WebGPU renderer will\n     * issue a warning if one of the attributes has divisor set.\n     */\n    divisor?: number;\n}\n\n/**\n * The attribute options used by the constructor for adding geometries attributes\n * extends {@link rendering.Attribute} but allows for the buffer to be a typed or number array\n * @memberof rendering\n */\ntype AttributeOption = Omit<Attribute, 'buffer'> & { buffer: Buffer | TypedArray | number[]}\n| Buffer | TypedArray | number[];\n\nexport type AttributeOptions = Record<string, AttributeOption>;\n\n/**\n * the interface that describes the structure of the geometry\n * @memberof rendering\n */\nexport interface GeometryDescriptor\n{\n    /** an optional label to easily identify the geometry */\n    label?: string;\n    /** the attributes that make up the geometry */\n    attributes?: AttributeOptions;\n    /** optional index buffer for this geometry */\n    indexBuffer?: Buffer | TypedArray | number[];\n    /** the topology of the geometry, defaults to 'triangle-list' */\n    topology?: Topology;\n\n    instanceCount?: number;\n}\nfunction ensureIsAttribute(attribute: AttributeOption): Attribute\n{\n    if (attribute instanceof Buffer || Array.isArray(attribute) || (attribute as TypedArray).BYTES_PER_ELEMENT)\n    {\n        attribute = {\n            buffer: attribute as Buffer | TypedArray | number[],\n        };\n    }\n\n    (attribute as Attribute).buffer = ensureIsBuffer(attribute.buffer as Buffer | TypedArray | number[], false);\n\n    return attribute as Attribute;\n}\n\n/**\n * A Geometry is a low-level object that represents the structure of 2D shapes in terms of vertices and attributes.\n * It's a crucial component for rendering as it describes the shape and format of the data that will go through the shaders.\n * Essentially, a Geometry object holds the data you'd send to a GPU buffer.\n *\n * A geometry is basically made of two components:\n * <br>\n * <b>Attributes</b>: These are essentially arrays that define properties of the vertices like position, color,\n * texture coordinates, etc. They map directly to attributes in your vertex shaders.\n * <br>\n * <b>Indices</b>: An optional array that describes how the vertices are connected.\n * If not provided, vertices will be interpreted in the sequence they're given.\n * @example\n *\n * const geometry = new Geometry({\n *   attributes: {\n *     aPosition: [ // add some positions\n *       0, 0,\n *       0, 100,\n *       100, 100,\n *       100,   0,\n *     ],\n *     aUv: [ // add some uvs\n *       0, 0,\n *       0, 1,\n *       1, 1,\n *       1, 0,\n *     ]\n *   }\n * });\n * @memberof rendering\n * @class\n */\nexport class Geometry extends EventEmitter<{\n    update: Geometry,\n    destroy: Geometry,\n}>\n{\n    /** The topology of the geometry. */\n    public topology: Topology;\n    /** The unique id of the geometry. */\n    public readonly uid: number = uid('geometry');\n    /** A record of the attributes of the geometry. */\n    public readonly attributes: Record<string, Attribute>;\n    /** The buffers that the attributes use */\n    public readonly buffers: Buffer[];\n    /** The index buffer of the geometry */\n    public indexBuffer: Buffer;\n\n    /**\n     * the layout key will be generated by WebGPU all geometries that have the same structure\n     * will have the same layout key. This is used to cache the pipeline layout\n     * @internal\n     * @ignore\n     */\n    public _layoutKey = 0;\n\n    /** the instance count of the geometry to draw */\n    public instanceCount = 1;\n\n    private readonly _bounds: Bounds = new Bounds();\n    private _boundsDirty = true;\n\n    /**\n     * Create a new instance of a geometry\n     * @param options - The options for the geometry.\n     */\n    constructor(options: GeometryDescriptor = {})\n    {\n        super();\n\n        const { attributes, indexBuffer, topology } = options;\n\n        this.buffers = [];\n\n        this.attributes = {};\n\n        if (attributes)\n        {\n            for (const i in attributes)\n            {\n                this.addAttribute(i, attributes[i]);\n            }\n        }\n\n        this.instanceCount = options.instanceCount ?? 1;\n\n        if (indexBuffer)\n        {\n            this.addIndex(indexBuffer);\n        }\n\n        this.topology = topology || 'triangle-list';\n    }\n\n    protected onBufferUpdate(): void\n    {\n        this._boundsDirty = true;\n        this.emit('update', this);\n    }\n\n    /**\n     * Returns the requested attribute.\n     * @param id - The name of the attribute required\n     * @returns - The attribute requested.\n     */\n    public getAttribute(id: string): Attribute\n    {\n        return this.attributes[id];\n    }\n\n    /**\n     * Returns the index buffer\n     * @returns - The index buffer.\n     */\n    public getIndex(): Buffer\n    {\n        return this.indexBuffer;\n    }\n\n    /**\n     * Returns the requested buffer.\n     * @param id - The name of the buffer required.\n     * @returns - The buffer requested.\n     */\n    public getBuffer(id: string): Buffer\n    {\n        return this.getAttribute(id).buffer;\n    }\n\n    /**\n     * Used to figure out how many vertices there are in this geometry\n     * @returns the number of vertices in the geometry\n     */\n    public getSize(): number\n    {\n        for (const i in this.attributes)\n        {\n            const attribute = this.attributes[i];\n            const buffer = attribute.buffer;\n\n            // TODO use SIZE again like v7..\n            return (buffer.data as any).length / ((attribute.stride / 4) || attribute.size);\n        }\n\n        return 0;\n    }\n\n    /**\n     * Adds an attribute to the geometry.\n     * @param name - The name of the attribute to add.\n     * @param attributeOption - The attribute option to add.\n     */\n    public addAttribute(name: string, attributeOption: AttributeOption): void\n    {\n        const attribute = ensureIsAttribute(attributeOption);\n\n        const bufferIndex = this.buffers.indexOf(attribute.buffer);\n\n        if (bufferIndex === -1)\n        {\n            this.buffers.push(attribute.buffer);\n\n            // two events here - one for a resize (new buffer change)\n            // and one for an update (existing buffer change)\n            attribute.buffer.on('update', this.onBufferUpdate, this);\n            attribute.buffer.on('change', this.onBufferUpdate, this);\n        }\n        this.attributes[name] = attribute;\n    }\n\n    /**\n     * Adds an index buffer to the geometry.\n     * @param indexBuffer - The index buffer to add. Can be a Buffer, TypedArray, or an array of numbers.\n     */\n    public addIndex(indexBuffer: Buffer | TypedArray | number[]): void\n    {\n        this.indexBuffer = ensureIsBuffer(indexBuffer, true);\n        this.buffers.push(this.indexBuffer);\n    }\n\n    /** Returns the bounds of the geometry. */\n    get bounds(): Bounds\n    {\n        if (!this._boundsDirty) return this._bounds;\n\n        this._boundsDirty = false;\n\n        return getGeometryBounds(this, 'aPosition', this._bounds);\n    }\n\n    /**\n     * destroys the geometry.\n     * @param destroyBuffers - destroy the buffers associated with this geometry\n     */\n    public destroy(destroyBuffers = false): void\n    {\n        this.emit('destroy', this);\n\n        this.removeAllListeners();\n\n        if (destroyBuffers)\n        {\n            this.buffers.forEach((buffer) => buffer.destroy());\n        }\n\n        (this.attributes as null) = null;\n        (this.buffers as null) = null;\n        (this.indexBuffer as null) = null;\n        (this._bounds as null) = null;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3847, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3853, "column": 0}, "map": {"version":3,"file":"BatchGeometry.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/batcher/shared/BatchGeometry.ts"],"sourcesContent":["import { Buffer } from '../../renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../renderers/shared/buffer/const';\nimport { Geometry } from '../../renderers/shared/geometry/Geometry';\n\nconst placeHolderBufferData = new Float32Array(1);\nconst placeHolderIndexData = new Uint32Array(1);\n\nexport class BatchGeometry extends Geometry\n{\n    constructor()\n    {\n        const vertexSize = 6;\n\n        const attributeBuffer = new Buffer({\n            data: placeHolderBufferData,\n            label: 'attribute-batch-buffer',\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n            shrinkToFit: false,\n        });\n\n        const indexBuffer = new Buffer({\n            data: placeHolderIndexData,\n            label: 'index-batch-buffer',\n            usage: BufferUsage.INDEX | BufferUsage.COPY_DST, // | BufferUsage.STATIC,\n            shrinkToFit: false,\n        });\n\n        const stride = vertexSize * 4;\n\n        super({\n            attributes: {\n                aPosition: {\n                    buffer: attributeBuffer,\n                    format: 'float32x2',\n                    stride,\n                    offset: 0,\n                },\n                aUV: {\n                    buffer: attributeBuffer,\n                    format: 'float32x2',\n                    stride,\n                    offset: 2 * 4,\n                },\n                aColor: {\n                    buffer: attributeBuffer,\n                    format: 'unorm8x4',\n                    stride,\n                    offset: 4 * 4,\n                },\n                aTextureIdAndRound: {\n                    buffer: attributeBuffer,\n                    format: 'uint16x2',\n                    stride,\n                    offset: 5 * 4,\n                },\n            },\n            indexBuffer\n        });\n    }\n}\n\n"],"names":[],"mappings":";;;;;;;;;;AAIA,MAAM,qBAAA,GAAwB,IAAI,YAAA,CAAa,CAAC,CAAA,CAAA;AAChD,MAAM,oBAAA,GAAuB,IAAI,WAAA,CAAY,CAAC,CAAA,CAAA;AAEvC,MAAM,qNAAsB,WACnC,CAAA;IACI,WACA,EAAA;QACI,MAAM,UAAa,GAAA,CAAA,CAAA;QAEb,MAAA,eAAA,GAAkB,+LAAI,SAAO,CAAA;YAC/B,IAAM,EAAA,qBAAA;YACN,KAAO,EAAA,wBAAA;YACP,KAAA,4LAAO,cAAY,CAAA,MAAA,6LAAS,cAAY,CAAA,QAAA;YACxC,WAAa,EAAA,KAAA;QAAA,CAChB,CAAA,CAAA;QAEK,MAAA,WAAA,GAAc,+LAAI,SAAO,CAAA;YAC3B,IAAM,EAAA,oBAAA;YACN,KAAO,EAAA,oBAAA;YACP,KAAA,4LAAO,cAAY,CAAA,KAAA,6LAAQ,cAAY,CAAA,QAAA;YAAA,wBAAA;YACvC,WAAa,EAAA,KAAA;QAAA,CAChB,CAAA,CAAA;QAED,MAAM,SAAS,UAAa,GAAA,CAAA,CAAA;QAEtB,KAAA,CAAA;YACF,UAAY,EAAA;gBACR,SAAW,EAAA;oBACP,MAAQ,EAAA,eAAA;oBACR,MAAQ,EAAA,WAAA;oBACR,MAAA;oBACA,MAAQ,EAAA,CAAA;gBAAA,CACZ;gBACA,GAAK,EAAA;oBACD,MAAQ,EAAA,eAAA;oBACR,MAAQ,EAAA,WAAA;oBACR,MAAA;oBACA,QAAQ,CAAI,GAAA,CAAA;gBAAA,CAChB;gBACA,MAAQ,EAAA;oBACJ,MAAQ,EAAA,eAAA;oBACR,MAAQ,EAAA,UAAA;oBACR,MAAA;oBACA,QAAQ,CAAI,GAAA,CAAA;gBAAA,CAChB;gBACA,kBAAoB,EAAA;oBAChB,MAAQ,EAAA,eAAA;oBACR,MAAQ,EAAA,UAAA;oBACR,MAAA;oBACA,QAAQ,CAAI,GAAA,CAAA;gBAAA,CAChB;YAAA,CACJ;YACA,WAAA;QAAA,CACH,CAAA,CAAA;IAAA,CACL;AACJ","ignoreList":[0]}},
    {"offset": {"line": 3915, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3921, "column": 0}, "map": {"version":3,"file":"compileInputs.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/high-shader/compiler/utils/compileInputs.ts"],"sourcesContent":["function extractInputs(fragmentSource: string, out: string[])\n{\n    let match;\n    const regex = /@in\\s+([^;]+);/g;\n\n    while ((match = regex.exec(fragmentSource)) !== null)\n    {\n        out.push(match[1]);\n    }\n}\n\nexport function compileInputs(fragments: any[], template: string, sort = false)\n{\n    // get all the inputs from the fragments..\n    const results: string[] = [];\n\n    extractInputs(template, results);\n\n    fragments.forEach((fragment) =>\n    {\n        if (fragment.header)\n        {\n            extractInputs(fragment.header, results);\n        }\n    });\n\n    // build the input:\n    const mainInput = results;\n\n    if (sort)\n    {\n        mainInput.sort();\n    }\n\n    const finalString = mainInput\n        .map((inValue, i) => `       @location(${i}) ${inValue},`)\n        .join('\\n');\n\n    // Remove lines from original string\n    let cleanedString = template.replace(/@in\\s+[^;]+;\\s*/g, '');\n\n    cleanedString = cleanedString.replace('{{in}}', `\\n${finalString}\\n`);\n\n    return cleanedString;\n}\n"],"names":[],"mappings":";;;;AAAA,SAAS,aAAA,CAAc,cAAA,EAAwB,GAC/C,EAAA;IACQ,IAAA,KAAA,CAAA;IACJ,MAAM,KAAQ,GAAA,iBAAA,CAAA;IAEd,MAAA,CAAQ,KAAQ,GAAA,KAAA,CAAM,IAAK,CAAA,cAAc,CAAA,MAAO,IAChD,CAAA;QACQ,GAAA,CAAA,IAAA,CAAK,KAAM,CAAA,CAAC,CAAC,CAAA,CAAA;IAAA,CACrB;AACJ,CAAA;AAEO,SAAS,aAAc,CAAA,SAAA,EAAkB,QAAkB,EAAA,IAAA,GAAO,KACzE,EAAA;IAEI,MAAM,UAAoB,EAAC,CAAA;IAE3B,aAAA,CAAc,UAAU,OAAO,CAAA,CAAA;IAErB,SAAA,CAAA,OAAA,CAAQ,CAAC,QACnB,KAAA;QACI,IAAI,SAAS,MACb,EAAA;YACkB,aAAA,CAAA,QAAA,CAAS,MAAA,EAAQ,OAAO,CAAA,CAAA;QAAA,CAC1C;IAAA,CACH,CAAA,CAAA;IAGD,MAAM,SAAY,GAAA,OAAA,CAAA;IAElB,IAAI,IACJ,EAAA;QACI,SAAA,CAAU,IAAK,EAAA,CAAA;IAAA,CACnB;IAEA,MAAM,WAAc,GAAA,SAAA,CACf,GAAI,CAAA,CAAC,OAAS,EAAA,CAAA,GAAM,CAAoB,iBAAA,EAAA,CAAC,CAAK,EAAA,EAAA,OAAO,CAAG,CAAA,CAAA,CAAA,CACxD,IAAA,CAAK,IAAI,CAAA,CAAA;IAGd,IAAI,aAAgB,GAAA,QAAA,CAAS,OAAQ,CAAA,kBAAA,EAAoB,EAAE,CAAA,CAAA;IAE3C,aAAA,GAAA,aAAA,CAAc,OAAA,CAAQ,QAAU,EAAA,CAAA;AAAA,EAAK,WAAW,CAAA;AAAA,CAAI,CAAA,CAAA;IAE7D,OAAA,aAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 3953, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3959, "column": 0}, "map": {"version":3,"file":"compileOutputs.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/high-shader/compiler/utils/compileOutputs.ts"],"sourcesContent":["function extractOutputs(fragmentSource: string, out: string[])\n{\n    let match;\n    const regex = /@out\\s+([^;]+);/g;\n\n    while ((match = regex.exec(fragmentSource)) !== null)\n    {\n        out.push(match[1]);\n    }\n}\n\nfunction extractVariableName(value: string)\n{\n    const regex = /\\b(\\w+)\\s*:/g;\n\n    const match = regex.exec(value);\n\n    return match ? match[1] : '';\n}\n\nfunction stripVariable(value: string)\n{\n    const regex = /@.*?\\s+/g;\n\n    return value.replace(regex, '');\n}\n\nexport function compileOutputs(fragments: any[], template: string)\n{\n    // get all the inputs from the fragments..\n    const results: string[] = [];\n\n    extractOutputs(template, results);\n\n    fragments.forEach((fragment) =>\n    {\n        if (fragment.header)\n        {\n            extractOutputs(fragment.header, results);\n        }\n    });\n\n    let index = 0;\n\n    // generate the output struct\n    const mainStruct = results\n        .sort()\n        .map((inValue) =>\n        {\n            if (inValue.indexOf('builtin') > -1)\n            {\n                return inValue;\n            }\n\n            return `@location(${index++}) ${inValue}`;\n        })\n        .join(',\\n');\n\n    // generate the variables we will set:\n    const mainStart = results\n        .sort()\n        .map((inValue) => `       var ${stripVariable(inValue)};`)\n        .join('\\n');\n\n    // generate the return object\n    const mainEnd = `return VSOutput(\n            ${results\n                .sort()\n                .map((inValue) => ` ${extractVariableName(inValue)}`)\n                .join(',\\n')});`;\n\n    // Remove lines from original string\n    let compiledCode = template.replace(/@out\\s+[^;]+;\\s*/g, '');\n\n    compiledCode = compiledCode.replace('{{struct}}', `\\n${mainStruct}\\n`);\n    compiledCode = compiledCode.replace('{{start}}', `\\n${mainStart}\\n`);\n    compiledCode = compiledCode.replace('{{return}}', `\\n${mainEnd}\\n`);\n\n    return compiledCode;\n}\n"],"names":[],"mappings":";;;;AAAA,SAAS,cAAA,CAAe,cAAA,EAAwB,GAChD,EAAA;IACQ,IAAA,KAAA,CAAA;IACJ,MAAM,KAAQ,GAAA,kBAAA,CAAA;IAEd,MAAA,CAAQ,KAAQ,GAAA,KAAA,CAAM,IAAK,CAAA,cAAc,CAAA,MAAO,IAChD,CAAA;QACQ,GAAA,CAAA,IAAA,CAAK,KAAM,CAAA,CAAC,CAAC,CAAA,CAAA;IAAA,CACrB;AACJ,CAAA;AAEA,SAAS,oBAAoB,KAC7B,EAAA;IACI,MAAM,KAAQ,GAAA,cAAA,CAAA;IAER,MAAA,KAAA,GAAQ,KAAM,CAAA,IAAA,CAAK,KAAK,CAAA,CAAA;IAEvB,OAAA,KAAA,GAAQ,KAAM,CAAA,CAAC,CAAI,GAAA,EAAA,CAAA;AAC9B,CAAA;AAEA,SAAS,cAAc,KACvB,EAAA;IACI,MAAM,KAAQ,GAAA,UAAA,CAAA;IAEP,OAAA,KAAA,CAAM,OAAQ,CAAA,KAAA,EAAO,EAAE,CAAA,CAAA;AAClC,CAAA;AAEgB,SAAA,cAAA,CAAe,SAAA,EAAkB,QACjD,EAAA;IAEI,MAAM,UAAoB,EAAC,CAAA;IAE3B,cAAA,CAAe,UAAU,OAAO,CAAA,CAAA;IAEtB,SAAA,CAAA,OAAA,CAAQ,CAAC,QACnB,KAAA;QACI,IAAI,SAAS,MACb,EAAA;YACmB,cAAA,CAAA,QAAA,CAAS,MAAA,EAAQ,OAAO,CAAA,CAAA;QAAA,CAC3C;IAAA,CACH,CAAA,CAAA;IAED,IAAI,KAAQ,GAAA,CAAA,CAAA;IAGZ,MAAM,aAAa,OACd,CAAA,IAAA,EACA,CAAA,GAAA,CAAI,CAAC,OACN,KAAA;QACI,IAAI,OAAQ,CAAA,OAAA,CAAQ,SAAS,CAAA,GAAI,CACjC,CAAA,EAAA;YACW,OAAA,OAAA,CAAA;QAAA,CACX;QAEO,OAAA,CAAA,UAAA,EAAa,KAAO,EAAA,CAAA,EAAA,EAAK,OAAO,CAAA,CAAA,CAAA;IAAA,CAC1C,CACA,CAAA,IAAA,CAAK,KAAK,CAAA,CAAA;IAGf,MAAM,SAAY,GAAA,OAAA,CACb,IAAK,EAAA,CACL,GAAA,CAAI,CAAC,OAAA,GAAY,CAAc,WAAA,EAAA,aAAA,CAAc,OAAO,CAAC,CAAG,CAAA,CAAA,CAAA,CACxD,IAAA,CAAK,IAAI,CAAA,CAAA;IAGd,MAAM,OAAU,GAAA,CAAA;YAAA,EACN,OACG,CAAA,IAAA,EACA,CAAA,GAAA,CAAI,CAAC,OAAY,GAAA,CAAA,CAAA,EAAI,mBAAoB,CAAA,OAAO,CAAC,CAAA,CAAE,CACnD,CAAA,IAAA,CAAK,KAAK,CAAC,CAAA,EAAA,CAAA,CAAA;IAGxB,IAAI,YAAe,GAAA,QAAA,CAAS,OAAQ,CAAA,mBAAA,EAAqB,EAAE,CAAA,CAAA;IAE5C,YAAA,GAAA,YAAA,CAAa,OAAA,CAAQ,YAAc,EAAA,CAAA;AAAA,EAAK,UAAU,CAAA;AAAA,CAAI,CAAA,CAAA;IACtD,YAAA,GAAA,YAAA,CAAa,OAAA,CAAQ,WAAa,EAAA,CAAA;AAAA,EAAK,SAAS,CAAA;AAAA,CAAI,CAAA,CAAA;IACpD,YAAA,GAAA,YAAA,CAAa,OAAA,CAAQ,YAAc,EAAA,CAAA;AAAA,EAAK,OAAO,CAAA;AAAA,CAAI,CAAA,CAAA;IAE3D,OAAA,YAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 4011, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4017, "column": 0}, "map": {"version":3,"file":"compileHooks.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/high-shader/compiler/utils/compileHooks.ts"],"sourcesContent":["export const findHooksRx = /\\{\\{(.*?)\\}\\}/g;\n\n/**\n * takes a program string and returns an hash mapping the hooks to empty arrays\n * @param programSrc - the program containing hooks\n */\nexport function compileHooks(programSrc: string): Record<string, string[]>\n{\n    const parts: Record<string, string[]> = {};\n\n    const partMatches = programSrc\n        .match(findHooksRx)\n        ?.map((hook) => hook.replace(/[{()}]/g, '')) ?? [];\n\n    partMatches.forEach((hook) =>\n    {\n        parts[hook] = [];\n    });\n\n    return parts;\n}\n"],"names":[],"mappings":";;;;;AAAO,MAAM,WAAc,GAAA,iBAAA;AAMpB,SAAS,aAAa,UAC7B,EAAA;IACI,MAAM,QAAkC,CAAA,CAAC,CAAA;IAEzC,MAAM,WAAc,GAAA,UAAA,CACf,KAAM,CAAA,WAAW,GAChB,GAAI,CAAA,CAAC,IAAS,GAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,EAAW,EAAE,CAAC,KAAK,EAAC,CAAA;IAEzC,WAAA,CAAA,OAAA,CAAQ,CAAC,IACrB,KAAA;QACU,KAAA,CAAA,IAAI,CAAA,GAAI,EAAC,CAAA;IAAA,CAClB,CAAA,CAAA;IAEM,OAAA,KAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 4033, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4039, "column": 0}, "map": {"version":3,"file":"addBits.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/high-shader/compiler/utils/addBits.ts"],"sourcesContent":["import { warn } from '../../../../utils/logging/warn';\n\n/**\n * takes the HighFragment source parts and adds them to the hook hash\n * @param srcParts - the hash of hook arrays\n * @param parts - the code to inject into the hooks\n * @param name - optional the name of the part to add\n */\nexport function addBits(srcParts: Record<string, string>, parts: Record<string, string[]>, name?: string)\n{\n    if (srcParts)\n    {\n        for (const i in srcParts)\n        {\n            const id = i.toLocaleLowerCase();\n\n            const part = parts[id];\n\n            if (part)\n            {\n                let sanitisedPart = srcParts[i];\n\n                if (i === 'header')\n                {\n                    sanitisedPart = sanitisedPart\n                        .replace(/@in\\s+[^;]+;\\s*/g, '')\n                        .replace(/@out\\s+[^;]+;\\s*/g, '');\n                }\n\n                if (name)\n                {\n                    part.push(`//----${name}----//`);\n                }\n                part.push(sanitisedPart);\n            }\n\n            else\n            {\n                // #if _DEBUG\n                warn(`${i} placement hook does not exist in shader`);\n                // #endif\n            }\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;;AAQgB,SAAA,OAAA,CAAQ,QAAkC,EAAA,KAAA,EAAiC,IAC3F,EAAA;IACI,IAAI,QACJ,EAAA;QACI,IAAA,MAAW,KAAK,QAChB,CAAA;YACU,MAAA,EAAA,GAAK,EAAE,iBAAkB,EAAA,CAAA;YAEzB,MAAA,IAAA,GAAO,KAAA,CAAM,EAAE,CAAA,CAAA;YAErB,IAAI,IACJ,EAAA;gBACQ,IAAA,aAAA,GAAgB,QAAA,CAAS,CAAC,CAAA,CAAA;gBAE9B,IAAI,MAAM,QACV,EAAA;oBACI,aAAA,GAAgB,cACX,OAAQ,CAAA,kBAAA,EAAoB,EAAE,CAC9B,CAAA,OAAA,CAAQ,qBAAqB,EAAE,CAAA,CAAA;gBAAA,CACxC;gBAEA,IAAI,IACJ,EAAA;oBACS,IAAA,CAAA,IAAA,CAAK,CAAS,MAAA,EAAA,IAAI,CAAQ,MAAA,CAAA,CAAA,CAAA;gBAAA,CACnC;gBACA,IAAA,CAAK,IAAA,CAAK,aAAa,CAAA,CAAA;YAAA,CAI3B,MAAA;mLAES,OAAA,EAAA,CAAA,EAAG,CAAC,CAA0C,wCAAA,CAAA,CAAA,CAAA;YAAA,CAEvD;QAAA,CACJ;IAAA,CACJ;AACJ","ignoreList":[0]}},
    {"offset": {"line": 4067, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4073, "column": 0}, "map": {"version":3,"file":"injectBits.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/high-shader/compiler/utils/injectBits.ts"],"sourcesContent":["/**\n * takes a shader src and replaces any hooks with the HighFragment code.\n * @param templateSrc - the program src template\n * @param fragmentParts - the fragments to inject\n */\nexport function injectBits(templateSrc: string, fragmentParts: Record<string, string[]>): string\n{\n    let out = templateSrc;\n\n    for (const i in fragmentParts)\n    {\n        const parts = fragmentParts[i];\n\n        const toInject = parts.join('\\n');\n\n        if (toInject.length)\n        {\n            out = out.replace(`{{${i}}}`, `//-----${i} START-----//\\n${parts.join('\\n')}\\n//----${i} FINISH----//`);\n        }\n\n        else\n        {\n            out = out.replace(`{{${i}}}`, '');\n        }\n    }\n\n    return out;\n}\n"],"names":[],"mappings":";;;;AAKgB,SAAA,UAAA,CAAW,WAAA,EAAqB,aAChD,EAAA;IACI,IAAI,GAAM,GAAA,WAAA,CAAA;IAEV,IAAA,MAAW,KAAK,aAChB,CAAA;QACU,MAAA,KAAA,GAAQ,aAAA,CAAc,CAAC,CAAA,CAAA;QAEvB,MAAA,QAAA,GAAW,KAAM,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;QAEhC,IAAI,SAAS,MACb,EAAA;YACI,GAAA,GAAM,IAAI,OAAQ,CAAA,CAAA,EAAA,EAAK,CAAC,CAAA,EAAA,CAAA,EAAM,CAAA,OAAA,EAAU,CAAC,CAAA;AAAA,EAAkB,KAAA,CAAM,IAAK,CAAA,IAAI,CAAC,CAAA;MAAA,EAAW,CAAC,CAAe,aAAA,CAAA,CAAA,CAAA;QAAA,CAI1G,MAAA;YACI,GAAA,GAAM,GAAI,CAAA,OAAA,CAAQ,CAAK,EAAA,EAAA,CAAC,CAAA,EAAA,CAAA,EAAM,EAAE,CAAA,CAAA;QAAA,CACpC;IAAA,CACJ;IAEO,OAAA,GAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 4094, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4100, "column": 0}, "map": {"version":3,"file":"compileHighShader.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/high-shader/compiler/compileHighShader.ts"],"sourcesContent":["import { addBits } from './utils/addBits';\nimport { compileHooks } from './utils/compileHooks';\nimport { compileInputs } from './utils/compileInputs';\nimport { compileOutputs } from './utils/compileOutputs';\nimport { injectBits } from './utils/injectBits';\n\nimport type { HighShaderBit, HighShaderSource } from './types';\n\n/** A high template consists of vertex and fragment source */\nexport interface HighShaderTemplate\n{\n    name?: string;\n    fragment: string;\n    vertex: string;\n}\n\nexport interface CompileHighShaderOptions\n{\n    template: HighShaderTemplate;\n    bits: HighShaderBit[];\n}\n\nconst cacheMap: {[key: string]: HighShaderSource} = Object.create(null);\nconst bitCacheMap: Map<HighShaderBit, number> = new Map();\n\nlet CACHE_UID = 0;\n\n/**\n * This function will take a HighShader template, some High fragments and then merge them in to a shader source.\n * @param options\n * @param options.template\n * @param options.bits\n */\nexport function compileHighShader({\n    template,\n    bits\n}: CompileHighShaderOptions): HighShaderSource\n{\n    const cacheId = generateCacheId(template, bits);\n\n    if (cacheMap[cacheId]) return cacheMap[cacheId];\n\n    const { vertex, fragment } = compileInputsAndOutputs(template, bits);\n\n    cacheMap[cacheId] = compileBits(vertex, fragment, bits);\n\n    return cacheMap[cacheId];\n}\n\nexport function compileHighShaderGl({\n    template,\n    bits\n}: CompileHighShaderOptions): HighShaderSource\n{\n    const cacheId = generateCacheId(template, bits);\n\n    if (cacheMap[cacheId]) return cacheMap[cacheId];\n\n    cacheMap[cacheId] = compileBits(template.vertex, template.fragment, bits);\n\n    return cacheMap[cacheId];\n}\n\nfunction compileInputsAndOutputs(template: HighShaderTemplate, bits: HighShaderBit[])\n{\n    const vertexFragments = bits.map((shaderBit) => shaderBit.vertex).filter((v) => !!v);\n    const fragmentFragments = bits.map((shaderBit) => shaderBit.fragment).filter((v) => !!v);\n\n    // WebGPU compile inputs and outputs..\n    let compiledVertex = compileInputs(vertexFragments, template.vertex, true);\n\n    compiledVertex = compileOutputs(vertexFragments, compiledVertex);\n\n    const compiledFragment = compileInputs(fragmentFragments, template.fragment, true);\n\n    return {\n        vertex: compiledVertex,\n        fragment: compiledFragment,\n    };\n}\n\nfunction generateCacheId(template: HighShaderTemplate, bits: HighShaderBit[]): string\n{\n    return bits\n        .map((highFragment) =>\n        {\n            if (!bitCacheMap.has(highFragment))\n            {\n                bitCacheMap.set(highFragment, CACHE_UID++);\n            }\n\n            return bitCacheMap.get(highFragment);\n        })\n        .sort((a, b) => a - b)\n        .join('-') + template.vertex + template.fragment;\n}\n\nfunction compileBits(vertex: string, fragment: string, bits: HighShaderBit[])\n{\n    const vertexParts = compileHooks(vertex);\n    const fragmentParts = compileHooks(fragment);\n\n    bits.forEach((shaderBit) =>\n    {\n        addBits(shaderBit.vertex, vertexParts, shaderBit.name);\n        addBits(shaderBit.fragment, fragmentParts, shaderBit.name);\n    });\n\n    return {\n        vertex: injectBits(vertex, vertexParts),\n        fragment: injectBits(fragment, fragmentParts),\n    };\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4164, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4170, "column": 0}, "map": {"version":3,"file":"defaultProgramTemplate.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/high-shader/defaultProgramTemplate.ts"],"sourcesContent":["const vertexGPUTemplate = /* wgsl */`\n    @in aPosition: vec2<f32>;\n    @in aUV: vec2<f32>;\n\n    @out @builtin(position) vPosition: vec4<f32>;\n    @out vUV : vec2<f32>;\n    @out vColor : vec4<f32>;\n\n    {{header}}\n\n    struct VSOutput {\n        {{struct}}\n    };\n\n    @vertex\n    fn main( {{in}} ) -> VSOutput {\n\n        var worldTransformMatrix = globalUniforms.uWorldTransformMatrix;\n        var modelMatrix = mat3x3<f32>(\n            1.0, 0.0, 0.0,\n            0.0, 1.0, 0.0,\n            0.0, 0.0, 1.0\n          );\n        var position = aPosition;\n        var uv = aUV;\n\n        {{start}}\n        \n        vColor = vec4<f32>(1., 1., 1., 1.);\n\n        {{main}}\n\n        vUV = uv;\n\n        var modelViewProjectionMatrix = globalUniforms.uProjectionMatrix * worldTransformMatrix * modelMatrix;\n\n        vPosition =  vec4<f32>((modelViewProjectionMatrix *  vec3<f32>(position, 1.0)).xy, 0.0, 1.0);\n       \n        vColor *= globalUniforms.uWorldColorAlpha;\n\n        {{end}}\n\n        {{return}}\n    };\n`;\n\nconst fragmentGPUTemplate = /* wgsl */`\n    @in vUV : vec2<f32>;\n    @in vColor : vec4<f32>;\n   \n    {{header}}\n\n    @fragment\n    fn main(\n        {{in}}\n      ) -> @location(0) vec4<f32> {\n        \n        {{start}}\n\n        var outColor:vec4<f32>;\n      \n        {{main}}\n        \n        var finalColor:vec4<f32> = outColor * vColor;\n\n        {{end}}\n\n        return finalColor;\n      };\n`;\n\nconst vertexGlTemplate = /* glsl */`\n    in vec2 aPosition;\n    in vec2 aUV;\n\n    out vec4 vColor;\n    out vec2 vUV;\n\n    {{header}}\n\n    void main(void){\n\n        mat3 worldTransformMatrix = uWorldTransformMatrix;\n        mat3 modelMatrix = mat3(\n            1.0, 0.0, 0.0,\n            0.0, 1.0, 0.0,\n            0.0, 0.0, 1.0\n          );\n        vec2 position = aPosition;\n        vec2 uv = aUV;\n        \n        {{start}}\n        \n        vColor = vec4(1.);\n        \n        {{main}}\n        \n        vUV = uv;\n        \n        mat3 modelViewProjectionMatrix = uProjectionMatrix * worldTransformMatrix * modelMatrix;\n\n        gl_Position = vec4((modelViewProjectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n\n        vColor *= uWorldColorAlpha;\n\n        {{end}}\n    }\n`;\n\nconst fragmentGlTemplate = /* glsl */`\n   \n    in vec4 vColor;\n    in vec2 vUV;\n\n    out vec4 finalColor;\n\n    {{header}}\n\n    void main(void) {\n        \n        {{start}}\n\n        vec4 outColor;\n      \n        {{main}}\n        \n        finalColor = outColor * vColor;\n        \n        {{end}}\n    }\n`;\n\nexport {\n    fragmentGlTemplate,\n    fragmentGPUTemplate,\n    vertexGlTemplate,\n    vertexGPUTemplate\n};\n"],"names":[],"mappings":";;;;;;;AAAM,MAAA,iBAAA,GAAA,QAAA,GAA8B,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,CAAA;AA8C9B,MAAA,mBAAA,GAAA,QAAA,GAAgC,CAAA;;;;;;;;;;;;;;;;;;;;;;;AAAA,CAAA;AAyBhC,MAAA,gBAAA,GAAA,QAAA,GAA6B,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,CAAA;AAsC7B,MAAA,kBAAA,GAAA,QAAA,GAA+B,CAAA;;;;;;;;;;;;;;;;;;;;;AAAA,CAAA","ignoreList":[0]}},
    {"offset": {"line": 4307, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4313, "column": 0}, "map": {"version":3,"file":"globalUniformsBit.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/high-shader/shader-bits/globalUniformsBit.ts"],"sourcesContent":["export const globalUniformsBit = {\n    name: 'global-uniforms-bit',\n    vertex: {\n        header: /* wgsl */`\n        struct GlobalUniforms {\n            uProjectionMatrix:mat3x3<f32>,\n            uWorldTransformMatrix:mat3x3<f32>,\n            uWorldColorAlpha: vec4<f32>,\n            uResolution: vec2<f32>,\n        }\n\n        @group(0) @binding(0) var<uniform> globalUniforms : GlobalUniforms;\n        `\n    }\n};\n\nexport const globalUniformsUBOBitGl = {\n    name: 'global-uniforms-ubo-bit',\n    vertex: {\n        header: /* glsl */`\n          uniform globalUniforms {\n            mat3 uProjectionMatrix;\n            mat3 uWorldTransformMatrix;\n            vec4 uWorldColorAlpha;\n            vec2 uResolution;\n          };\n        `\n    }\n};\n\nexport const globalUniformsBitGl = {\n    name: 'global-uniforms-bit',\n    vertex: {\n        header: /* glsl */`\n          uniform mat3 uProjectionMatrix;\n          uniform mat3 uWorldTransformMatrix;\n          uniform vec4 uWorldColorAlpha;\n          uniform vec2 uResolution;\n        `\n    }\n\n};\n"],"names":[],"mappings":";;;;;;AAAO,MAAM,iBAAoB,GAAA;IAC7B,IAAM,EAAA,qBAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;;;;;QAAA,CAAA;IAAA,CAUtB;AACJ,EAAA;AAEO,MAAM,sBAAyB,GAAA;IAClC,IAAM,EAAA,yBAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;;;QAAA,CAAA;IAAA,CAQtB;AACJ,EAAA;AAEO,MAAM,mBAAsB,GAAA;IAC/B,IAAM,EAAA,qBAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;QAAA,CAAA;IAAA,CAMtB;AAEJ","ignoreList":[0]}},
    {"offset": {"line": 4360, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4366, "column": 0}, "map": {"version":3,"file":"extractStructAndGroups.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/gpu/shader/utils/extractStructAndGroups.ts"],"sourcesContent":["export interface StructsAndGroups\n{\n    groups: {\n        group: number;\n        binding: number;\n        name: string;\n        isUniform: boolean;\n        type: string;\n    }[];\n    structs: {\n        name: string;\n        members: Record<string, string>;\n    }[];\n}\n\nexport function extractStructAndGroups(wgsl: string): StructsAndGroups\n{\n    // Patterns for parsing the WGSL file\n    const linePattern = /(^|[^/])@(group|binding)\\(\\d+\\)[^;]+;/g;\n    const groupPattern = /@group\\((\\d+)\\)/;\n    const bindingPattern = /@binding\\((\\d+)\\)/;\n    const namePattern = /var(<[^>]+>)? (\\w+)/;\n    const typePattern = /:\\s*(\\w+)/;\n    const structPattern = /struct\\s+(\\w+)\\s*{([^}]+)}/g;\n    const structMemberPattern = /(\\w+)\\s*:\\s*([\\w\\<\\>]+)/g;\n    const structName = /struct\\s+(\\w+)/;\n\n    // Find the @group and @binding annotations\n    const groups = wgsl.match(linePattern)?.map((item) => ({\n        group: parseInt(item.match(groupPattern)[1], 10),\n        binding: parseInt(item.match(bindingPattern)[1], 10),\n        name: item.match(namePattern)[2],\n        isUniform: item.match(namePattern)[1] === '<uniform>',\n        type: item.match(typePattern)[1],\n    }));\n\n    if (!groups)\n    {\n        return {\n            groups: [],\n            structs: [],\n        };\n    }\n\n    // Find the structs\n    const structs = wgsl\n        .match(structPattern)\n        ?.map((struct) =>\n        {\n            const name = struct.match(structName)[1];\n            const members = struct.match(structMemberPattern).reduce((acc: Record<string, string>, member) =>\n            {\n                const [name, type] = member.split(':');\n\n                acc[name.trim()] = type.trim();\n\n                return acc;\n            }, {});\n\n            if (!members)\n            {\n                return null;\n            }\n\n            return { name, members };\n            // Only include the structs mentioned in the @group/@binding annotations\n        })\n        .filter(({ name }) => groups.some((group) => group.type === name)) ?? [];\n\n    return {\n        groups,\n        structs,\n    };\n}\n"],"names":["name"],"mappings":";;;;AAeO,SAAS,uBAAuB,IACvC,EAAA;IAEI,MAAM,WAAc,GAAA,wCAAA,CAAA;IACpB,MAAM,YAAe,GAAA,iBAAA,CAAA;IACrB,MAAM,cAAiB,GAAA,mBAAA,CAAA;IACvB,MAAM,WAAc,GAAA,qBAAA,CAAA;IACpB,MAAM,WAAc,GAAA,WAAA,CAAA;IACpB,MAAM,aAAgB,GAAA,6BAAA,CAAA;IACtB,MAAM,mBAAsB,GAAA,0BAAA,CAAA;IAC5B,MAAM,UAAa,GAAA,gBAAA,CAAA;IAGnB,MAAM,SAAS,IAAK,CAAA,KAAA,CAAM,WAAW,CAAG,EAAA,GAAA,CAAI,CAAC,IAAU,GAAA,CAAA;YACnD,KAAA,EAAO,SAAS,IAAK,CAAA,KAAA,CAAM,YAAY,CAAE,CAAA,CAAC,CAAA,EAAG,EAAE,CAAA;YAC/C,OAAA,EAAS,SAAS,IAAK,CAAA,KAAA,CAAM,cAAc,CAAE,CAAA,CAAC,CAAA,EAAG,EAAE,CAAA;YACnD,IAAM,EAAA,IAAA,CAAK,KAAM,CAAA,WAAW,CAAA,CAAE,CAAC,CAAA;YAC/B,WAAW,IAAK,CAAA,KAAA,CAAM,WAAW,CAAA,CAAE,CAAC,CAAM,KAAA,WAAA;YAC1C,IAAM,EAAA,IAAA,CAAK,KAAM,CAAA,WAAW,CAAA,CAAE,CAAC,CAAA;QAAA,CACjC,CAAA,CAAA,CAAA;IAEF,IAAI,CAAC,MACL,EAAA;QACW,OAAA;YACH,QAAQ,EAAC;YACT,SAAS,EAAC;QAAA,CACd,CAAA;IAAA,CACJ;IAGA,MAAM,UAAU,IACX,CAAA,KAAA,CAAM,aAAa,CAClB,EAAA,GAAA,CAAI,CAAC,MACP,KAAA;QACI,MAAM,IAAO,GAAA,MAAA,CAAO,KAAM,CAAA,UAAU,CAAA,CAAE,CAAC,CAAA,CAAA;QACjC,MAAA,OAAA,GAAU,OAAO,KAAM,CAAA,mBAAmB,EAAE,MAAO,CAAA,CAAC,KAA6B,MACvF,KAAA;YACI,MAAM,CAACA,KAAM,EAAA,IAAI,CAAI,GAAA,MAAA,CAAO,KAAA,CAAM,GAAG,CAAA,CAAA;YAErC,GAAA,CAAIA,KAAK,CAAA,IAAA,EAAM,CAAA,GAAI,KAAK,IAAK,EAAA,CAAA;YAEtB,OAAA,GAAA,CAAA;QAAA,CACX,EAAG,CAAA,CAAE,CAAA,CAAA;QAEL,IAAI,CAAC,OACL,EAAA;YACW,OAAA,IAAA,CAAA;QAAA,CACX;QAEO,OAAA;YAAE;YAAM,OAAQ;QAAA,CAAA,CAAA;IAAA,CAE1B,CACA,CAAA,MAAA,CAAO,CAAC,EAAE,IAAA,EAAW,GAAA,MAAA,CAAO,IAAK,CAAA,CAAC,QAAU,KAAM,CAAA,IAAA,KAAS,IAAI,CAAC,KAAK,EAAC,CAAA;IAEpE,OAAA;QACH,MAAA;QACA,OAAA;IAAA,CACJ,CAAA;AACJ","ignoreList":[0]}},
    {"offset": {"line": 4414, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4420, "column": 0}, "map": {"version":3,"file":"removeStructAndGroupDuplicates.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/gpu/shader/utils/removeStructAndGroupDuplicates.ts"],"sourcesContent":["import type { StructsAndGroups } from './extractStructAndGroups';\n\nexport function removeStructAndGroupDuplicates(\n    vertexStructsAndGroups: StructsAndGroups,\n    fragmentStructsAndGroups: StructsAndGroups\n)\n{\n    const structNameSet = new Set();\n    const dupeGroupKeySet = new Set();\n\n    const structs = [...vertexStructsAndGroups.structs, ...fragmentStructsAndGroups.structs]\n        .filter((struct) =>\n        {\n            if (structNameSet.has(struct.name))\n            {\n                return false;\n            }\n            structNameSet.add(struct.name);\n\n            return true;\n        });\n\n    const groups = [...vertexStructsAndGroups.groups, ...fragmentStructsAndGroups.groups]\n        .filter((group) =>\n        {\n            const key = `${group.name}-${group.binding}`;\n\n            if (dupeGroupKeySet.has(key))\n            {\n                return false;\n            }\n            dupeGroupKeySet.add(key);\n\n            return true;\n        });\n\n    return { structs, groups };\n}\n"],"names":[],"mappings":";;;;AAEgB,SAAA,8BAAA,CACZ,sBAAA,EACA,wBAEJ,EAAA;IACU,MAAA,aAAA,GAAA,aAAA,GAAA,IAAoB,GAAI,EAAA,CAAA;IACxB,MAAA,eAAA,GAAA,aAAA,GAAA,IAAsB,GAAI,EAAA,CAAA;IAE1B,MAAA,OAAA,GAAU,CAAC;WAAG,sBAAuB,CAAA,OAAA,EAAS;WAAG,wBAAA,CAAyB,OAAO;KAAA,CAClF,MAAO,CAAA,CAAC,MACT,KAAA;QACI,IAAI,aAAc,CAAA,GAAA,CAAI,MAAO,CAAA,IAAI,CACjC,EAAA;YACW,OAAA,KAAA,CAAA;QAAA,CACX;QACc,aAAA,CAAA,GAAA,CAAI,OAAO,IAAI,CAAA,CAAA;QAEtB,OAAA,IAAA,CAAA;IAAA,CACV,CAAA,CAAA;IAEC,MAAA,MAAA,GAAS,CAAC;WAAG,sBAAuB,CAAA,MAAA,EAAQ;WAAG,wBAAA,CAAyB,MAAM;KAAA,CAC/E,MAAO,CAAA,CAAC,KACT,KAAA;QACI,MAAM,MAAM,CAAG,EAAA,KAAA,CAAM,IAAI,CAAA,CAAA,EAAI,MAAM,OAAO,CAAA,CAAA,CAAA;QAEtC,IAAA,eAAA,CAAgB,GAAI,CAAA,GAAG,CAC3B,EAAA;YACW,OAAA,KAAA,CAAA;QAAA,CACX;QACA,eAAA,CAAgB,GAAA,CAAI,GAAG,CAAA,CAAA;QAEhB,OAAA,IAAA,CAAA;IAAA,CACV,CAAA,CAAA;IAEE,OAAA;QAAE;QAAS,MAAO;IAAA,CAAA,CAAA;AAC7B","ignoreList":[0]}},
    {"offset": {"line": 4455, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4461, "column": 0}, "map": {"version":3,"file":"generateLayoutHash.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/gpu/shader/utils/generateLayoutHash.ts"],"sourcesContent":["import type { ProgramLayout } from '../GpuProgram';\nimport type { StructsAndGroups } from './extractStructAndGroups';\n\nexport function generateLayoutHash({ groups }: StructsAndGroups): ProgramLayout\n{\n    const layout: ProgramLayout = [];\n\n    for (let i = 0; i < groups.length; i++)\n    {\n        const group = groups[i];\n\n        if (!layout[group.group])\n        {\n            layout[group.group] = {};\n        }\n\n        layout[group.group][group.name] = group.binding;\n    }\n\n    return layout;\n}\n"],"names":[],"mappings":";;;;AAGgB,SAAA,kBAAA,CAAmB,EAAE,MAAA,EACrC,EAAA;IACI,MAAM,SAAwB,EAAC,CAAA;IAE/B,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,MAAA,CAAO,MAAA,EAAQ,CACnC,EAAA,CAAA;QACU,MAAA,KAAA,GAAQ,MAAA,CAAO,CAAC,CAAA,CAAA;QAEtB,IAAI,CAAC,MAAA,CAAO,KAAM,CAAA,KAAK,CACvB,EAAA;YACW,MAAA,CAAA,KAAA,CAAM,KAAK,CAAA,GAAI,CAAA,CAAC,CAAA;QAAA,CAC3B;QAEA,MAAA,CAAO,MAAM,KAAK,CAAA,CAAE,KAAM,CAAA,IAAI,CAAA,GAAI,KAAM,CAAA,OAAA,CAAA;IAAA,CAC5C;IAEO,OAAA,MAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 4478, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4484, "column": 0}, "map": {"version":3,"file":"const.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/shared/shader/const.ts"],"sourcesContent":["export enum ShaderStage\n{\n    VERTEX = 1,\n    FRAGMENT = 2,\n    COMPUTE = 4\n}\n"],"names":["ShaderStage"],"mappings":";;;;AAAY,IAAA,WAAA,GAAA,aAAA,GAAA,CAAA,CAAAA,YAAL,KAAA;IAEHA,YAAAA,CAAAA,YAAAA,CAAA,SAAA,GAAS,CAAT,CAAA,GAAA,QAAA,CAAA;IACAA,YAAAA,CAAAA,YAAAA,CAAA,WAAA,GAAW,CAAX,CAAA,GAAA,UAAA,CAAA;IACAA,YAAAA,CAAAA,YAAAA,CAAA,UAAA,GAAU,CAAV,CAAA,GAAA,SAAA,CAAA;IAJQA,OAAAA,YAAAA,CAAAA;AAAA,CAAA,EAAA,WAAA,IAAA,CAAA,CAAA","ignoreList":[0]}},
    {"offset": {"line": 4496, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4502, "column": 0}, "map": {"version":3,"file":"generateGpuLayoutGroups.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/gpu/shader/utils/generateGpuLayoutGroups.ts"],"sourcesContent":["import { ShaderStage } from '../../../shared/shader/const';\n\nimport type { ProgramPipelineLayoutDescription } from '../GpuProgram';\nimport type { StructsAndGroups } from './extractStructAndGroups';\n\nexport function generateGpuLayoutGroups({ groups }: StructsAndGroups): ProgramPipelineLayoutDescription\n{\n    const layout: ProgramPipelineLayoutDescription = [];\n\n    for (let i = 0; i < groups.length; i++)\n    {\n        const group = groups[i];\n\n        if (!layout[group.group])\n        {\n            layout[group.group] = [];\n        }\n\n        if (group.isUniform)\n        {\n            layout[group.group].push({\n                binding: group.binding,\n                visibility: ShaderStage.VERTEX | ShaderStage.FRAGMENT,\n                buffer: {\n                    type: 'uniform'\n                }\n            });\n        }\n        else if (group.type === 'sampler')\n        {\n            layout[group.group].push({\n                binding: group.binding,\n                visibility: ShaderStage.FRAGMENT,\n                sampler: {\n                    type: 'filtering'\n                }\n            });\n        }\n        else if (group.type === 'texture_2d')\n        {\n            layout[group.group].push({\n                binding: group.binding,\n                visibility: ShaderStage.FRAGMENT,\n                texture: {\n                    sampleType: 'float',\n                    viewDimension: '2d',\n                    multisampled: false,\n                }\n            });\n        }\n    }\n\n    return layout;\n}\n"],"names":[],"mappings":";;;;;;AAKgB,SAAA,uBAAA,CAAwB,EAAE,MAAA,EAC1C,EAAA;IACI,MAAM,SAA2C,EAAC,CAAA;IAElD,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,MAAA,CAAO,MAAA,EAAQ,CACnC,EAAA,CAAA;QACU,MAAA,KAAA,GAAQ,MAAA,CAAO,CAAC,CAAA,CAAA;QAEtB,IAAI,CAAC,MAAA,CAAO,KAAM,CAAA,KAAK,CACvB,EAAA;YACW,MAAA,CAAA,KAAA,CAAM,KAAK,CAAA,GAAI,EAAC,CAAA;QAAA,CAC3B;QAEA,IAAI,MAAM,SACV,EAAA;YACW,MAAA,CAAA,KAAA,CAAM,KAAK,CAAA,CAAE,IAAK,CAAA;gBACrB,SAAS,KAAM,CAAA,OAAA;gBACf,UAAA,4LAAY,cAAY,CAAA,MAAA,6LAAS,cAAY,CAAA,QAAA;gBAC7C,MAAQ,EAAA;oBACJ,IAAM,EAAA,SAAA;gBAAA,CACV;YAAA,CACH,CAAA,CAAA;QAAA,CACL,MAAA,IACS,KAAM,CAAA,IAAA,KAAS,SACxB,EAAA;YACW,MAAA,CAAA,KAAA,CAAM,KAAK,CAAA,CAAE,IAAK,CAAA;gBACrB,SAAS,KAAM,CAAA,OAAA;gBACf,sMAAY,cAAY,CAAA,QAAA;gBACxB,OAAS,EAAA;oBACL,IAAM,EAAA,WAAA;gBAAA,CACV;YAAA,CACH,CAAA,CAAA;QAAA,CACL,MAAA,IACS,KAAM,CAAA,IAAA,KAAS,YACxB,EAAA;YACW,MAAA,CAAA,KAAA,CAAM,KAAK,CAAA,CAAE,IAAK,CAAA;gBACrB,SAAS,KAAM,CAAA,OAAA;gBACf,sMAAY,cAAY,CAAA,QAAA;gBACxB,OAAS,EAAA;oBACL,UAAY,EAAA,OAAA;oBACZ,aAAe,EAAA,IAAA;oBACf,YAAc,EAAA,KAAA;gBAAA,CAClB;YAAA,CACH,CAAA,CAAA;QAAA,CACL;IAAA,CACJ;IAEO,OAAA,MAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 4547, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4553, "column": 0}, "map": {"version":3,"file":"createIdFromString.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/shared/utils/createIdFromString.ts"],"sourcesContent":["const idCounts: Record<string, number> = Object.create(null);\nconst idHash: Record<string, number> = Object.create(null);\n\nexport function createIdFromString(value: string, groupId: string): number\n{\n    let id = idHash[value];\n\n    if (id === undefined)\n    {\n        if (idCounts[groupId] === undefined)\n        {\n            idCounts[groupId] = 1;\n        }\n\n        idHash[value] = id = idCounts[groupId]++;\n    }\n\n    return id;\n}\n"],"names":[],"mappings":";;;;AAAA,MAAM,QAAA,GAAA,aAAA,GAA0C,MAAA,CAAA,MAAA,CAAO,IAAI,CAAA,CAAA;AAC3D,MAAM,MAAA,GAAA,aAAA,GAAwC,MAAA,CAAA,MAAA,CAAO,IAAI,CAAA,CAAA;AAEzC,SAAA,kBAAA,CAAmB,KAAA,EAAe,OAClD,EAAA;IACQ,IAAA,EAAA,GAAK,MAAA,CAAO,KAAK,CAAA,CAAA;IAErB,IAAI,OAAO,KACX,CAAA,EAAA;QACQ,IAAA,QAAA,CAAS,OAAO,CAAA,KAAM,KAC1B,CAAA,EAAA;YACI,QAAA,CAAS,OAAO,CAAI,GAAA,CAAA,CAAA;QAAA,CACxB;QAEA,MAAA,CAAO,KAAK,CAAA,GAAI,EAAK,GAAA,QAAA,CAAS,OAAO,CAAA,EAAA,CAAA;IAAA,CACzC;IAEO,OAAA,EAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 4571, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4577, "column": 0}, "map": {"version":3,"file":"getAttributeInfoFromFormat.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.ts"],"sourcesContent":["import type { VertexFormat } from '../const';\n\nconst attributeFormatData = {\n    uint8x2: { size: 2, stride: 2, normalised: false },\n    uint8x4: { size: 4, stride: 4, normalised: false },\n    sint8x2: { size: 2, stride: 2, normalised: false },\n    sint8x4: { size: 4, stride: 4, normalised: false },\n    unorm8x2: { size: 2, stride: 2, normalised: true },\n    unorm8x4: { size: 4, stride: 4, normalised: true },\n    snorm8x2: { size: 2, stride: 2, normalised: true },\n    snorm8x4: { size: 4, stride: 4, normalised: true },\n    uint16x2: { size: 2, stride: 4, normalised: false },\n    uint16x4: { size: 4, stride: 8, normalised: false },\n    sint16x2: { size: 2, stride: 4, normalised: false },\n    sint16x4: { size: 4, stride: 8, normalised: false },\n    unorm16x2: { size: 2, stride: 4, normalised: true },\n    unorm16x4: { size: 4, stride: 8, normalised: true },\n    snorm16x2: { size: 2, stride: 4, normalised: true },\n    snorm16x4: { size: 4, stride: 8, normalised: true },\n    float16x2: { size: 2, stride: 4, normalised: false },\n    float16x4: { size: 4, stride: 8, normalised: false },\n    float32: { size: 1, stride: 4, normalised: false },\n    float32x2: { size: 2, stride: 8, normalised: false },\n    float32x3: { size: 3, stride: 12, normalised: false },\n    float32x4: { size: 4, stride: 16, normalised: false },\n    uint32: { size: 1, stride: 4, normalised: false },\n    uint32x2: { size: 2, stride: 8, normalised: false },\n    uint32x3: { size: 3, stride: 12, normalised: false },\n    uint32x4: { size: 4, stride: 16, normalised: false },\n    sint32: { size: 1, stride: 4, normalised: false },\n    sint32x2: { size: 2, stride: 8, normalised: false },\n    sint32x3: { size: 3, stride: 12, normalised: false },\n    sint32x4: { size: 4, stride: 16, normalised: false },\n};\n\nexport function getAttributeInfoFromFormat(format: VertexFormat): { size: number; stride: number; normalised: boolean }\n{\n    return attributeFormatData[format] ?? attributeFormatData.float32;\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4738, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4744, "column": 0}, "map": {"version":3,"file":"extractAttributesFromGpuProgram.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/gpu/shader/utils/extractAttributesFromGpuProgram.ts"],"sourcesContent":["import { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat';\n\nimport type { ExtractedAttributeData } from '../../../gl/shader/program/extractAttributesFromGlProgram';\nimport type { VertexFormat } from '../../../shared/geometry/const';\nimport type { ProgramSource } from '../GpuProgram';\n\nconst WGSL_TO_VERTEX_TYPES: Record<string, VertexFormat> = {\n\n    f32:  'float32',\n    'vec2<f32>': 'float32x2',\n    'vec3<f32>': 'float32x3',\n    'vec4<f32>': 'float32x4',\n    vec2f: 'float32x2',\n    vec3f: 'float32x3',\n    vec4f: 'float32x4',\n\n    i32: 'sint32',\n    'vec2<i32>': 'sint32x2',\n    'vec3<i32>': 'sint32x3',\n    'vec4<i32>': 'sint32x4',\n\n    u32: 'uint32',\n    'vec2<u32>': 'uint32x2',\n    'vec3<u32>': 'uint32x3',\n    'vec4<u32>': 'uint32x4',\n\n    bool: 'uint32',\n    'vec2<bool>': 'uint32x2',\n    'vec3<bool>': 'uint32x3',\n    'vec4<bool>': 'uint32x4',\n};\n\nexport function extractAttributesFromGpuProgram(\n    { source, entryPoint }: ProgramSource\n): Record<string, ExtractedAttributeData>\n{\n    const results: Record<string, ExtractedAttributeData> = {};\n\n    // Step 1: Find the start of the mainVert function using string methods\n    const mainVertStart = source.indexOf(`fn ${entryPoint}`);\n\n    if (mainVertStart !== -1)\n    {\n        // Step 2: Find the index of the next '->' after the start of the mainVert function\n        const arrowFunctionStart = source.indexOf('->', mainVertStart);\n\n        if (arrowFunctionStart !== -1)\n        {\n            const functionArgsSubstring = source.substring(mainVertStart, arrowFunctionStart);\n\n            // Apply the inputs regex directly to the trimmed string\n            const inputsRegex = /@location\\((\\d+)\\)\\s+([a-zA-Z0-9_]+)\\s*:\\s*([a-zA-Z0-9_<>]+)(?:,|\\s|$)/g;\n            let match;\n\n            while ((match = inputsRegex.exec(functionArgsSubstring)) !== null)\n            {\n                const format = WGSL_TO_VERTEX_TYPES[match[3] as VertexFormat] ?? 'float32';\n\n                results[match[2]] = {\n                    location: parseInt(match[1], 10),\n                    format,\n                    stride: getAttributeInfoFromFormat(format).stride,\n                    offset: 0,\n                    instance: false,\n                    start: 0,\n                };\n            }\n        }\n    }\n\n    return results;\n}\n"],"names":[],"mappings":";;;;;;AAMA,MAAM,oBAAqD,GAAA;IAEvD,GAAM,EAAA,SAAA;IACN,WAAa,EAAA,WAAA;IACb,WAAa,EAAA,WAAA;IACb,WAAa,EAAA,WAAA;IACb,KAAO,EAAA,WAAA;IACP,KAAO,EAAA,WAAA;IACP,KAAO,EAAA,WAAA;IAEP,GAAK,EAAA,QAAA;IACL,WAAa,EAAA,UAAA;IACb,WAAa,EAAA,UAAA;IACb,WAAa,EAAA,UAAA;IAEb,GAAK,EAAA,QAAA;IACL,WAAa,EAAA,UAAA;IACb,WAAa,EAAA,UAAA;IACb,WAAa,EAAA,UAAA;IAEb,IAAM,EAAA,QAAA;IACN,YAAc,EAAA,UAAA;IACd,YAAc,EAAA,UAAA;IACd,YAAc,EAAA,UAAA;AAClB,CAAA,CAAA;AAEO,SAAS,+BACZ,CAAA,EAAE,MAAQ,EAAA,UAAA,EAEd,EAAA;IACI,MAAM,UAAkD,CAAA,CAAC,CAAA;IAGzD,MAAM,aAAgB,GAAA,MAAA,CAAO,OAAQ,CAAA,CAAA,GAAA,EAAM,UAAU,CAAE,CAAA,CAAA,CAAA;IAEvD,IAAI,kBAAkB,CACtB,CAAA,EAAA;QAEI,MAAM,kBAAqB,GAAA,MAAA,CAAO,OAAQ,CAAA,IAAA,EAAM,aAAa,CAAA,CAAA;QAE7D,IAAI,uBAAuB,CAC3B,CAAA,EAAA;YACI,MAAM,qBAAwB,GAAA,MAAA,CAAO,SAAU,CAAA,aAAA,EAAe,kBAAkB,CAAA,CAAA;YAGhF,MAAM,WAAc,GAAA,yEAAA,CAAA;YAChB,IAAA,KAAA,CAAA;YAEJ,MAAA,CAAQ,KAAQ,GAAA,WAAA,CAAY,IAAK,CAAA,qBAAqB,CAAA,MAAO,IAC7D,CAAA;gBACI,MAAM,MAAS,GAAA,oBAAA,CAAqB,KAAM,CAAA,CAAC,CAAiB,CAAK,IAAA,SAAA,CAAA;gBAEzD,OAAA,CAAA,KAAA,CAAM,CAAC,CAAC,CAAI,GAAA;oBAChB,QAAU,EAAA,QAAA,CAAS,KAAM,CAAA,CAAC,CAAA,EAAG,EAAE,CAAA;oBAC/B,MAAA;oBACA,MAAA,gOAAQ,6BAAA,AAA2B,EAAA,MAAM,CAAE,CAAA,MAAA;oBAC3C,MAAQ,EAAA,CAAA;oBACR,QAAU,EAAA,KAAA;oBACV,KAAO,EAAA,CAAA;gBAAA,CACX,CAAA;YAAA,CACJ;QAAA,CACJ;IAAA,CACJ;IAEO,OAAA,OAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 4797, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4803, "column": 0}, "map": {"version":3,"file":"GpuProgram.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/gpu/shader/GpuProgram.ts"],"sourcesContent":["import { createIdFromString } from '../../shared/utils/createIdFromString';\nimport { extractAttributesFromGpuProgram } from './utils/extractAttributesFromGpuProgram';\nimport { extractStructAndGroups } from './utils/extractStructAndGroups';\nimport { generateGpuLayoutGroups } from './utils/generateGpuLayoutGroups';\nimport { generateLayoutHash } from './utils/generateLayoutHash';\nimport { removeStructAndGroupDuplicates } from './utils/removeStructAndGroupDuplicates';\n\nimport type { ExtractedAttributeData } from '../../gl/shader/program/extractAttributesFromGlProgram';\nimport type { StructsAndGroups } from './utils/extractStructAndGroups';\n\n/**\n * a WebGPU descriptions of how the program is laid out\n * @see https://gpuweb.github.io/gpuweb/#gpupipelinelayout\n * @memberof rendering\n */\nexport type ProgramPipelineLayoutDescription = GPUBindGroupLayoutEntry[][];\n/**\n * a map the maps names of uniforms to group indexes\n * @memberof rendering\n */\nexport type ProgramLayout = Record<string, number>[];\n\n/**\n * the program source\n * @memberof rendering\n */\nexport interface ProgramSource\n{\n    /** The wgsl source code of the shader. */\n    source: string;\n    /** The main function to run in this shader */\n    entryPoint?: string;\n}\n\n/**\n * The options for the gpu program\n * @memberof rendering\n */\nexport interface GpuProgramOptions\n{\n    /**\n     * the name of the program, this is added to the label of the GPU Program created\n     * under the hood. Makes it much easier to debug!\n     */\n    name?: string;\n    /** The fragment glsl shader source. */\n    fragment?: ProgramSource;\n    /** The vertex glsl shader source. */\n    vertex?: ProgramSource;\n    /** The layout of the program. If not provided, it will be generated from the shader sources. */\n    layout?: ProgramLayout;\n    /** The gpu layout of the program. If not provided, it will be generated from the shader sources. */\n    gpuLayout?: ProgramPipelineLayoutDescription;\n}\n\nconst programCache: Record<string, GpuProgram> = Object.create(null);\n\n/**\n * A wrapper for a WebGPU Program, specifically designed for the WebGPU renderer.\n * This class facilitates the creation and management of shader code that integrates with the WebGPU pipeline.\n *\n * To leverage the full capabilities of this class, familiarity with WGSL shaders is recommended.\n * @see https://gpuweb.github.io/gpuweb/#index\n * @example\n *\n * // Create a new program\n * const program = new GpuProgram({\n *   vertex: {\n *    source: '...',\n *    entryPoint: 'main',\n *   },\n *   fragment:{\n *    source: '...',\n *    entryPoint: 'main',\n *   },\n * });\n *\n *\n * Note: Both fragment and vertex shader sources can coexist within a single WGSL source file\n * this can make things a bit simpler.\n *\n * For optimal usage and best performance, it help to reuse programs whenever possible.\n * The {@link GpuProgram.from} helper function is designed for this purpose, utilizing an\n * internal cache to efficiently manage and retrieve program instances.\n * By leveraging this function, you can significantly reduce overhead and enhance the performance of your rendering pipeline.\n *\n * An important distinction between WebGL and WebGPU regarding program data retrieval:\n * While WebGL allows extraction of program information directly from its compiled state,\n * WebGPU does not offer such a capability. Therefore, in the context of WebGPU, we're required\n * to manually extract the program layout information from the source code itself.\n * @memberof rendering\n */\nexport class GpuProgram\n{\n    /** The fragment glsl shader source. */\n    public readonly fragment?: ProgramSource;\n    /** The vertex glsl shader source */\n    public readonly vertex?: ProgramSource;\n\n    /**\n     * Mapping of uniform names to group indexes for organizing shader program uniforms.\n     * Automatically generated from shader sources if not provided.\n     * @example\n     * // Assuming a shader with two uniforms, `u_time` and `u_resolution`, grouped respectively:\n     * [\n     *   { \"u_time\": 0 },\n     *   { \"u_resolution\": 1 }\n     * ]\n     */\n    public readonly layout: ProgramLayout;\n\n    /**\n     * Configuration for the WebGPU bind group layouts, detailing resource organization for the shader.\n     * Generated from shader sources if not explicitly provided.\n     * @example\n     * // Assuming a shader program that requires two bind groups:\n     * [\n     *   // First bind group layout entries\n     *   [{ binding: 0, visibility: GPUShaderStage.VERTEX, type: \"uniform-buffer\" }],\n     *   // Second bind group layout entries\n     *   [{ binding: 1, visibility: GPUShaderStage.FRAGMENT, type: \"sampler\" },\n     *    { binding: 2, visibility: GPUShaderStage.FRAGMENT, type: \"sampled-texture\" }]\n     * ]\n     */\n    public readonly gpuLayout: ProgramPipelineLayoutDescription;\n\n    /**\n     * @internal\n     * @ignore\n     */\n    public _layoutKey = 0;\n\n    /**\n     * @internal\n     * @ignore\n     */\n    public _attributeLocationsKey = 0;\n\n    /** the structs and groups extracted from the shader sources */\n    public readonly structsAndGroups: StructsAndGroups;\n    /**\n     * the name of the program, this is added to the label of the GPU Program created under the hood.\n     * Makes it much easier to debug!\n     */\n    public readonly name: string;\n    private _attributeData: Record<string, ExtractedAttributeData>;\n\n    /** if true, the program will automatically assign global uniforms to group[0] */\n    public autoAssignGlobalUniforms: boolean;\n    /** if true, the program will automatically assign local uniforms to group[1] */\n    public autoAssignLocalUniforms: boolean;\n\n    /**\n     * Create a new GpuProgram\n     * @param options - The options for the gpu program\n     */\n    constructor(options: GpuProgramOptions)\n    {\n        const { fragment, vertex, layout, gpuLayout, name } = options;\n\n        this.name = name;\n\n        this.fragment = fragment;\n        this.vertex = vertex;\n\n        // TODO this should be cached - or dealt with at a system level.\n        if (fragment.source === vertex.source)\n        {\n            const structsAndGroups = extractStructAndGroups(fragment.source);\n\n            this.structsAndGroups = structsAndGroups;\n        }\n        else\n        {\n            const vertexStructsAndGroups = extractStructAndGroups(vertex.source);\n            const fragmentStructsAndGroups = extractStructAndGroups(fragment.source);\n\n            this.structsAndGroups = removeStructAndGroupDuplicates(vertexStructsAndGroups, fragmentStructsAndGroups);\n        }\n\n        // todo layout\n        this.layout = layout ?? generateLayoutHash(this.structsAndGroups);\n\n        // struct properties!\n\n        this.gpuLayout = gpuLayout ?? generateGpuLayoutGroups(this.structsAndGroups);\n\n        this.autoAssignGlobalUniforms = !!(this.layout[0]?.globalUniforms !== undefined);\n        this.autoAssignLocalUniforms = !!(this.layout[1]?.localUniforms !== undefined);\n\n        this._generateProgramKey();\n    }\n\n    // TODO maker this pure\n    private _generateProgramKey()\n    {\n        const { vertex, fragment } = this;\n\n        const bigKey = vertex.source + fragment.source + vertex.entryPoint + fragment.entryPoint;\n\n        this._layoutKey = createIdFromString(bigKey, 'program');\n    }\n\n    get attributeData()\n    {\n        this._attributeData ??= extractAttributesFromGpuProgram(this.vertex);\n\n        return this._attributeData;\n    }\n    /** destroys the program */\n    public destroy(): void\n    {\n        (this.gpuLayout as null) = null;\n        (this.layout as null) = null;\n        (this.structsAndGroups as null) = null;\n        (this.fragment as null) = null;\n        (this.vertex as null) = null;\n    }\n\n    /**\n     * Helper function that creates a program for a given source.\n     * It will check the program cache if the program has already been created.\n     * If it has that one will be returned, if not a new one will be created and cached.\n     * @param options - The options for the program.\n     * @returns A program using the same source\n     */\n    public static from(options: GpuProgramOptions): GpuProgram\n    {\n        // eslint-disable-next-line max-len\n        const key = `${options.vertex.source}:${options.fragment.source}:${options.fragment.entryPoint}:${options.vertex.entryPoint}`;\n\n        if (!programCache[key])\n        {\n            programCache[key] = new GpuProgram(options);\n        }\n\n        return programCache[key];\n    }\n}\n\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4884, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4890, "column": 0}, "map": {"version":3,"file":"stripVersion.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/gl/shader/program/preprocessors/stripVersion.ts"],"sourcesContent":["export function stripVersion(src: string, isES300: boolean): string\n{\n    if (!isES300) return src;\n\n    return src.replace('#version 300 es', '');\n}\n"],"names":[],"mappings":";;;;AAAgB,SAAA,YAAA,CAAa,GAAA,EAAa,OAC1C,EAAA;IACI,IAAI,CAAC,OAAA,EAAgB,OAAA,GAAA,CAAA;IAEd,OAAA,GAAA,CAAI,OAAQ,CAAA,iBAAA,EAAmB,EAAE,CAAA,CAAA;AAC5C","ignoreList":[0]}},
    {"offset": {"line": 4900, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4906, "column": 0}, "map": {"version":3,"file":"ensurePrecision.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/gl/shader/program/preprocessors/ensurePrecision.ts"],"sourcesContent":["import type { PRECISION } from '../../const';\n\ninterface EnsurePrecisionOptions\n{\n    requestedVertexPrecision: PRECISION;\n    requestedFragmentPrecision: PRECISION;\n    maxSupportedVertexPrecision: PRECISION;\n    maxSupportedFragmentPrecision: PRECISION;\n}\n\n/**\n * Sets the float precision on the shader, ensuring the device supports the request precision.\n * If the precision is already present, it just ensures that the device is able to handle it.\n * @param src\n * @param options\n * @param options.requestedVertexPrecision\n * @param options.requestedFragmentPrecision\n * @param options.maxSupportedVertexPrecision\n * @param options.maxSupportedFragmentPrecision\n * @param isFragment\n * @private\n */\nexport function ensurePrecision(\n    src: string,\n    options: EnsurePrecisionOptions,\n    isFragment: boolean,\n): string\n{\n    const maxSupportedPrecision = isFragment ? options.maxSupportedFragmentPrecision : options.maxSupportedVertexPrecision;\n\n    if (src.substring(0, 9) !== 'precision')\n    {\n        // no precision supplied, so PixiJS will add the requested level.\n        let precision = isFragment ? options.requestedFragmentPrecision : options.requestedVertexPrecision;\n\n        // If highp is requested but not supported, downgrade precision to a level all devices support.\n        if (precision === 'highp' && maxSupportedPrecision !== 'highp')\n        {\n            precision = 'mediump';\n        }\n\n        return `precision ${precision} float;\\n${src}`;\n    }\n    else if (maxSupportedPrecision !== 'highp' && src.substring(0, 15) === 'precision highp')\n    {\n        // precision was supplied, but at a level this device does not support, so downgrading to mediump.\n        return src.replace('precision highp', 'precision mediump');\n    }\n\n    return src;\n}\n"],"names":[],"mappings":";;;;AAsBgB,SAAA,eAAA,CACZ,GACA,EAAA,OAAA,EACA,UAEJ,EAAA;IACI,MAAM,qBAAwB,GAAA,UAAA,GAAa,OAAQ,CAAA,6BAAA,GAAgC,OAAQ,CAAA,2BAAA,CAAA;IAE3F,IAAI,GAAI,CAAA,SAAA,CAAU,CAAG,EAAA,CAAC,MAAM,WAC5B,EAAA;QAEI,IAAI,SAAY,GAAA,UAAA,GAAa,OAAQ,CAAA,0BAAA,GAA6B,OAAQ,CAAA,wBAAA,CAAA;QAGtE,IAAA,SAAA,KAAc,OAAW,IAAA,qBAAA,KAA0B,OACvD,EAAA;YACgB,SAAA,GAAA,SAAA,CAAA;QAAA,CAChB;QAEA,OAAO,CAAA,UAAA,EAAa,SAAS,CAAA;AAAA,EAAY,GAAG,CAAA,CAAA,CAAA;IAAA,CAChD,MAAA,IACS,0BAA0B,OAAW,IAAA,GAAA,CAAI,SAAA,CAAU,CAAG,EAAA,EAAE,MAAM,iBACvE,EAAA;QAEW,OAAA,GAAA,CAAI,OAAQ,CAAA,iBAAA,EAAmB,mBAAmB,CAAA,CAAA;IAAA,CAC7D;IAEO,OAAA,GAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 4926, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4932, "column": 0}, "map": {"version":3,"file":"addProgramDefines.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/gl/shader/program/preprocessors/addProgramDefines.ts"],"sourcesContent":["export function addProgramDefines(src: string, isES300: boolean, isFragment?: boolean)\n{\n    if (isES300) return src;\n\n    if (isFragment)\n    {\n        src = src.replace('out vec4 finalColor;', '');\n\n        return `\n        \n        #ifdef GL_ES // This checks if it is WebGL1\n        #define in varying\n        #define finalColor gl_FragColor\n        #define texture texture2D\n        #endif\n        ${src}\n        `;\n    }\n\n    return `\n        \n        #ifdef GL_ES // This checks if it is WebGL1\n        #define in attribute\n        #define out varying\n        #endif\n        ${src}\n        `;\n}\n"],"names":[],"mappings":";;;;AAAgB,SAAA,iBAAA,CAAkB,GAAa,EAAA,OAAA,EAAkB,UACjE,EAAA;IACQ,IAAA,OAAA,EAAgB,OAAA,GAAA,CAAA;IAEpB,IAAI,UACJ,EAAA;QACU,GAAA,GAAA,GAAA,CAAI,OAAQ,CAAA,sBAAA,EAAwB,EAAE,CAAA,CAAA;QAErC,OAAA,CAAA;;;;;;;QAAA,EAOL,GAAG,CAAA;QAAA,CAAA,CAAA;IAAA,CAET;IAEO,OAAA,CAAA;;;;;;QAAA,EAMD,GAAG,CAAA;QAAA,CAAA,CAAA;AAEb","ignoreList":[0]}},
    {"offset": {"line": 4961, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4967, "column": 0}, "map": {"version":3,"file":"setProgramName.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/gl/shader/program/preprocessors/setProgramName.ts"],"sourcesContent":["const fragmentNameCache: { [key: string]: number } = {};\nconst VertexNameCache: { [key: string]: number } = {};\n\nexport function setProgramName(src: string, { name = `pixi-program` }: { name: string; }, isFragment = true)\n{\n    name = name.replace(/\\s+/g, '-');\n\n    name += isFragment ? '-fragment' : '-vertex';\n\n    const nameCache = isFragment ? fragmentNameCache : VertexNameCache;\n\n    if (nameCache[name])\n    {\n        nameCache[name]++;\n        name += `-${nameCache[name]}`;\n    }\n    else\n    {\n        nameCache[name] = 1;\n    }\n\n    // if it already contains the define return\n    if (src.indexOf('#define SHADER_NAME') !== -1) return src;\n\n    const shaderName = `#define SHADER_NAME ${name}`;\n\n    return `${shaderName}\\n${src}`;\n}\n"],"names":[],"mappings":";;;;AAAA,MAAM,oBAA+C,CAAA,CAAC,CAAA;AACtD,MAAM,kBAA6C,CAAA,CAAC,CAAA;AAE7C,SAAS,eAAe,GAAa,EAAA,EAAE,OAAO,CAAe,YAAA,CAAA,EAAA,EAAsB,aAAa,IACvG,EAAA;IACW,IAAA,GAAA,IAAA,CAAK,OAAQ,CAAA,MAAA,EAAQ,GAAG,CAAA,CAAA;IAE/B,IAAA,IAAQ,aAAa,WAAc,GAAA,SAAA,CAAA;IAE7B,MAAA,SAAA,GAAY,aAAa,iBAAoB,GAAA,eAAA,CAAA;IAE/C,IAAA,SAAA,CAAU,IAAI,CAClB,EAAA;QACI,SAAA,CAAU,IAAI,CAAA,EAAA,CAAA;QACN,IAAA,IAAA,CAAA,CAAA,EAAI,SAAU,CAAA,IAAI,CAAC,CAAA,CAAA,CAAA;IAAA,CAG/B,MAAA;QACI,SAAA,CAAU,IAAI,CAAI,GAAA,CAAA,CAAA;IAAA,CACtB;IAGI,IAAA,GAAA,CAAI,OAAQ,CAAA,qBAAqB,CAAM,KAAA,CAAA,CAAA,EAAW,OAAA,GAAA,CAAA;IAEhD,MAAA,UAAA,GAAa,CAAA,oBAAA,EAAuB,IAAI,CAAA,CAAA,CAAA;IAE9C,OAAO,GAAG,UAAU,CAAA;AAAA,EAAK,GAAG,CAAA,CAAA,CAAA;AAChC","ignoreList":[0]}},
    {"offset": {"line": 4990, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4996, "column": 0}, "map": {"version":3,"file":"insertVersion.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/gl/shader/program/preprocessors/insertVersion.ts"],"sourcesContent":["export function insertVersion(src: string, isES300: boolean): string\n{\n    if (!isES300) return src;\n\n    return `#version 300 es\\n${src}`;\n}\n"],"names":[],"mappings":";;;;AAAgB,SAAA,aAAA,CAAc,GAAA,EAAa,OAC3C,EAAA;IACI,IAAI,CAAC,OAAA,EAAgB,OAAA,GAAA,CAAA;IAEd,OAAA,CAAA;AAAA,EAAoB,GAAG,CAAA,CAAA,CAAA;AAClC","ignoreList":[0]}},
    {"offset": {"line": 5007, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5013, "column": 0}, "map": {"version":3,"file":"getTestContext.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/gl/shader/program/getTestContext.ts"],"sourcesContent":["import { DOMAdapter } from '../../../../../environment/adapter';\n\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\n\nlet context: GlRenderingContext;\n\n/**\n * returns a little WebGL context to use for program inspection.\n * @static\n * @private\n * @returns {WebGLRenderingContext} a gl context to test with\n */\nexport function getTestContext(): GlRenderingContext\n{\n    if (!context || context?.isContextLost())\n    {\n        const canvas = DOMAdapter.get().createCanvas();\n\n        context = canvas.getContext('webgl', {}) as GlRenderingContext;\n    }\n\n    return context;\n}\n"],"names":[],"mappings":";;;;;;AAIA,IAAI,OAAA,CAAA;AAQG,SAAS,cAChB,GAAA;IACI,IAAI,CAAC,OAAA,IAAW,OAAS,EAAA,aAAA,EACzB,EAAA;QACI,MAAM,MAAS,gKAAA,aAAA,CAAW,GAAI,EAAA,CAAE,YAAa,EAAA,CAAA;QAE7C,OAAA,GAAU,MAAO,CAAA,UAAA,CAAW,OAAS,EAAA,CAAA,CAAE,CAAA,CAAA;IAAA,CAC3C;IAEO,OAAA,OAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 5029, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5035, "column": 0}, "map": {"version":3,"file":"getMaxFragmentPrecision.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/gl/shader/program/getMaxFragmentPrecision.ts"],"sourcesContent":["import { getTestContext } from './getTestContext';\n\nimport type { PRECISION } from '../const';\n\nlet maxFragmentPrecision: PRECISION;\n\nexport function getMaxFragmentPrecision(): PRECISION\n{\n    if (!maxFragmentPrecision)\n    {\n        maxFragmentPrecision = 'mediump';\n        const gl = getTestContext();\n\n        if (gl)\n        {\n            if (gl.getShaderPrecisionFormat)\n            {\n                const shaderFragment = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);\n\n                maxFragmentPrecision = shaderFragment.precision ? 'highp' : 'mediump';\n            }\n        }\n    }\n\n    return maxFragmentPrecision;\n}\n"],"names":[],"mappings":";;;;;;AAIA,IAAI,oBAAA,CAAA;AAEG,SAAS,uBAChB,GAAA;IACI,IAAI,CAAC,oBACL,EAAA;QAC2B,oBAAA,GAAA,SAAA,CAAA;QACvB,MAAM,mNAAK,iBAAA,AAAe,EAAA,CAAA;QAE1B,IAAI,EACJ,EAAA;YACI,IAAI,GAAG,wBACP,EAAA;gBACI,MAAM,iBAAiB,EAAG,CAAA,wBAAA,CAAyB,EAAG,CAAA,eAAA,EAAiB,GAAG,UAAU,CAAA,CAAA;gBAE7D,oBAAA,GAAA,cAAA,CAAe,SAAA,GAAY,OAAU,GAAA,SAAA,CAAA;YAAA,CAChE;QAAA,CACJ;IAAA,CACJ;IAEO,OAAA,oBAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 5057, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5063, "column": 0}, "map": {"version":3,"file":"GlProgram.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/gl/shader/GlProgram.ts"],"sourcesContent":["import { createIdFromString } from '../../shared/utils/createIdFromString';\nimport { getMaxFragmentPrecision } from './program/getMaxFragmentPrecision';\nimport { addProgramDefines } from './program/preprocessors/addProgramDefines';\nimport { ensurePrecision } from './program/preprocessors/ensurePrecision';\nimport { insertVersion } from './program/preprocessors/insertVersion';\nimport { setProgramName } from './program/preprocessors/setProgramName';\nimport { stripVersion } from './program/preprocessors/stripVersion';\n\nimport type { TypedArray } from '../../shared/buffer/Buffer';\nimport type { ExtractedAttributeData } from './program/extractAttributesFromGlProgram';\n\nexport interface GlAttributeData\n{\n    type: string;\n    size: number;\n    location: number;\n    name: string;\n}\n\nexport interface GlUniformData\n{\n    name: string;\n    index: number;\n    type: string;\n    size: number;\n    isArray: boolean;\n    value: any;\n}\n\nexport interface GlUniformBlockData\n{\n    index: number;\n    name: string;\n    size: number;\n    value?: TypedArray;\n}\n\n/**\n * The options for the gl program\n * @memberof rendering\n */\nexport interface GlProgramOptions\n{\n    /** The fragment glsl shader source. */\n    fragment: string;\n    /** The vertex glsl shader source. */\n    vertex: string;\n    /** the name of the program, defaults to 'pixi-program' */\n    name?: string;\n    /** the preferred vertex precision for the shader, this may not be used if the device does not support it  */\n    preferredVertexPrecision?: string;\n    /** the preferred fragment precision for the shader, this may not be used if the device does not support it  */\n    preferredFragmentPrecision?: string;\n\n    transformFeedbackVaryings?: {names: string[], bufferMode: 'separate' | 'interleaved'};\n}\n\nconst processes: Record<string, ((source: string, options: any, isFragment?: boolean) => string)> = {\n    // strips any version headers..\n    stripVersion,\n    // adds precision string if not already present\n    ensurePrecision,\n    // add some defines if WebGL1 to make it more compatible with WebGL2 shaders\n    addProgramDefines,\n    // add the program name to the shader\n    setProgramName,\n    // add the version string to the shader header\n    insertVersion,\n};\n\nconst programCache: Record<string, GlProgram> = Object.create(null);\n\n/**\n * A wrapper for a WebGL Program. You can create one and then pass it to a shader.\n * This will manage the WebGL program that is compiled and uploaded to the GPU.\n *\n * To get the most out of this class, you should be familiar with glsl shaders and how they work.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram\n * @example\n *\n * // Create a new program\n * const program = new GlProgram({\n *   vertex: '...',\n *   fragment: '...',\n * });\n *\n *\n * There are a few key things that pixi shader will do for you automatically:\n * <br>\n * - If no precision is provided in the shader, it will be injected into the program source for you.\n * This precision will be taken form the options provided, if none is provided,\n * then the program will default to the defaultOptions.\n * <br>\n * - It will inject the program name into the shader source if none is provided.\n * <br>\n *  - It will set the program version to 300 es.\n *\n * For optimal usage and best performance, its best to reuse programs as much as possible.\n * You should use the {@link GlProgram.from} helper function to create programs.\n * @class\n * @memberof rendering\n */\nexport class GlProgram\n{\n    /** The default options used by the program. */\n    public static defaultOptions: Partial<GlProgramOptions> = {\n        preferredVertexPrecision: 'highp',\n        preferredFragmentPrecision: 'mediump',\n    };\n\n    /** the fragment glsl shader source. */\n    public readonly fragment?: string;\n    /** the vertex glsl shader source */\n    public readonly vertex?: string;\n    /**\n     * attribute data extracted from the program once created this happens when the program is used for the first time\n     * @internal\n     * @ignore\n     */\n    public _attributeData: Record<string, ExtractedAttributeData>;\n    /**\n     * uniform data extracted from the program once created this happens when the program is used for the first time\n     * @internal\n     * @ignore\n     */\n    public _uniformData: Record<string, GlUniformData>;\n    /**\n     * uniform data extracted from the program once created this happens when the program is used for the first time\n     * @internal\n     * @ignore\n     */\n    public _uniformBlockData: Record<string, GlUniformBlockData>;\n    /** details on how to use this program with transform feedback */\n    public transformFeedbackVaryings?: {names: string[], bufferMode: 'separate' | 'interleaved'};\n    /**\n     * the key that identifies the program via its source vertex + fragment\n     * @internal\n     * @ignore\n     */\n    public readonly _key: number;\n\n    /**\n     * Creates a shiny new GlProgram. Used by WebGL renderer.\n     * @param options - The options for the program.\n     */\n    constructor(options: GlProgramOptions)\n    {\n        options = { ...GlProgram.defaultOptions, ...options };\n\n        // only need to check one as they both need to be the same or\n        // errors ensue!\n        const isES300 = options.fragment.indexOf('#version 300 es') !== -1;\n\n        const preprocessorOptions = {\n            stripVersion: isES300,\n            ensurePrecision: {\n                requestedFragmentPrecision: options.preferredFragmentPrecision,\n                requestedVertexPrecision: options.preferredVertexPrecision,\n                maxSupportedVertexPrecision: 'highp',\n                maxSupportedFragmentPrecision: getMaxFragmentPrecision(),\n            },\n            setProgramName: {\n                name: options.name,\n            },\n            addProgramDefines: isES300,\n            insertVersion: isES300\n        };\n\n        let fragment = options.fragment;\n        let vertex = options.vertex;\n\n        Object.keys(processes).forEach((processKey) =>\n        {\n            const processOptions = preprocessorOptions[processKey as keyof typeof preprocessorOptions];\n\n            fragment = processes[processKey](fragment, processOptions, true);\n            vertex = processes[processKey](vertex, processOptions, false);\n        });\n\n        this.fragment = fragment;\n        this.vertex = vertex;\n\n        this.transformFeedbackVaryings = options.transformFeedbackVaryings;\n\n        this._key = createIdFromString(`${this.vertex}:${this.fragment}`, 'gl-program');\n    }\n\n    /** destroys the program */\n    public destroy(): void\n    {\n        (this.fragment as null) = null;\n        (this.vertex as null) = null;\n\n        this._attributeData = null;\n        this._uniformData = null;\n        this._uniformBlockData = null;\n\n        this.transformFeedbackVaryings = null;\n    }\n\n    /**\n     * Helper function that creates a program for a given source.\n     * It will check the program cache if the program has already been created.\n     * If it has that one will be returned, if not a new one will be created and cached.\n     * @param options - The options for the program.\n     * @returns A program using the same source\n     */\n    public static from(options: GlProgramOptions): GlProgram\n    {\n        const key = `${options.vertex}:${options.fragment}`;\n\n        if (!programCache[key])\n        {\n            programCache[key] = new GlProgram(options);\n        }\n\n        return programCache[key];\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5159, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5165, "column": 0}, "map": {"version":3,"file":"compileHighShaderToProgram.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/high-shader/compileHighShaderToProgram.ts"],"sourcesContent":["import { GlProgram } from '../renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../renderers/gpu/shader/GpuProgram';\nimport { compileHighShader, compileHighShaderGl } from './compiler/compileHighShader';\nimport { fragmentGlTemplate, fragmentGPUTemplate, vertexGlTemplate, vertexGPUTemplate } from './defaultProgramTemplate';\nimport { globalUniformsBit, globalUniformsBitGl } from './shader-bits/globalUniformsBit';\n\nimport type { HighShaderBit } from './compiler/types';\n\nexport function compileHighShaderGpuProgram({ bits, name }: {bits: HighShaderBit[], name: string}): GpuProgram\n{\n    const source = compileHighShader({\n        template: {\n            fragment: fragmentGPUTemplate,\n            vertex: vertexGPUTemplate,\n        },\n        bits: [\n            globalUniformsBit,\n            ...bits,\n        ]\n    });\n\n    return GpuProgram.from({\n        name,\n        vertex: {\n            source: source.vertex,\n            entryPoint: 'main',\n        },\n        fragment: {\n            source: source.fragment,\n            entryPoint: 'main',\n        },\n    });\n}\n\nexport function compileHighShaderGlProgram({ bits, name }: {bits: HighShaderBit[], name: string}): GlProgram\n{\n    return new GlProgram({\n        name,\n        ...compileHighShaderGl({\n            template: {\n                vertex: vertexGlTemplate,\n                fragment: fragmentGlTemplate,\n            },\n            bits: [\n                globalUniformsBitGl,\n                ...bits,\n            ]\n        })\n    });\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAQO,SAAS,2BAA4B,CAAA,EAAE,IAAM,EAAA,IAAA,EACpD,EAAA;IACI,MAAM,SAAS,2NAAA,AAAkB,EAAA;QAC7B,QAAU,EAAA;YACN,QAAU,8LAAA,sBAAA;YACV,MAAQ,8LAAA,oBAAA;QAAA,CACZ;QACA,IAAM,EAAA;qNACF,oBAAA;eACG,IAAA;SACP;IAAA,CACH,CAAA,CAAA;IAED,mMAAO,aAAA,CAAW,IAAK,CAAA;QACnB,IAAA;QACA,MAAQ,EAAA;YACJ,QAAQ,MAAO,CAAA,MAAA;YACf,UAAY,EAAA,MAAA;QAAA,CAChB;QACA,QAAU,EAAA;YACN,QAAQ,MAAO,CAAA,QAAA;YACf,UAAY,EAAA,MAAA;QAAA,CAChB;IAAA,CACH,CAAA,CAAA;AACL,CAAA;AAEO,SAAS,0BAA2B,CAAA,EAAE,IAAM,EAAA,IAAA,EACnD,EAAA;IACI,OAAO,8LAAI,YAAU,CAAA;QACjB,IAAA;QACA,GAAG,6NAAA,AAAoB,EAAA;YACnB,QAAU,EAAA;gBACN,MAAQ,8LAAA,mBAAA;gBACR,QAAU,8LAAA,qBAAA;YAAA,CACd;YACA,IAAM,EAAA;yNACF,sBAAA;mBACG,IAAA;aACP;QAAA,CACH,CAAA;IAAA,CACJ,CAAA,CAAA;AACL","ignoreList":[0]}},
    {"offset": {"line": 5220, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5226, "column": 0}, "map": {"version":3,"file":"colorBit.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/high-shader/shader-bits/colorBit.ts"],"sourcesContent":["export const colorBit = {\n    name: 'color-bit',\n    vertex: {\n        header: /* wgsl */`\n            @in aColor: vec4<f32>;\n        `,\n        main: /* wgsl */`\n            vColor *= vec4<f32>(aColor.rgb * aColor.a, aColor.a);\n        `\n    }\n};\n\nexport const colorBitGl = {\n    name: 'color-bit',\n    vertex: {\n        header: /* glsl */`\n            in vec4 aColor;\n        `,\n        main: /* glsl */`\n            vColor *= vec4(aColor.rgb * aColor.a, aColor.a);\n        `\n    }\n};\n"],"names":[],"mappings":";;;;;AAAO,MAAM,QAAW,GAAA;IACpB,IAAM,EAAA,WAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;QAAA,CAAA;QAGlB,IAAA,EAAA,QAAA,GAAgB,CAAA;;QAAA,CAAA;IAAA,CAGpB;AACJ,EAAA;AAEO,MAAM,UAAa,GAAA;IACtB,IAAM,EAAA,WAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;QAAA,CAAA;QAGlB,IAAA,EAAA,QAAA,GAAgB,CAAA;;QAAA,CAAA;IAAA,CAGpB;AACJ","ignoreList":[0]}},
    {"offset": {"line": 5255, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5261, "column": 0}, "map": {"version":3,"file":"generateTextureBatchBit.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/high-shader/shader-bits/generateTextureBatchBit.ts"],"sourcesContent":["import type { HighShaderBit } from '../compiler/types';\n\nconst textureBatchBitGpuCache: Record<number, HighShaderBit> = {};\n\n/**\n *\n * @param maxTextures - the max textures the shader can use.\n * @returns a shader bit that will allow the shader to sample multiple textures AND round pixels.\n */\nfunction generateBindingSrc(maxTextures: number): string\n{\n    const src = [];\n\n    if (maxTextures === 1)\n    {\n        src.push('@group(1) @binding(0) var textureSource1: texture_2d<f32>;');\n        src.push('@group(1) @binding(1) var textureSampler1: sampler;');\n    }\n    else\n    {\n        let bindingIndex = 0;\n\n        for (let i = 0; i < maxTextures; i++)\n        {\n            src.push(`@group(1) @binding(${bindingIndex++}) var textureSource${i + 1}: texture_2d<f32>;`);\n            src.push(`@group(1) @binding(${bindingIndex++}) var textureSampler${i + 1}: sampler;`);\n        }\n    }\n\n    return src.join('\\n');\n}\n\nfunction generateSampleSrc(maxTextures: number): string\n{\n    const src = [];\n\n    if (maxTextures === 1)\n    {\n        src.push('outColor = textureSampleGrad(textureSource1, textureSampler1, vUV, uvDx, uvDy);');\n    }\n    else\n    {\n        src.push('switch vTextureId {');\n\n        for (let i = 0; i < maxTextures; i++)\n        {\n            if (i === maxTextures - 1)\n            {\n                src.push(`  default:{`);\n            }\n            else\n            {\n                src.push(`  case ${i}:{`);\n            }\n            src.push(`      outColor = textureSampleGrad(textureSource${i + 1}, textureSampler${i + 1}, vUV, uvDx, uvDy);`);\n            src.push(`      break;}`);\n        }\n\n        src.push(`}`);\n    }\n\n    return src.join('\\n');\n}\n\nexport function generateTextureBatchBit(maxTextures: number): HighShaderBit\n{\n    if (!textureBatchBitGpuCache[maxTextures])\n    {\n        textureBatchBitGpuCache[maxTextures] = {\n            name: 'texture-batch-bit',\n            vertex: {\n                header: `\n                @in aTextureIdAndRound: vec2<u32>;\n                @out @interpolate(flat) vTextureId : u32;\n            `,\n                main: `\n                vTextureId = aTextureIdAndRound.y;\n            `,\n                end: `\n                if(aTextureIdAndRound.x == 1)\n                {\n                    vPosition = vec4<f32>(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n                }\n            `\n            },\n            fragment: {\n                header: `\n                @in @interpolate(flat) vTextureId: u32;\n\n                ${generateBindingSrc(maxTextures)}\n            `,\n                main: `\n                var uvDx = dpdx(vUV);\n                var uvDy = dpdy(vUV);\n\n                ${generateSampleSrc(maxTextures)}\n            `\n            }\n        };\n    }\n\n    return textureBatchBitGpuCache[maxTextures];\n}\n\nconst textureBatchBitGlCache: Record<number, HighShaderBit> = {};\n\n/**\n *\n * @param maxTextures - the max textures the shader can use.\n * @returns a shader bit that will allow the shader to sample multiple textures AND round pixels.\n */\nfunction generateSampleGlSrc(maxTextures: number): string\n{\n    const src = [];\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        if (i > 0)\n        {\n            src.push('else');\n        }\n\n        if (i < maxTextures - 1)\n        {\n            src.push(`if(vTextureId < ${i}.5)`);\n        }\n\n        src.push('{');\n        src.push(`\\toutColor = texture(uTextures[${i}], vUV);`);\n        src.push('}');\n    }\n\n    return src.join('\\n');\n}\n\nexport function generateTextureBatchBitGl(maxTextures: number): HighShaderBit\n{\n    if (!textureBatchBitGlCache[maxTextures])\n    {\n        textureBatchBitGlCache[maxTextures] = {\n            name: 'texture-batch-bit',\n            vertex: {\n                header: `\n                in vec2 aTextureIdAndRound;\n                out float vTextureId;\n\n            `,\n                main: `\n                vTextureId = aTextureIdAndRound.y;\n            `,\n                end: `\n                if(aTextureIdAndRound.x == 1.)\n                {\n                    gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n                }\n            `\n            },\n            fragment: {\n                header: `\n                in float vTextureId;\n\n                uniform sampler2D uTextures[${maxTextures}];\n\n            `,\n                main: `\n\n                ${generateSampleGlSrc(maxTextures)}\n            `\n            }\n        };\n    }\n\n    return textureBatchBitGlCache[maxTextures];\n}\n"],"names":[],"mappings":";;;;;AAEA,MAAM,0BAAyD,CAAA,CAAC,CAAA;AAOhE,SAAS,mBAAmB,WAC5B,EAAA;IACI,MAAM,MAAM,EAAC,CAAA;IAEb,IAAI,gBAAgB,CACpB,EAAA;QACI,GAAA,CAAI,IAAA,CAAK,4DAA4D,CAAA,CAAA;QACrE,GAAA,CAAI,IAAA,CAAK,qDAAqD,CAAA,CAAA;IAAA,CAGlE,MAAA;QACI,IAAI,YAAe,GAAA,CAAA,CAAA;QAEnB,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,WAAA,EAAa,CACjC,EAAA,CAAA;YACI,GAAA,CAAI,IAAA,CAAK,CAAsB,mBAAA,EAAA,YAAA,EAAc,CAAsB,mBAAA,EAAA,CAAA,GAAI,CAAC,CAAoB,kBAAA,CAAA,CAAA,CAAA;YAC5F,GAAA,CAAI,IAAA,CAAK,CAAsB,mBAAA,EAAA,YAAA,EAAc,CAAuB,oBAAA,EAAA,CAAA,GAAI,CAAC,CAAY,UAAA,CAAA,CAAA,CAAA;QAAA,CACzF;IAAA,CACJ;IAEO,OAAA,GAAA,CAAI,IAAA,CAAK,IAAI,CAAA,CAAA;AACxB,CAAA;AAEA,SAAS,kBAAkB,WAC3B,EAAA;IACI,MAAM,MAAM,EAAC,CAAA;IAEb,IAAI,gBAAgB,CACpB,EAAA;QACI,GAAA,CAAI,IAAA,CAAK,iFAAiF,CAAA,CAAA;IAAA,CAG9F,MAAA;QACI,GAAA,CAAI,IAAA,CAAK,qBAAqB,CAAA,CAAA;QAE9B,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,WAAA,EAAa,CACjC,EAAA,CAAA;YACQ,IAAA,CAAA,KAAM,cAAc,CACxB,EAAA;gBACI,GAAA,CAAI,IAAA,CAAK,CAAa,WAAA,CAAA,CAAA,CAAA;YAAA,CAG1B,MAAA;gBACQ,GAAA,CAAA,IAAA,CAAK,CAAU,OAAA,EAAA,CAAC,CAAI,EAAA,CAAA,CAAA,CAAA;YAAA,CAC5B;YACA,GAAA,CAAI,IAAA,CAAK,CAAmD,gDAAA,EAAA,CAAA,GAAI,CAAC,CAAmB,gBAAA,EAAA,CAAA,GAAI,CAAC,CAAqB,mBAAA,CAAA,CAAA,CAAA;YAC9G,GAAA,CAAI,IAAA,CAAK,CAAe,aAAA,CAAA,CAAA,CAAA;QAAA,CAC5B;QAEA,GAAA,CAAI,IAAA,CAAK,CAAG,CAAA,CAAA,CAAA,CAAA;IAAA,CAChB;IAEO,OAAA,GAAA,CAAI,IAAA,CAAK,IAAI,CAAA,CAAA;AACxB,CAAA;AAEO,SAAS,wBAAwB,WACxC,EAAA;IACQ,IAAA,CAAC,uBAAwB,CAAA,WAAW,CACxC,EAAA;QACI,uBAAA,CAAwB,WAAW,CAAI,GAAA;YACnC,IAAM,EAAA,mBAAA;YACN,MAAQ,EAAA;gBACJ,MAAQ,EAAA,CAAA;;;YAAA,CAAA;gBAIR,IAAM,EAAA,CAAA;;YAAA,CAAA;gBAGN,GAAK,EAAA,CAAA;;;;;YAAA,CAAA;YAAA,CAMT;YACA,QAAU,EAAA;gBACN,MAAQ,EAAA,CAAA;;;gBAGN,EAAA,kBAAA,CAAmB,WAAW,CAAC,CAAA;YAAA,CAAA;gBAEjC,IAAM,EAAA,CAAA;;;;gBAIJ,EAAA,iBAAA,CAAkB,WAAW,CAAC,CAAA;YAAA,CAAA;YAAA,CAEpC;QAAA,CACJ,CAAA;IAAA,CACJ;IAEA,OAAO,uBAAA,CAAwB,WAAW,CAAA,CAAA;AAC9C,CAAA;AAEA,MAAM,yBAAwD,CAAA,CAAC,CAAA;AAO/D,SAAS,oBAAoB,WAC7B,EAAA;IACI,MAAM,MAAM,EAAC,CAAA;IAEb,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,WAAA,EAAa,CACjC,EAAA,CAAA;QACI,IAAI,IAAI,CACR,EAAA;YACI,GAAA,CAAI,IAAA,CAAK,MAAM,CAAA,CAAA;QAAA,CACnB;QAEI,IAAA,CAAA,GAAI,cAAc,CACtB,EAAA;YACQ,GAAA,CAAA,IAAA,CAAK,CAAmB,gBAAA,EAAA,CAAC,CAAK,GAAA,CAAA,CAAA,CAAA;QAAA,CACtC;QAEA,GAAA,CAAI,IAAA,CAAK,GAAG,CAAA,CAAA;QACR,GAAA,CAAA,IAAA,CAAK,CAAkC,8BAAA,EAAA,CAAC,CAAU,QAAA,CAAA,CAAA,CAAA;QACtD,GAAA,CAAI,IAAA,CAAK,GAAG,CAAA,CAAA;IAAA,CAChB;IAEO,OAAA,GAAA,CAAI,IAAA,CAAK,IAAI,CAAA,CAAA;AACxB,CAAA;AAEO,SAAS,0BAA0B,WAC1C,EAAA;IACQ,IAAA,CAAC,sBAAuB,CAAA,WAAW,CACvC,EAAA;QACI,sBAAA,CAAuB,WAAW,CAAI,GAAA;YAClC,IAAM,EAAA,mBAAA;YACN,MAAQ,EAAA;gBACJ,MAAQ,EAAA,CAAA;;;;YAAA,CAAA;gBAKR,IAAM,EAAA,CAAA;;YAAA,CAAA;gBAGN,GAAK,EAAA,CAAA;;;;;YAAA,CAAA;YAAA,CAMT;YACA,QAAU,EAAA;gBACN,MAAQ,EAAA,CAAA;;;4CAAA,EAGsB,WAAW,CAAA;;YAAA,CAAA;gBAGzC,IAAM,EAAA,CAAA;;gBAEJ,EAAA,mBAAA,CAAoB,WAAW,CAAC,CAAA;YAAA,CAAA;YAAA,CAEtC;QAAA,CACJ,CAAA;IAAA,CACJ;IAEA,OAAO,sBAAA,CAAuB,WAAW,CAAA,CAAA;AAC7C","ignoreList":[0]}},
    {"offset": {"line": 5390, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5396, "column": 0}, "map": {"version":3,"file":"roundPixelsBit.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/high-shader/shader-bits/roundPixelsBit.ts"],"sourcesContent":["export const roundPixelsBit = {\n    name: 'round-pixels-bit',\n    vertex: {\n        header: /* wgsl */`\n            fn roundPixels(position: vec2<f32>, targetSize: vec2<f32>) -> vec2<f32> \n            {\n                return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\n            }\n        `\n    }\n};\n\nexport const roundPixelsBitGl = {\n    name: 'round-pixels-bit',\n    vertex: {\n        header: /* glsl */`   \n            vec2 roundPixels(vec2 position, vec2 targetSize)\n            {       \n                return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\n            }\n        `\n    }\n};\n\n"],"names":[],"mappings":";;;;;AAAO,MAAM,cAAiB,GAAA;IAC1B,IAAM,EAAA,kBAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;QAAA,CAAA;IAAA,CAMtB;AACJ,EAAA;AAEO,MAAM,gBAAmB,GAAA;IAC5B,IAAM,EAAA,kBAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;QAAA,CAAA;IAAA,CAMtB;AACJ","ignoreList":[0]}},
    {"offset": {"line": 5425, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5431, "column": 0}, "map": {"version":3,"file":"types.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/shared/shader/types.ts"],"sourcesContent":["// TODO add more types as required\nexport const UNIFORM_TYPES_VALUES = [\n    'f32',\n    'i32',\n    'vec2<f32>',\n    'vec3<f32>',\n    'vec4<f32>',\n    'mat2x2<f32>',\n    'mat3x3<f32>',\n    'mat4x4<f32>',\n    'mat3x2<f32>',\n    'mat4x2<f32>',\n    'mat2x3<f32>',\n    'mat4x3<f32>',\n    'mat2x4<f32>',\n    'mat3x4<f32>',\n    'vec2<i32>',\n    'vec3<i32>',\n    'vec4<i32>',\n] as const;\n\n/** useful for checking if a type is supported - a map of supported types with a true value. */\nexport const UNIFORM_TYPES_MAP = UNIFORM_TYPES_VALUES.reduce((acc, type) =>\n{\n    acc[type] = true;\n\n    return acc;\n}, {} as Record<UNIFORM_TYPES, boolean>);\n\nexport type UNIFORM_TYPES_SINGLE = typeof UNIFORM_TYPES_VALUES[number];\n\ntype OPTIONAL_SPACE = ' ' | '';\n\nexport type UNIFORM_TYPES_ARRAY = `array<${UNIFORM_TYPES_SINGLE},${OPTIONAL_SPACE}${number}>`;\n\nexport type UNIFORM_TYPES = UNIFORM_TYPES_SINGLE | UNIFORM_TYPES_ARRAY;\n\nexport interface UniformData\n{\n    /** the value of the uniform, this could be any object - a parser will figure out how to write it to the buffer */\n    value: unknown;\n    type: UNIFORM_TYPES;\n    /** the size of the variable (eg 2 for vec2, 3 for vec3, 4 for vec4) */\n    size?: number;\n    name?: string;\n}\n\nexport interface UboElement\n{\n    data: UniformData;\n    offset: number;\n    size: number;\n}\n\nexport interface UboLayout\n{\n    uboElements: UboElement[];\n    /** float32 size // TODO change to bytes */\n    size: number;\n}\n\nexport type UniformsSyncCallback = (...args: any[]) => void;\n"],"names":[],"mappings":";;;;;AACO,MAAM,oBAAuB,GAAA;IAChC,KAAA;IACA,KAAA;IACA,WAAA;IACA,WAAA;IACA,WAAA;IACA,aAAA;IACA,aAAA;IACA,aAAA;IACA,aAAA;IACA,aAAA;IACA,aAAA;IACA,aAAA;IACA,aAAA;IACA,aAAA;IACA,WAAA;IACA,WAAA;IACA,WAAA;CACJ,CAAA;AAGO,MAAM,iBAAoB,GAAA,oBAAA,CAAqB,MAAO,CAAA,CAAC,KAAK,IACnE,KAAA;IACI,GAAA,CAAI,IAAI,CAAI,GAAA,IAAA,CAAA;IAEL,OAAA,GAAA,CAAA;AACX,CAAA,EAAG,CAAA,CAAoC","ignoreList":[0]}},
    {"offset": {"line": 5461, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5467, "column": 0}, "map": {"version":3,"file":"getDefaultUniformValue.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/shared/shader/utils/getDefaultUniformValue.ts"],"sourcesContent":["/**\n * @method defaultValue\n * @param {string} type - Type of value\n * @param {number} size\n * @private\n */\nexport function getDefaultUniformValue(\n    type: string,\n    size: number\n): number | Float32Array | Int32Array | Uint32Array | boolean | boolean[]\n{\n    switch (type)\n    {\n        case 'f32':\n            return 0;\n\n        case 'vec2<f32>':\n            return new Float32Array(2 * size);\n\n        case 'vec3<f32>':\n            return new Float32Array(3 * size);\n\n        case 'vec4<f32>':\n            return new Float32Array(4 * size);\n        case 'mat2x2<f32>':\n            return new Float32Array([1, 0,\n                0, 1]);\n\n        case 'mat3x3<f32>':\n            return new Float32Array([1, 0, 0,\n                0, 1, 0,\n                0, 0, 1]);\n\n        case 'mat4x4<f32>':\n            return new Float32Array([1, 0, 0, 0,\n                0, 1, 0, 0,\n                0, 0, 1, 0,\n                0, 0, 0, 1]);\n    }\n\n    return null;\n}\n"],"names":[],"mappings":";;;;AAMgB,SAAA,sBAAA,CACZ,IAAA,EACA,IAEJ,EAAA;IACI,OAAQ,IACR;QACI,KAAK,KAAA;YACM,OAAA,CAAA,CAAA;QAEX,KAAK,WAAA;YACM,OAAA,IAAI,YAAa,CAAA,CAAA,GAAI,IAAI,CAAA,CAAA;QAEpC,KAAK,WAAA;YACM,OAAA,IAAI,YAAa,CAAA,CAAA,GAAI,IAAI,CAAA,CAAA;QAEpC,KAAK,WAAA;YACM,OAAA,IAAI,YAAa,CAAA,CAAA,GAAI,IAAI,CAAA,CAAA;QACpC,KAAK,aAAA;YACD,OAAO,IAAI,YAAa,CAAA;gBAAC,CAAA;gBAAG,CAAA;gBACxB,CAAA;gBAAG,CAAA;aAAE,CAAA,CAAA;QAEb,KAAK,aAAA;YACD,OAAO,IAAI,YAAa,CAAA;gBAAC,CAAA;gBAAG,CAAA;gBAAG,CAAA;gBAC3B,CAAA;gBAAG,CAAA;gBAAG,CAAA;gBACN,CAAA;gBAAG,CAAA;gBAAG,CAAA;aAAE,CAAA,CAAA;QAEhB,KAAK,aAAA;YACD,OAAO,IAAI,YAAa,CAAA;gBAAC,CAAA;gBAAG,CAAA;gBAAG,CAAA;gBAAG,CAAA;gBAC9B,CAAA;gBAAG,CAAA;gBAAG,CAAA;gBAAG,CAAA;gBACT,CAAA;gBAAG,CAAA;gBAAG,CAAA;gBAAG,CAAA;gBACT,CAAA;gBAAG,CAAA;gBAAG,CAAA;gBAAG,CAAA;aAAE,CAAA,CAAA;IAAA,CACvB;IAEO,OAAA,IAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 5524, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5530, "column": 0}, "map": {"version":3,"file":"UniformGroup.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/shared/shader/UniformGroup.ts"],"sourcesContent":["import { uid } from '../../../../utils/data/uid';\nimport { createIdFromString } from '../utils/createIdFromString';\nimport { UNIFORM_TYPES_MAP, UNIFORM_TYPES_VALUES, type UniformData } from './types';\nimport { getDefaultUniformValue } from './utils/getDefaultUniformValue';\n\nimport type { BindResource } from '../../gpu/shader/BindResource';\nimport type { Buffer } from '../buffer/Buffer';\n\ntype FLOPS<T = UniformData> = T extends { value: infer V } ? V : never;\n\n// TODO replace..T['value']\ntype ExtractUniformObject<T = Record<string, UniformData>> = {\n    [K in keyof T]: FLOPS<T[K]>;\n};\n\n/**\n * Uniform group options\n * @memberof rendering\n */\nexport type UniformGroupOptions = {\n    /**\n     * if true the UniformGroup is handled as an Uniform buffer object.\n     * This is the only way WebGPU can work with uniforms. WebGL2 can also use this.\n     * So don't set to true if you want to use WebGPU :D\n     */\n    ubo?: boolean;\n    /** if true, then you are responsible for when the data is uploaded to the GPU by calling `update()` */\n    isStatic?: boolean;\n};\n\n/**\n * Uniform group holds uniform map and some ID's for work\n *\n * `UniformGroup` has two modes:\n *\n * 1: Normal mode\n * Normal mode will upload the uniforms with individual function calls as required. This is the default mode\n * for WebGL rendering.\n *\n * 2: Uniform buffer mode\n * This mode will treat the uniforms as a uniform buffer. You can pass in either a buffer that you manually handle, or\n * or a generic object that PixiJS will automatically map to a buffer for you.\n * For maximum benefits, make Ubo UniformGroups static, and only update them each frame.\n * This is the only way uniforms can be used with WebGPU.\n *\n * Rules of UBOs:\n * - UBOs only work with WebGL2, so make sure you have a fallback!\n * - Only floats are supported (including vec[2,3,4], mat[2,3,4])\n * - Samplers cannot be used in ubo's (a GPU limitation)\n * - You must ensure that the object you pass in exactly matches in the shader ubo structure.\n * Otherwise, weirdness will ensue!\n * - The name of the ubo object added to the group must match exactly the name of the ubo in the shader.\n *\n * When declaring your uniform options, you ust parse in the value and the type of the uniform.\n * The types correspond to the WebGPU types {@link UNIFORM_TYPES}\n *\n Uniforms can be modified via the classes 'uniforms' property. It will contain all the uniforms declared in the constructor.\n *\n * ```glsl\n * // UBO in shader:\n * uniform myCoolData { // Declaring a UBO...\n *     mat4 uCoolMatrix;\n *     float uFloatyMcFloatFace;\n * };\n * ```\n *\n * ```js\n * // A new Uniform Buffer Object...\n * const myCoolData = new UniformGroup({\n *     uCoolMatrix: {value:new Matrix(), type: 'mat4<f32>'},\n *     uFloatyMcFloatFace: {value:23, type: 'f32'},\n * }}\n *\n * // modify the data\n * myCoolData.uniforms.uFloatyMcFloatFace = 42;\n * // Build a shader...\n * const shader = Shader.from(srcVert, srcFrag, {\n *     myCoolData // Name matches the UBO name in the shader. Will be processed accordingly.\n * })\n *\n *\n *  ```\n * @memberof rendering\n */\nexport class UniformGroup<UNIFORMS extends { [key: string]: UniformData } = any> implements BindResource\n{\n    /** The default options used by the uniform group. */\n    public static defaultOptions: UniformGroupOptions = {\n        /** if true the UniformGroup is handled as an Uniform buffer object. */\n        ubo: false,\n        /** if true, then you are responsible for when the data is uploaded to the GPU by calling `update()` */\n        isStatic: false,\n    };\n\n    /** used internally to know if a uniform group was used in the last render pass */\n    public _touched = 0;\n\n    /** a unique id for this uniform group used through the renderer */\n    public readonly uid: number = uid('uniform');\n    /** a resource type, used to identify how to handle it when its in a bind group / shader resource */\n    public _resourceType = 'uniformGroup';\n    /** the resource id used internally by the renderer to build bind group keys */\n    public _resourceId = uid('resource');\n    /** the structures of the uniform group */\n    public uniformStructures: UNIFORMS;\n    /** the uniforms as an easily accessible map of properties */\n    public uniforms: ExtractUniformObject<UNIFORMS>;\n    /** true if it should be used as a uniform buffer object */\n    public ubo: boolean;\n    /** an underlying buffer that will be uploaded to the GPU when using this UniformGroup */\n    public buffer?: Buffer;\n    /**\n     * if true, then you are responsible for when the data is uploaded to the GPU.\n     * otherwise, the data is reuploaded each frame.\n     */\n    public isStatic: boolean;\n    /** used ito identify if this is a uniform group */\n    public readonly isUniformGroup = true;\n    /**\n     * used to flag if this Uniform groups data is different from what it has stored in its buffer / on the GPU\n     * @internal\n     * @ignore\n     */\n    public _dirtyId = 0;\n    /**\n     * a signature string generated for internal use\n     * @internal\n     * @ignore\n     */\n    public readonly _signature: number;\n\n    // implementing the interface - UniformGroup are not destroyed\n    public readonly destroyed = false;\n\n    /**\n     * Create a new Uniform group\n     * @param uniformStructures - The structures of the uniform group\n     * @param options - The optional parameters of this uniform group\n     */\n    constructor(uniformStructures: UNIFORMS, options?: UniformGroupOptions)\n    {\n        options = { ...UniformGroup.defaultOptions, ...options };\n\n        this.uniformStructures = uniformStructures;\n\n        const uniforms = {} as ExtractUniformObject<UNIFORMS>;\n\n        for (const i in uniformStructures)\n        {\n            const uniformData = uniformStructures[i] as UniformData;\n\n            uniformData.name = i;\n            uniformData.size = uniformData.size ?? 1;\n\n            if (!UNIFORM_TYPES_MAP[uniformData.type])\n            {\n                // eslint-disable-next-line max-len\n                throw new Error(`Uniform type ${uniformData.type} is not supported. Supported uniform types are: ${UNIFORM_TYPES_VALUES.join(', ')}`);\n            }\n\n            uniformData.value ??= getDefaultUniformValue(uniformData.type, uniformData.size);\n\n            uniforms[i] = uniformData.value as ExtractUniformObject<UNIFORMS>[keyof UNIFORMS];\n        }\n\n        this.uniforms = uniforms;\n\n        this._dirtyId = 1;\n        this.ubo = options.ubo;\n        this.isStatic = options.isStatic;\n\n        this._signature = createIdFromString(Object.keys(uniforms).map(\n            (i) => `${i}-${(uniformStructures[i as keyof typeof uniformStructures] as UniformData).type}`\n        ).join('-'), 'uniform-group');\n    }\n\n    /** Call this if you want the uniform groups data to be uploaded to the GPU only useful if `isStatic` is true. */\n    public update(): void\n    {\n        this._dirtyId++;\n        // dispatch...\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AAoFO,MAAM,aAAA,GAAN,MAAM,aACb,CAAA;IAAA;;;;GAAA,GAsDI,WAAA,CAAY,iBAAA,EAA6B,OACzC,CAAA;QA7CA,gFAAA,GAAA,IAAA,CAAO,QAAW,GAAA,CAAA,CAAA;QAGlB,iEAAA,GAAgB,IAAA,CAAA,GAAA,kKAAc,MAAA,EAAI,SAAS,CAAA,CAAA;QAE3C,kGAAA,GAAA,IAAA,CAAO,aAAgB,GAAA,cAAA,CAAA;QAEvB,6EAAA,GAAO,IAAA,CAAA,WAAA,kKAAc,MAAA,EAAI,UAAU,CAAA,CAAA;QAenC,iDAAA,GAAA,IAAA,CAAgB,cAAiB,GAAA,IAAA,CAAA;QAMjC;;;;KAAA,GAAA,IAAA,CAAO,QAAW,GAAA,CAAA,CAAA;QASlB,8DAAA;QAAA,IAAA,CAAgB,SAAY,GAAA,KAAA,CAAA;QASxB,OAAA,GAAU;YAAE,GAAG,aAAa,CAAA,cAAA;YAAgB,GAAG,OAAQ;QAAA,CAAA,CAAA;QAEvD,IAAA,CAAK,iBAAoB,GAAA,iBAAA,CAAA;QAEzB,MAAM,WAAW,CAAA,CAAC,CAAA;QAElB,IAAA,MAAW,KAAK,iBAChB,CAAA;YACU,MAAA,WAAA,GAAc,iBAAA,CAAkB,CAAC,CAAA,CAAA;YAEvC,WAAA,CAAY,IAAO,GAAA,CAAA,CAAA;YACP,WAAA,CAAA,IAAA,GAAO,YAAY,IAAQ,IAAA,CAAA,CAAA;YAEvC,IAAI,2LAAC,oBAAA,CAAkB,WAAY,CAAA,IAAI,CACvC,EAAA;gBAEU,MAAA,IAAI,KAAM,CAAA,CAAA,aAAA,EAAgB,WAAY,CAAA,IAAI,CAAA,gDAAA,4LAAmD,uBAAqB,CAAA,IAAA,CAAK,IAAI,CAAC,CAAE,CAAA,CAAA,CAAA;YAAA,CACxI;YAEA,WAAA,CAAY,KAAA,IAAA,CAAZ,WAAY,CAAA,KAAA,2NAAU,yBAAA,EAAuB,WAAY,CAAA,IAAA,EAAM,YAAY,IAAI,CAAA,CAAA,CAAA;YAEtE,QAAA,CAAA,CAAC,CAAA,GAAI,WAAY,CAAA,KAAA,CAAA;QAAA,CAC9B;QAEA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;QAEhB,IAAA,CAAK,QAAW,GAAA,CAAA,CAAA;QAChB,IAAA,CAAK,GAAA,GAAM,OAAQ,CAAA,GAAA,CAAA;QACnB,IAAA,CAAK,QAAA,GAAW,OAAQ,CAAA,QAAA,CAAA;QAExB,IAAA,CAAK,UAAa,IAAA,8NAAA,EAAmB,MAAO,CAAA,IAAA,CAAK,QAAQ,CAAE,CAAA,GAAA,CACvD,CAAC,IAAM,CAAG,EAAA,CAAC,CAAA,CAAA,EAAK,iBAAkB,CAAA,CAAmC,CAAA,CAAkB,IAAI,CAAA,CAAA,EAC7F,IAAA,CAAK,GAAG,CAAA,EAAG,eAAe,CAAA,CAAA;IAAA,CAChC;IAAA,+GAAA,GAGO,MACP,GAAA;QACS,IAAA,CAAA,QAAA,EAAA,CAAA;IAAA,CAET;AACJ,CAAA,CAAA;AAAA,mDAAA,GAlGa,aAAA,CAGK,cAAsC,GAAA;IAAA,qEAAA,GAEhD,GAAK,EAAA,KAAA;IAAA,qGAAA,GAEL,QAAU,EAAA,KAAA;AACd,CAAA,CAAA;AARG,IAAM,YAAN,GAAA","ignoreList":[0]}},
    {"offset": {"line": 5593, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5599, "column": 0}, "map": {"version":3,"file":"getBatchSamplersUniformGroup.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/gl/shader/getBatchSamplersUniformGroup.ts"],"sourcesContent":["import { UniformGroup } from '../../shared/shader/UniformGroup';\n\nconst batchSamplersUniformGroupHash: Record<number, UniformGroup> = {};\n\n/**\n * Automatically generates a uniform group that holds the texture samplers for a shader.\n * This is used mainly by the shaders that batch textures!\n * @param maxTextures - the number of textures that this uniform group will contain.\n * @returns a uniform group that holds the texture samplers.\n */\nexport function getBatchSamplersUniformGroup(maxTextures: number)\n{\n    let batchSamplersUniformGroup = batchSamplersUniformGroupHash[maxTextures];\n\n    if (batchSamplersUniformGroup) return batchSamplersUniformGroup;\n\n    const sampleValues = new Int32Array(maxTextures);\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        sampleValues[i] = i;\n    }\n\n    batchSamplersUniformGroup = batchSamplersUniformGroupHash[maxTextures] = new UniformGroup({\n        uTextures: { value: sampleValues, type: `i32`, size: maxTextures }\n    }, { isStatic: true });\n\n    return batchSamplersUniformGroup;\n}\n"],"names":[],"mappings":";;;;;;AAEA,MAAM,gCAA8D,CAAA,CAAC,CAAA;AAQ9D,SAAS,6BAA6B,WAC7C,EAAA;IACQ,IAAA,yBAAA,GAA4B,6BAAA,CAA8B,WAAW,CAAA,CAAA;IAErE,IAAA,yBAAA,EAAkC,OAAA,yBAAA,CAAA;IAEhC,MAAA,YAAA,GAAe,IAAI,UAAA,CAAW,WAAW,CAAA,CAAA;IAE/C,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,WAAA,EAAa,CACjC,EAAA,CAAA;QACI,YAAA,CAAa,CAAC,CAAI,GAAA,CAAA,CAAA;IAAA,CACtB;IAEA,yBAAA,GAA4B,6BAA8B,CAAA,WAAW,CAAI,GAAA,qMAAI,eAAa,CAAA;QACtF,WAAW;YAAE,KAAA,EAAO;YAAc,IAAM,EAAA,CAAA,GAAA,CAAA;YAAO,MAAM,WAAY;QAAA,CAAA;IAAA,CAClE,EAAA;QAAE,QAAU,EAAA,IAAA;IAAA,CAAM,CAAA,CAAA;IAEd,OAAA,yBAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 5626, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5632, "column": 0}, "map": {"version":3,"file":"types.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/types.ts"],"sourcesContent":["import type { ICanvas } from '../../environment/canvas/ICanvas';\nimport type { WebGLOptions, WebGLPipes, WebGLRenderer } from './gl/WebGLRenderer';\nimport type { WebGPUOptions, WebGPUPipes, WebGPURenderer } from './gpu/WebGPURenderer';\n\n/** A generic renderer. */\n/**\n * @memberof rendering\n * @extends rendering.WebGLRenderer\n * @extends rendering.WebGPURenderer\n */\nexport type Renderer<T extends ICanvas = HTMLCanvasElement> = WebGLRenderer<T> | WebGPURenderer<T>;\nexport type RenderPipes = WebGLPipes | WebGPUPipes;\n/**\n * @extends rendering.WebGLOptions\n * @extends rendering.WebGPUOptions\n */\nexport interface RendererOptions extends WebGLOptions, WebGPUOptions {}\n\n/**\n * Ids for the different render types.\n * The idea is that you can use bitwise operations to filter whether or not you want to do something\n * in a certain render type.\n * Filters for example can be compatible for both webGL or WebGPU but not compatible with canvas.\n * So internally if it works with both we set filter.compatibleRenderers = RendererType.WEBGL | RendererType.WEBGPU\n * if it only works with webgl we set filter.compatibleRenderers = RendererType.WEBGL\n *\n */\nexport enum RendererType\n{\n    WEBGL = 0b01,\n    WEBGPU = 0b10,\n    BOTH = 0b11\n}\n\nexport type GpuPowerPreference = 'low-power' | 'high-performance';\n"],"names":["RendererType"],"mappings":";;;;AA2BY,IAAA,YAAA,GAAA,aAAA,GAAA,CAAA,CAAAA,aAAL,KAAA;IAEHA,aAAAA,CAAAA,aAAAA,CAAA,QAAA,GAAQ,CAAR,CAAA,GAAA,OAAA,CAAA;IACAA,aAAAA,CAAAA,aAAAA,CAAA,SAAA,GAAS,CAAT,CAAA,GAAA,QAAA,CAAA;IACAA,aAAAA,CAAAA,aAAAA,CAAA,OAAA,GAAO,CAAP,CAAA,GAAA,MAAA,CAAA;IAJQA,OAAAA,aAAAA,CAAAA;AAAA,CAAA,EAAA,YAAA,IAAA,CAAA,CAAA","ignoreList":[0]}},
    {"offset": {"line": 5644, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5650, "column": 0}, "map": {"version":3,"file":"BindGroup.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/gpu/shader/BindGroup.ts"],"sourcesContent":["import type { BindResource } from './BindResource';\n\n/**\n * A bind group is a collection of resources that are bound together for use by a shader.\n * They are essentially a wrapper for the WebGPU BindGroup class. But with the added bonus\n * that WebGL can also work with them.\n * @see https://gpuweb.github.io/gpuweb/#dictdef-gpubindgroupdescriptor\n * @example\n * // Create a bind group with a single texture and sampler\n * const bindGroup = new BindGroup({\n *    uTexture: texture.source,\n *    uTexture: texture.style,\n * });\n *\n * Bind groups resources must implement the {@link BindResource} interface.\n * The following resources are supported:\n * - {@link TextureSource}\n * - {@link TextureStyle}\n * - {@link Buffer}\n * - {@link BufferResource}\n * - {@link UniformGroup}\n *\n * The keys in the bind group must correspond to the names of the resources in the GPU program.\n *\n * This bind group class will also watch for changes in its resources ensuring that the changes\n * are reflected in the WebGPU BindGroup.\n * @memberof rendering\n */\nexport class BindGroup\n{\n    /** The resources that are bound together for use by a shader. */\n    public resources: Record<string, BindResource> = Object.create(null);\n    /**\n     * a key used internally to match it up to a WebGPU Bindgroup\n     * @internal\n     * @ignore\n     */\n    public _key: string;\n    private _dirty = true;\n\n    /**\n     * Create a new instance eof the Bind Group.\n     * @param resources - The resources that are bound together for use by a shader.\n     */\n    constructor(resources?: Record<string, BindResource>)\n    {\n        let index = 0;\n\n        for (const i in resources)\n        {\n            const resource: BindResource = resources[i];\n\n            this.setResource(resource, index++);\n        }\n\n        this._updateKey();\n    }\n\n    /**\n     * Updates the key if its flagged as dirty. This is used internally to\n     * match this bind group to a WebGPU BindGroup.\n     * @internal\n     * @ignore\n     */\n    public _updateKey(): void\n    {\n        if (!this._dirty) return;\n\n        this._dirty = false;\n\n        const keyParts = [];\n        let index = 0;\n\n        // TODO - lets use big ints instead of strings...\n        for (const i in this.resources)\n        {\n            // TODO make this consistent...\n            keyParts[index++] = this.resources[i]._resourceId;\n        }\n\n        this._key = keyParts.join('|');\n    }\n\n    /**\n     * Set a resource at a given index. this function will\n     * ensure that listeners will be removed from the current resource\n     * and added to the new resource.\n     * @param resource - The resource to set.\n     * @param index - The index to set the resource at.\n     */\n    public setResource(resource: BindResource, index: number): void\n    {\n        const currentResource = this.resources[index];\n\n        if (resource === currentResource) return;\n\n        if (currentResource)\n        {\n            resource.off?.('change', this.onResourceChange, this);\n        }\n\n        resource.on?.('change', this.onResourceChange, this);\n\n        this.resources[index] = resource;\n        this._dirty = true;\n    }\n\n    /**\n     * Returns the resource at the current specified index.\n     * @param index - The index of the resource to get.\n     * @returns - The resource at the specified index.\n     */\n    public getResource(index: number): BindResource\n    {\n        return this.resources[index];\n    }\n\n    /**\n     * Used internally to 'touch' each resource, to ensure that the GC\n     * knows that all resources in this bind group are still being used.\n     * @param tick - The current tick.\n     * @internal\n     * @ignore\n     */\n    public _touch(tick: number)\n    {\n        const resources = this.resources;\n\n        for (const i in resources)\n        {\n            resources[i]._touched = tick;\n        }\n    }\n\n    /** Destroys this bind group and removes all listeners. */\n    public destroy()\n    {\n        const resources = this.resources;\n\n        for (const i in resources)\n        {\n            const resource = resources[i];\n\n            resource.off?.('change', this.onResourceChange, this);\n        }\n\n        this.resources = null;\n    }\n\n    protected onResourceChange(resource: BindResource)\n    {\n        this._dirty = true;\n\n        // check if a resource has been destroyed, if it has then we need to destroy this bind group\n        // using this bind group with a destroyed resource will cause the renderer to explode :)\n        if (resource.destroyed)\n        {\n            // free up the resource\n            const resources = this.resources;\n\n            for (const i in resources)\n            {\n                if (resources[i] === resource)\n                {\n                    resources[i] = null;\n                }\n            }\n        }\n        else\n        {\n            this._updateKey();\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5742, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5748, "column": 0}, "map": {"version":3,"file":"Shader.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/shared/shader/Shader.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { GlProgram } from '../../gl/shader/GlProgram';\nimport { BindGroup } from '../../gpu/shader/BindGroup';\nimport { GpuProgram } from '../../gpu/shader/GpuProgram';\nimport { RendererType } from '../../types';\nimport { UniformGroup } from './UniformGroup';\n\nimport type { GlProgramOptions } from '../../gl/shader/GlProgram';\nimport type { BindResource } from '../../gpu/shader/BindResource';\nimport type { GpuProgramOptions } from '../../gpu/shader/GpuProgram';\n\n/**\n * A record of {@link BindGroup}'s used by the shader.\n *\n * `Record<number, BindGroup>`\n * @memberof rendering\n */\nexport type ShaderGroups = Record<number, BindGroup>;\n\ninterface ShaderBase\n{\n    /** The WebGL program used by the WebGL renderer. */\n    glProgram?: GlProgram\n    /** The WebGPU program used by the WebGPU renderer. */\n    gpuProgram?: GpuProgram\n    /**\n     * A number that uses two bits on whether the shader is compatible with the WebGL renderer and/or the WebGPU renderer.\n     * 0b00 - not compatible with either\n     * 0b01 - compatible with WebGL\n     * 0b10 - compatible with WebGPU\n     * This is automatically set based on if a {@link GlProgram} or {@link GpuProgram} is provided.\n     */\n    compatibleRenderers?: number\n}\n\nexport interface GlShaderWith extends ShaderBase\n{\n    /** The WebGL program used by the WebGL renderer. */\n    glProgram: GlProgram\n}\n\nexport interface GpuShaderWith extends ShaderBase\n{\n    /** The WebGPU program used by the WebGPU renderer. */\n    gpuProgram: GpuProgram\n}\n\nexport interface ShaderWithGroupsDescriptor\n{\n    /** A record of {@link BindGroup}'s used by the shader. */\n    groups: ShaderGroups;\n    /** an optional map of how to bind the groups. This is automatically generated by reading the WebGPU program */\n    groupMap?: Record<string, Record<string, any>>;\n}\n\ninterface ShaderWithResourcesDescriptor\n{\n    /**\n     * A key value of uniform resources used by the shader.\n     * Under the hood pixi will look at the provided shaders and figure out where\n     * the resources are mapped. Its up to you to make sure the resource key\n     * matches the uniform name in the webGPU program. WebGL is a little more forgiving!\n     */\n    resources?: Record<string, any>;\n}\n\ninterface GroupsData\n{\n    group: number\n    binding: number\n    name: string\n}\n\n/**\n * A descriptor for a shader\n * @memberof rendering\n */\nexport type ShaderWith = GlShaderWith | GpuShaderWith;\n\n/**\n * A descriptor for a shader with groups.\n * @memberof rendering\n */\nexport type ShaderWithGroups = ShaderWithGroupsDescriptor & ShaderWith;\nexport interface IShaderWithGroups extends ShaderWithGroupsDescriptor, ShaderBase {}\n\n/**\n * A descriptor for a shader with resources. This is an easier way to work with uniforms.\n * especially when you are not working with bind groups\n * @memberof rendering\n */\nexport type ShaderWithResources = ShaderWithResourcesDescriptor & ShaderWith;\nexport interface IShaderWithResources extends ShaderWithResourcesDescriptor, ShaderBase {}\n\nexport type ShaderDescriptor = ShaderWithGroups & ShaderWithResources;\n\ntype GlShaderFromWith = {\n    gpu?: GpuProgramOptions,\n    gl: GlProgramOptions\n};\ntype GpuShaderFromWith = {\n    gpu: GpuProgramOptions,\n    gl?: GlProgramOptions\n};\nexport type ShaderFromGroups = (GlShaderFromWith | GpuShaderFromWith) & Omit<ShaderWithGroups, 'glProgram' | 'gpuProgram'>;\nexport type ShaderFromResources = (GlShaderFromWith | GpuShaderFromWith)\n& Omit<ShaderWithResources, 'glProgram' | 'gpuProgram'>;\n\n/**\n * The Shader class is an integral part of the PixiJS graphics pipeline.\n * Central to rendering in PixiJS are two key elements: A [shader] and a [geometry].\n * The shader incorporates a {@link GlProgram} for WebGL or a {@link GpuProgram} for WebGPU,\n * instructing the respective technology on how to render the geometry.\n *\n * The primary goal of the Shader class is to offer a unified interface compatible with both WebGL and WebGPU.\n * When constructing a shader, you need to provide both a WebGL program and a WebGPU program due to the distinctions\n * between the two rendering engines. If only one is provided, the shader won't function with the omitted renderer.\n *\n * Both WebGL and WebGPU utilize the same resource object when passed into the shader.\n * Post-creation, the shader's interface remains consistent across both WebGL and WebGPU.\n * The sole distinction lies in whether a glProgram or a gpuProgram is employed.\n *\n * Modifying shader uniforms, which can encompass:\n *  - TextureSampler {@link TextureStyle}\n *  - TextureSource {@link TextureSource}\n *  - UniformsGroups {@link UniformGroup}\n * @example\n *\n * const shader = new Shader({\n *     glProgram: glProgram,\n *     gpuProgram: gpuProgram,\n *     resources: {\n *         uTexture: texture.source,\n *         uSampler: texture.sampler,\n *         uColor: [1, 0, 0, 1],\n *     },\n * });\n *\n * // update the uniforms\n * shader.resources.uColor[1] = 1;\n * shader.resources.uTexture = texture2.source;\n * @class\n * @memberof rendering\n */\nexport class Shader extends EventEmitter<{'destroy': Shader}>\n{\n    /** An instance of the GPU program used by the WebGPU renderer */\n    public gpuProgram: GpuProgram;\n    /** An instance of the GL program used by the WebGL renderer */\n    public glProgram: GlProgram;\n    /**\n     * A number that uses two bits on whether the shader is compatible with the WebGL renderer and/or the WebGPU renderer.\n     * 0b00 - not compatible with either\n     * 0b01 - compatible with WebGL\n     * 0b10 - compatible with WebGPU\n     * This is automatically set based on if a {@link GlProgram} or {@link GpuProgram} is provided.\n     */\n    public readonly compatibleRenderers: number;\n    /** */\n    public groups: Record<number, BindGroup>;\n    /** A record of the resources used by the shader. */\n    public resources: Record<string, any>;\n    /**\n     * A record of the uniform groups and resources used by the shader.\n     * This is used by WebGL renderer to sync uniform data.\n     * @internal\n     * @ignore\n     */\n    public _uniformBindMap: Record<number, Record<number, string>> = Object.create(null);\n    private readonly _ownedBindGroups: BindGroup[] = [];\n\n    /**\n     * Fired after rendering finishes.\n     * @event rendering.Shader#destroy\n     */\n\n    /**\n     * There are two ways to create a shader.\n     * one is to pass in resources which is a record of uniform groups and resources.\n     * another is to pass in groups which is a record of {@link BindGroup}s.\n     * this second method is really to make use of shared {@link BindGroup}s.\n     * For most cases you will want to use resources as they are easier to work with.\n     * USe Groups if you want to share {@link BindGroup}s between shaders.\n     * you cannot mix and match - either use resources or groups.\n     * @param {ShaderWithResourcesDescriptor} options - The options for the shader using ShaderWithResourcesDescriptor.\n     */\n    constructor(options: ShaderWithResources);\n    constructor(options: ShaderWithGroups);\n    constructor(options: ShaderDescriptor)\n    {\n        super();\n\n        /* eslint-disable prefer-const */\n        let {\n            gpuProgram,\n            glProgram,\n            groups,\n            resources,\n            compatibleRenderers,\n            groupMap\n        } = options;\n        /* eslint-enable prefer-const */\n\n        this.gpuProgram = gpuProgram;\n        this.glProgram = glProgram;\n\n        if (compatibleRenderers === undefined)\n        {\n            compatibleRenderers = 0;\n\n            if (gpuProgram)compatibleRenderers |= RendererType.WEBGPU;\n            if (glProgram)compatibleRenderers |= RendererType.WEBGL;\n        }\n\n        this.compatibleRenderers = compatibleRenderers;\n\n        const nameHash: Record<string, GroupsData> = {};\n\n        if (!resources && !groups)\n        {\n            resources = {};\n        }\n\n        if (resources && groups)\n        {\n            throw new Error('[Shader] Cannot have both resources and groups');\n        }\n        else if (!gpuProgram && groups && !groupMap)\n        {\n            throw new Error('[Shader] No group map or WebGPU shader provided - consider using resources instead.');\n        }\n        else if (!gpuProgram && groups && groupMap)\n        {\n            for (const i in groupMap)\n            {\n                for (const j in groupMap[i])\n                {\n                    const uniformName = groupMap[i][j];\n\n                    nameHash[uniformName] = {\n                        group: i as unknown as number,\n                        binding: j as unknown as number,\n                        name: uniformName\n                    };\n                }\n            }\n        }\n        else if (gpuProgram && groups && !groupMap)\n        {\n            const groupData = gpuProgram.structsAndGroups.groups;\n\n            groupMap = {};\n\n            groupData.forEach((data) =>\n            {\n                groupMap[data.group] = groupMap[data.group] || {};\n                groupMap[data.group][data.binding] = data.name;\n\n                nameHash[data.name] = data;\n            });\n        }\n        else if (resources)\n        {\n            groups = {};\n            groupMap = {};\n\n            if (gpuProgram)\n            {\n                const groupData = gpuProgram.structsAndGroups.groups;\n\n                groupData.forEach((data) =>\n                {\n                    groupMap[data.group] = groupMap[data.group] || {};\n                    groupMap[data.group][data.binding] = data.name;\n\n                    nameHash[data.name] = data;\n                });\n            }\n\n            let bindTick = 0;\n\n            for (const i in resources)\n            {\n                if (nameHash[i]) continue;\n\n                // build out a dummy bind group..\n                if (!groups[99])\n                {\n                    groups[99] = new BindGroup();\n                    this._ownedBindGroups.push(groups[99]);\n                }\n                // Yes i know this is a little strange, but wil line up the shaders neatly\n                // basically we want to be driven by how webGPU does things.\n                // so making a fake group will work and not affect gpu as it means no gpu shader was provided..\n                nameHash[i] = { group: 99, binding: bindTick, name: i };\n\n                groupMap[99] = groupMap[99] || {};\n                groupMap[99][bindTick] = i;\n\n                bindTick++;\n            }\n\n            for (const i in resources)\n            {\n                const name = i;\n                let value = resources[i];\n\n                if (!(value.source) && !(value as BindResource)._resourceType)\n                {\n                    value = new UniformGroup(value);\n                }\n\n                const data = nameHash[name];\n\n                if (data)\n                {\n                    if (!groups[data.group])\n                    {\n                        groups[data.group] = new BindGroup();\n\n                        this._ownedBindGroups.push(groups[data.group]);\n                    }\n\n                    groups[data.group].setResource(value, data.binding);\n                }\n            }\n        }\n\n        this.groups = groups;\n        this._uniformBindMap = groupMap;\n\n        this.resources = this._buildResourceAccessor(groups, nameHash);\n    }\n\n    /**\n     * Sometimes a resource group will be provided later (for example global uniforms)\n     * In such cases, this method can be used to let the shader know about the group.\n     * @param name - the name of the resource group\n     * @param groupIndex - the index of the group (should match the webGPU shader group location)\n     * @param bindIndex - the index of the bind point (should match the webGPU shader bind point)\n     */\n    public addResource(name: string, groupIndex: number, bindIndex: number): void\n    {\n        this._uniformBindMap[groupIndex] ||= {};\n\n        this._uniformBindMap[groupIndex][bindIndex] ||= name;\n\n        if (!this.groups[groupIndex])\n        {\n            this.groups[groupIndex] = new BindGroup();\n            this._ownedBindGroups.push(this.groups[groupIndex]);\n        }\n    }\n\n    private _buildResourceAccessor(groups: ShaderGroups, nameHash: Record<string, GroupsData>)\n    {\n        const uniformsOut = {};\n\n        for (const i in nameHash)\n        {\n            const data = nameHash[i];\n\n            // add getter setter for uniforms\n            Object.defineProperty(uniformsOut, data.name, {\n                get()\n                {\n                    return groups[data.group].getResource(data.binding);\n                },\n                set(value)\n                {\n                    groups[data.group].setResource(value, data.binding);\n                }\n            });\n        }\n\n        return uniformsOut;\n    }\n\n    /**\n     * Use to destroy the shader when its not longer needed.\n     * It will destroy the resources and remove listeners.\n     * @param destroyPrograms - if the programs should be destroyed as well.\n     * Make sure its not being used by other shaders!\n     */\n    public destroy(destroyPrograms = false): void\n    {\n        this.emit('destroy', this);\n\n        if (destroyPrograms)\n        {\n            this.gpuProgram?.destroy();\n            this.glProgram?.destroy();\n        }\n\n        this.gpuProgram = null;\n        this.glProgram = null;\n\n        this.removeAllListeners();\n\n        this._uniformBindMap = null;\n\n        this._ownedBindGroups.forEach((bindGroup) =>\n        {\n            bindGroup.destroy();\n        });\n\n        (this._ownedBindGroups as null) = null;\n\n        this.resources = null;\n        this.groups = null;\n    }\n\n    /**\n     * A short hand function to create a shader based of a vertex and fragment shader.\n     * @param options\n     * @returns A shiny new PixiJS shader!\n     */\n    public static from(options: ShaderFromGroups): Shader;\n    public static from(options: ShaderFromResources): Shader;\n    public static from(options: ShaderFromGroups & ShaderFromResources): Shader\n    {\n        const { gpu, gl, ...rest } = options;\n\n        let gpuProgram: GpuProgram;\n        let glProgram: GlProgram;\n\n        if (gpu)\n        {\n            gpuProgram = GpuProgram.from(gpu);\n        }\n\n        if (gl)\n        {\n            glProgram = GlProgram.from(gl);\n        }\n\n        return new Shader({\n            gpuProgram,\n            glProgram,\n            ...rest\n        });\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5929, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5935, "column": 0}, "map": {"version":3,"file":"DefaultShader.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/batcher/shared/DefaultShader.ts"],"sourcesContent":["import { compileHighShaderGlProgram, compileHighShaderGpuProgram } from '../../high-shader/compileHighShaderToProgram';\nimport { colorBit, colorBitGl } from '../../high-shader/shader-bits/colorBit';\nimport { generateTextureBatchBit, generateTextureBatchBitGl } from '../../high-shader/shader-bits/generateTextureBatchBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../high-shader/shader-bits/roundPixelsBit';\nimport { getBatchSamplersUniformGroup } from '../../renderers/gl/shader/getBatchSamplersUniformGroup';\nimport { Shader } from '../../renderers/shared/shader/Shader';\n\n/**\n * DefaultShader is a specialized shader class designed for batch rendering.\n * It extends the base Shader class and provides functionality for handling\n * color, texture batching, and pixel rounding in both WebGL and WebGPU contexts.\n *\n * It is used by the default batcher\n * @extends Shader\n * @memberof rendering\n */\nexport class DefaultShader extends Shader\n{\n    constructor(maxTextures: number)\n    {\n        const glProgram = compileHighShaderGlProgram({\n            name: 'batch',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(maxTextures),\n                roundPixelsBitGl,\n            ]\n        });\n\n        const gpuProgram = compileHighShaderGpuProgram({\n            name: 'batch',\n            bits: [\n                colorBit,\n                generateTextureBatchBit(maxTextures),\n                roundPixelsBit,\n            ]\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                batchSamplers: getBatchSamplersUniformGroup(maxTextures),\n            }\n        });\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgBO,MAAM,iNAAsB,SACnC,CAAA;IACI,YAAY,WACZ,CAAA;QACI,MAAM,gNAAY,6BAAA,AAA2B,EAAA;YACzC,IAAM,EAAA,OAAA;YACN,IAAM,EAAA;gNACF,aAAA;mOACA,4BAAA,EAA0B,WAAW,CAAA;sNACrC,mBAAA;aACJ;QAAA,CACH,CAAA,CAAA;QAED,MAAM,cAAa,iOAAA,AAA4B,EAAA;YAC3C,IAAM,EAAA,OAAA;YACN,IAAM,EAAA;gNACF,WAAA;mOACA,0BAAA,EAAwB,WAAW,CAAA;sNACnC,iBAAA;aACJ;QAAA,CACH,CAAA,CAAA;QAEK,KAAA,CAAA;YACF,SAAA;YACA,UAAA;YACA,SAAW,EAAA;gBACP,aAAA,mNAAe,+BAAA,EAA6B,WAAW,CAAA;YAAA,CAC3D;QAAA,CACH,CAAA,CAAA;IAAA,CACL;AACJ","ignoreList":[0]}},
    {"offset": {"line": 5980, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5986, "column": 0}, "map": {"version":3,"file":"checkMaxIfStatementsInShader.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/batcher/gl/utils/checkMaxIfStatementsInShader.ts"],"sourcesContent":["import type { GlRenderingContext } from '../../../renderers/gl/context/GlRenderingContext';\n\nconst fragTemplate = [\n    'precision mediump float;',\n    'void main(void){',\n    'float test = 0.1;',\n    '%forloop%',\n    'gl_FragColor = vec4(0.0);',\n    '}',\n].join('\\n');\n\nfunction generateIfTestSrc(maxIfs: number): string\n{\n    let src = '';\n\n    for (let i = 0; i < maxIfs; ++i)\n    {\n        if (i > 0)\n        {\n            src += '\\nelse ';\n        }\n\n        if (i < maxIfs - 1)\n        {\n            src += `if(test == ${i}.0){}`;\n        }\n    }\n\n    return src;\n}\n\nexport function checkMaxIfStatementsInShader(maxIfs: number, gl: GlRenderingContext): number\n{\n    if (maxIfs === 0)\n    {\n        throw new Error('Invalid value of `0` passed to `checkMaxIfStatementsInShader`');\n    }\n\n    const shader = gl.createShader(gl.FRAGMENT_SHADER);\n\n    try\n    {\n        while (true)\n        {\n            const fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));\n\n            gl.shaderSource(shader, fragmentSrc);\n            gl.compileShader(shader);\n\n            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n            {\n                maxIfs = (maxIfs / 2) | 0;\n            }\n            else\n            {\n                // valid!\n                break;\n            }\n        }\n    }\n    finally\n    {\n        gl.deleteShader(shader);\n    }\n\n    return maxIfs;\n}\n"],"names":[],"mappings":";;;;AAEA,MAAM,YAAe,GAAA;IACjB,0BAAA;IACA,kBAAA;IACA,mBAAA;IACA,WAAA;IACA,2BAAA;IACA,GAAA;CACJ,CAAE,IAAA,CAAK,IAAI,CAAA,CAAA;AAEX,SAAS,kBAAkB,MAC3B,EAAA;IACI,IAAI,GAAM,GAAA,EAAA,CAAA;IAEV,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,MAAA,EAAQ,EAAE,CAC9B,CAAA;QACI,IAAI,IAAI,CACR,EAAA;YACW,GAAA,IAAA,SAAA,CAAA;QAAA,CACX;QAEI,IAAA,CAAA,GAAI,SAAS,CACjB,EAAA;YACI,GAAA,IAAO,CAAA,WAAA,EAAc,CAAC,CAAA,KAAA,CAAA,CAAA;QAAA,CAC1B;IAAA,CACJ;IAEO,OAAA,GAAA,CAAA;AACX,CAAA;AAEgB,SAAA,4BAAA,CAA6B,MAAA,EAAgB,EAC7D,EAAA;IACI,IAAI,WAAW,CACf,EAAA;QACU,MAAA,IAAI,MAAM,+DAA+D,CAAA,CAAA;IAAA,CACnF;IAEA,MAAM,MAAS,GAAA,EAAA,CAAG,YAAa,CAAA,EAAA,CAAG,eAAe,CAAA,CAAA;IAGjD,IAAA;QACI,MAAO,IACP,CAAA;YACI,MAAM,cAAc,YAAa,CAAA,OAAA,CAAQ,aAAe,EAAA,iBAAA,CAAkB,MAAM,CAAC,CAAA,CAAA;YAE9E,EAAA,CAAA,YAAA,CAAa,QAAQ,WAAW,CAAA,CAAA;YACnC,EAAA,CAAG,aAAA,CAAc,MAAM,CAAA,CAAA;YAEvB,IAAI,CAAC,EAAG,CAAA,kBAAA,CAAmB,MAAQ,EAAA,EAAA,CAAG,cAAc,CACpD,EAAA;gBACI,MAAA,GAAU,SAAS,CAAK,GAAA,CAAA,CAAA;YAAA,CAG5B,MAAA;gBAEI,MAAA;YAAA,CACJ;QAAA,CACJ;IAAA,CAEJ,QAAA;QAEI,EAAA,CAAG,YAAA,CAAa,MAAM,CAAA,CAAA;IAAA,CAC1B;IAEO,OAAA,MAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 6033, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6039, "column": 0}, "map": {"version":3,"file":"maxRecommendedTextures.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/batcher/gl/utils/maxRecommendedTextures.ts"],"sourcesContent":["import { getTestContext } from '../../../renderers/gl/shader/program/getTestContext';\nimport { checkMaxIfStatementsInShader } from './checkMaxIfStatementsInShader';\n\nlet maxTexturesPerBatchCache: number | null = null;\n\n/**\n * Returns the maximum number of textures that can be batched. This uses WebGL1's `MAX_TEXTURE_IMAGE_UNITS`.\n * The response for this is that to get this info via WebGPU, we would need to make a context, which\n * would make this function async, and we want to avoid that.\n * @private\n * @returns {number} The maximum number of textures that can be batched\n */\nexport function getMaxTexturesPerBatch(): number\n{\n    if (maxTexturesPerBatchCache) return maxTexturesPerBatchCache;\n\n    const gl = getTestContext();\n\n    // step 1: first check max textures the GPU can handle.\n    maxTexturesPerBatchCache = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n\n    // step 2: check the maximum number of if statements the shader can have too..\n    maxTexturesPerBatchCache = checkMaxIfStatementsInShader(\n        maxTexturesPerBatchCache, gl);\n\n    gl.getExtension('WEBGL_lose_context')?.loseContext();\n\n    return maxTexturesPerBatchCache;\n}\n"],"names":[],"mappings":";;;;;;;;AAGA,IAAI,wBAA0C,GAAA,IAAA,CAAA;AASvC,SAAS,sBAChB,GAAA;IACQ,IAAA,wBAAA,EAAiC,OAAA,wBAAA,CAAA;IAErC,MAAM,mNAAK,iBAAA,AAAe,EAAA,CAAA;IAGC,wBAAA,GAAA,EAAA,CAAG,YAAa,CAAA,EAAA,CAAG,uBAAuB,CAAA,CAAA;IAG1C,wBAAA,iNAAA,+BAAA,EACvB,wBAAA,EAA0B,EAAA;IAE3B,EAAA,CAAA,YAAA,CAAa,oBAAoB,CAAA,EAAG,WAAY,EAAA,CAAA;IAE5C,OAAA,wBAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 6058, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6064, "column": 0}, "map": {"version":3,"file":"ViewableBuffer.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/utils/data/ViewableBuffer.ts"],"sourcesContent":["type TypedArray = Float32Array | Uint32Array | Int32Array | Uint8Array;\n\n/**\n * Flexible wrapper around `ArrayBuffer` that also provides typed array views on demand.\n * @memberof utils\n */\nexport class ViewableBuffer\n{\n    /** The size of the buffer in bytes. */\n    public size: number;\n\n    /** Underlying `ArrayBuffer` that holds all the data and is of capacity `this.size`. */\n    public rawBinaryData: ArrayBuffer;\n\n    /** View on the raw binary data as a `Uint32Array`. */\n    public uint32View: Uint32Array;\n\n    /** View on the raw binary data as a `Float32Array`. */\n    public float32View: Float32Array;\n    public uint16View: Uint16Array;\n\n    private _int8View: Int8Array;\n    private _uint8View: Uint8Array;\n    private _int16View: Int16Array;\n    private _int32View: Int32Array;\n    private _float64Array: Float64Array;\n    private _bigUint64Array: BigUint64Array;\n\n    /**\n     * @param length - The size of the buffer in bytes.\n     */\n    constructor(length: number);\n\n    /**\n     * @param arrayBuffer - The source array buffer.\n     */\n    constructor(arrayBuffer: ArrayBuffer);\n\n    constructor(sizeOrBuffer: number | ArrayBuffer | Uint8Array)\n    {\n        if (typeof sizeOrBuffer === 'number')\n        {\n            this.rawBinaryData = new ArrayBuffer(sizeOrBuffer);\n        }\n        else if (sizeOrBuffer instanceof Uint8Array)\n        {\n            this.rawBinaryData = sizeOrBuffer.buffer;\n        }\n        else\n        {\n            this.rawBinaryData = sizeOrBuffer;\n        }\n\n        this.uint32View = new Uint32Array(this.rawBinaryData);\n        this.float32View = new Float32Array(this.rawBinaryData);\n\n        this.size = this.rawBinaryData.byteLength;\n    }\n\n    /** View on the raw binary data as a `Int8Array`. */\n    get int8View(): Int8Array\n    {\n        if (!this._int8View)\n        {\n            this._int8View = new Int8Array(this.rawBinaryData);\n        }\n\n        return this._int8View;\n    }\n\n    /** View on the raw binary data as a `Uint8Array`. */\n    get uint8View(): Uint8Array\n    {\n        if (!this._uint8View)\n        {\n            this._uint8View = new Uint8Array(this.rawBinaryData);\n        }\n\n        return this._uint8View;\n    }\n\n    /**  View on the raw binary data as a `Int16Array`. */\n    get int16View(): Int16Array\n    {\n        if (!this._int16View)\n        {\n            this._int16View = new Int16Array(this.rawBinaryData);\n        }\n\n        return this._int16View;\n    }\n\n    /** View on the raw binary data as a `Int32Array`. */\n    get int32View(): Int32Array\n    {\n        if (!this._int32View)\n        {\n            this._int32View = new Int32Array(this.rawBinaryData);\n        }\n\n        return this._int32View;\n    }\n\n    /** View on the raw binary data as a `Float64Array`. */\n    get float64View(): Float64Array\n    {\n        if (!this._float64Array)\n        {\n            this._float64Array = new Float64Array(this.rawBinaryData);\n        }\n\n        return this._float64Array;\n    }\n\n    /** View on the raw binary data as a `BigUint64Array`. */\n    get bigUint64View(): BigUint64Array\n    {\n        if (!this._bigUint64Array)\n        {\n            this._bigUint64Array = new BigUint64Array(this.rawBinaryData);\n        }\n\n        return this._bigUint64Array;\n    }\n\n    /**\n     * Returns the view of the given type.\n     * @param type - One of `int8`, `uint8`, `int16`,\n     *    `uint16`, `int32`, `uint32`, and `float32`.\n     * @returns - typed array of given type\n     */\n    public view(type: string): TypedArray\n    {\n        return (this as any)[`${type}View`];\n    }\n\n    /** Destroys all buffer references. Do not use after calling this. */\n    public destroy(): void\n    {\n        this.rawBinaryData = null;\n        this._int8View = null;\n        this._uint8View = null;\n        this._int16View = null;\n        this.uint16View = null;\n        this._int32View = null;\n        this.uint32View = null;\n        this.float32View = null;\n    }\n\n    /**\n     * Returns the size of the given type in bytes.\n     * @param type - One of `int8`, `uint8`, `int16`,\n     *   `uint16`, `int32`, `uint32`, and `float32`.\n     * @returns - size of the type in bytes\n     */\n    public static sizeOf(type: string): number\n    {\n        switch (type)\n        {\n            case 'int8':\n            case 'uint8':\n                return 1;\n            case 'int16':\n            case 'uint16':\n                return 2;\n            case 'int32':\n            case 'uint32':\n            case 'float32':\n                return 4;\n            default:\n                throw new Error(`${type} isn't a valid view type`);\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 6159, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6165, "column": 0}, "map": {"version":3,"file":"const.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/shared/state/const.ts"],"sourcesContent":["/**\n * Various blend modes supported by Pixi\n * @memberof filters\n */\nexport type BLEND_MODES = 'inherit'\n| 'normal'\n| 'add'\n| 'multiply'\n| 'screen'\n| 'darken'\n| 'lighten'\n| 'erase'\n| 'color-dodge'\n| 'color-burn'\n| 'linear-burn'\n| 'linear-dodge'\n| 'linear-light'\n| 'hard-light'\n| 'soft-light'\n| 'pin-light'\n| 'difference'\n| 'exclusion'\n| 'overlay'\n// | 'hue'\n| 'saturation'\n| 'color'\n| 'luminosity'\n| 'normal-npm'\n| 'add-npm'\n| 'screen-npm'\n| 'none'\n| 'subtract'\n| 'divide'\n| 'vivid-light'\n| 'hard-mix'\n| 'negation'\n| 'min'\n| 'max';\n\n/**\n * The map of blend modes supported by Pixi\n * @memberof rendering\n */\nexport const BLEND_TO_NPM = {\n    normal: 'normal-npm',\n    add: 'add-npm',\n    screen: 'screen-npm',\n};\n\n/**\n * The stencil operation to perform when using the stencil buffer\n * @memberof rendering\n */\nexport enum STENCIL_MODES\n{\n    DISABLED = 0,\n    RENDERING_MASK_ADD = 1,\n    MASK_ACTIVE = 2,\n    INVERSE_MASK_ACTIVE = 3,\n    RENDERING_MASK_REMOVE = 4,\n    NONE = 5,\n}\n\n/**\n * The culling mode to use. It can be either `none`, `front` or `back`.\n * @memberof rendering\n */\nexport type CULL_MODES = 'none' | 'back' | 'front';\n\n"],"names":["STENCIL_MODES"],"mappings":";;;;;AA2CO,MAAM,YAAe,GAAA;IACxB,MAAQ,EAAA,YAAA;IACR,GAAK,EAAA,SAAA;IACL,MAAQ,EAAA,YAAA;AACZ,EAAA;AAMY,IAAA,aAAA,GAAA,aAAA,GAAA,CAAA,CAAAA,cAAL,KAAA;IAEHA,cAAAA,CAAAA,cAAAA,CAAA,WAAA,GAAW,CAAX,CAAA,GAAA,UAAA,CAAA;IACAA,cAAAA,CAAAA,cAAAA,CAAA,qBAAA,GAAqB,CAArB,CAAA,GAAA,oBAAA,CAAA;IACAA,cAAAA,CAAAA,cAAAA,CAAA,cAAA,GAAc,CAAd,CAAA,GAAA,aAAA,CAAA;IACAA,cAAAA,CAAAA,cAAAA,CAAA,sBAAA,GAAsB,CAAtB,CAAA,GAAA,qBAAA,CAAA;IACAA,cAAAA,CAAAA,cAAAA,CAAA,wBAAA,GAAwB,CAAxB,CAAA,GAAA,uBAAA,CAAA;IACAA,cAAAA,CAAAA,cAAAA,CAAA,OAAA,GAAO,CAAP,CAAA,GAAA,MAAA,CAAA;IAPQA,OAAAA,cAAAA,CAAAA;AAAA,CAAA,EAAA,aAAA,IAAA,CAAA,CAAA","ignoreList":[0]}},
    {"offset": {"line": 6186, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6192, "column": 0}, "map": {"version":3,"file":"getAdjustedBlendModeBlend.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/shared/state/getAdjustedBlendModeBlend.ts"],"sourcesContent":["import { type BLEND_MODES, BLEND_TO_NPM } from './const';\n\nimport type { TextureSource } from '../texture/sources/TextureSource';\n\n/**\n * Adjusts a blend mode for the current alpha mode. Returns the blend mode that works with that format.\n * eg 'normal' blend mode will return 'normal-npm' when rendering with premultiplied alpha.\n * and 'normal' if the texture is already premultiplied (the default)\n * @param blendMode - The blend mode to get the adjusted blend mode for.\n * @param textureSource - The texture to test the format of.\n * @returns - the blend mode that should be used to render this texture correctly based on its alphaMode\n */\nexport function getAdjustedBlendModeBlend(blendMode: BLEND_MODES, textureSource: TextureSource): BLEND_MODES\n{\n    if (textureSource.alphaMode === 'no-premultiply-alpha')\n    {\n        return (BLEND_TO_NPM[blendMode as keyof typeof BLEND_TO_NPM] || blendMode) as BLEND_MODES;\n    }\n\n    return blendMode;\n}\n"],"names":[],"mappings":";;;;;;AAYgB,SAAA,yBAAA,CAA0B,SAAA,EAAwB,aAClE,EAAA;IACQ,IAAA,aAAA,CAAc,SAAA,KAAc,sBAChC,EAAA;QACY,gMAAA,eAAA,CAAa,SAAsC,CAAK,IAAA,SAAA,CAAA;IAAA,CACpE;IAEO,OAAA,SAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 6206, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6212, "column": 0}, "map": {"version":3,"file":"fastCopy.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/shared/buffer/utils/fastCopy.ts"],"sourcesContent":["/**\n * Copies from one buffer to another.\n * This is an optimised function that will use `Float64Array` window.\n * This means it can copy twice as fast!\n * @param sourceBuffer - the array buffer to copy from\n * @param destinationBuffer - the array buffer to copy to\n * @private\n */\nexport function fastCopy(sourceBuffer: ArrayBuffer, destinationBuffer: ArrayBuffer): void\n{\n    const lengthDouble = (sourceBuffer.byteLength / 8) | 0;\n\n    const sourceFloat64View = new Float64Array(sourceBuffer, 0, lengthDouble);\n    const destinationFloat64View = new Float64Array(destinationBuffer, 0, lengthDouble);\n\n    // Use set for faster copying\n    destinationFloat64View.set(sourceFloat64View);\n\n    // copying over the remaining bytes\n    const remainingBytes = sourceBuffer.byteLength - (lengthDouble * 8);\n\n    if (remainingBytes > 0)\n    {\n        const sourceUint8View = new Uint8Array(sourceBuffer, lengthDouble * 8, remainingBytes);\n        const destinationUint8View = new Uint8Array(destinationBuffer, lengthDouble * 8, remainingBytes);\n\n        // Direct copy for remaining bytes\n        destinationUint8View.set(sourceUint8View);\n    }\n}\n"],"names":[],"mappings":";;;;AAQgB,SAAA,QAAA,CAAS,YAAA,EAA2B,iBACpD,EAAA;IACU,MAAA,YAAA,GAAgB,YAAa,CAAA,UAAA,GAAa,CAAK,GAAA,CAAA,CAAA;IAErD,MAAM,iBAAoB,GAAA,IAAI,YAAa,CAAA,YAAA,EAAc,GAAG,YAAY,CAAA,CAAA;IACxE,MAAM,sBAAyB,GAAA,IAAI,YAAa,CAAA,iBAAA,EAAmB,GAAG,YAAY,CAAA,CAAA;IAGlF,sBAAA,CAAuB,GAAA,CAAI,iBAAiB,CAAA,CAAA;IAGtC,MAAA,cAAA,GAAiB,YAAa,CAAA,UAAA,GAAc,YAAe,GAAA,CAAA,CAAA;IAEjE,IAAI,iBAAiB,CACrB,EAAA;QACI,MAAM,kBAAkB,IAAI,UAAA,CAAW,YAAc,EAAA,YAAA,GAAe,GAAG,cAAc,CAAA,CAAA;QACrF,MAAM,uBAAuB,IAAI,UAAA,CAAW,iBAAmB,EAAA,YAAA,GAAe,GAAG,cAAc,CAAA,CAAA;QAG/F,oBAAA,CAAqB,GAAA,CAAI,eAAe,CAAA,CAAA;IAAA,CAC5C;AACJ","ignoreList":[0]}},
    {"offset": {"line": 6230, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6236, "column": 0}, "map": {"version":3,"file":"BatchTextureArray.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/batcher/shared/BatchTextureArray.ts"],"sourcesContent":["import type { TextureSource } from '../../renderers/shared/texture/sources/TextureSource';\n\n/**\n * Used by the batcher to build texture batches. Holds list of textures and their respective locations.\n * @memberof rendering\n */\nexport class BatchTextureArray\n{\n    /** Inside textures array. */\n    public textures: TextureSource[];\n\n    /** Respective locations for textures. */\n    public ids: Record<number, number> = Object.create(null);\n\n    /** Number of filled elements. */\n    public count: number;\n\n    constructor()\n    {\n        this.textures = [];\n        this.count = 0;\n    }\n\n    /** Clear the textures and their locations. */\n    public clear(): void\n    {\n        for (let i = 0; i < this.count; i++)\n        {\n            const t = this.textures[i];\n\n            this.textures[i] = null;\n            this.ids[t.uid] = null;\n        }\n\n        this.count = 0;\n    }\n}\n"],"names":[],"mappings":";;;;AAMO,MAAM,iBACb,CAAA;IAUI,WACA,EAAA;QANA,uCAAA,GAAO,IAAA,CAAA,GAAA,GAAA,aAAA,GAAqC,MAAA,CAAA,MAAA,CAAO,IAAI,CAAA,CAAA;QAOnD,IAAA,CAAK,QAAA,GAAW,EAAC,CAAA;QACjB,IAAA,CAAK,KAAQ,GAAA,CAAA,CAAA;IAAA,CACjB;IAAA,4CAAA,GAGO,KACP,GAAA;QACI,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,IAAA,CAAK,KAAA,EAAO,CAChC,EAAA,CAAA;YACU,MAAA,CAAA,GAAI,IAAK,CAAA,QAAA,CAAS,CAAC,CAAA,CAAA;YAEpB,IAAA,CAAA,QAAA,CAAS,CAAC,CAAI,GAAA,IAAA,CAAA;YACd,IAAA,CAAA,GAAA,CAAI,CAAE,CAAA,GAAG,CAAI,GAAA,IAAA,CAAA;QAAA,CACtB;QAEA,IAAA,CAAK,KAAQ,GAAA,CAAA,CAAA;IAAA,CACjB;AACJ","ignoreList":[0]}},
    {"offset": {"line": 6257, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6263, "column": 0}, "map": {"version":3,"file":"Batcher.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/batcher/shared/Batcher.ts"],"sourcesContent":["import { uid } from '../../../utils/data/uid';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer';\nimport { fastCopy } from '../../renderers/shared/buffer/utils/fastCopy';\nimport { type BLEND_MODES } from '../../renderers/shared/state/const';\nimport { getAdjustedBlendModeBlend } from '../../renderers/shared/state/getAdjustedBlendModeBlend';\nimport { getMaxTexturesPerBatch } from '../gl/utils/maxRecommendedTextures';\nimport { BatchTextureArray } from './BatchTextureArray';\n\nimport type { BoundsData } from '../../../scene/container/bounds/Bounds';\nimport type { BindGroup } from '../../renderers/gpu/shader/BindGroup';\nimport type { Topology } from '../../renderers/shared/geometry/const';\nimport type { Geometry, IndexBufferArray } from '../../renderers/shared/geometry/Geometry';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { Shader } from '../../renderers/shared/shader/Shader';\nimport type { Texture } from '../../renderers/shared/texture/Texture';\n\nexport type BatchAction = 'startBatch' | 'renderBatch';\n\n/**\n * A batch pool is used to store batches when they are not currently in use.\n * @memberof rendering\n */\nexport class Batch implements Instruction\n{\n    public renderPipeId = 'batch';\n    public action: BatchAction = 'startBatch';\n\n    // TODO - eventually this could be useful for flagging batches as dirty and then only rebuilding those ones\n    // public elementStart = 0;\n    // public elementSize = 0;\n\n    // for drawing..\n    public start = 0;\n    public size = 0;\n    public textures: BatchTextureArray = new BatchTextureArray();\n\n    public blendMode: BLEND_MODES = 'normal';\n    public topology: Topology = 'triangle-strip';\n\n    public canBundle = true;\n\n    /**\n     * breaking rules slightly here in the name of performance..\n     * storing references to these bindgroups here is just faster for access!\n     * keeps a reference to the GPU bind group to set when rendering this batch for WebGPU. Will be null is using WebGL.\n     */\n    public gpuBindGroup: GPUBindGroup;\n    /**\n     * breaking rules slightly here in the name of performance..\n     * storing references to these bindgroups here is just faster for access!\n     * keeps a reference to the bind group to set when rendering this batch for WebGPU. Will be null if using WebGl.\n     */\n    public bindGroup: BindGroup;\n\n    public batcher: Batcher;\n\n    public destroy()\n    {\n        this.textures = null;\n        this.gpuBindGroup = null;\n        this.bindGroup = null;\n        this.batcher = null;\n    }\n}\n\n// inlined pool for SPEEEEEEEEEED :D\nconst batchPool: Batch[] = [];\nlet batchPoolIndex = 0;\n\nfunction getBatchFromPool()\n{\n    return batchPoolIndex > 0 ? batchPool[--batchPoolIndex] : new Batch();\n}\n\nfunction returnBatchToPool(batch: Batch)\n{\n    batchPool[batchPoolIndex++] = batch;\n}\n\n/**\n * Represents an element that can be batched for rendering.\n * @interface\n * @memberof rendering\n */\nexport interface BatchableElement\n{\n    /**\n     * The name of the batcher to use. Must be registered.\n     * @type {string}\n     */\n    batcherName: string;\n\n    /**\n     * The texture to be used for rendering.\n     * @type {Texture}\n     */\n    texture: Texture;\n\n    /**\n     * The blend mode to be applied.\n     * @type {BLEND_MODES}\n     */\n    blendMode: BLEND_MODES;\n\n    /**\n     * The size of the index data.\n     * @type {number}\n     */\n    indexSize: number;\n\n    /**\n     * The size of the attribute data.\n     * @type {number}\n     */\n    attributeSize: number;\n\n    /**\n     * The topology to be used for rendering.\n     * @type {Topology}\n     */\n    topology: Topology\n\n    /**\n     * Whether the element should be packed as a quad for better performance.\n     * @type {boolean}\n     */\n    packAsQuad: boolean;\n\n    /**\n     * The texture ID, stored for efficient updating.\n     * @type {number}\n     * @private\n     */\n    _textureId: number;\n\n    /**\n     * The starting position in the attribute buffer.\n     * @type {number}\n     * @private\n     */\n    _attributeStart: number;\n\n    /**\n     * The starting position in the index buffer.\n     * @type {number}\n     * @private\n     */\n    _indexStart: number;\n\n    /**\n     * Reference to the batcher.\n     * @type {Batcher}\n     * @private\n     */\n    _batcher: Batcher;\n\n    /**\n     * Reference to the batch.\n     * @type {Batch}\n     * @private\n     */\n    _batch: Batch;\n\n}\n\n/**\n * Represents a batchable quad element.\n * @extends BatchableElement\n * @memberof rendering\n */\nexport interface BatchableQuadElement extends BatchableElement\n{\n    /**\n     * Indicates that this element should be packed as a quad.\n     * @type {true}\n     */\n    packAsQuad: true;\n\n    /**\n     * The size of the attribute data for this quad element.\n     * @type {4}\n     */\n    attributeSize: 4;\n\n    /**\n     * The size of the index data for this quad element.\n     * @type {6}\n     */\n    indexSize: 6;\n\n    /**\n     * The bounds data for this quad element.\n     * @type {BoundsData}\n     */\n    bounds: BoundsData;\n}\n\n/**\n * Represents a batchable mesh element.\n * @extends BatchableElement\n * @memberof rendering\n */\nexport interface BatchableMeshElement extends BatchableElement\n{\n    /**\n     * The UV coordinates of the mesh.\n     * @type {number[] | Float32Array}\n     */\n    uvs: number[] | Float32Array;\n\n    /**\n     * The vertex positions of the mesh.\n     * @type {number[] | Float32Array}\n     */\n    positions: number[] | Float32Array;\n\n    /**\n     * The indices of the mesh.\n     * @type {number[] | Uint16Array | Uint32Array}\n     */\n    indices: number[] | Uint16Array | Uint32Array;\n\n    /**\n     * The offset in the index buffer.\n     * @type {number}\n     */\n    indexOffset: number;\n\n    /**\n     * The offset in the attribute buffer.\n     * @type {number}\n     */\n    attributeOffset: number;\n\n    /**\n     * Indicates that this element should not be packed as a quad.\n     * @type {false}\n     */\n    packAsQuad: false;\n}\n\nlet BATCH_TICK = 0;\n\n/**\n * The options for the batcher.\n * @memberof rendering\n */\nexport interface BatcherOptions\n{\n    /** The maximum number of textures per batch. */\n    maxTextures?: number;\n    attributesInitialSize?: number;\n    indicesInitialSize?: number;\n}\n\n/**\n * A batcher is used to batch together objects with the same texture.\n * It is an abstract class that must be extended. see DefaultBatcher for an example.\n * @memberof rendering\n */\nexport abstract class Batcher\n{\n    public static defaultOptions: Partial<BatcherOptions> = {\n        maxTextures: null,\n        attributesInitialSize: 4,\n        indicesInitialSize: 6,\n    };\n\n    /** unique id for this batcher */\n    public readonly uid: number = uid('batcher');\n\n    /** The buffer containing attribute data for all elements in the batch. */\n    public attributeBuffer: ViewableBuffer;\n\n    /** The buffer containing index data for all elements in the batch. */\n    public indexBuffer: IndexBufferArray;\n\n    /** The current size of the attribute data in the batch. */\n    public attributeSize: number;\n\n    /** The current size of the index data in the batch. */\n    public indexSize: number;\n\n    /** The total number of elements currently in the batch. */\n    public elementSize: number;\n\n    /** The starting index of elements in the current batch. */\n    public elementStart: number;\n\n    /** Indicates whether the batch data has been modified and needs updating. */\n    public dirty = true;\n\n    /** The current index of the batch being processed. */\n    public batchIndex = 0;\n\n    /** An array of all batches created during the current rendering process. */\n    public batches: Batch[] = [];\n\n    private _elements: BatchableElement[] = [];\n\n    private _batchIndexStart: number;\n    private _batchIndexSize: number;\n\n    /** The maximum number of textures per batch. */\n    public readonly maxTextures: number;\n\n    /** The name of the batcher. Must be implemented by subclasses. */\n    public abstract name: string;\n    /** The vertex size of the batcher. Must be implemented by subclasses. */\n    protected abstract vertexSize: number;\n\n    /** The geometry used by this batcher. Must be implemented by subclasses. */\n    public abstract geometry: Geometry;\n\n    /**\n     * The shader used by this batcher. Must be implemented by subclasses.\n     * this can be shared by multiple batchers of the same type.\n     */\n    public abstract shader: Shader;\n\n    /**\n     * Packs the attributes of a BatchableMeshElement into the provided views.\n     * Must be implemented by subclasses.\n     * @param element - The BatchableMeshElement to pack.\n     * @param float32View - The Float32Array view to pack into.\n     * @param uint32View - The Uint32Array view to pack into.\n     * @param index - The starting index in the views.\n     * @param textureId - The texture ID to use.\n     */\n    public abstract packAttributes(\n        element: BatchableMeshElement,\n        float32View: Float32Array,\n        uint32View: Uint32Array,\n        index: number,\n        textureId: number\n    ): void;\n\n    /**\n     * Packs the attributes of a BatchableQuadElement into the provided views.\n     * Must be implemented by subclasses.\n     * @param element - The BatchableQuadElement to pack.\n     * @param float32View - The Float32Array view to pack into.\n     * @param uint32View - The Uint32Array view to pack into.\n     * @param index - The starting index in the views.\n     * @param textureId - The texture ID to use.\n     */\n    public abstract packQuadAttributes(\n        element: BatchableQuadElement,\n        float32View: Float32Array,\n        uint32View: Uint32Array,\n        index: number,\n        textureId: number\n    ): void;\n\n    constructor(options: BatcherOptions = {})\n    {\n        Batcher.defaultOptions.maxTextures = Batcher.defaultOptions.maxTextures ?? getMaxTexturesPerBatch();\n        options = { ...Batcher.defaultOptions, ...options };\n\n        const { maxTextures, attributesInitialSize, indicesInitialSize } = options;\n\n        this.attributeBuffer = new ViewableBuffer(attributesInitialSize * 4);\n\n        this.indexBuffer = new Uint16Array(indicesInitialSize);\n\n        this.maxTextures = maxTextures;\n    }\n\n    public begin()\n    {\n        this.elementSize = 0;\n        this.elementStart = 0;\n        this.indexSize = 0;\n        this.attributeSize = 0;\n\n        for (let i = 0; i < this.batchIndex; i++)\n        {\n            returnBatchToPool(this.batches[i]);\n        }\n\n        this.batchIndex = 0;\n        this._batchIndexStart = 0;\n        this._batchIndexSize = 0;\n\n        this.dirty = true;\n    }\n\n    public add(batchableObject: BatchableElement)\n    {\n        this._elements[this.elementSize++] = batchableObject;\n\n        batchableObject._indexStart = this.indexSize;\n        batchableObject._attributeStart = this.attributeSize;\n        batchableObject._batcher = this;\n\n        this.indexSize += batchableObject.indexSize;\n        this.attributeSize += ((batchableObject.attributeSize) * this.vertexSize);\n    }\n\n    public checkAndUpdateTexture(batchableObject: BatchableElement, texture: Texture): boolean\n    {\n        const textureId = batchableObject._batch.textures.ids[texture._source.uid];\n\n        // TODO could try to be a bit smarter if there are spare textures..\n        // but need to figure out how to alter the bind groups too..\n        if (!textureId && textureId !== 0) return false;\n\n        batchableObject._textureId = textureId;\n        batchableObject.texture = texture;\n\n        return true;\n    }\n\n    public updateElement(batchableObject: BatchableElement)\n    {\n        this.dirty = true;\n\n        const attributeBuffer = this.attributeBuffer;\n\n        if (batchableObject.packAsQuad)\n        {\n            this.packQuadAttributes(\n                batchableObject as BatchableQuadElement,\n                attributeBuffer.float32View,\n                attributeBuffer.uint32View,\n                batchableObject._attributeStart, batchableObject._textureId);\n        }\n        else\n        {\n            this.packAttributes(\n                batchableObject as BatchableMeshElement,\n                attributeBuffer.float32View,\n                attributeBuffer.uint32View,\n                batchableObject._attributeStart, batchableObject._textureId);\n        }\n    }\n\n    /**\n     * breaks the batcher. This happens when a batch gets too big,\n     * or we need to switch to a different type of rendering (a filter for example)\n     * @param instructionSet\n     */\n    public break(instructionSet: InstructionSet)\n    {\n        const elements = this._elements;\n\n        // length 0??!! (we broke without adding anything)\n        if (!elements[this.elementStart]) return;\n\n        let batch = getBatchFromPool();\n        let textureBatch = batch.textures;\n\n        textureBatch.clear();\n\n        const firstElement = elements[this.elementStart];\n        let blendMode = getAdjustedBlendModeBlend(firstElement.blendMode, firstElement.texture._source);\n        let topology = firstElement.topology;\n\n        if (this.attributeSize * 4 > this.attributeBuffer.size)\n        {\n            this._resizeAttributeBuffer(this.attributeSize * 4);\n        }\n\n        if (this.indexSize > this.indexBuffer.length)\n        {\n            this._resizeIndexBuffer(this.indexSize);\n        }\n\n        const f32 = this.attributeBuffer.float32View;\n        const u32 = this.attributeBuffer.uint32View;\n        const indexBuffer = this.indexBuffer;\n\n        let size = this._batchIndexSize;\n        let start = this._batchIndexStart;\n\n        let action: BatchAction = 'startBatch';\n\n        const maxTextures = this.maxTextures;\n\n        for (let i = this.elementStart; i < this.elementSize; ++i)\n        {\n            const element = elements[i];\n\n            elements[i] = null;\n\n            const texture = element.texture;\n            const source = texture._source;\n\n            const adjustedBlendMode = getAdjustedBlendModeBlend(element.blendMode, source);\n\n            const breakRequired = blendMode !== adjustedBlendMode || topology !== element.topology;\n\n            if (source._batchTick === BATCH_TICK && !breakRequired)\n            {\n                element._textureId = source._textureBindLocation;\n\n                size += element.indexSize;\n\n                if (element.packAsQuad)\n                {\n                    this.packQuadAttributes(\n                        element as BatchableQuadElement,\n                        f32, u32,\n                        element._attributeStart, element._textureId\n                    );\n                    this.packQuadIndex(\n                        indexBuffer,\n                        element._indexStart,\n                        element._attributeStart / this.vertexSize\n                    );\n                }\n                else\n                {\n                    this.packAttributes(\n                        element as BatchableMeshElement,\n                        f32, u32,\n                        element._attributeStart,\n                        element._textureId\n                    );\n                    this.packIndex(\n                        element as BatchableMeshElement,\n                        indexBuffer,\n                        element._indexStart,\n                        element._attributeStart / this.vertexSize\n                    );\n                }\n\n                element._batch = batch;\n\n                continue;\n            }\n\n            source._batchTick = BATCH_TICK;\n\n            if (textureBatch.count >= maxTextures || breakRequired)\n            {\n                this._finishBatch(\n                    batch,\n                    start,\n                    size - start,\n                    textureBatch,\n                    blendMode,\n                    topology,\n                    instructionSet,\n                    action\n                );\n\n                action = 'renderBatch';\n                start = size;\n                // create a batch...\n                blendMode = adjustedBlendMode;\n                topology = element.topology;\n\n                batch = getBatchFromPool();\n                textureBatch = batch.textures;\n                textureBatch.clear();\n\n                ++BATCH_TICK;\n            }\n\n            element._textureId = source._textureBindLocation = textureBatch.count;\n            textureBatch.ids[source.uid] = textureBatch.count;\n            textureBatch.textures[textureBatch.count++] = source;\n            element._batch = batch;\n\n            size += element.indexSize;\n\n            if (element.packAsQuad)\n            {\n                this.packQuadAttributes(\n                    element as BatchableQuadElement,\n                    f32, u32,\n                    element._attributeStart, element._textureId\n                );\n                this.packQuadIndex(\n                    indexBuffer,\n                    element._indexStart,\n                    element._attributeStart / this.vertexSize\n                );\n            }\n            else\n            {\n                this.packAttributes(element as BatchableMeshElement,\n                    f32, u32,\n                    element._attributeStart, element._textureId\n                );\n\n                this.packIndex(\n                    element as BatchableMeshElement,\n                    indexBuffer,\n                    element._indexStart,\n                    element._attributeStart / this.vertexSize\n                );\n            }\n        }\n\n        if (textureBatch.count > 0)\n        {\n            this._finishBatch(\n                batch,\n                start,\n                size - start,\n                textureBatch,\n                blendMode,\n                topology,\n                instructionSet,\n                action\n            );\n\n            start = size;\n            ++BATCH_TICK;\n        }\n\n        this.elementStart = this.elementSize;\n        this._batchIndexStart = start;\n        this._batchIndexSize = size;\n    }\n\n    private _finishBatch(\n        batch: Batch,\n        indexStart: number,\n        indexSize: number,\n        textureBatch: BatchTextureArray,\n        blendMode: BLEND_MODES,\n        topology: Topology,\n        instructionSet: InstructionSet,\n        action: BatchAction\n    )\n    {\n        batch.gpuBindGroup = null;\n        batch.bindGroup = null;\n        batch.action = action;\n\n        batch.batcher = this;\n        batch.textures = textureBatch;\n        batch.blendMode = blendMode;\n        batch.topology = topology;\n        batch.start = indexStart;\n        batch.size = indexSize;\n\n        ++BATCH_TICK;\n\n        // track for returning later!\n        this.batches[this.batchIndex++] = batch;\n        instructionSet.add(batch);\n    }\n\n    public finish(instructionSet: InstructionSet)\n    {\n        this.break(instructionSet);\n    }\n\n    /**\n     * Resizes the attribute buffer to the given size (1 = 1 float32)\n     * @param size - the size in vertices to ensure (not bytes!)\n     */\n    public ensureAttributeBuffer(size: number)\n    {\n        if (size * 4 <= this.attributeBuffer.size) return;\n\n        this._resizeAttributeBuffer(size * 4);\n    }\n\n    /**\n     * Resizes the index buffer to the given size (1 = 1 float32)\n     * @param size - the size in vertices to ensure (not bytes!)\n     */\n    public ensureIndexBuffer(size: number)\n    {\n        if (size <= this.indexBuffer.length) return;\n\n        this._resizeIndexBuffer(size);\n    }\n\n    private _resizeAttributeBuffer(size: number)\n    {\n        const newSize = Math.max(size, this.attributeBuffer.size * 2);\n\n        const newArrayBuffer = new ViewableBuffer(newSize);\n\n        fastCopy(this.attributeBuffer.rawBinaryData, newArrayBuffer.rawBinaryData);\n\n        this.attributeBuffer = newArrayBuffer;\n    }\n\n    private _resizeIndexBuffer(size: number)\n    {\n        const indexBuffer = this.indexBuffer;\n\n        let newSize = Math.max(size, indexBuffer.length * 1.5);\n\n        newSize += newSize % 2;\n\n        // this, is technically not 100% accurate, as really we should\n        // be checking the maximum value in the buffer. This approximation\n        // does the trick though...\n\n        // make sure buffer is always an even number..\n        const newIndexBuffer = (newSize > 65535) ? new Uint32Array(newSize) : new Uint16Array(newSize);\n\n        if (newIndexBuffer.BYTES_PER_ELEMENT !== indexBuffer.BYTES_PER_ELEMENT)\n        {\n            for (let i = 0; i < indexBuffer.length; i++)\n            {\n                newIndexBuffer[i] = indexBuffer[i];\n            }\n        }\n        else\n        {\n            fastCopy(indexBuffer.buffer, newIndexBuffer.buffer);\n        }\n\n        this.indexBuffer = newIndexBuffer;\n    }\n\n    public packQuadIndex(indexBuffer: IndexBufferArray, index: number, indicesOffset: number)\n    {\n        indexBuffer[index] = indicesOffset + 0;\n        indexBuffer[index + 1] = indicesOffset + 1;\n        indexBuffer[index + 2] = indicesOffset + 2;\n\n        indexBuffer[index + 3] = indicesOffset + 0;\n        indexBuffer[index + 4] = indicesOffset + 2;\n        indexBuffer[index + 5] = indicesOffset + 3;\n    }\n\n    public packIndex(element: BatchableMeshElement, indexBuffer: IndexBufferArray, index: number, indicesOffset: number)\n    {\n        const indices = element.indices;\n        const size = element.indexSize;\n        const indexOffset = element.indexOffset;\n        const attributeOffset = element.attributeOffset;\n\n        for (let i = 0; i < size; i++)\n        {\n            indexBuffer[index++] = indicesOffset + indices[i + indexOffset] - attributeOffset;\n        }\n    }\n\n    public destroy()\n    {\n        for (let i = 0; i < this.batches.length; i++)\n        {\n            returnBatchToPool(this.batches[i]);\n        }\n\n        this.batches = null;\n\n        for (let i = 0; i < this._elements.length; i++)\n        {\n            this._elements[i]._batch = null;\n        }\n\n        this._elements = null;\n\n        this.indexBuffer = null;\n\n        this.attributeBuffer.destroy();\n        this.attributeBuffer = null;\n    }\n}\n\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 6535, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6541, "column": 0}, "map": {"version":3,"file":"DefaultBatcher.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/batcher/shared/DefaultBatcher.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Batcher } from './Batcher';\nimport { BatchGeometry } from './BatchGeometry';\nimport { DefaultShader } from './DefaultShader';\n\nimport type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { Shader } from '../../renderers/shared/shader/Shader';\nimport type { BatchableMeshElement, BatchableQuadElement } from './Batcher';\n\nlet defaultShader: Shader = null;\n\n/**\n * Represents the common elements for default batch rendering.\n * This interface defines the properties that are used by the DefaultBatcher\n * to render elements efficiently in a batch.\n * @memberof rendering\n */\nexport interface DefaultBatchElements\n{\n    /**\n     * The color of the element that will be multiplied with the texture color.\n     * This is typically represented as a 32-bit integer in RGBA format.\n     */\n    color: number;\n\n    /**\n     * Determines whether the element should be rounded to the nearest pixel.\n     * - 0: No rounding (default)\n     * - 1: Round to nearest pixel\n     * This can help with visual consistency, especially for pixel art styles.\n     */\n    roundPixels: 0 | 1;\n\n    /**\n     * The transform matrix of the element.\n     * This matrix represents the position, scale, rotation, and skew of the element.\n     */\n    transform: Matrix;\n}\n\n/**\n * Represents a batchable quad element with default batch properties.\n * @memberof rendering\n */\nexport interface DefaultBatchableQuadElement extends BatchableQuadElement, DefaultBatchElements {}\n\n/**\n * Represents a batchable mesh element with default batch properties.\n * @memberof rendering\n */\nexport interface DefaultBatchableMeshElement extends BatchableMeshElement, DefaultBatchElements {}\n\n/**\n * The default batcher is used to batch quads and meshes. This batcher will batch the following elements:\n * - tints\n * - roundPixels\n * - texture\n * - transform\n * @memberof rendering\n */\nexport class DefaultBatcher extends Batcher\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.Batcher,\n        ],\n        name: 'default',\n    } as const;\n\n    public geometry = new BatchGeometry();\n    public shader = defaultShader || (defaultShader = new DefaultShader(this.maxTextures));\n\n    public name = DefaultBatcher.extension.name;\n\n    /** The size of one attribute. 1 = 32 bit. x, y, u, v, color, textureIdAndRound -> total = 6 */\n    public vertexSize = 6;\n\n    /**\n     * Packs the attributes of a DefaultBatchableMeshElement into the provided views.\n     * @param element - The DefaultBatchableMeshElement to pack.\n     * @param float32View - The Float32Array view to pack into.\n     * @param uint32View - The Uint32Array view to pack into.\n     * @param index - The starting index in the views.\n     * @param textureId - The texture ID to use.\n     */\n    public packAttributes(\n        element: DefaultBatchableMeshElement,\n        float32View: Float32Array,\n        uint32View: Uint32Array,\n        index: number,\n        textureId: number\n    )\n    {\n        const textureIdAndRound = (textureId << 16) | (element.roundPixels & 0xFFFF);\n\n        const wt = element.transform;\n\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const { positions, uvs } = element;\n\n        const argb = element.color;\n\n        const offset = element.attributeOffset;\n        const end = offset + element.attributeSize;\n\n        for (let i = offset; i < end; i++)\n        {\n            const i2 = i * 2;\n\n            const x = positions[i2];\n            const y = positions[(i2) + 1];\n\n            float32View[index++] = (a * x) + (c * y) + tx;\n            float32View[index++] = (d * y) + (b * x) + ty;\n\n            float32View[index++] = uvs[i2];\n            float32View[index++] = uvs[(i2) + 1];\n\n            uint32View[index++] = argb;\n            uint32View[index++] = textureIdAndRound;\n        }\n    }\n\n    /**\n     * Packs the attributes of a DefaultBatchableQuadElement into the provided views.\n     * @param element - The DefaultBatchableQuadElement to pack.\n     * @param float32View - The Float32Array view to pack into.\n     * @param uint32View - The Uint32Array view to pack into.\n     * @param index - The starting index in the views.\n     * @param textureId - The texture ID to use.\n     */\n    public packQuadAttributes(\n        element: DefaultBatchableQuadElement,\n        float32View: Float32Array,\n        uint32View: Uint32Array,\n        index: number,\n        textureId: number\n    )\n    {\n        const texture = element.texture;\n\n        const wt = element.transform;\n\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const bounds = element.bounds;\n\n        const w0 = bounds.maxX;\n        const w1 = bounds.minX;\n        const h0 = bounds.maxY;\n        const h1 = bounds.minY;\n\n        const uvs = texture.uvs;\n\n        // _ _ _ _\n        // a b g r\n        const argb = element.color;\n\n        const textureIdAndRound = (textureId << 16) | (element.roundPixels & 0xFFFF);\n\n        float32View[index + 0] = (a * w1) + (c * h1) + tx;\n        float32View[index + 1] = (d * h1) + (b * w1) + ty;\n\n        float32View[index + 2] = uvs.x0;\n        float32View[index + 3] = uvs.y0;\n\n        uint32View[index + 4] = argb;\n        uint32View[index + 5] = textureIdAndRound;\n\n        // xy\n        float32View[index + 6] = (a * w0) + (c * h1) + tx;\n        float32View[index + 7] = (d * h1) + (b * w0) + ty;\n\n        float32View[index + 8] = uvs.x1;\n        float32View[index + 9] = uvs.y1;\n\n        uint32View[index + 10] = argb;\n        uint32View[index + 11] = textureIdAndRound;\n\n        // xy\n        float32View[index + 12] = (a * w0) + (c * h0) + tx;\n        float32View[index + 13] = (d * h0) + (b * w0) + ty;\n\n        float32View[index + 14] = uvs.x2;\n        float32View[index + 15] = uvs.y2;\n\n        uint32View[index + 16] = argb;\n        uint32View[index + 17] = textureIdAndRound;\n\n        // xy\n        float32View[index + 18] = (a * w1) + (c * h0) + tx;\n        float32View[index + 19] = (d * h0) + (b * w1) + ty;\n\n        float32View[index + 20] = uvs.x3;\n        float32View[index + 21] = uvs.y3;\n\n        uint32View[index + 22] = argb;\n        uint32View[index + 23] = textureIdAndRound;\n    }\n}\n\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 6653, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6659, "column": 0}, "map": {"version":3,"file":"buildRectangle.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildRectangle.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport type { ShapeBuildCommand } from './ShapeBuildCommand';\n\n/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n */\nexport const buildRectangle: ShapeBuildCommand<Rectangle> = {\n    extension: {\n        type: ExtensionType.ShapeBuilder,\n        name: 'rectangle',\n    },\n\n    build(shape: Rectangle, points: number[]): number[]\n    {\n        const rectData = shape;\n        const x = rectData.x;\n        const y = rectData.y;\n        const width = rectData.width;\n        const height = rectData.height;\n\n        if (!(width >= 0 && height >= 0))\n        {\n            return points;\n        }\n\n        points[0] = x;\n        points[1] = y;\n        points[2] = x + width;\n        points[3] = y;\n        points[4] = x + width;\n        points[5] = y + height;\n        points[6] = x;\n        points[7] = y + height;\n\n        return points;\n    },\n\n    triangulate(\n        points: number[],\n\n        vertices: number[],\n        verticesStride: number,\n        verticesOffset: number,\n\n        indices: number[],\n        indicesOffset: number\n    )\n    {\n        let count = 0;\n\n        verticesOffset *= verticesStride;\n\n        vertices[verticesOffset + count] = points[0];\n        vertices[verticesOffset + count + 1] = points[1];\n\n        count += verticesStride;\n\n        vertices[verticesOffset + count] = points[2];\n        vertices[verticesOffset + count + 1] = points[3];\n\n        count += verticesStride;\n\n        vertices[verticesOffset + count] = points[6];\n        vertices[verticesOffset + count + 1] = points[7];\n\n        count += verticesStride;\n\n        vertices[verticesOffset + count] = points[4];\n        vertices[verticesOffset + count + 1] = points[5];\n\n        count += verticesStride;\n\n        const verticesIndex = verticesOffset / verticesStride;\n\n        // triangle 1\n        indices[indicesOffset++] = verticesIndex;\n        indices[indicesOffset++] = verticesIndex + 1;\n        indices[indicesOffset++] = verticesIndex + 2;\n\n        // triangle 2\n        indices[indicesOffset++] = verticesIndex + 1;\n        indices[indicesOffset++] = verticesIndex + 3;\n        indices[indicesOffset++] = verticesIndex + 2;\n    },\n};\n"],"names":[],"mappings":";;;;;;AAYO,MAAM,cAA+C,GAAA;IACxD,SAAW,EAAA;QACP,qKAAM,gBAAc,CAAA,YAAA;QACpB,IAAM,EAAA,WAAA;IAAA,CACV;IAEA,KAAA,EAAM,KAAA,EAAkB,MACxB,EAAA;QACI,MAAM,QAAW,GAAA,KAAA,CAAA;QACjB,MAAM,IAAI,QAAS,CAAA,CAAA,CAAA;QACnB,MAAM,IAAI,QAAS,CAAA,CAAA,CAAA;QACnB,MAAM,QAAQ,QAAS,CAAA,KAAA,CAAA;QACvB,MAAM,SAAS,QAAS,CAAA,MAAA,CAAA;QAExB,IAAI,CAAA,CAAE,KAAA,IAAS,CAAK,IAAA,MAAA,IAAU,CAC9B,CAAA,EAAA;YACW,OAAA,MAAA,CAAA;QAAA,CACX;QAEA,MAAA,CAAO,CAAC,CAAI,GAAA,CAAA,CAAA;QACZ,MAAA,CAAO,CAAC,CAAI,GAAA,CAAA,CAAA;QACL,MAAA,CAAA,CAAC,CAAA,GAAI,CAAI,GAAA,KAAA,CAAA;QAChB,MAAA,CAAO,CAAC,CAAI,GAAA,CAAA,CAAA;QACL,MAAA,CAAA,CAAC,CAAA,GAAI,CAAI,GAAA,KAAA,CAAA;QACT,MAAA,CAAA,CAAC,CAAA,GAAI,CAAI,GAAA,MAAA,CAAA;QAChB,MAAA,CAAO,CAAC,CAAI,GAAA,CAAA,CAAA;QACL,MAAA,CAAA,CAAC,CAAA,GAAI,CAAI,GAAA,MAAA,CAAA;QAET,OAAA,MAAA,CAAA;IAAA,CACX;IAEA,aACI,MAEA,EAAA,QAAA,EACA,cACA,EAAA,cAAA,EAEA,OAAA,EACA,aAEJ,EAAA;QACI,IAAI,KAAQ,GAAA,CAAA,CAAA;QAEM,cAAA,IAAA,cAAA,CAAA;QAElB,QAAA,CAAS,cAAiB,GAAA,KAAK,CAAI,GAAA,MAAA,CAAO,CAAC,CAAA,CAAA;QAC3C,QAAA,CAAS,cAAiB,GAAA,KAAA,GAAQ,CAAC,CAAA,GAAI,MAAA,CAAO,CAAC,CAAA,CAAA;QAEtC,KAAA,IAAA,cAAA,CAAA;QAET,QAAA,CAAS,cAAiB,GAAA,KAAK,CAAI,GAAA,MAAA,CAAO,CAAC,CAAA,CAAA;QAC3C,QAAA,CAAS,cAAiB,GAAA,KAAA,GAAQ,CAAC,CAAA,GAAI,MAAA,CAAO,CAAC,CAAA,CAAA;QAEtC,KAAA,IAAA,cAAA,CAAA;QAET,QAAA,CAAS,cAAiB,GAAA,KAAK,CAAI,GAAA,MAAA,CAAO,CAAC,CAAA,CAAA;QAC3C,QAAA,CAAS,cAAiB,GAAA,KAAA,GAAQ,CAAC,CAAA,GAAI,MAAA,CAAO,CAAC,CAAA,CAAA;QAEtC,KAAA,IAAA,cAAA,CAAA;QAET,QAAA,CAAS,cAAiB,GAAA,KAAK,CAAI,GAAA,MAAA,CAAO,CAAC,CAAA,CAAA;QAC3C,QAAA,CAAS,cAAiB,GAAA,KAAA,GAAQ,CAAC,CAAA,GAAI,MAAA,CAAO,CAAC,CAAA,CAAA;QAEtC,KAAA,IAAA,cAAA,CAAA;QAET,MAAM,gBAAgB,cAAiB,GAAA,cAAA,CAAA;QAGvC,OAAA,CAAQ,eAAe,CAAI,GAAA,aAAA,CAAA;QACnB,OAAA,CAAA,aAAA,EAAe,CAAA,GAAI,aAAgB,GAAA,CAAA,CAAA;QACnC,OAAA,CAAA,aAAA,EAAe,CAAA,GAAI,aAAgB,GAAA,CAAA,CAAA;QAGnC,OAAA,CAAA,aAAA,EAAe,CAAA,GAAI,aAAgB,GAAA,CAAA,CAAA;QACnC,OAAA,CAAA,aAAA,EAAe,CAAA,GAAI,aAAgB,GAAA,CAAA,CAAA;QACnC,OAAA,CAAA,aAAA,EAAe,CAAA,GAAI,aAAgB,GAAA,CAAA,CAAA;IAAA,CAC/C;AACJ","ignoreList":[0]}},
    {"offset": {"line": 6715, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6721, "column": 0}, "map": {"version":3,"file":"triangulateWithHoles.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/utils/triangulateWithHoles.ts"],"sourcesContent":["import { default as earcut } from 'earcut';\n\nexport function triangulateWithHoles(\n    points: number[],\n    holes: number[],\n    vertices: number[],\n    verticesStride: number,\n    verticesOffset: number,\n\n    indices: number[],\n    indicesOffset: number\n)\n{\n    const triangles = earcut(points, holes, 2);\n\n    if (!triangles)\n    {\n        return;\n    }\n\n    for (let i = 0; i < triangles.length; i += 3)\n    {\n        indices[indicesOffset++] = (triangles[i] + verticesOffset);\n        indices[indicesOffset++] = (triangles[i + 1] + verticesOffset);\n        indices[indicesOffset++] = (triangles[i + 2] + verticesOffset);\n    }\n\n    let index = verticesOffset * verticesStride;\n\n    for (let i = 0; i < points.length; i += 2)\n    {\n        vertices[index] = points[i];\n        vertices[index + 1] = points[i + 1];\n\n        index += verticesStride;\n    }\n}\n\n"],"names":[],"mappings":";;;;;;AAEO,SAAS,qBACZ,MACA,EAAA,KAAA,EACA,QAAA,EACA,cACA,EAAA,cAAA,EAEA,OAAA,EACA,aAEJ,EAAA;IACI,MAAM,SAAY,+IAAA,UAAA,EAAO,MAAQ,EAAA,KAAA,EAAO,CAAC,CAAA,CAAA;IAEzC,IAAI,CAAC,SACL,EAAA;QACI,OAAA;IAAA,CACJ;IAEA,IAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,SAAU,CAAA,MAAA,EAAQ,KAAK,CAC3C,CAAA;QACI,OAAA,CAAQ,aAAe,EAAA,CAAA,GAAK,SAAU,CAAA,CAAC,CAAI,GAAA,cAAA,CAAA;QAC3C,OAAA,CAAQ,aAAe,EAAA,CAAA,GAAK,SAAU,CAAA,CAAA,GAAI,CAAC,CAAI,GAAA,cAAA,CAAA;QAC/C,OAAA,CAAQ,aAAe,EAAA,CAAA,GAAK,SAAU,CAAA,CAAA,GAAI,CAAC,CAAI,GAAA,cAAA,CAAA;IAAA,CACnD;IAEA,IAAI,QAAQ,cAAiB,GAAA,cAAA,CAAA;IAE7B,IAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,MAAO,CAAA,MAAA,EAAQ,KAAK,CACxC,CAAA;QACa,QAAA,CAAA,KAAK,CAAI,GAAA,MAAA,CAAO,CAAC,CAAA,CAAA;QAC1B,QAAA,CAAS,KAAQ,GAAA,CAAC,CAAI,GAAA,MAAA,CAAO,IAAI,CAAC,CAAA,CAAA;QAEzB,KAAA,IAAA,cAAA,CAAA;IAAA,CACb;AACJ","ignoreList":[0]}},
    {"offset": {"line": 6746, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6752, "column": 0}, "map": {"version":3,"file":"buildPolygon.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildPolygon.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\nimport { triangulateWithHoles } from '../utils/triangulateWithHoles';\n\nimport type { Polygon } from '../../../../maths/shapes/Polygon';\nimport type { ShapeBuildCommand } from './ShapeBuildCommand';\n\nconst emptyArray: number[] = [];\n\n/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n */\nexport const buildPolygon: ShapeBuildCommand<Polygon> = {\n    extension: {\n        type: ExtensionType.ShapeBuilder,\n        name: 'polygon',\n    },\n\n    build(shape: Polygon, points: number[]): number[]\n    {\n        for (let i = 0; i < shape.points.length; i++)\n        {\n            points[i] = shape.points[i];\n        }\n\n        return points;\n    },\n\n    triangulate(\n        points: number[],\n        //  holes: number[],\n        vertices: number[],\n        verticesStride: number,\n        verticesOffset: number,\n\n        indices: number[],\n        indicesOffset: number\n    )\n    {\n        triangulateWithHoles(points, emptyArray, vertices, verticesStride, verticesOffset, indices, indicesOffset);\n    },\n\n};\n"],"names":[],"mappings":";;;;;;;;AAMA,MAAM,aAAuB,EAAC,CAAA;AASvB,MAAM,YAA2C,GAAA;IACpD,SAAW,EAAA;QACP,qKAAM,gBAAc,CAAA,YAAA;QACpB,IAAM,EAAA,SAAA;IAAA,CACV;IAEA,KAAA,EAAM,KAAA,EAAgB,MACtB,EAAA;QACI,IAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,KAAM,CAAA,MAAA,CAAO,MAAA,EAAQ,CACzC,EAAA,CAAA;YACI,MAAA,CAAO,CAAC,CAAA,GAAI,KAAM,CAAA,MAAA,CAAO,CAAC,CAAA,CAAA;QAAA,CAC9B;QAEO,OAAA,MAAA,CAAA;IAAA,CACX;IAEA,aACI,MAEA,EAAA,QAAA,EACA,cACA,EAAA,cAAA,EAEA,OAAA,EACA,aAEJ,EAAA;+MACI,uBAAA,EAAqB,QAAQ,UAAY,EAAA,QAAA,EAAU,cAAgB,EAAA,cAAA,EAAgB,SAAS,aAAa,CAAA,CAAA;IAAA,CAC7G;AAEJ","ignoreList":[0]}},
    {"offset": {"line": 6778, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6784, "column": 0}, "map": {"version":3,"file":"buildTriangle.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildTriangle.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { Triangle } from '../../../../maths/shapes/Triangle';\nimport type { ShapeBuildCommand } from './ShapeBuildCommand';\n\n/**\n * Builds a triangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n */\nexport const buildTriangle: ShapeBuildCommand<Triangle> = {\n    extension: {\n        type: ExtensionType.ShapeBuilder,\n        name: 'triangle',\n    },\n\n    build(shape: Triangle, points: number[]): number[]\n    {\n        points[0] = shape.x;\n        points[1] = shape.y;\n        points[2] = shape.x2;\n        points[3] = shape.y2;\n        points[4] = shape.x3;\n        points[5] = shape.y3;\n\n        return points;\n    },\n\n    triangulate(\n        points: number[],\n\n        vertices: number[],\n        verticesStride: number,\n        verticesOffset: number,\n\n        indices: number[],\n        indicesOffset: number\n    )\n    {\n        let count = 0;\n\n        verticesOffset *= verticesStride;\n\n        vertices[verticesOffset + count] = points[0];\n        vertices[verticesOffset + count + 1] = points[1];\n\n        count += verticesStride;\n\n        vertices[verticesOffset + count] = points[2];\n        vertices[verticesOffset + count + 1] = points[3];\n\n        count += verticesStride;\n\n        vertices[verticesOffset + count] = points[4];\n        vertices[verticesOffset + count + 1] = points[5];\n\n        const verticesIndex = verticesOffset / verticesStride;\n\n        // triangle 1\n        indices[indicesOffset++] = verticesIndex;\n        indices[indicesOffset++] = verticesIndex + 1;\n        indices[indicesOffset++] = verticesIndex + 2;\n    },\n};\n"],"names":[],"mappings":";;;;;;AAYO,MAAM,aAA6C,GAAA;IACtD,SAAW,EAAA;QACP,qKAAM,gBAAc,CAAA,YAAA;QACpB,IAAM,EAAA,UAAA;IAAA,CACV;IAEA,KAAA,EAAM,KAAA,EAAiB,MACvB,EAAA;QACW,MAAA,CAAA,CAAC,CAAA,GAAI,KAAM,CAAA,CAAA,CAAA;QACX,MAAA,CAAA,CAAC,CAAA,GAAI,KAAM,CAAA,CAAA,CAAA;QACX,MAAA,CAAA,CAAC,CAAA,GAAI,KAAM,CAAA,EAAA,CAAA;QACX,MAAA,CAAA,CAAC,CAAA,GAAI,KAAM,CAAA,EAAA,CAAA;QACX,MAAA,CAAA,CAAC,CAAA,GAAI,KAAM,CAAA,EAAA,CAAA;QACX,MAAA,CAAA,CAAC,CAAA,GAAI,KAAM,CAAA,EAAA,CAAA;QAEX,OAAA,MAAA,CAAA;IAAA,CACX;IAEA,aACI,MAEA,EAAA,QAAA,EACA,cACA,EAAA,cAAA,EAEA,OAAA,EACA,aAEJ,EAAA;QACI,IAAI,KAAQ,GAAA,CAAA,CAAA;QAEM,cAAA,IAAA,cAAA,CAAA;QAElB,QAAA,CAAS,cAAiB,GAAA,KAAK,CAAI,GAAA,MAAA,CAAO,CAAC,CAAA,CAAA;QAC3C,QAAA,CAAS,cAAiB,GAAA,KAAA,GAAQ,CAAC,CAAA,GAAI,MAAA,CAAO,CAAC,CAAA,CAAA;QAEtC,KAAA,IAAA,cAAA,CAAA;QAET,QAAA,CAAS,cAAiB,GAAA,KAAK,CAAI,GAAA,MAAA,CAAO,CAAC,CAAA,CAAA;QAC3C,QAAA,CAAS,cAAiB,GAAA,KAAA,GAAQ,CAAC,CAAA,GAAI,MAAA,CAAO,CAAC,CAAA,CAAA;QAEtC,KAAA,IAAA,cAAA,CAAA;QAET,QAAA,CAAS,cAAiB,GAAA,KAAK,CAAI,GAAA,MAAA,CAAO,CAAC,CAAA,CAAA;QAC3C,QAAA,CAAS,cAAiB,GAAA,KAAA,GAAQ,CAAC,CAAA,GAAI,MAAA,CAAO,CAAC,CAAA,CAAA;QAE/C,MAAM,gBAAgB,cAAiB,GAAA,cAAA,CAAA;QAGvC,OAAA,CAAQ,eAAe,CAAI,GAAA,aAAA,CAAA;QACnB,OAAA,CAAA,aAAA,EAAe,CAAA,GAAI,aAAgB,GAAA,CAAA,CAAA;QACnC,OAAA,CAAA,aAAA,EAAe,CAAA,GAAI,aAAgB,GAAA,CAAA,CAAA;IAAA,CAC/C;AACJ","ignoreList":[0]}},
    {"offset": {"line": 6823, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6829, "column": 0}, "map": {"version":3,"file":"buildCircle.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildCircle.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { Circle } from '../../../../maths/shapes/Circle';\nimport type { Ellipse } from '../../../../maths/shapes/Ellipse';\nimport type { RoundedRectangle } from '../../../../maths/shapes/RoundedRectangle';\nimport type { ShapeBuildCommand } from './ShapeBuildCommand';\n\ntype RoundedShape = Circle | Ellipse | RoundedRectangle;\n\n/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n */\nexport const buildCircle: ShapeBuildCommand<RoundedShape> = {\n    extension: {\n        type: ExtensionType.ShapeBuilder,\n        name: 'circle',\n    },\n\n    build(shape: RoundedShape, points: number[])\n    {\n        let x;\n        let y;\n        let dx;\n        let dy;\n\n        let rx;\n        let ry;\n\n        if (shape.type === 'circle')\n        {\n            const circle = shape as Circle;\n\n            x = circle.x;\n            y = circle.y;\n            rx = ry = circle.radius;\n            dx = dy = 0;\n        }\n\n        else if (shape.type === 'ellipse')\n        {\n            const ellipse = shape as Ellipse;\n\n            x = ellipse.x;\n            y = ellipse.y;\n            rx = ellipse.halfWidth;\n            ry = ellipse.halfHeight;\n            dx = dy = 0;\n        }\n        else\n        {\n            const roundedRect = shape as RoundedRectangle;\n            const halfWidth = roundedRect.width / 2;\n            const halfHeight = roundedRect.height / 2;\n\n            x = roundedRect.x + halfWidth;\n            y = roundedRect.y + halfHeight;\n            rx = ry = Math.max(0, Math.min(roundedRect.radius, Math.min(halfWidth, halfHeight)));\n            dx = halfWidth - rx;\n            dy = halfHeight - ry;\n        }\n\n        if (!(rx >= 0 && ry >= 0 && dx >= 0 && dy >= 0))\n        {\n            return points;\n        }\n\n        // Choose a number of segments such that the maximum absolute deviation from the circle is approximately 0.029\n        const n = Math.ceil(2.3 * Math.sqrt(rx + ry));\n        const m = (n * 8) + (dx ? 4 : 0) + (dy ? 4 : 0);\n\n        if (m === 0)\n        {\n            return points;\n        }\n\n        if (n === 0)\n        {\n            points[0] = points[6] = x + dx;\n            points[1] = points[3] = y + dy;\n            points[2] = points[4] = x - dx;\n            points[5] = points[7] = y - dy;\n\n            return points;\n        }\n\n        let j1 = 0;\n        let j2 = (n * 4) + (dx ? 2 : 0) + 2;\n        let j3 = j2;\n        let j4 = m;\n\n        let x0 = dx + rx;\n        let y0 = dy;\n        let x1 = x + x0;\n        let x2 = x - x0;\n        let y1 = y + y0;\n\n        points[j1++] = x1;\n        points[j1++] = y1;\n        points[--j2] = y1;\n        points[--j2] = x2;\n\n        if (dy)\n        {\n            const y2 = y - y0;\n\n            points[j3++] = x2;\n            points[j3++] = y2;\n            points[--j4] = y2;\n            points[--j4] = x1;\n        }\n\n        for (let i = 1; i < n; i++)\n        {\n            const a = Math.PI / 2 * (i / n);\n            const x0 = dx + (Math.cos(a) * rx);\n            const y0 = dy + (Math.sin(a) * ry);\n            const x1 = x + x0;\n            const x2 = x - x0;\n            const y1 = y + y0;\n            const y2 = y - y0;\n\n            points[j1++] = x1;\n            points[j1++] = y1;\n            points[--j2] = y1;\n            points[--j2] = x2;\n            points[j3++] = x2;\n            points[j3++] = y2;\n            points[--j4] = y2;\n            points[--j4] = x1;\n        }\n\n        x0 = dx;\n        y0 = dy + ry;\n        x1 = x + x0;\n        x2 = x - x0;\n        y1 = y + y0;\n        const y2 = y - y0;\n\n        points[j1++] = x1;\n        points[j1++] = y1;\n        points[--j4] = y2;\n        points[--j4] = x1;\n\n        if (dx)\n        {\n            points[j1++] = x2;\n            points[j1++] = y1;\n            points[--j4] = y2;\n            points[--j4] = x2;\n        }\n\n        return points;\n    },\n\n    triangulate(points, vertices, verticesStride, verticesOffset, indices, indicesOffset)\n    {\n        if (points.length === 0)\n        {\n            return;\n        }\n\n        // Compute center (average of all points)\n        let centerX = 0; let\n            centerY = 0;\n\n        for (let i = 0; i < points.length; i += 2)\n        {\n            centerX += points[i];\n            centerY += points[i + 1];\n        }\n        centerX /= (points.length / 2);\n        centerY /= (points.length / 2);\n\n        // Set center vertex\n        let count = verticesOffset;\n\n        vertices[count * verticesStride] = centerX;\n        vertices[(count * verticesStride) + 1] = centerY;\n        const centerIndex = count++;\n\n        // Set edge vertices and indices\n        for (let i = 0; i < points.length; i += 2)\n        {\n            vertices[count * verticesStride] = points[i];\n            vertices[(count * verticesStride) + 1] = points[i + 1];\n\n            if (i > 0)\n            { // Skip first point for indices\n                indices[indicesOffset++] = count;\n                indices[indicesOffset++] = centerIndex;\n                indices[indicesOffset++] = count - 1;\n            }\n            count++;\n        }\n\n        // Connect last point to the first edge point\n        indices[indicesOffset++] = centerIndex + 1;\n        indices[indicesOffset++] = centerIndex;\n        indices[indicesOffset++] = count - 1;\n    }\n\n};\n\nexport const buildEllipse = { ...buildCircle, extension: { ...buildCircle.extension, name: 'ellipse' } };\nexport const buildRoundedRectangle = { ...buildCircle, extension: { ...buildCircle.extension, name: 'roundedRectangle' } };\n"],"names":["y2","x0","y0","x1","x2","y1"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 6989, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6995, "column": 0}, "map": {"version":3,"file":"transformVertices.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/shared/geometry/utils/transformVertices.ts"],"sourcesContent":["import type { Matrix } from '../../../../../maths/matrix/Matrix';\n\n/**\n * Transforms the vertices in an array with the given matrix.\n * @param vertices - the vertices to transform\n * @param m - the matrix to apply to the vertices\n * @param offset - the offset of the vertices (defaults to 0)\n * @param stride - the stride of the vertices (defaults to 2)\n * @param size - the size of the vertices (defaults to vertices.length / stride - offset)\n * @memberof rendering\n */\nexport function transformVertices(vertices: number[], m: Matrix, offset?: number, stride?: number, size?: number)\n{\n    const a = m.a;\n    const b = m.b;\n    const c = m.c;\n    const d = m.d;\n    const tx = m.tx;\n    const ty = m.ty;\n\n    offset ||= 0;\n    stride ||= 2;\n    size ||= (vertices.length / stride) - offset;\n\n    let index = offset * stride;\n\n    for (let i = 0; i < size; i++)\n    {\n        const x = vertices[index];\n        const y = vertices[index + 1];\n\n        vertices[index] = (a * x) + (c * y) + tx;\n        vertices[index + 1] = (b * x) + (d * y) + ty;\n\n        index += stride;\n    }\n}\n"],"names":[],"mappings":";;;;AAWO,SAAS,iBAAkB,CAAA,QAAA,EAAoB,CAAW,EAAA,MAAA,EAAiB,MAAA,EAAiB,IACnG,EAAA;IACI,MAAM,IAAI,CAAE,CAAA,CAAA,CAAA;IACZ,MAAM,IAAI,CAAE,CAAA,CAAA,CAAA;IACZ,MAAM,IAAI,CAAE,CAAA,CAAA,CAAA;IACZ,MAAM,IAAI,CAAE,CAAA,CAAA,CAAA;IACZ,MAAM,KAAK,CAAE,CAAA,EAAA,CAAA;IACb,MAAM,KAAK,CAAE,CAAA,EAAA,CAAA;IAEF,MAAA,IAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA;IACA,MAAA,IAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA;IACD,IAAA,IAAA,CAAA,IAAA,GAAA,QAAA,CAAS,MAAA,GAAS,MAAU,GAAA,MAAA,CAAA,CAAA;IAEtC,IAAI,QAAQ,MAAS,GAAA,MAAA,CAAA;IAErB,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,IAAA,EAAM,CAC1B,EAAA,CAAA;QACU,MAAA,CAAA,GAAI,QAAA,CAAS,KAAK,CAAA,CAAA;QAClB,MAAA,CAAA,GAAI,QAAS,CAAA,KAAA,GAAQ,CAAC,CAAA,CAAA;QAE5B,QAAA,CAAS,KAAK,CAAA,GAAK,CAAI,GAAA,CAAA,GAAM,IAAI,CAAK,GAAA,EAAA,CAAA;QACtC,QAAA,CAAS,QAAQ,CAAC,CAAA,GAAK,CAAI,GAAA,CAAA,GAAM,IAAI,CAAK,GAAA,EAAA,CAAA;QAEjC,KAAA,IAAA,MAAA,CAAA;IAAA,CACb;AACJ","ignoreList":[0]}},
    {"offset": {"line": 7020, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7026, "column": 0}, "map": {"version":3,"file":"const.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/const.ts"],"sourcesContent":["export type LineCap = 'butt' | 'round' | 'square';\nexport type LineJoin = 'round' | 'bevel' | 'miter';\n\nexport const closePointEps = 1e-4;\nexport const curveEps = 0.0001;\n"],"names":[],"mappings":";;;;;AAGO,MAAM,aAAgB,GAAA,KAAA;AACtB,MAAM,QAAW,GAAA","ignoreList":[0]}},
    {"offset": {"line": 7035, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7041, "column": 0}, "map": {"version":3,"file":"buildPixelLine.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildPixelLine.ts"],"sourcesContent":["import { closePointEps } from '../const';\n\n/**\n * Builds a line to draw using the polygon method.\n * @param points\n * @param closed\n * @param vertices\n * @param indices\n */\nexport function buildPixelLine(\n    points: number[],\n    closed: boolean,\n    vertices: number[],\n    indices: number[],\n): void\n{\n    const eps = closePointEps;\n\n    if (points.length === 0)\n    {\n        return;\n    }\n\n    // get first and last point.. figure out the middle!\n\n    const fx = points[0];\n    const fy = points[1];\n\n    const lx = points[points.length - 2];\n\n    const ly = points[points.length - 1];\n\n    const closePath = closed || (Math.abs(fx - lx) < eps && Math.abs(fy - ly) < eps);\n\n    const verts = vertices;\n\n    const length = points.length / 2;\n    const indexStart = verts.length / 2;\n\n    for (let i = 0; i < length; i++)\n    {\n        verts.push(points[(i * 2)]);\n        verts.push(points[(i * 2) + 1]);\n    }\n\n    for (let i = 0; i < length - 1; i++)\n    {\n        indices.push(indexStart + i, indexStart + i + 1);\n    }\n\n    if (closePath)\n    {\n        indices.push(indexStart + length - 1, indexStart);\n    }\n}\n\n"],"names":[],"mappings":";;;;;;AASO,SAAS,cACZ,CAAA,MAAA,EACA,MACA,EAAA,QAAA,EACA,OAEJ,EAAA;IACI,MAAM,GAAM,8KAAA,gBAAA,CAAA;IAER,IAAA,MAAA,CAAO,MAAA,KAAW,CACtB,EAAA;QACI,OAAA;IAAA,CACJ;IAIM,MAAA,EAAA,GAAK,MAAA,CAAO,CAAC,CAAA,CAAA;IACb,MAAA,EAAA,GAAK,MAAA,CAAO,CAAC,CAAA,CAAA;IAEnB,MAAM,EAAK,GAAA,MAAA,CAAO,MAAO,CAAA,MAAA,GAAS,CAAC,CAAA,CAAA;IAEnC,MAAM,EAAK,GAAA,MAAA,CAAO,MAAO,CAAA,MAAA,GAAS,CAAC,CAAA,CAAA;IAEnC,MAAM,SAAY,GAAA,MAAA,IAAW,IAAK,CAAA,GAAA,CAAI,EAAK,GAAA,EAAE,CAAI,GAAA,GAAA,IAAO,IAAK,CAAA,GAAA,CAAI,EAAK,GAAA,EAAE,CAAI,GAAA,GAAA,CAAA;IAE5E,MAAM,KAAQ,GAAA,QAAA,CAAA;IAER,MAAA,MAAA,GAAS,OAAO,MAAS,GAAA,CAAA,CAAA;IACzB,MAAA,UAAA,GAAa,MAAM,MAAS,GAAA,CAAA,CAAA;IAElC,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,MAAA,EAAQ,CAC5B,EAAA,CAAA;QACI,KAAA,CAAM,IAAK,CAAA,MAAA,CAAQ,CAAI,GAAA,CAAE,CAAC,CAAA,CAAA;QAC1B,KAAA,CAAM,IAAK,CAAA,MAAA,CAAQ,CAAI,GAAA,CAAA,GAAK,CAAC,CAAC,CAAA,CAAA;IAAA,CAClC;IAEA,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,MAAA,GAAS,GAAG,CAChC,EAAA,CAAA;QACI,OAAA,CAAQ,IAAK,CAAA,UAAA,GAAa,CAAG,EAAA,UAAA,GAAa,IAAI,CAAC,CAAA,CAAA;IAAA,CACnD;IAEA,IAAI,SACJ,EAAA;QACI,OAAA,CAAQ,IAAK,CAAA,UAAA,GAAa,MAAS,GAAA,CAAA,EAAG,UAAU,CAAA,CAAA;IAAA,CACpD;AACJ","ignoreList":[0]}},
    {"offset": {"line": 7073, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7079, "column": 0}, "map": {"version":3,"file":"getOrientationOfPoints.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/utils/getOrientationOfPoints.ts"],"sourcesContent":["export function getOrientationOfPoints(points: number[]): number\n{\n    const m = points.length;\n\n    if (m < 6)\n    {\n        return 1;\n    }\n\n    let area = 0;\n\n    for (let i = 0, x1 = points[m - 2], y1 = points[m - 1]; i < m; i += 2)\n    {\n        const x2 = points[i];\n        const y2 = points[i + 1];\n\n        area += (x2 - x1) * (y2 + y1);\n\n        x1 = x2;\n        y1 = y2;\n    }\n\n    if (area < 0)\n    {\n        return -1;\n    }\n\n    return 1;\n}\n"],"names":[],"mappings":";;;;AAAO,SAAS,uBAAuB,MACvC,EAAA;IACI,MAAM,IAAI,MAAO,CAAA,MAAA,CAAA;IAEjB,IAAI,IAAI,CACR,EAAA;QACW,OAAA,CAAA,CAAA;IAAA,CACX;IAEA,IAAI,IAAO,GAAA,CAAA,CAAA;IAEX,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,EAAK,GAAA,MAAA,CAAO,IAAI,CAAC,CAAA,EAAG,EAAK,GAAA,MAAA,CAAO,IAAI,CAAC,CAAA,EAAG,CAAI,GAAA,CAAA,EAAG,KAAK,CACpE,CAAA;QACU,MAAA,EAAA,GAAK,MAAA,CAAO,CAAC,CAAA,CAAA;QACb,MAAA,EAAA,GAAK,MAAO,CAAA,CAAA,GAAI,CAAC,CAAA,CAAA;QAEd,IAAA,IAAA,CAAA,EAAA,GAAK,EAAA,IAAA,CAAO,EAAK,GAAA,EAAA,CAAA,CAAA;QAErB,EAAA,GAAA,EAAA,CAAA;QACA,EAAA,GAAA,EAAA,CAAA;IAAA,CACT;IAEA,IAAI,OAAO,CACX,EAAA;QACW,OAAA,CAAA,CAAA,CAAA;IAAA,CACX;IAEO,OAAA,CAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 7103, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7109, "column": 0}, "map": {"version":3,"file":"buildLine.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildLine.ts"],"sourcesContent":["import { Point } from '../../../../maths/point/Point';\nimport { closePointEps, curveEps } from '../const';\nimport { getOrientationOfPoints } from '../utils/getOrientationOfPoints';\n\nimport type { StrokeAttributes } from '../FillTypes';\n\n/**\n * Buffers vertices to draw a square cap.\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {number} x - X-coord of end point\n * @param {number} y - Y-coord of end point\n * @param {number} nx - X-coord of line normal pointing inside\n * @param {number} ny - Y-coord of line normal pointing inside\n * @param {number} innerWeight - Weight of inner points\n * @param {number} outerWeight - Weight of outer points\n * @param {boolean} clockwise - Whether the cap is drawn clockwise\n * @param {Array<number>} verts - vertex buffer\n * @returns {number} - no. of vertices pushed\n */\nfunction square(\n    x: number,\n    y: number,\n    nx: number,\n    ny: number,\n    innerWeight: number,\n    outerWeight: number,\n    clockwise: boolean, /* rotation for square (true at left end, false at right end) */\n    verts: Array<number>\n): number\n{\n    const ix = x - (nx * innerWeight);\n    const iy = y - (ny * innerWeight);\n    const ox = x + (nx * outerWeight);\n    const oy = y + (ny * outerWeight);\n\n    /* Rotate nx,ny for extension vector */\n    let exx; let\n        eyy;\n\n    if (clockwise)\n    {\n        exx = ny;\n        eyy = -nx;\n    }\n    else\n    {\n        exx = -ny;\n        eyy = nx;\n    }\n\n    /* [i|0]x,y extended at cap */\n    const eix = ix + exx;\n    const eiy = iy + eyy;\n    const eox = ox + exx;\n    const eoy = oy + eyy;\n\n    /* Square itself must be inserted clockwise*/\n    verts.push(eix, eiy);\n    verts.push(eox, eoy);\n\n    return 2;\n}\n\n/**\n * Buffers vertices to draw an arc at the line joint or cap.\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {number} cx - X-coord of center\n * @param {number} cy - Y-coord of center\n * @param {number} sx - X-coord of arc start\n * @param {number} sy - Y-coord of arc start\n * @param {number} ex - X-coord of arc end\n * @param {number} ey - Y-coord of arc end\n * @param {Array[]} verts - buffer of vertices\n * @param {boolean} clockwise - orientation of vertices\n * @returns {number} - no. of vertices pushed\n */\nfunction round(\n    cx: number,\n    cy: number,\n    sx: number,\n    sy: number,\n    ex: number,\n    ey: number,\n    verts: number[],\n    clockwise: boolean, /* if not cap, then clockwise is turn of joint, otherwise rotation from angle0 to angle1 */\n): number\n{\n    const cx2p0x = sx - cx;\n    const cy2p0y = sy - cy;\n\n    let angle0 = Math.atan2(cx2p0x, cy2p0y);\n    let angle1 = Math.atan2(ex - cx, ey - cy);\n\n    if (clockwise && angle0 < angle1)\n    {\n        angle0 += Math.PI * 2;\n    }\n    else if (!clockwise && angle0 > angle1)\n    {\n        angle1 += Math.PI * 2;\n    }\n\n    let startAngle = angle0;\n    const angleDiff = angle1 - angle0;\n    const absAngleDiff = Math.abs(angleDiff);\n\n    const radius = Math.sqrt((cx2p0x * cx2p0x) + (cy2p0y * cy2p0y));\n    const segCount = ((15 * absAngleDiff * Math.sqrt(radius) / Math.PI) >> 0) + 1;\n    const angleInc = angleDiff / segCount;\n\n    startAngle += angleInc;\n\n    if (clockwise)\n    {\n        verts.push(cx, cy);\n        verts.push(sx, sy);\n\n        for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc)\n        {\n            verts.push(cx, cy);\n            verts.push(cx + ((Math.sin(angle) * radius)),\n                cy + ((Math.cos(angle) * radius)));\n        }\n\n        verts.push(cx, cy);\n        verts.push(ex, ey);\n    }\n    else\n    {\n        verts.push(sx, sy);\n        verts.push(cx, cy);\n\n        for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc)\n        {\n            verts.push(cx + ((Math.sin(angle) * radius)),\n                cy + ((Math.cos(angle) * radius)));\n            verts.push(cx, cy);\n        }\n\n        verts.push(ex, ey);\n        verts.push(cx, cy);\n    }\n\n    return segCount * 2;\n}\n\n/**\n * Builds a line to draw using the polygon method.\n * @param points\n * @param lineStyle\n * @param flipAlignment\n * @param closed\n * @param vertices\n * @param indices\n */\nexport function buildLine(\n    points: number[],\n    lineStyle: StrokeAttributes,\n    flipAlignment: boolean,\n    closed: boolean,\n    vertices: number[],\n    indices: number[],\n): void\n{\n    // const shape = graphicsData.shape as Polygon;\n    //   let points = graphicsData.points || shape.points.slice();\n    const eps = closePointEps;\n\n    if (points.length === 0)\n    {\n        return;\n    }\n\n    const style = lineStyle;\n\n    let alignment = style.alignment;\n\n    if (lineStyle.alignment !== 0.5)\n    {\n        // rotate the points!\n        let orientation = getOrientationOfPoints(points);\n\n        if (flipAlignment)orientation *= -1;\n\n        alignment = ((alignment - 0.5) * orientation) + 0.5;\n    }\n\n    // get first and last point.. figure out the middle!\n    const firstPoint = new Point(points[0], points[1]);\n    const lastPoint = new Point(points[points.length - 2], points[points.length - 1]);\n    const closedShape = closed;\n    const closedPath = Math.abs(firstPoint.x - lastPoint.x) < eps\n        && Math.abs(firstPoint.y - lastPoint.y) < eps;\n\n    // if the first point is the last point - gonna have issues :)\n    if (closedShape)\n    {\n        // need to clone as we are going to slightly modify the shape..\n        points = points.slice();\n\n        if (closedPath)\n        {\n            points.pop();\n            points.pop();\n            lastPoint.set(points[points.length - 2], points[points.length - 1]);\n        }\n\n        const midPointX = (firstPoint.x + lastPoint.x) * 0.5;\n        const midPointY = (lastPoint.y + firstPoint.y) * 0.5;\n\n        points.unshift(midPointX, midPointY);\n        points.push(midPointX, midPointY);\n    }\n\n    const verts = vertices;\n\n    const length = points.length / 2;\n    let indexCount = points.length;\n    const indexStart = verts.length / 2;\n\n    // Max. inner and outer width\n    const width = style.width / 2;\n    const widthSquared = width * width;\n    const miterLimitSquared = style.miterLimit * style.miterLimit;\n\n    /* Line segments of interest where (x1,y1) forms the corner. */\n    let x0 = points[0];\n    let y0 = points[1];\n    let x1 = points[2];\n    let y1 = points[3];\n    let x2 = 0;\n    let y2 = 0;\n\n    /* perp[?](x|y) = the line normal with magnitude lineWidth. */\n    let perpX = -(y0 - y1);\n    let perpY = x0 - x1;\n    let perp1x = 0;\n    let perp1y = 0;\n\n    let dist = Math.sqrt((perpX * perpX) + (perpY * perpY));\n\n    perpX /= dist;\n    perpY /= dist;\n    perpX *= width;\n    perpY *= width;\n\n    const ratio = alignment;// 0.5;\n    const innerWeight = (1 - ratio) * 2;\n    const outerWeight = ratio * 2;\n\n    if (!closedShape)\n    {\n        if (style.cap === 'round')\n        {\n            indexCount += round(\n                x0 - (perpX * (innerWeight - outerWeight) * 0.5),\n                y0 - (perpY * (innerWeight - outerWeight) * 0.5),\n                x0 - (perpX * innerWeight),\n                y0 - (perpY * innerWeight),\n                x0 + (perpX * outerWeight),\n                y0 + (perpY * outerWeight),\n                verts,\n                true,\n            ) + 2;\n        }\n        else if (style.cap === 'square')\n        {\n            indexCount += square(x0, y0, perpX, perpY, innerWeight, outerWeight, true, verts);\n        }\n    }\n\n    // Push first point (below & above vertices)\n    verts.push(\n        x0 - (perpX * innerWeight),\n        y0 - (perpY * innerWeight));\n    verts.push(\n        x0 + (perpX * outerWeight),\n        y0 + (perpY * outerWeight));\n\n    for (let i = 1; i < length - 1; ++i)\n    {\n        x0 = points[(i - 1) * 2];\n        y0 = points[((i - 1) * 2) + 1];\n\n        x1 = points[i * 2];\n        y1 = points[(i * 2) + 1];\n\n        x2 = points[(i + 1) * 2];\n        y2 = points[((i + 1) * 2) + 1];\n\n        perpX = -(y0 - y1);\n        perpY = x0 - x1;\n\n        dist = Math.sqrt((perpX * perpX) + (perpY * perpY));\n        perpX /= dist;\n        perpY /= dist;\n        perpX *= width;\n        perpY *= width;\n\n        perp1x = -(y1 - y2);\n        perp1y = x1 - x2;\n\n        dist = Math.sqrt((perp1x * perp1x) + (perp1y * perp1y));\n        perp1x /= dist;\n        perp1y /= dist;\n        perp1x *= width;\n        perp1y *= width;\n\n        /* d[x|y](0|1) = the component displacement between points p(0,1|1,2) */\n        const dx0 = x1 - x0;\n        const dy0 = y0 - y1;\n        const dx1 = x1 - x2;\n        const dy1 = y2 - y1;\n\n        /* +ve if internal angle < 90 degree, -ve if internal angle > 90 degree. */\n        const dot = (dx0 * dx1) + (dy0 * dy1);\n        /* +ve if internal angle counterclockwise, -ve if internal angle clockwise. */\n        const cross = (dy0 * dx1) - (dy1 * dx0);\n        const clockwise = (cross < 0);\n\n        /* Going nearly parallel? */\n        /* atan(0.001) ~= 0.001 rad ~= 0.057 degree */\n        if (Math.abs(cross) < 0.001 * Math.abs(dot))\n        {\n            verts.push(\n                x1 - (perpX * innerWeight),\n                y1 - (perpY * innerWeight));\n            verts.push(\n                x1 + (perpX * outerWeight),\n                y1 + (perpY * outerWeight));\n\n            /* 180 degree corner? */\n            if (dot >= 0)\n            {\n                if (style.join === 'round')\n                {\n                    indexCount += round(\n                        x1, y1,\n                        x1 - (perpX * innerWeight), y1 - (perpY * innerWeight),\n                        x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight),\n                        verts, false) + 4;\n                }\n                else\n                {\n                    indexCount += 2;\n                }\n\n                verts.push(\n                    x1 - (perp1x * outerWeight),\n                    y1 - (perp1y * outerWeight));\n                verts.push(\n                    x1 + (perp1x * innerWeight),\n                    y1 + (perp1y * innerWeight));\n            }\n\n            continue;\n        }\n\n        /* p[x|y] is the miter point. pDist is the distance between miter point and p1. */\n        const c1 = ((-perpX + x0) * (-perpY + y1)) - ((-perpX + x1) * (-perpY + y0));\n        const c2 = ((-perp1x + x2) * (-perp1y + y1)) - ((-perp1x + x1) * (-perp1y + y2));\n        const px = ((dx0 * c2) - (dx1 * c1)) / cross;\n        const py = ((dy1 * c1) - (dy0 * c2)) / cross;\n        const pDist = ((px - x1) * (px - x1)) + ((py - y1) * (py - y1));\n\n        /* Inner miter point */\n        const imx = x1 + ((px - x1) * innerWeight);\n        const imy = y1 + ((py - y1) * innerWeight);\n        /* Outer miter point */\n        const omx = x1 - ((px - x1) * outerWeight);\n        const omy = y1 - ((py - y1) * outerWeight);\n\n        /* Is the inside miter point too far away, creating a spike? */\n        const smallerInsideSegmentSq = Math.min((dx0 * dx0) + (dy0 * dy0), (dx1 * dx1) + (dy1 * dy1));\n        const insideWeight = clockwise ? innerWeight : outerWeight;\n        const smallerInsideDiagonalSq = smallerInsideSegmentSq + (insideWeight * insideWeight * widthSquared);\n        const insideMiterOk = pDist <= smallerInsideDiagonalSq;\n\n        if (insideMiterOk)\n        {\n            if (style.join === 'bevel' || pDist / widthSquared > miterLimitSquared)\n            {\n                if (clockwise) /* rotating at inner angle */\n                {\n                    verts.push(imx, imy); // inner miter point\n                    verts.push(x1 + (perpX * outerWeight), y1 + (perpY * outerWeight)); // first segment's outer vertex\n                    verts.push(imx, imy); // inner miter point\n                    verts.push(x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight)); // second segment's outer vertex\n                }\n                else /* rotating at outer angle */\n                {\n                    verts.push(x1 - (perpX * innerWeight), y1 - (perpY * innerWeight)); // first segment's inner vertex\n                    verts.push(omx, omy); // outer miter point\n                    verts.push(x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight)); // second segment's outer vertex\n                    verts.push(omx, omy); // outer miter point\n                }\n\n                indexCount += 2;\n            }\n            else if (style.join === 'round')\n            {\n                if (clockwise) /* arc is outside */\n                {\n                    verts.push(imx, imy);\n                    verts.push(x1 + (perpX * outerWeight), y1 + (perpY * outerWeight));\n\n                    indexCount += round(\n                        x1, y1,\n                        x1 + (perpX * outerWeight), y1 + (perpY * outerWeight),\n                        x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight),\n                        verts, true\n                    ) + 4;\n\n                    verts.push(imx, imy);\n                    verts.push(x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight));\n                }\n                else /* arc is inside */\n                {\n                    verts.push(x1 - (perpX * innerWeight), y1 - (perpY * innerWeight));\n                    verts.push(omx, omy);\n\n                    indexCount += round(\n                        x1, y1,\n                        x1 - (perpX * innerWeight), y1 - (perpY * innerWeight),\n                        x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight),\n                        verts, false\n                    ) + 4;\n\n                    verts.push(x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight));\n                    verts.push(omx, omy);\n                }\n            }\n            else\n            {\n                verts.push(imx, imy);\n                verts.push(omx, omy);\n            }\n        }\n        else // inside miter is NOT ok\n        {\n            verts.push(x1 - (perpX * innerWeight), y1 - (perpY * innerWeight)); // first segment's inner vertex\n            verts.push(x1 + (perpX * outerWeight), y1 + (perpY * outerWeight)); // first segment's outer vertex\n            if (style.join === 'round')\n            {\n                if (clockwise) /* arc is outside */\n                {\n                    indexCount += round(\n                        x1, y1,\n                        x1 + (perpX * outerWeight), y1 + (perpY * outerWeight),\n                        x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight),\n                        verts, true\n                    ) + 2;\n                }\n                else /* arc is inside */\n                {\n                    indexCount += round(\n                        x1, y1,\n                        x1 - (perpX * innerWeight), y1 - (perpY * innerWeight),\n                        x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight),\n                        verts, false\n                    ) + 2;\n                }\n            }\n            else if (style.join === 'miter' && pDist / widthSquared <= miterLimitSquared)\n            {\n                if (clockwise)\n                {\n                    verts.push(omx, omy); // inner miter point\n                    verts.push(omx, omy); // inner miter point\n                }\n                else\n                {\n                    verts.push(imx, imy); // outer miter point\n                    verts.push(imx, imy); // outer miter point\n                }\n                indexCount += 2;\n            }\n            verts.push(x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight)); // second segment's inner vertex\n            verts.push(x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight)); // second segment's outer vertex\n            indexCount += 2;\n        }\n    }\n\n    x0 = points[(length - 2) * 2];\n    y0 = points[((length - 2) * 2) + 1];\n\n    x1 = points[(length - 1) * 2];\n    y1 = points[((length - 1) * 2) + 1];\n\n    perpX = -(y0 - y1);\n    perpY = x0 - x1;\n\n    dist = Math.sqrt((perpX * perpX) + (perpY * perpY));\n    perpX /= dist;\n    perpY /= dist;\n    perpX *= width;\n    perpY *= width;\n\n    verts.push(x1 - (perpX * innerWeight), y1 - (perpY * innerWeight));\n    verts.push(x1 + (perpX * outerWeight), y1 + (perpY * outerWeight));\n\n    if (!closedShape)\n    {\n        if (style.cap === 'round')\n        {\n            indexCount += round(\n                x1 - (perpX * (innerWeight - outerWeight) * 0.5),\n                y1 - (perpY * (innerWeight - outerWeight) * 0.5),\n                x1 - (perpX * innerWeight),\n                y1 - (perpY * innerWeight),\n                x1 + (perpX * outerWeight),\n                y1 + (perpY * outerWeight),\n                verts,\n                false\n            ) + 2;\n        }\n        else if (style.cap === 'square')\n        {\n            indexCount += square(x1, y1, perpX, perpY, innerWeight, outerWeight, false, verts);\n        }\n    }\n\n    // const indices = graphicsGeometry.indices;\n    const eps2 = curveEps * curveEps;\n\n    // indices.push(indexStart);\n    for (let i = indexStart; i < indexCount + indexStart - 2; ++i)\n    {\n        x0 = verts[(i * 2)];\n        y0 = verts[(i * 2) + 1];\n\n        x1 = verts[(i + 1) * 2];\n        y1 = verts[((i + 1) * 2) + 1];\n\n        x2 = verts[(i + 2) * 2];\n        y2 = verts[((i + 2) * 2) + 1];\n\n        /* Skip zero area triangles */\n        if (Math.abs((x0 * (y1 - y2)) + (x1 * (y2 - y0)) + (x2 * (y0 - y1))) < eps2)\n        {\n            continue;\n        }\n\n        indices.push(i, i + 1, i + 2);\n    }\n}\n\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 7388, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7394, "column": 0}, "map": {"version":3,"file":"buildUvs.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/shared/geometry/utils/buildUvs.ts"],"sourcesContent":["import type { Matrix } from '../../../../../maths/matrix/Matrix';\n\n/**\n * Takes a vertices array and a matrix and transforms the vertices based on the matrix.\n * this out put is written to the uvs array\n * @param vertices - the vertices to calculate uvs from\n * @param verticesStride - the stride of the vertice\n * @param verticesOffset - the offset of the vertices\n * @param uvs - the uvs to fill\n * @param uvsOffset - the offset of the uvs\n * @param uvsStride - the stride of the uvs\n * @param size - the size of the vertices\n * @param matrix - the matrix to apply to the uvs\n * @memberof rendering\n */\nexport function buildUvs(\n    vertices: number[],\n    verticesStride: number,\n    verticesOffset: number,\n\n    uvs: number[],\n    uvsOffset: number,\n    uvsStride: number,\n\n    size: number,\n    matrix: Matrix = null\n): void\n{\n    let index = 0;\n\n    verticesOffset *= verticesStride;\n    uvsOffset *= uvsStride;\n\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n\n    while (index < size)\n    {\n        const x = vertices[verticesOffset];\n        const y = vertices[verticesOffset + 1];\n\n        uvs[uvsOffset] = (a * x) + (c * y) + tx;\n        uvs[uvsOffset + 1] = (b * x) + (d * y) + ty;\n\n        uvsOffset += uvsStride;\n\n        verticesOffset += verticesStride;\n\n        index++;\n    }\n}\n\nexport function buildSimpleUvs(\n    uvs: number[],\n    uvsOffset: number,\n    uvsStride: number,\n    size: number,\n)\n{\n    let index = 0;\n\n    uvsOffset *= uvsStride;\n\n    while (index < size)\n    {\n        uvs[uvsOffset] = 0;\n        uvs[uvsOffset + 1] = 0;\n\n        uvsOffset += uvsStride;\n\n        index++;\n    }\n}\n"],"names":[],"mappings":";;;;;AAegB,SAAA,QAAA,CACZ,QAAA,EACA,cACA,EAAA,cAAA,EAEA,GAAA,EACA,SACA,EAAA,SAAA,EAEA,IACA,EAAA,MAAA,GAAiB,IAErB,EAAA;IACI,IAAI,KAAQ,GAAA,CAAA,CAAA;IAEM,cAAA,IAAA,cAAA,CAAA;IACL,SAAA,IAAA,SAAA,CAAA;IAEb,MAAM,IAAI,MAAO,CAAA,CAAA,CAAA;IACjB,MAAM,IAAI,MAAO,CAAA,CAAA,CAAA;IACjB,MAAM,IAAI,MAAO,CAAA,CAAA,CAAA;IACjB,MAAM,IAAI,MAAO,CAAA,CAAA,CAAA;IACjB,MAAM,KAAK,MAAO,CAAA,EAAA,CAAA;IAClB,MAAM,KAAK,MAAO,CAAA,EAAA,CAAA;IAElB,MAAO,QAAQ,IACf,CAAA;QACU,MAAA,CAAA,GAAI,QAAA,CAAS,cAAc,CAAA,CAAA;QAC3B,MAAA,CAAA,GAAI,QAAS,CAAA,cAAA,GAAiB,CAAC,CAAA,CAAA;QAErC,GAAA,CAAI,SAAS,CAAA,GAAK,CAAI,GAAA,CAAA,GAAM,IAAI,CAAK,GAAA,EAAA,CAAA;QACrC,GAAA,CAAI,YAAY,CAAC,CAAA,GAAK,CAAI,GAAA,CAAA,GAAM,IAAI,CAAK,GAAA,EAAA,CAAA;QAE5B,SAAA,IAAA,SAAA,CAAA;QAEK,cAAA,IAAA,cAAA,CAAA;QAElB,KAAA,EAAA,CAAA;IAAA,CACJ;AACJ,CAAA;AAEO,SAAS,cACZ,CAAA,GAAA,EACA,SACA,EAAA,SAAA,EACA,IAEJ,EAAA;IACI,IAAI,KAAQ,GAAA,CAAA,CAAA;IAEC,SAAA,IAAA,SAAA,CAAA;IAEb,MAAO,QAAQ,IACf,CAAA;QACI,GAAA,CAAI,SAAS,CAAI,GAAA,CAAA,CAAA;QACb,GAAA,CAAA,SAAA,GAAY,CAAC,CAAI,GAAA,CAAA,CAAA;QAER,SAAA,IAAA,SAAA,CAAA;QAEb,KAAA,EAAA,CAAA;IAAA,CACJ;AACJ","ignoreList":[0]}},
    {"offset": {"line": 7431, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7437, "column": 0}, "map": {"version":3,"file":"buildContextBatches.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/utils/buildContextBatches.ts"],"sourcesContent":["import { extensions, ExtensionType } from '../../../../extensions/Extensions';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { buildSimpleUvs, buildUvs } from '../../../../rendering/renderers/shared/geometry/utils/buildUvs';\nimport { transformVertices } from '../../../../rendering/renderers/shared/geometry/utils/transformVertices';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { BigPool } from '../../../../utils/pool/PoolGroup';\nimport { BatchableGraphics } from '../BatchableGraphics';\nimport { buildCircle, buildEllipse, buildRoundedRectangle } from '../buildCommands/buildCircle';\nimport { buildLine } from '../buildCommands/buildLine';\nimport { buildPixelLine } from '../buildCommands/buildPixelLine';\nimport { buildPolygon } from '../buildCommands/buildPolygon';\nimport { buildRectangle } from '../buildCommands/buildRectangle';\nimport { buildTriangle } from '../buildCommands/buildTriangle';\nimport { triangulateWithHoles } from './triangulateWithHoles';\n\nimport type { Polygon } from '../../../../maths/shapes/Polygon';\nimport type { Topology } from '../../../../rendering/renderers/shared/geometry/const';\nimport type { ShapeBuildCommand } from '../buildCommands/ShapeBuildCommand';\nimport type { ConvertedFillStyle, ConvertedStrokeStyle } from '../FillTypes';\nimport type { GraphicsContext, TextureInstruction } from '../GraphicsContext';\nimport type { GpuGraphicsContext } from '../GraphicsContextSystem';\nimport type { GraphicsPath } from '../path/GraphicsPath';\nimport type { ShapePath } from '../path/ShapePath';\n\nexport const shapeBuilders: Record<string, ShapeBuildCommand> = {};\n\nextensions.handleByMap(ExtensionType.ShapeBuilder, shapeBuilders);\nextensions.add(buildRectangle, buildPolygon, buildTriangle, buildCircle, buildEllipse, buildRoundedRectangle);\n\nconst tempRect = new Rectangle();\n\nexport function buildContextBatches(context: GraphicsContext, gpuContext: GpuGraphicsContext)\n{\n    const { geometryData, batches } = gpuContext;\n\n    // reset them..\n    batches.length = 0;\n    geometryData.indices.length = 0;\n    geometryData.vertices.length = 0;\n    geometryData.uvs.length = 0;\n\n    for (let i = 0; i < context.instructions.length; i++)\n    {\n        const instruction = context.instructions[i];\n\n        if (instruction.action === 'texture')\n        {\n            // add a quad!\n            addTextureToGeometryData(instruction.data, batches, geometryData);\n        }\n        else if (instruction.action === 'fill' || instruction.action === 'stroke')\n        {\n            const isStroke = instruction.action === 'stroke';\n\n            // build path collection of polys and shapes points..\n            const shapePath = instruction.data.path.shapePath;\n\n            const style = instruction.data.style;\n\n            const hole = instruction.data.hole;\n\n            if (isStroke && hole)\n            {\n                addShapePathToGeometryData(hole.shapePath, style, null, true, batches, geometryData);\n            }\n\n            addShapePathToGeometryData(shapePath, style, hole, isStroke, batches, geometryData);\n        }\n    }\n}\n\nfunction addTextureToGeometryData(\n    data: TextureInstruction['data'],\n    batches: BatchableGraphics[],\n    geometryData: {\n        vertices: number[];\n        uvs: number[];\n        indices: number[];\n    }\n)\n{\n    const { vertices, uvs, indices } = geometryData;\n\n    const indexOffset = indices.length;\n    const vertOffset = vertices.length / 2;\n\n    const points: number[] = [];\n\n    const build = shapeBuilders.rectangle;\n\n    const rect = tempRect;\n\n    const texture = data.image;\n\n    rect.x = data.dx;\n    rect.y = data.dy;\n    rect.width = data.dw;\n    rect.height = data.dh;\n\n    const matrix = data.transform;\n\n    // TODO - this can be cached...\n    build.build(rect, points);\n\n    if (matrix)\n    {\n        transformVertices(points, matrix);\n    }\n\n    build.triangulate(points, vertices, 2, vertOffset, indices, indexOffset);\n\n    const textureUvs = texture.uvs;\n\n    uvs.push(\n        textureUvs.x0, textureUvs.y0,\n        textureUvs.x1, textureUvs.y1,\n        textureUvs.x3, textureUvs.y3,\n        textureUvs.x2, textureUvs.y2,\n    );\n\n    const graphicsBatch = BigPool.get(BatchableGraphics);\n\n    graphicsBatch.indexOffset = indexOffset;\n    graphicsBatch.indexSize = indices.length - indexOffset;\n\n    graphicsBatch.attributeOffset = vertOffset;\n    graphicsBatch.attributeSize = (vertices.length / 2) - vertOffset;\n\n    graphicsBatch.baseColor = data.style;\n    graphicsBatch.alpha = data.alpha;\n\n    graphicsBatch.texture = texture;\n    graphicsBatch.geometryData = geometryData;\n\n    batches.push(graphicsBatch);\n}\n\nfunction addShapePathToGeometryData(\n    shapePath: ShapePath,\n    style: ConvertedFillStyle | ConvertedStrokeStyle,\n    hole: GraphicsPath,\n    isStroke: boolean,\n    batches: BatchableGraphics[],\n    geometryData: {\n        vertices: number[];\n        uvs: number[];\n        indices: number[];\n    }\n)\n{\n    const { vertices, uvs, indices } = geometryData;\n    const lastIndex = shapePath.shapePrimitives.length - 1;\n\n    shapePath.shapePrimitives.forEach(({ shape, transform: matrix }, i) =>\n    {\n        const indexOffset = indices.length;\n        const vertOffset = vertices.length / 2;\n\n        const points: number[] = [];\n\n        const build = shapeBuilders[shape.type];\n        let topology: Topology = 'triangle-list';\n        // TODO - this can be cached...\n        // TODO - THIS IS DONE TWICE!!!!!!\n        // ONCE FOR STROKE AND ONCE FOR FILL\n        // move to the ShapePath2D class itself?\n\n        build.build(shape, points);\n\n        if (matrix)\n        {\n            transformVertices(points, matrix);\n        }\n\n        if (!isStroke)\n        {\n            if (hole && lastIndex === i)\n            {\n                if (lastIndex !== 0)\n                {\n                    console.warn('[Pixi Graphics] only the last shape have be cut out');\n                }\n\n                const holeIndices: number[] = [];\n\n                const otherPoints = points.slice();\n\n                const holeArrays = getHoleArrays(hole.shapePath);\n\n                holeArrays.forEach((holePoints) =>\n                {\n                    holeIndices.push(otherPoints.length / 2);\n                    otherPoints.push(...holePoints);\n                });\n\n                triangulateWithHoles(otherPoints, holeIndices, vertices, 2, vertOffset, indices, indexOffset);\n            }\n            else\n            {\n                build.triangulate(points, vertices, 2, vertOffset, indices, indexOffset);\n            }\n        }\n        else\n        {\n            const close = (shape as Polygon).closePath ?? true;\n            const lineStyle = style as ConvertedStrokeStyle;\n\n            if (!lineStyle.pixelLine)\n            {\n                buildLine(points, lineStyle, false, close, vertices, indices);\n            }\n            else\n            {\n                buildPixelLine(points, close, vertices, indices);\n                topology = 'line-list';\n            }\n        }\n\n        const uvsOffset = uvs.length / 2;\n\n        const texture = style.texture;\n\n        if (texture !== Texture.WHITE)\n        {\n            const textureMatrix = style.matrix;\n\n            if (textureMatrix)\n            {\n                // todo can prolly do this before calculating uvs..\n                if (matrix)\n                {\n                    textureMatrix.append(matrix.clone().invert());\n                }\n\n                buildUvs(vertices, 2, vertOffset, uvs, uvsOffset, 2, (vertices.length / 2) - vertOffset, textureMatrix);\n            }\n        }\n        else\n        {\n            buildSimpleUvs(uvs, uvsOffset, 2, (vertices.length / 2) - vertOffset);\n        }\n\n        const graphicsBatch = BigPool.get(BatchableGraphics);\n\n        graphicsBatch.indexOffset = indexOffset;\n        graphicsBatch.indexSize = indices.length - indexOffset;\n\n        graphicsBatch.attributeOffset = vertOffset;\n        graphicsBatch.attributeSize = (vertices.length / 2) - vertOffset;\n\n        graphicsBatch.baseColor = style.color;\n        graphicsBatch.alpha = style.alpha;\n\n        graphicsBatch.texture = texture;\n        graphicsBatch.geometryData = geometryData;\n        graphicsBatch.topology = topology;\n\n        batches.push(graphicsBatch);\n    });\n}\n\nfunction getHoleArrays(shape: ShapePath)\n{\n    if (!shape) return [];\n\n    const holePrimitives = shape.shapePrimitives;\n\n    const holeArrays = [];\n\n    for (let k = 0; k < holePrimitives.length; k++)\n    {\n        const holePrimitive = holePrimitives[k].shape;\n\n        // TODO - need to transform the points via there transform here..\n        const holePoints: number[] = [];\n\n        const holeBuilder = shapeBuilders[holePrimitive.type] as ShapeBuildCommand;\n\n        holeBuilder.build(holePrimitive, holePoints);\n\n        holeArrays.push(holePoints);\n    }\n\n    return holeArrays;\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 7607, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7613, "column": 0}, "map": {"version":3,"file":"getTextureBatchBindGroup.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/batcher/gpu/getTextureBatchBindGroup.ts"],"sourcesContent":["import { BindGroup } from '../../renderers/gpu/shader/BindGroup';\nimport { Texture } from '../../renderers/shared/texture/Texture';\nimport { getMaxTexturesPerBatch } from '../gl/utils/maxRecommendedTextures';\n\nimport type { TextureSource } from '../../renderers/shared/texture/sources/TextureSource';\n\nconst cachedGroups: Record<number, BindGroup> = {};\n\nexport function getTextureBatchBindGroup(textures: TextureSource[], size: number)\n{\n    let uid = 2166136261; // FNV-1a 32-bit offset basis\n\n    for (let i = 0; i < size; i++)\n    {\n        uid ^= textures[i].uid;\n        uid = Math.imul(uid, 16777619);\n        uid >>>= 0;\n    }\n\n    return cachedGroups[uid] || generateTextureBatchBindGroup(textures, size, uid);\n}\n\nlet maxTextures = 0;\n\nfunction generateTextureBatchBindGroup(textures: TextureSource[], size: number, key: number): BindGroup\n{\n    const bindGroupResources: Record<string, any> = {};\n\n    let bindIndex = 0;\n\n    if (!maxTextures)maxTextures = getMaxTexturesPerBatch();\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        const texture = i < size ? textures[i] : Texture.EMPTY.source;\n\n        bindGroupResources[bindIndex++] = texture.source;\n        bindGroupResources[bindIndex++] = texture.style;\n    }\n\n    // pad out with empty textures\n    const bindGroup = new BindGroup(bindGroupResources);\n\n    cachedGroups[key] = bindGroup;\n\n    return bindGroup;\n}\n\n"],"names":[],"mappings":";;;;;;;;;;AAMA,MAAM,eAA0C,CAAA,CAAC,CAAA;AAEjC,SAAA,wBAAA,CAAyB,QAAA,EAA2B,IACpE,EAAA;IACI,IAAI,GAAM,GAAA,UAAA,CAAA;IAEV,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,IAAA,EAAM,CAC1B,EAAA,CAAA;QACW,GAAA,IAAA,QAAA,CAAS,CAAC,CAAE,CAAA,GAAA,CAAA;QACb,GAAA,GAAA,IAAA,CAAK,IAAK,CAAA,GAAA,EAAK,QAAQ,CAAA,CAAA;QACpB,GAAA,MAAA,CAAA,CAAA;IAAA,CACb;IAEA,OAAO,YAAA,CAAa,GAAG,CAAA,IAAK,6BAA8B,CAAA,QAAA,EAAU,MAAM,GAAG,CAAA,CAAA;AACjF,CAAA;AAEA,IAAI,WAAc,GAAA,CAAA,CAAA;AAElB,SAAS,6BAAA,CAA8B,QAA2B,EAAA,IAAA,EAAc,GAChF,EAAA;IACI,MAAM,qBAA0C,CAAA,CAAC,CAAA;IAEjD,IAAI,SAAY,GAAA,CAAA,CAAA;IAEhB,IAAI,CAAC,WAAA,EAAY,WAAA,IAAc,gOAAA,AAAuB,EAAA,CAAA;IAEtD,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,WAAA,EAAa,CACjC,EAAA,CAAA;QACI,MAAM,UAAU,CAAI,GAAA,IAAA,GAAO,QAAA,CAAS,CAAC,CAAA,gMAAI,UAAA,CAAQ,KAAM,CAAA,MAAA,CAAA;QAEpC,kBAAA,CAAA,SAAA,EAAW,CAAA,GAAI,OAAQ,CAAA,MAAA,CAAA;QACvB,kBAAA,CAAA,SAAA,EAAW,CAAA,GAAI,OAAQ,CAAA,KAAA,CAAA;IAAA,CAC9C;IAGM,MAAA,SAAA,GAAY,+LAAI,YAAA,CAAU,kBAAkB,CAAA,CAAA;IAElD,YAAA,CAAa,GAAG,CAAI,GAAA,SAAA,CAAA;IAEb,OAAA,SAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 7649, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7655, "column": 0}, "map": {"version":3,"file":"GraphicsContextSystem.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/GraphicsContextSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { getTextureBatchBindGroup } from '../../../rendering/batcher/gpu/getTextureBatchBindGroup';\nimport { DefaultBatcher } from '../../../rendering/batcher/shared/DefaultBatcher';\nimport { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport { deprecation, v8_3_4 } from '../../../utils/logging/deprecation';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { buildContextBatches } from './utils/buildContextBatches';\n\nimport type { Batcher } from '../../../rendering/batcher/shared/Batcher';\nimport type { System } from '../../../rendering/renderers/shared/system/System';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { BatchableGraphics } from './BatchableGraphics';\nimport type { GraphicsContext } from './GraphicsContext';\n\ninterface GeometryData\n{\n    vertices: number[];\n    uvs: number[];\n    indices: number[];\n}\n\n/**\n * A class that holds batchable graphics data for a GraphicsContext.\n * @memberof rendering\n * @ignore\n */\nexport class GpuGraphicsContext\n{\n    public isBatchable: boolean;\n    public context: GraphicsContext;\n\n    public batches: BatchableGraphics[] = [];\n    public geometryData: GeometryData = {\n        vertices: [],\n        uvs: [],\n        indices: [],\n    };\n    public graphicsData: GraphicsContextRenderData;\n}\n\n/**\n * A class that holds the render data for a GraphicsContext.\n * @memberof rendering\n * @ignore\n */\nexport class GraphicsContextRenderData\n{\n    public batcher: Batcher = new DefaultBatcher();\n    public instructions = new InstructionSet();\n\n    public init()\n    {\n        this.instructions.reset();\n    }\n\n    /**\n     * @deprecated since version 8.0.0\n     * Use `batcher.geometry` instead.\n     * @see {Batcher#geometry}\n     */\n    get geometry()\n    {\n        // #if _DEBUG\n        deprecation(v8_3_4, 'GraphicsContextRenderData#geometry is deprecated, please use batcher.geometry instead.');\n        // #endif\n\n        return this.batcher.geometry;\n    }\n}\n\n/**\n * Options for the GraphicsContextSystem.\n * @memberof rendering\n */\nexport interface GraphicsContextSystemOptions\n{\n    /** A value from 0 to 1 that controls the smoothness of bezier curves (the higher the smoother) */\n    bezierSmoothness?: number;\n}\n\n/**\n * A system that manages the rendering of GraphicsContexts.\n * @memberof rendering\n */\nexport class GraphicsContextSystem implements System<GraphicsContextSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'graphicsContext'\n    } as const;\n\n    /** The default options for the GraphicsContextSystem. */\n    public static readonly defaultOptions: GraphicsContextSystemOptions = {\n        /**\n         * A value from 0 to 1 that controls the smoothness of bezier curves (the higher the smoother)\n         * @default 0.5\n         */\n        bezierSmoothness: 0.5,\n    };\n\n    // the root context batches, used to either make a batch or geometry\n    // all graphics use this as a base\n    private _gpuContextHash: Record<number, GpuGraphicsContext> = {};\n    // used for non-batchable graphics\n    private _graphicsDataContextHash: Record<number, GraphicsContextRenderData> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        renderer.renderableGC.addManagedHash(this, '_gpuContextHash');\n        renderer.renderableGC.addManagedHash(this, '_graphicsDataContextHash');\n    }\n\n    /**\n     * Runner init called, update the default options\n     * @ignore\n     */\n    public init(options?: GraphicsContextSystemOptions)\n    {\n        GraphicsContextSystem.defaultOptions.bezierSmoothness = options?.bezierSmoothness\n            ?? GraphicsContextSystem.defaultOptions.bezierSmoothness;\n    }\n\n    public getContextRenderData(context: GraphicsContext): GraphicsContextRenderData\n    {\n        return this._graphicsDataContextHash[context.uid] || this._initContextRenderData(context);\n    }\n\n    // Context management functions\n    public updateGpuContext(context: GraphicsContext)\n    {\n        let gpuContext: GpuGraphicsContext = this._gpuContextHash[context.uid]\n\n            || this._initContext(context);\n\n        if (context.dirty)\n        {\n            if (gpuContext)\n            {\n                this._cleanGraphicsContextData(context);\n            }\n            else\n            {\n                gpuContext = this._initContext(context);\n            }\n\n            buildContextBatches(context, gpuContext);\n\n            const batchMode = context.batchMode;\n\n            if (context.customShader || batchMode === 'no-batch')\n            {\n                gpuContext.isBatchable = false;\n            }\n            else if (batchMode === 'auto')\n            {\n                gpuContext.isBatchable = (gpuContext.geometryData.vertices.length < 400);\n            }\n\n            context.dirty = false;\n        }\n\n        return gpuContext;\n    }\n\n    public getGpuContext(context: GraphicsContext): GpuGraphicsContext\n    {\n        return this._gpuContextHash[context.uid] || this._initContext(context);\n    }\n\n    private _initContextRenderData(context: GraphicsContext): GraphicsContextRenderData\n    {\n        const graphicsData: GraphicsContextRenderData = BigPool.get(GraphicsContextRenderData);// ();\n\n        const { batches, geometryData } = this._gpuContextHash[context.uid];\n\n        const vertexSize = geometryData.vertices.length;\n        const indexSize = geometryData.indices.length;\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            batches[i].applyTransform = false;\n        }\n\n        const batcher = graphicsData.batcher;\n\n        // TODO we can pool buffers here eventually..\n        batcher.ensureAttributeBuffer(vertexSize);\n        batcher.ensureIndexBuffer(indexSize);\n\n        batcher.begin();\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            const batch = batches[i];\n\n            batcher.add(batch);\n        }\n\n        batcher.finish(graphicsData.instructions);\n\n        const geometry = batcher.geometry;\n\n        // not to self - this works as we are assigning the batchers array buffer\n        // once its up loaded - this buffer is then put back in the pool to be reused.\n        // this mean we don't have to creating new Batchers for each graphics items\n        geometry.indexBuffer.setDataWithSize(batcher.indexBuffer, batcher.indexSize, true);\n        geometry.buffers[0].setDataWithSize(batcher.attributeBuffer.float32View, batcher.attributeSize, true);\n\n        const drawBatches = batcher.batches;\n\n        for (let i = 0; i < drawBatches.length; i++)\n        {\n            const batch = drawBatches[i];\n\n            batch.bindGroup = getTextureBatchBindGroup(batch.textures.textures, batch.textures.count);\n        }\n\n        this._graphicsDataContextHash[context.uid] = graphicsData;\n\n        return graphicsData;\n    }\n\n    private _initContext(context: GraphicsContext): GpuGraphicsContext\n    {\n        const gpuContext = new GpuGraphicsContext();\n\n        gpuContext.context = context;\n\n        this._gpuContextHash[context.uid] = gpuContext;\n\n        context.on('destroy', this.onGraphicsContextDestroy, this);\n\n        return this._gpuContextHash[context.uid];\n    }\n\n    protected onGraphicsContextDestroy(context: GraphicsContext)\n    {\n        this._cleanGraphicsContextData(context);\n\n        context.off('destroy', this.onGraphicsContextDestroy, this);\n\n        this._gpuContextHash[context.uid] = null;\n    }\n\n    private _cleanGraphicsContextData(context: GraphicsContext)\n    {\n        const gpuContext: GpuGraphicsContext = this._gpuContextHash[context.uid];\n\n        if (!gpuContext.isBatchable)\n        {\n            if (this._graphicsDataContextHash[context.uid])\n            {\n                BigPool.return(this.getContextRenderData(context) as PoolItem);\n\n                // we will rebuild this...\n                this._graphicsDataContextHash[context.uid] = null;\n            }\n        }\n\n        if (gpuContext.batches)\n        {\n            gpuContext.batches.forEach((batch) =>\n            {\n                BigPool.return(batch as PoolItem);\n            });\n        }\n    }\n\n    public destroy()\n    {\n        // Clean up all graphics contexts\n\n        for (const i in this._gpuContextHash)\n        {\n            if (this._gpuContextHash[i])\n            {\n                this.onGraphicsContextDestroy(this._gpuContextHash[i].context);\n            }\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 7823, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7829, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem';\nimport { GraphicsPipe } from './shared/GraphicsPipe';\n\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n"],"names":[],"mappings":";;;;;;;;+JAIA,aAAA,CAAW,GAAA,mLAAI,eAAY,CAAA,CAAA;+JAC3B,aAAA,CAAW,GAAA,4LAAI,wBAAqB,CAAA","ignoreList":[0]}},
    {"offset": {"line": 7839, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7845, "column": 0}, "map": {"version":3,"file":"BatchableMesh.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/mesh/shared/BatchableMesh.ts"],"sourcesContent":["import type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableMeshElement } from '../../../rendering/batcher/shared/DefaultBatcher';\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { ViewContainer } from '../../view/ViewContainer';\nimport type { MeshGeometry } from './MeshGeometry';\n\n/**\n * A batchable mesh object.\n * @ignore\n */\nexport class BatchableMesh implements DefaultBatchableMeshElement\n{\n    public batcherName = 'default';\n\n    public _topology: Topology;\n\n    public readonly packAsQuad = false;\n    public location: number;\n\n    public renderable: ViewContainer;\n\n    public indexOffset = 0;\n    public attributeOffset = 0;\n\n    public texture: Texture;\n    public geometry: MeshGeometry;\n    public transform: Matrix;\n    public roundPixels: 0 | 1 = 0;\n\n    public _attributeStart: number;\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n    public _indexStart: number;\n    public _textureId: number;\n\n    private _transformedUvs: Float32Array;\n    private _uvUpdateId: number = -1;\n    private _textureMatrixUpdateId: number = -1;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n\n    get topology() { return this._topology || this.geometry.topology; }\n    set topology(value: Topology) { this._topology = value; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.geometry = null;\n        this._uvUpdateId = -1;\n        this._textureMatrixUpdateId = -1;\n    }\n\n    get uvs()\n    {\n        const geometry = this.geometry;\n\n        const uvBuffer = geometry.getBuffer('aUV');\n\n        const uvs = uvBuffer.data;\n\n        let transformedUvs = uvs;\n        const textureMatrix = this.texture.textureMatrix;\n\n        if (!textureMatrix.isSimple)\n        {\n            transformedUvs = this._transformedUvs;\n\n            if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID)\n            {\n                if (!transformedUvs || transformedUvs.length < uvs.length)\n                {\n                    transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n                }\n\n                this._textureMatrixUpdateId = textureMatrix._updateID;\n                this._uvUpdateId = uvBuffer._updateID;\n\n                textureMatrix.multiplyUvs(uvs as Float32Array, transformedUvs);\n            }\n        }\n\n        return transformedUvs as Float32Array;\n    }\n\n    get positions()\n    {\n        return this.geometry.positions;\n    }\n\n    get indices()\n    {\n        return this.geometry.indices;\n    }\n\n    get color()\n    {\n        return this.renderable.groupColorAlpha;\n    }\n\n    get groupTransform()\n    {\n        return this.renderable.groupTransform;\n    }\n\n    get attributeSize()\n    {\n        return this.geometry.positions.length / 2;\n    }\n\n    get indexSize()\n    {\n        return this.geometry.indices.length;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 7919, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7925, "column": 0}, "map": {"version":3,"file":"MeshPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/mesh/shared/MeshPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform';\nimport { BatchableMesh } from './BatchableMesh';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type {\n    InstructionPipe,\n    RenderPipe\n} from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Container } from '../../container/Container';\nimport type { Mesh } from './Mesh';\n\n// TODO Record mode is a P2, will get back to this as it's not a priority\n// const recordMode = true;\n\ninterface MeshData\n{\n    batched: boolean;\n    indexSize: number;\n    vertexSize: number;\n}\n\nexport interface MeshAdaptor\n{\n    init(): void;\n    execute(meshPipe: MeshPipe, mesh: Mesh): void;\n    destroy(): void;\n}\n\nexport class MeshPipe implements RenderPipe<Mesh>, InstructionPipe<Mesh>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'mesh',\n    } as const;\n\n    public localUniforms = new UniformGroup({\n        uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n        uRound: { value: 0, type: 'f32' },\n    });\n\n    public localUniformsBindGroup = new BindGroup({\n        0: this.localUniforms,\n    });\n\n    public renderer: Renderer;\n\n    private _meshDataHash: Record<number, MeshData> = Object.create(null);\n    private _gpuBatchableMeshHash: Record<number, BatchableMesh> = Object.create(null);\n    private _adaptor: MeshAdaptor;\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer, adaptor: MeshAdaptor)\n    {\n        this.renderer = renderer;\n        this._adaptor = adaptor;\n\n        this._adaptor.init();\n\n        renderer.renderableGC.addManagedHash(this, '_gpuBatchableMeshHash');\n        renderer.renderableGC.addManagedHash(this, '_meshDataHash');\n    }\n\n    public validateRenderable(mesh: Mesh): boolean\n    {\n        const meshData = this._getMeshData(mesh);\n\n        const wasBatched = meshData.batched;\n\n        const isBatched = mesh.batched;\n\n        meshData.batched = isBatched;\n\n        if (wasBatched !== isBatched)\n        {\n            return true;\n        }\n        else if (isBatched)\n        {\n            const geometry = mesh._geometry;\n\n            // no need to break the batch if it's the same size\n            if (geometry.indices.length !== meshData.indexSize\n                    || geometry.positions.length !== meshData.vertexSize)\n            {\n                meshData.indexSize = geometry.indices.length;\n                meshData.vertexSize = geometry.positions.length;\n\n                return true;\n            }\n\n            const batchableMesh = this._getBatchableMesh(mesh);\n\n            return !batchableMesh._batcher.checkAndUpdateTexture(\n                batchableMesh,\n                mesh.texture\n            );\n        }\n\n        return false;\n    }\n\n    public addRenderable(mesh: Mesh, instructionSet: InstructionSet)\n    {\n        const batcher = this.renderer.renderPipes.batch;\n\n        const { batched } = this._getMeshData(mesh);\n\n        if (batched)\n        {\n            const gpuBatchableMesh = this._getBatchableMesh(mesh);\n\n            gpuBatchableMesh.texture = mesh._texture;\n            gpuBatchableMesh.geometry = mesh._geometry;\n\n            batcher.addToBatch(gpuBatchableMesh, instructionSet);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            instructionSet.add(mesh);\n        }\n    }\n\n    public updateRenderable(mesh: Mesh)\n    {\n        if (mesh.batched)\n        {\n            const gpuBatchableMesh = this._gpuBatchableMeshHash[mesh.uid];\n\n            gpuBatchableMesh.texture = mesh._texture;\n            gpuBatchableMesh.geometry = mesh._geometry;\n\n            gpuBatchableMesh._batcher.updateElement(gpuBatchableMesh);\n        }\n    }\n\n    public destroyRenderable(mesh: Mesh)\n    {\n        this._meshDataHash[mesh.uid] = null;\n\n        const gpuMesh = this._gpuBatchableMeshHash[mesh.uid];\n\n        if (gpuMesh)\n        {\n            BigPool.return(gpuMesh as PoolItem);\n            this._gpuBatchableMeshHash[mesh.uid] = null;\n        }\n\n        mesh.off('destroyed', this._destroyRenderableBound);\n    }\n\n    public execute(mesh: Mesh)\n    {\n        if (!mesh.isRenderable) return;\n\n        mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n\n        const localUniforms = this.localUniforms;\n\n        localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n        localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n        localUniforms.update();\n\n        color32BitToUniform(\n            mesh.groupColorAlpha,\n            localUniforms.uniforms.uColor,\n            0\n        );\n\n        this._adaptor.execute(this, mesh);\n    }\n\n    private _getMeshData(mesh: Mesh): MeshData\n    {\n        return this._meshDataHash[mesh.uid] || this._initMeshData(mesh);\n    }\n\n    private _initMeshData(mesh: Mesh): MeshData\n    {\n        this._meshDataHash[mesh.uid] = {\n            batched: mesh.batched,\n            indexSize: mesh._geometry.indices?.length,\n            vertexSize: mesh._geometry.positions?.length,\n        };\n\n        mesh.on('destroyed', this._destroyRenderableBound);\n\n        return this._meshDataHash[mesh.uid];\n    }\n\n    private _getBatchableMesh(mesh: Mesh): BatchableMesh\n    {\n        return this._gpuBatchableMeshHash[mesh.uid] || this._initBatchableMesh(mesh);\n    }\n\n    private _initBatchableMesh(mesh: Mesh): BatchableMesh\n    {\n        // TODO - make this batchable graphics??\n        const gpuMesh: BatchableMesh = BigPool.get(BatchableMesh);\n\n        gpuMesh.renderable = mesh;\n        gpuMesh.texture = mesh._texture;\n        gpuMesh.transform = mesh.groupTransform;\n        gpuMesh.roundPixels = (this.renderer._roundPixels | mesh._roundPixels) as 0 | 1;\n\n        this._gpuBatchableMeshHash[mesh.uid] = gpuMesh;\n\n        return gpuMesh;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuBatchableMeshHash)\n        {\n            if (this._gpuBatchableMeshHash[i])\n            {\n                BigPool.return(this._gpuBatchableMeshHash[i] as PoolItem);\n            }\n        }\n\n        this._gpuBatchableMeshHash = null;\n        this._meshDataHash = null;\n\n        this.localUniforms = null;\n        this.localUniformsBindGroup = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n\n        this.renderer = null;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 8086, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8092, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/mesh/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { MeshPipe } from './shared/MeshPipe';\n\nextensions.add(MeshPipe);\n"],"names":[],"mappings":";;;;;;+JAGA,aAAA,CAAW,GAAA,2KAAI,WAAQ,CAAA","ignoreList":[0]}},
    {"offset": {"line": 8099, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8105, "column": 0}, "map": {"version":3,"file":"GlParticleContainerAdaptor.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/gl/GlParticleContainerAdaptor.ts"],"sourcesContent":["import type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\nimport type { ParticleContainer } from '../shared/ParticleContainer';\nimport type { ParticleContainerAdaptor, ParticleContainerPipe } from '../shared/ParticleContainerPipe';\n\nexport class GlParticleContainerAdaptor implements ParticleContainerAdaptor\n{\n    public execute(particleContainerPipe: ParticleContainerPipe, container: ParticleContainer)\n    {\n        const state = particleContainerPipe.state;\n        const renderer = particleContainerPipe.renderer as WebGLRenderer;\n        const shader = container.shader || particleContainerPipe.defaultShader;\n\n        shader.resources.uTexture = container.texture._source;\n        shader.resources.uniforms = particleContainerPipe.localUniforms;\n\n        const gl = renderer.gl;\n\n        const buffer = particleContainerPipe.getBuffers(container);\n\n        // now lets upload and render the buffers..\n        renderer.shader.bind(shader);\n        renderer.state.set(state);\n        renderer.geometry.bind(buffer.geometry, shader.glProgram);\n\n        const byteSize = buffer.geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n        const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n\n        gl.drawElements(gl.TRIANGLES, container.particleChildren.length * 6, glType, 0);\n    }\n}\n"],"names":[],"mappings":";;;;AAIO,MAAM,0BACb,CAAA;IACW,OAAA,CAAQ,qBAAA,EAA8C,SAC7D,EAAA;QACI,MAAM,QAAQ,qBAAsB,CAAA,KAAA,CAAA;QACpC,MAAM,WAAW,qBAAsB,CAAA,QAAA,CAAA;QACjC,MAAA,MAAA,GAAS,SAAU,CAAA,MAAA,IAAU,qBAAsB,CAAA,aAAA,CAAA;QAElD,MAAA,CAAA,SAAA,CAAU,QAAW,GAAA,SAAA,CAAU,OAAQ,CAAA,OAAA,CAAA;QACvC,MAAA,CAAA,SAAA,CAAU,QAAA,GAAW,qBAAsB,CAAA,aAAA,CAAA;QAElD,MAAM,KAAK,QAAS,CAAA,EAAA,CAAA;QAEd,MAAA,MAAA,GAAS,qBAAsB,CAAA,UAAA,CAAW,SAAS,CAAA,CAAA;QAGhD,QAAA,CAAA,MAAA,CAAO,IAAA,CAAK,MAAM,CAAA,CAAA;QAClB,QAAA,CAAA,KAAA,CAAM,GAAA,CAAI,KAAK,CAAA,CAAA;QACxB,QAAA,CAAS,QAAS,CAAA,IAAA,CAAK,MAAO,CAAA,QAAA,EAAU,OAAO,SAAS,CAAA,CAAA;QAExD,MAAM,QAAW,GAAA,MAAA,CAAO,QAAS,CAAA,WAAA,CAAY,IAAK,CAAA,iBAAA,CAAA;QAClD,MAAM,MAAS,GAAA,QAAA,KAAa,CAAI,GAAA,EAAA,CAAG,cAAA,GAAiB,EAAG,CAAA,YAAA,CAAA;QAEpD,EAAA,CAAA,YAAA,CAAa,GAAG,SAAW,EAAA,SAAA,CAAU,gBAAA,CAAiB,MAAS,GAAA,CAAA,EAAG,QAAQ,CAAC,CAAA,CAAA;IAAA,CAClF;AACJ","ignoreList":[0]}},
    {"offset": {"line": 8128, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8134, "column": 0}, "map": {"version":3,"file":"particles.vert.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 8140, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8146, "column": 0}, "map": {"version":3,"file":"particles.frag.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 8152, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8158, "column": 0}, "map": {"version":3,"file":"particles.wgsl.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 8164, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8170, "column": 0}, "map": {"version":3,"file":"ParticleShader.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/shared/shader/ParticleShader.ts"],"sourcesContent":["import { Color } from '../../../../color/Color';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram';\nimport { Shader } from '../../../../rendering/renderers/shared/shader/Shader';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { TextureStyle } from '../../../../rendering/renderers/shared/texture/TextureStyle';\nimport fragment from './particles.frag';\nimport vertex from './particles.vert';\nimport wgsl from './particles.wgsl';\n\nexport class ParticleShader extends Shader\n{\n    constructor()\n    {\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment\n        });\n\n        const gpuProgram = GpuProgram.from({\n            fragment: {\n                source: wgsl,\n                entryPoint: 'mainFragment'\n            },\n            vertex: {\n                source: wgsl,\n                entryPoint: 'mainVertex'\n            }\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                // this will be replaced with the texture from the particle container\n                uTexture: Texture.WHITE.source,\n                // this will be replaced with the texture style from the particle container\n                uSampler: new TextureStyle({}),\n                // this will be replaced with the local uniforms from the particle container\n                uniforms: {\n                    uTranslationMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Color(0xFFFFFF), type: 'vec4<f32>' },\n                    uRound: { value: 1, type: 'f32' },\n                    uResolution: { value: [0, 0], type: 'vec2<f32>' },\n                }\n            }\n        });\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAWO,MAAM,kNAAuB,SACpC,CAAA;IACI,WACA,EAAA;QACU,MAAA,SAAA,6LAAY,YAAA,CAAU,IAAK,CAAA;kOAC7B,UAAA;oOACA,UAAA;QAAA,CACH,CAAA,CAAA;QAEK,MAAA,UAAA,8LAAa,cAAA,CAAW,IAAK,CAAA;YAC/B,QAAU,EAAA;gBACN,MAAQ,gNAAA,UAAA;gBACR,UAAY,EAAA,cAAA;YAAA,CAChB;YACA,MAAQ,EAAA;gBACJ,MAAQ,gNAAA,UAAA;gBACR,UAAY,EAAA,YAAA;YAAA,CAChB;QAAA,CACH,CAAA,CAAA;QAEK,KAAA,CAAA;YACF,SAAA;YACA,UAAA;YACA,SAAW,EAAA;gBAAA,qEAAA;gBAEP,QAAA,EAAU,uMAAA,CAAQ,KAAM,CAAA,MAAA;gBAAA,2EAAA;gBAExB,QAAU,EAAA,sMAAI,eAAa,CAAA,CAAA,CAAE,CAAA;gBAAA,4EAAA;gBAE7B,QAAU,EAAA;oBACN,oBAAoB;wBAAE,KAAA,EAAO,oKAAI,SAAO,EAAA;wBAAG,MAAM,aAAc;oBAAA,CAAA;oBAC/D,MAAA,EAAQ;wBAAE,KAAO,EAAA,yJAAI,QAAA,CAAM,QAAQ,CAAA;wBAAG,MAAM,WAAY;oBAAA,CAAA;oBACxD,MAAQ,EAAA;wBAAE,KAAO,EAAA,CAAA;wBAAG,MAAM,KAAM;oBAAA,CAAA;oBAChC,WAAA,EAAa;wBAAE,KAAO,EAAA;4BAAC;4BAAG,CAAC;yBAAA;wBAAG,MAAM,WAAY;oBAAA,CAAA;gBAAA,CACpD;YAAA,CACJ;QAAA,CACH,CAAA,CAAA;IAAA,CACL;AACJ","ignoreList":[0]}},
    {"offset": {"line": 8246, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8252, "column": 0}, "map": {"version":3,"file":"createIndicesForQuads.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/shared/utils/createIndicesForQuads.ts"],"sourcesContent":["/**\n * Generic Mask Stack data structure\n * @function createIndicesForQuads\n * @param {number} size - Number of quads\n * @param {Uint16Array|Uint32Array} [outBuffer] - Buffer for output, length has to be `6 * size`\n * @returns {Uint16Array|Uint32Array} - Resulting index buffer\n */\nexport function createIndicesForQuads(\n    size: number,\n    outBuffer: Uint16Array | Uint32Array | null = null\n): Uint16Array | Uint32Array\n{\n    // the total number of indices in our array, there are 6 points per quad.\n    const totalIndices = size * 6;\n\n    // Check if we need to use Uint32Array\n    if (totalIndices > 65535)\n    {\n        outBuffer ||= new Uint32Array(totalIndices); // Use Uint32Array if needed\n    }\n    else\n    {\n        outBuffer ||= new Uint16Array(totalIndices);\n    }\n\n    if (outBuffer.length !== totalIndices)\n    {\n        throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n    }\n\n    // fill the indices with the quads to draw\n    for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4)\n    {\n        outBuffer[i + 0] = j + 0;\n        outBuffer[i + 1] = j + 1;\n        outBuffer[i + 2] = j + 2;\n        outBuffer[i + 3] = j + 0;\n        outBuffer[i + 4] = j + 2;\n        outBuffer[i + 5] = j + 3;\n    }\n\n    return outBuffer;\n}\n"],"names":[],"mappings":";;;;AAOgB,SAAA,qBAAA,CACZ,IACA,EAAA,SAAA,GAA8C,IAElD,EAAA;IAEI,MAAM,eAAe,IAAO,GAAA,CAAA,CAAA;IAG5B,IAAI,eAAe,KACnB,EAAA;QACkB,SAAA,IAAA,CAAA,SAAA,GAAA,IAAI,YAAY,YAAY,CAAA,CAAA,CAAA;IAAA,CAG9C,MAAA;QACkB,SAAA,IAAA,CAAA,SAAA,GAAA,IAAI,YAAY,YAAY,CAAA,CAAA,CAAA;IAAA,CAC9C;IAEI,IAAA,SAAA,CAAU,MAAA,KAAW,YACzB,EAAA;QACI,MAAM,IAAI,KAAM,CAAA,CAAA,oCAAA,EAAuC,UAAU,MAAM,CAAA,cAAA,EAAiB,YAAY,CAAE,CAAA,CAAA,CAAA;IAAA,CAC1G;IAGS,IAAA,IAAA,CAAA,GAAI,GAAG,CAAI,GAAA,CAAA,EAAG,IAAI,YAAc,EAAA,CAAA,IAAK,CAAG,EAAA,CAAA,IAAK,CACtD,CAAA;QACc,SAAA,CAAA,CAAA,GAAI,CAAC,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA;QACb,SAAA,CAAA,CAAA,GAAI,CAAC,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA;QACb,SAAA,CAAA,CAAA,GAAI,CAAC,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA;QACb,SAAA,CAAA,CAAA,GAAI,CAAC,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA;QACb,SAAA,CAAA,CAAA,GAAI,CAAC,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA;QACb,SAAA,CAAA,CAAA,GAAI,CAAC,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA;IAAA,CAC3B;IAEO,OAAA,SAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 8278, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8284, "column": 0}, "map": {"version":3,"file":"generateParticleUpdateFunction.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/shared/utils/generateParticleUpdateFunction.ts"],"sourcesContent":["import {\n    getAttributeInfoFromFormat\n} from '../../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat';\n\nimport type { IParticle } from '../Particle';\nimport type { ParticleRendererProperty } from '../particleData';\n\n// TODO rename to update function\nexport type ParticleUpdateFunction = (ps: IParticle[], f32v: Float32Array, u32v: Uint32Array) => void;\n\nexport function generateParticleUpdateFunction(properties: Record<string, ParticleRendererProperty>)\n{\n    return {\n        dynamicUpdate: generateUpdateFunction(properties, true),\n        staticUpdate: generateUpdateFunction(properties, false),\n    };\n}\n\nfunction generateUpdateFunction(\n    properties: Record<string, ParticleRendererProperty>,\n    dynamic: boolean\n): ParticleUpdateFunction\n{\n    const funcFragments: string[] = [];\n\n    funcFragments.push(`\n      \n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            `);\n\n    let offset = 0;\n\n    for (const i in properties)\n    {\n        const property = properties[i];\n\n        if (dynamic !== property.dynamic) continue;\n\n        funcFragments.push(`offset = index + ${offset}`);\n\n        funcFragments.push(property.code);\n\n        const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n        offset += attributeInfo.stride / 4;\n    }\n\n    funcFragments.push(`\n            index += stride * 4;\n        }\n    `);\n\n    // add to the front..\n    funcFragments.unshift(`\n        var stride = ${offset};\n    `);\n\n    const functionSource = funcFragments.join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function('ps', 'f32v', 'u32v', functionSource) as ParticleUpdateFunction;\n}\n"],"names":[],"mappings":";;;;;;AAUO,SAAS,+BAA+B,UAC/C,EAAA;IACW,OAAA;QACH,aAAA,EAAe,sBAAuB,CAAA,UAAA,EAAY,IAAI,CAAA;QACtD,YAAA,EAAc,sBAAuB,CAAA,UAAA,EAAY,KAAK,CAAA;IAAA,CAC1D,CAAA;AACJ,CAAA;AAEA,SAAS,sBAAA,CACL,UAAA,EACA,OAEJ,EAAA;IACI,MAAM,gBAA0B,EAAC,CAAA;IAEjC,aAAA,CAAc,IAAK,CAAA,CAAA;;;;;;;;YAQV,CAAA,CAAA,CAAA;IAET,IAAI,MAAS,GAAA,CAAA,CAAA;IAEb,IAAA,MAAW,KAAK,UAChB,CAAA;QACU,MAAA,QAAA,GAAW,UAAA,CAAW,CAAC,CAAA,CAAA;QAE7B,IAAI,YAAY,QAAS,CAAA,OAAA,EAAS,SAAA;QAEpB,aAAA,CAAA,IAAA,CAAK,CAAoB,iBAAA,EAAA,MAAM,CAAE,CAAA,CAAA,CAAA;QAEjC,aAAA,CAAA,IAAA,CAAK,SAAS,IAAI,CAAA,CAAA;QAE1B,MAAA,aAAA,iOAAgB,6BAAA,AAA2B,EAAA,QAAA,CAAS,MAAM,CAAA,CAAA;QAEhE,MAAA,IAAU,cAAc,MAAS,GAAA,CAAA,CAAA;IAAA,CACrC;IAEA,aAAA,CAAc,IAAK,CAAA,CAAA;;;IAGlB,CAAA,CAAA,CAAA;IAGD,aAAA,CAAc,OAAQ,CAAA,CAAA;qBAAA,EACH,MAAM,CAAA;IACxB,CAAA,CAAA,CAAA;IAEK,MAAA,cAAA,GAAiB,aAAc,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;IAG9C,OAAO,IAAI,QAAA,CAAS,IAAM,EAAA,MAAA,EAAQ,QAAQ,cAAc,CAAA,CAAA;AAC5D","ignoreList":[0]}},
    {"offset": {"line": 8328, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8334, "column": 0}, "map": {"version":3,"file":"ParticleBuffer.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/shared/ParticleBuffer.ts"],"sourcesContent":["import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport { getAttributeInfoFromFormat } from '../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer';\nimport { createIndicesForQuads } from './utils/createIndicesForQuads';\nimport { generateParticleUpdateFunction } from './utils/generateParticleUpdateFunction';\n\nimport type { IndexBufferArray } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport type { IParticle } from './Particle';\nimport type { ParticleRendererProperty } from './particleData';\nimport type { ParticleUpdateFunction } from './utils/generateParticleUpdateFunction';\n\n/**\n * Options for creating a ParticleBuffer.\n * @property {number} size - The size of the particle buffer.\n * @property {Record<string, ParticleRendererProperty>} properties - A record of attributes that the particle container uses.\n */\nexport interface ParticleBufferOptions\n{\n    size: number;\n    properties: Record<string, ParticleRendererProperty>;\n}\n\n/**\n * The ParticleBuffer holds the buffers and geometry for a particle container.\n * It also contains the upload functions for the static and dynamic properties.\n * @internal\n */\nexport class ParticleBuffer\n{\n    /** The buffer containing static attribute data for all elements in the batch. */\n    public staticAttributeBuffer: ViewableBuffer;\n    /** The buffer containing dynamic attribute data for all elements in the batch. */\n    public dynamicAttributeBuffer: ViewableBuffer;\n\n    private readonly _staticBuffer: Buffer;\n    private readonly _dynamicBuffer: Buffer;\n\n    /** The buffer containing index data for all elements in the batch. */\n    public indexBuffer: IndexBufferArray;\n\n    private readonly _dynamicStride: number;\n    private readonly _staticStride: number;\n\n    /** The geometry of the particle buffer. */\n    public readonly geometry: Geometry;\n\n    private _size = 0;\n    private readonly _dynamicUpload: ParticleUpdateFunction;\n    private readonly _staticUpload: ParticleUpdateFunction;\n    private readonly _generateParticleUpdateCache: Record<string, {\n        dynamicUpdate: ParticleUpdateFunction;\n        staticUpdate: ParticleUpdateFunction;\n    }> = {};\n\n    constructor(options: ParticleBufferOptions)\n    {\n        // size in sprites!\n        const size = this._size = options.size ?? 1000;\n\n        // TODO add the option to specify what is dynamic!\n        const properties = options.properties;\n\n        // in bytes!\n        let staticVertexSize = 0;\n        let dynamicVertexSize = 0;\n\n        for (const i in properties)\n        {\n            const property = properties[i];\n            const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n            if (property.dynamic)\n            {\n                // dynamic.\n                dynamicVertexSize += attributeInfo.stride;\n            }\n            else\n            {\n                // static.\n                staticVertexSize += attributeInfo.stride;\n            }\n        }\n\n        this._dynamicStride = dynamicVertexSize / 4;\n        this._staticStride = staticVertexSize / 4;\n\n        this.staticAttributeBuffer = new ViewableBuffer(size * 4 * staticVertexSize);\n        this.dynamicAttributeBuffer = new ViewableBuffer(size * 4 * dynamicVertexSize);\n\n        this.indexBuffer = createIndicesForQuads(size);\n\n        // build geometry..\n\n        const geometry = new Geometry();\n\n        let dynamicOffset = 0;\n        let staticOffset = 0;\n\n        this._staticBuffer = new Buffer({\n            data: new Float32Array(1),\n            label: 'static-particle-buffer',\n            shrinkToFit: false,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n        });\n\n        this._dynamicBuffer = new Buffer({\n            data: new Float32Array(1),\n            label: 'dynamic-particle-buffer',\n            shrinkToFit: false,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n        });\n\n        for (const i in properties)\n        {\n            const property = properties[i];\n            const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n            if (property.dynamic)\n            {\n                geometry.addAttribute(property.attributeName, {\n                    buffer: this._dynamicBuffer,\n                    stride: this._dynamicStride * 4,\n                    offset: dynamicOffset * 4,\n                    format: property.format,\n                });\n                dynamicOffset += attributeInfo.size;\n            }\n            else\n            {\n                geometry.addAttribute(property.attributeName, {\n                    buffer: this._staticBuffer,\n                    stride: this._staticStride * 4,\n                    offset: staticOffset * 4,\n                    format: property.format,\n                });\n                staticOffset += attributeInfo.size;\n            }\n        }\n\n        geometry.addIndex(this.indexBuffer);\n\n        const uploadFunction = this.getParticleUpdate(properties);\n\n        this._dynamicUpload = uploadFunction.dynamicUpdate;\n        this._staticUpload = uploadFunction.staticUpdate;\n\n        this.geometry = geometry;\n    }\n\n    public getParticleUpdate(properties: Record<string, ParticleRendererProperty>)\n    {\n        const key = getParticleSyncKey(properties);\n\n        if (this._generateParticleUpdateCache[key])\n        {\n            return this._generateParticleUpdateCache[key];\n        }\n\n        this._generateParticleUpdateCache[key] = this.generateParticleUpdate(properties);\n\n        return this._generateParticleUpdateCache[key];\n    }\n\n    public generateParticleUpdate(properties: Record<string, ParticleRendererProperty>)\n    {\n        return generateParticleUpdateFunction(properties);\n    }\n\n    public update(particles: IParticle[], uploadStatic: boolean)\n    {\n        // first resize the buffers if needed!\n        // TODO resize!\n        if (particles.length > this._size)\n        {\n            uploadStatic = true;\n\n            this._size = Math.max(particles.length, (this._size * 1.5) | 0);\n\n            this.staticAttributeBuffer = new ViewableBuffer(this._size * this._staticStride * 4 * 4);\n            this.dynamicAttributeBuffer = new ViewableBuffer(this._size * this._dynamicStride * 4 * 4);\n            this.indexBuffer = createIndicesForQuads(this._size);\n\n            this.geometry.indexBuffer.setDataWithSize(\n                this.indexBuffer, this.indexBuffer.byteLength, true);\n        }\n\n        const dynamicAttributeBuffer = this.dynamicAttributeBuffer;\n\n        this._dynamicUpload(particles, dynamicAttributeBuffer.float32View, dynamicAttributeBuffer.uint32View);\n\n        this._dynamicBuffer.setDataWithSize(\n            this.dynamicAttributeBuffer.float32View, particles.length * this._dynamicStride * 4, true);\n\n        if (uploadStatic)\n        {\n            const staticAttributeBuffer = this.staticAttributeBuffer;\n\n            this._staticUpload(particles, staticAttributeBuffer.float32View, staticAttributeBuffer.uint32View);\n\n            this._staticBuffer.setDataWithSize(\n                staticAttributeBuffer.float32View, particles.length * this._staticStride * 4, true);\n        }\n    }\n\n    public destroy()\n    {\n        this._staticBuffer.destroy();\n        this._dynamicBuffer.destroy();\n        this.geometry.destroy();\n    }\n}\n\nfunction getParticleSyncKey(properties: Record<string, ParticleRendererProperty>)\n{\n    const keyGen: string[] = [];\n\n    for (const key in properties)\n    {\n        const property = properties[key];\n\n        keyGen.push(key, property.code, property.dynamic ? 'd' : 's');\n    }\n\n    return keyGen.join('_');\n}\n\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 8461, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8467, "column": 0}, "map": {"version":3,"file":"ParticleContainerPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/shared/ParticleContainerPipe.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { State } from '../../../rendering/renderers/shared/state/State';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform';\nimport { ParticleBuffer } from './ParticleBuffer';\nimport { ParticleShader } from './shader/ParticleShader';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Container } from '../../container/Container';\nimport type { ParticleContainer } from './ParticleContainer';\n\nexport interface ParticleContainerAdaptor\n{\n    execute(particleContainerPop: ParticleContainerPipe, container: ParticleContainer): void;\n}\n\n/**\n * Renderer for Particles that is designer for speed over feature set.\n * @memberof scene\n */\nexport class ParticleContainerPipe implements RenderPipe<ParticleContainer>\n{\n    /** The default shader that is used if a sprite doesn't have a more specific one. */\n    public defaultShader: Shader;\n\n    public adaptor: ParticleContainerAdaptor;\n    public readonly state = State.for2d();\n    public readonly renderer: Renderer;\n\n    private _gpuBufferHash: Record<number, ParticleBuffer> = Object.create(null);\n    // eslint-disable-next-line max-len\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as unknown as (renderable: Container) => void;\n\n    public readonly localUniforms = new UniformGroup({\n        uTranslationMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        uColor: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uRound: { value: 1, type: 'f32' },\n        uResolution: { value: [0, 0], type: 'vec2<f32>' },\n    });\n\n    /**\n     * @param renderer - The renderer this sprite batch works for.\n     * @param adaptor\n     */\n    constructor(renderer: Renderer, adaptor: ParticleContainerAdaptor)\n    {\n        this.renderer = renderer;\n\n        this.adaptor = adaptor;\n\n        this.defaultShader = new ParticleShader();\n\n        this.state = State.for2d();\n    }\n\n    public validateRenderable(_renderable: ParticleContainer): boolean\n    {\n        // always fine :D\n        return false;\n    }\n\n    public addRenderable(renderable: ParticleContainer, instructionSet: InstructionSet)\n    {\n        this.renderer.renderPipes.batch.break(instructionSet);\n        instructionSet.add(renderable);\n    }\n\n    public getBuffers(renderable: ParticleContainer): ParticleBuffer\n    {\n        return this._gpuBufferHash[renderable.uid] || this._initBuffer(renderable);\n    }\n\n    private _initBuffer(renderable: ParticleContainer): ParticleBuffer\n    {\n        this._gpuBufferHash[renderable.uid] = new ParticleBuffer({\n            size: renderable.particleChildren.length,\n            properties: renderable._properties,\n        });\n\n        renderable.on('destroyed', this._destroyRenderableBound);\n\n        return this._gpuBufferHash[renderable.uid];\n    }\n\n    public updateRenderable(_renderable: ParticleContainer)\n    {\n        // nothing to be done here!\n\n    }\n\n    public destroyRenderable(renderable: ParticleContainer)\n    {\n        const buffer = this._gpuBufferHash[renderable.uid];\n\n        buffer.destroy();\n\n        this._gpuBufferHash[renderable.uid] = null;\n\n        renderable.off('destroyed', this._destroyRenderableBound);\n    }\n\n    public execute(container: ParticleContainer): void\n    {\n        const children = container.particleChildren;\n\n        if (children.length === 0)\n        {\n            return;\n        }\n\n        const renderer = this.renderer;\n        const buffer = this.getBuffers(container);\n\n        container.texture ||= children[0].texture;\n\n        const state = this.state;\n\n        buffer.update(children, container._childrenDirty);\n        container._childrenDirty = false;\n\n        state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n\n        const uniforms = this.localUniforms.uniforms;\n\n        const transformationMatrix = uniforms.uTranslationMatrix;\n\n        container.worldTransform.copyTo(transformationMatrix);\n\n        transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n\n        uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n        uniforms.uRound = renderer._roundPixels | container._roundPixels;\n\n        color32BitToUniform(\n            container.groupColorAlpha,\n            uniforms.uColor,\n            0\n        );\n\n        this.adaptor.execute(this, container);\n    }\n\n    /** Destroys the ParticleRenderer. */\n    public destroy(): void\n    {\n        if (this.defaultShader)\n        {\n            this.defaultShader.destroy();\n            this.defaultShader = null;\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 8575, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8581, "column": 0}, "map": {"version":3,"file":"GlParticleContainerPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/shared/GlParticleContainerPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { GlParticleContainerAdaptor } from '../gl/GlParticleContainerAdaptor';\nimport { ParticleContainerPipe } from './ParticleContainerPipe';\n\nimport type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\n\nexport class GlParticleContainerPipe extends ParticleContainerPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n        ],\n        name: 'particle',\n    } as const;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        super(renderer, new GlParticleContainerAdaptor());\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;AAMO,MAAM,wOAAgC,wBAC7C,CAAA;IASI,YAAY,QACZ,CAAA;QACU,KAAA,CAAA,QAAA,EAAU,IAAI,sOAAA,EAA4B,CAAA,CAAA;IAAA,CACpD;AACJ,CAAA;AAAA,YAAA,GAda,uBAAA,CAGK,SAAY,GAAA;IACtB,IAAM,EAAA;uKACF,gBAAc,CAAA,UAAA;KAClB;IACA,IAAM,EAAA,UAAA;AACV,CAAA","ignoreList":[0]}},
    {"offset": {"line": 8604, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8610, "column": 0}, "map": {"version":3,"file":"GpuParticleContainerAdaptor.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/gpu/GpuParticleContainerAdaptor.ts"],"sourcesContent":["import type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\nimport type { ParticleContainer } from '../shared/ParticleContainer';\nimport type { ParticleContainerAdaptor, ParticleContainerPipe } from '../shared/ParticleContainerPipe';\n\nexport class GpuParticleContainerAdaptor implements ParticleContainerAdaptor\n{\n    public execute(particleContainerPipe: ParticleContainerPipe, container: ParticleContainer)\n    {\n        const renderer = particleContainerPipe.renderer as WebGPURenderer;\n\n        const shader = container.shader || particleContainerPipe.defaultShader;\n\n        shader.groups[0] = renderer.renderPipes.uniformBatch.getUniformBindGroup(particleContainerPipe.localUniforms, true);\n\n        shader.groups[1] = renderer.texture.getTextureBindGroup(container.texture);\n\n        const state = particleContainerPipe.state;\n\n        const buffer = particleContainerPipe.getBuffers(container);\n\n        renderer.encoder.draw({\n            geometry: buffer.geometry,\n            shader: container.shader || particleContainerPipe.defaultShader,\n            state,\n            size: container.particleChildren.length * 6,\n        });\n    }\n}\n"],"names":[],"mappings":";;;;AAIO,MAAM,2BACb,CAAA;IACW,OAAA,CAAQ,qBAAA,EAA8C,SAC7D,EAAA;QACI,MAAM,WAAW,qBAAsB,CAAA,QAAA,CAAA;QAEjC,MAAA,MAAA,GAAS,SAAU,CAAA,MAAA,IAAU,qBAAsB,CAAA,aAAA,CAAA;QAElD,MAAA,CAAA,MAAA,CAAO,CAAC,CAAI,GAAA,QAAA,CAAS,WAAA,CAAY,YAAa,CAAA,mBAAA,CAAoB,qBAAsB,CAAA,aAAA,EAAe,IAAI,CAAA,CAAA;QAElH,MAAA,CAAO,MAAA,CAAO,CAAC,CAAA,GAAI,SAAS,OAAQ,CAAA,mBAAA,CAAoB,UAAU,OAAO,CAAA,CAAA;QAEzE,MAAM,QAAQ,qBAAsB,CAAA,KAAA,CAAA;QAE9B,MAAA,MAAA,GAAS,qBAAsB,CAAA,UAAA,CAAW,SAAS,CAAA,CAAA;QAEzD,QAAA,CAAS,OAAA,CAAQ,IAAK,CAAA;YAClB,UAAU,MAAO,CAAA,QAAA;YACjB,MAAA,EAAQ,SAAU,CAAA,MAAA,IAAU,qBAAsB,CAAA,aAAA;YAClD,KAAA;YACA,IAAA,EAAM,SAAU,CAAA,gBAAA,CAAiB,MAAS,GAAA,CAAA;QAAA,CAC7C,CAAA,CAAA;IAAA,CACL;AACJ","ignoreList":[0]}},
    {"offset": {"line": 8632, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8638, "column": 0}, "map": {"version":3,"file":"GpuParticleContainerPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/shared/GpuParticleContainerPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { GpuParticleContainerAdaptor } from '../gpu/GpuParticleContainerAdaptor';\nimport { ParticleContainerPipe } from './ParticleContainerPipe';\n\nimport type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\n\nexport class GpuParticleContainerPipe extends ParticleContainerPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipes,\n        ],\n        name: 'particle',\n    } as const;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        super(renderer, new GpuParticleContainerAdaptor());\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;AAMO,MAAM,yOAAiC,wBAC9C,CAAA;IASI,YAAY,QACZ,CAAA;QACU,KAAA,CAAA,QAAA,EAAU,IAAI,yOAAA,EAA6B,CAAA,CAAA;IAAA,CACrD;AACJ,CAAA;AAAA,YAAA,GAda,wBAAA,CAGK,SAAY,GAAA;IACtB,IAAM,EAAA;uKACF,gBAAc,CAAA,WAAA;KAClB;IACA,IAAM,EAAA,UAAA;AACV,CAAA","ignoreList":[0]}},
    {"offset": {"line": 8661, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8667, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { GlParticleContainerPipe } from './shared/GlParticleContainerPipe';\nimport { GpuParticleContainerPipe } from './shared/GpuParticleContainerPipe';\n\n// NOTE: this is the first occurrence of needing both gl and gpu pipes in the same file\n// This could cause some issues with tree shaking in the future.\n// Right now these two files do not import anything specific for a renderer, so is not an issue for now.\nextensions.add(GlParticleContainerPipe);\nextensions.add(GpuParticleContainerPipe);\n"],"names":[],"mappings":";;;;;;;;+JAOA,aAAA,CAAW,GAAA,2MAAI,0BAAuB,CAAA,CAAA;+JACtC,aAAA,CAAW,GAAA,4MAAI,2BAAwB,CAAA","ignoreList":[0]}},
    {"offset": {"line": 8677, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8683, "column": 0}, "map": {"version":3,"file":"fontStringFromTextStyle.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/canvas/utils/fontStringFromTextStyle.ts"],"sourcesContent":["import type { TextStyle } from '../../TextStyle';\n\nconst genericFontFamilies = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n];\n\n/**\n * Generates a font style string to use for `TextMetrics.measureFont()`.\n * @param style\n * @returns Font style string, for passing to `TextMetrics.measureFont()`\n */\nexport function fontStringFromTextStyle(style: TextStyle): string\n{\n    // build canvas api font setting from individual components. Convert a numeric style.fontSize to px\n    const fontSizeString = (typeof style.fontSize === 'number') ? `${style.fontSize}px` : style.fontSize;\n\n    // Clean-up fontFamily property by quoting each font name\n    // this will support font names with spaces\n    let fontFamilies: string | string[] = style.fontFamily;\n\n    if (!Array.isArray(style.fontFamily))\n    {\n        fontFamilies = style.fontFamily.split(',');\n    }\n\n    for (let i = fontFamilies.length - 1; i >= 0; i--)\n    {\n        // Trim any extra white-space\n        let fontFamily = fontFamilies[i].trim();\n\n        // Check if font already contains strings\n        if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily) && !genericFontFamilies.includes(fontFamily))\n        {\n            fontFamily = `\"${fontFamily}\"`;\n        }\n        (fontFamilies as string[])[i] = fontFamily;\n    }\n\n    // eslint-disable-next-line max-len\n    return `${style.fontStyle} ${style.fontVariant} ${style.fontWeight} ${fontSizeString} ${(fontFamilies as string[]).join(',')}`;\n}\n"],"names":[],"mappings":";;;;AAEA,MAAM,mBAAsB,GAAA;IACxB,OAAA;IACA,YAAA;IACA,WAAA;IACA,SAAA;IACA,SAAA;IACA,WAAA;CACJ,CAAA;AAOO,SAAS,wBAAwB,KACxC,EAAA;IAEU,MAAA,cAAA,GAAkB,OAAO,KAAM,CAAA,QAAA,KAAa,WAAY,CAAG,EAAA,KAAA,CAAM,QAAQ,CAAA,EAAA,CAAA,GAAO,KAAM,CAAA,QAAA,CAAA;IAI5F,IAAI,eAAkC,KAAM,CAAA,UAAA,CAAA;IAE5C,IAAI,CAAC,KAAA,CAAM,OAAQ,CAAA,KAAA,CAAM,UAAU,CACnC,EAAA;QACmB,YAAA,GAAA,KAAA,CAAM,UAAW,CAAA,KAAA,CAAM,GAAG,CAAA,CAAA;IAAA,CAC7C;IAEA,IAAA,IAAS,IAAI,YAAa,CAAA,MAAA,GAAS,CAAG,EAAA,CAAA,IAAK,GAAG,CAC9C,EAAA,CAAA;QAEI,IAAI,UAAa,GAAA,YAAA,CAAa,CAAC,CAAA,CAAE,IAAK,EAAA,CAAA;QAGlC,IAAA,CAAE,qBAAsB,IAAK,CAAA,UAAU,KAAK,CAAC,mBAAA,CAAoB,QAAS,CAAA,UAAU,CACxF,EAAA;YACI,UAAA,GAAa,CAAA,CAAA,EAAI,UAAU,CAAA,CAAA,CAAA,CAAA;QAAA,CAC/B;QACC,YAAA,CAA0B,CAAC,CAAI,GAAA,UAAA,CAAA;IAAA,CACpC;IAGA,OAAO,CAAG,EAAA,KAAA,CAAM,SAAS,CAAA,CAAA,EAAI,MAAM,WAAW,CAAA,CAAA,EAAI,KAAM,CAAA,UAAU,CAAA,CAAA,EAAI,cAAc,CAAA,CAAA,EAAK,YAA0B,CAAA,IAAA,CAAK,GAAG,CAAC,CAAA,CAAA,CAAA;AAChI","ignoreList":[0]}},
    {"offset": {"line": 8712, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8718, "column": 0}, "map": {"version":3,"file":"CanvasTextMetrics.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/canvas/CanvasTextMetrics.ts"],"sourcesContent":["import { DOMAdapter } from '../../../environment/adapter';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle';\n\nimport type { ICanvas, ICanvasRenderingContext2DSettings } from '../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { TextStyle, TextStyleWhiteSpace } from '../TextStyle';\n\n// The type for Intl.Segmenter is only available since TypeScript 4.7.2, so let's make a polyfill for it.\ninterface ISegmentData\n{\n    segment: string;\n}\ninterface ISegments\n{\n    [Symbol.iterator](): IterableIterator<ISegmentData>;\n}\ninterface ISegmenter\n{\n    segment(input: string): ISegments;\n}\ninterface IIntl\n{\n    Segmenter?: {\n        prototype: ISegmenter;\n        new(): ISegmenter;\n    };\n}\n\n/**\n * A number, or a string containing a number.\n * @memberof text\n * @typedef {object} FontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\nexport interface FontMetrics\n{\n    ascent: number;\n    descent: number;\n    fontSize: number;\n}\n\ntype CharacterWidthCache = Record<string, number>;\n\n// Default settings used for all getContext calls\nconst contextSettings: ICanvasRenderingContext2DSettings = {\n    // TextMetrics requires getImageData readback for measuring fonts.\n    willReadFrequently: true,\n};\n\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n * @example\n * import { TextMetrics, TextStyle } from 'pixi.js';\n *\n * const style = new TextStyle({\n *     fontFamily: 'Arial',\n *     fontSize: 24,\n *     fill: 0xff1010,\n *     align: 'center',\n * });\n * const textMetrics = TextMetrics.measureText('Your text', style);\n * @memberof text\n */\nexport class CanvasTextMetrics\n{\n    /** The text that was measured. */\n    public text: string;\n\n    /** The style that was measured. */\n    public style: TextStyle;\n\n    /** The measured width of the text. */\n    public width: number;\n\n    /** The measured height of the text. */\n    public height: number;\n\n    /** An array of lines of the text broken by new lines and wrapping is specified in style. */\n    public lines: string[];\n\n    /** An array of the line widths for each line matched to `lines`. */\n    public lineWidths: number[];\n\n    /** The measured line height for this style. */\n    public lineHeight: number;\n\n    /** The maximum line width for all measured lines. */\n    public maxLineWidth: number;\n\n    /** The font properties object from TextMetrics.measureFont. */\n    public fontProperties: FontMetrics;\n\n    /**\n     * String used for calculate font metrics.\n     * These characters are all tall to help calculate the height required for text.\n     */\n    public static METRICS_STRING = '|ÉqÅ';\n\n    /** Baseline symbol for calculate font metrics. */\n    public static BASELINE_SYMBOL = 'M';\n\n    /** Baseline multiplier for calculate font metrics. */\n    public static BASELINE_MULTIPLIER = 1.4;\n\n    /** Height multiplier for setting height of canvas to calculate font metrics. */\n    public static HEIGHT_MULTIPLIER = 2.0;\n\n    /**\n     * A Unicode \"character\", or \"grapheme cluster\", can be composed of multiple Unicode code points,\n     * such as letters with diacritical marks (e.g. `'\\u0065\\u0301'`, letter e with acute)\n     * or emojis with modifiers (e.g. `'\\uD83E\\uDDD1\\u200D\\uD83D\\uDCBB'`, technologist).\n     * The new `Intl.Segmenter` API in ES2022 can split the string into grapheme clusters correctly. If it is not available,\n     * PixiJS will fallback to use the iterator of String, which can only spilt the string into code points.\n     * If you want to get full functionality in environments that don't support `Intl.Segmenter` (such as Firefox),\n     * you can use other libraries such as [grapheme-splitter]{@link https://www.npmjs.com/package/grapheme-splitter}\n     * or [graphemer]{@link https://www.npmjs.com/package/graphemer} to create a polyfill. Since these libraries can be\n     * relatively large in size to handle various Unicode grapheme clusters properly, PixiJS won't use them directly.\n     */\n    public static graphemeSegmenter: (s: string) => string[] = (() =>\n    {\n        if (typeof (Intl as IIntl)?.Segmenter === 'function')\n        {\n            const segmenter = new (Intl as IIntl).Segmenter();\n\n            return (s: string) => [...segmenter.segment(s)].map((x) => x.segment);\n        }\n\n        return (s: string) => [...s];\n    })();\n\n    public static _experimentalLetterSpacingSupported?: boolean;\n\n    /**\n     * Checking that we can use modern canvas 2D API.\n     *\n     * Note: This is an unstable API, Chrome < 94 use `textLetterSpacing`, later versions use `letterSpacing`.\n     * @see TextMetrics.experimentalLetterSpacing\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/ICanvasRenderingContext2D/letterSpacing\n     * @see https://developer.chrome.com/origintrials/#/view_trial/3585991203293757441\n     */\n    public static get experimentalLetterSpacingSupported(): boolean\n    {\n        let result = CanvasTextMetrics._experimentalLetterSpacingSupported;\n\n        if (result !== undefined)\n        {\n            const proto = DOMAdapter.get().getCanvasRenderingContext2D().prototype;\n\n            result\n                = CanvasTextMetrics._experimentalLetterSpacingSupported\n                = 'letterSpacing' in proto || 'textLetterSpacing' in proto;\n        }\n\n        return result;\n    }\n\n    /**\n     * New rendering behavior for letter-spacing which uses Chrome's new native API. This will\n     * lead to more accurate letter-spacing results because it does not try to manually draw\n     * each character. However, this Chrome API is experimental and may not serve all cases yet.\n     * @see TextMetrics.experimentalLetterSpacingSupported\n     */\n    public static experimentalLetterSpacing = false;\n\n    /** Cache of {@see TextMetrics.FontMetrics} objects. */\n    private static _fonts: Record<string, FontMetrics> = {};\n\n    /** Cache of new line chars. */\n    private static readonly _newlines: number[] = [\n        0x000A, // line feed\n        0x000D, // carriage return\n    ];\n\n    /** Cache of breaking spaces. */\n    private static readonly _breakingSpaces: number[] = [\n        0x0009, // character tabulation\n        0x0020, // space\n        0x2000, // en quad\n        0x2001, // em quad\n        0x2002, // en space\n        0x2003, // em space\n        0x2004, // three-per-em space\n        0x2005, // four-per-em space\n        0x2006, // six-per-em space\n        0x2008, // punctuation space\n        0x2009, // thin space\n        0x200A, // hair space\n        0x205F, // medium mathematical space\n        0x3000, // ideographic space\n    ];\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    private static __canvas: ICanvas;\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    private static __context: ICanvasRenderingContext2D;\n\n    private static readonly _measurementCache: Record<string, CanvasTextMetrics> = {};\n\n    /**\n     * @param text - the text that was measured\n     * @param style - the style that was measured\n     * @param width - the measured width of the text\n     * @param height - the measured height of the text\n     * @param lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param lineWidths - an array of the line widths for each line matched to `lines`\n     * @param lineHeight - the measured line height for this style\n     * @param maxLineWidth - the maximum line width for all measured lines\n     * @param {FontMetrics} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text: string, style: TextStyle, width: number, height: number, lines: string[], lineWidths: number[],\n        lineHeight: number, maxLineWidth: number, fontProperties: FontMetrics)\n    {\n        this.text = text;\n        this.style = style;\n        this.width = width;\n        this.height = height;\n        this.lines = lines;\n        this.lineWidths = lineWidths;\n        this.lineHeight = lineHeight;\n        this.maxLineWidth = maxLineWidth;\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     * @param text - The text to measure.\n     * @param style - The text style to use for measuring\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @param wordWrap\n     * @returns Measured width and height of the text.\n     */\n    public static measureText(\n        text = ' ',\n        style: TextStyle,\n        canvas: ICanvas = CanvasTextMetrics._canvas,\n        wordWrap: boolean = style.wordWrap,\n    ): CanvasTextMetrics\n    {\n        const textKey = `${text}:${style.styleKey}`;\n\n        // TODO - if we find this starts to go nuts with memory, we can remove the cache\n        // or instead just stick a usage tick that we increment each time we return it.\n        // if some are not used, we can just tidy them up!\n        if (CanvasTextMetrics._measurementCache[textKey]) return CanvasTextMetrics._measurementCache[textKey];\n\n        const font = fontStringFromTextStyle(style);\n        const fontProperties = CanvasTextMetrics.measureFont(font);\n\n        // fallback in case UA disallow canvas data extraction\n        if (fontProperties.fontSize === 0)\n        {\n            fontProperties.fontSize = style.fontSize as number;\n            fontProperties.ascent = style.fontSize as number;\n        }\n\n        const context = CanvasTextMetrics.__context; // canvas.getContext('2d', contextSettings);\n\n        context.font = font;\n\n        const outputText = wordWrap ? CanvasTextMetrics._wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array<number>(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = CanvasTextMetrics._measureText(lines[i], style.letterSpacing, context);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n\n        const strokeWidth = style._stroke?.width || 0;\n\n        let width = maxLineWidth + strokeWidth;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadow.distance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize;\n\n        let height = Math.max(lineHeight, fontProperties.fontSize + (strokeWidth))\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadow.distance;\n        }\n\n        const measurements = new CanvasTextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n\n        // CanvasTextMetrics._measurementCache[textKey] = measurements;\n\n        return measurements;\n    }\n\n    private static _measureText(\n        text: string,\n        letterSpacing: number,\n        context: ICanvasRenderingContext2D\n    )\n    {\n        let useExperimentalLetterSpacing = false;\n\n        if (CanvasTextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (CanvasTextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        const metrics = context.measureText(text);\n        let metricWidth = metrics.width;\n        const actualBoundingBoxLeft = -metrics.actualBoundingBoxLeft;\n        const actualBoundingBoxRight = metrics.actualBoundingBoxRight;\n        let boundsWidth = actualBoundingBoxRight - actualBoundingBoxLeft;\n\n        if (metricWidth > 0)\n        {\n            if (useExperimentalLetterSpacing)\n            {\n                metricWidth -= letterSpacing;\n                boundsWidth -= letterSpacing;\n            }\n            else\n            {\n                const val = (CanvasTextMetrics.graphemeSegmenter(text).length - 1) * letterSpacing;\n\n                metricWidth += val;\n                boundsWidth += val;\n            }\n        }\n\n        // NOTE: this is a bit of a hack as metrics.width and the bounding box width do not measure the same thing\n        // We can't seem to exclusively use one or the other, so are taking the largest of the two\n        return Math.max(metricWidth, boundsWidth);\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     * @param text - String to apply word wrapping to\n     * @param style - the style to use when wrapping\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @returns New string with new lines applied where required\n     */\n    private static _wordWrap(\n        text: string,\n        style: TextStyle,\n        canvas: ICanvas = CanvasTextMetrics._canvas\n    ): string\n    {\n        const context = canvas.getContext('2d', contextSettings);\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache: CharacterWidthCache = Object.create(null);\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = CanvasTextMetrics._collapseSpaces(whiteSpace);\n        const collapseNewlines = CanvasTextMetrics._collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = CanvasTextMetrics._tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (CanvasTextMetrics._isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += CanvasTextMetrics._addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = CanvasTextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = CanvasTextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = CanvasTextMetrics._getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += CanvasTextMetrics._addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (CanvasTextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = CanvasTextMetrics.wordWrapSplit(token);\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n                        let lastChar = char;\n\n                        let k = 1;\n\n                        // we are not at the end of the token\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n\n                            // should not split chars\n                            if (!CanvasTextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            lastChar = nextChar;\n                            k++;\n                        }\n\n                        j += k - 1;\n\n                        const characterWidth = CanvasTextMetrics._getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += CanvasTextMetrics._addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += CanvasTextMetrics._addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += CanvasTextMetrics._addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += CanvasTextMetrics._addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !CanvasTextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += CanvasTextMetrics._addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convenience function for logging each line added during the wordWrap method.\n     * @param line    - The line of text to add\n     * @param newLine - Add new line character to end\n     * @returns A formatted line\n     */\n    private static _addLine(line: string, newLine = true): string\n    {\n        line = CanvasTextMetrics._trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     * @param key            - The key\n     * @param letterSpacing  - The letter spacing\n     * @param cache          - The cache\n     * @param context        - The canvas context\n     * @returns The from cache.\n     */\n    private static _getFromCache(key: string, letterSpacing: number, cache: CharacterWidthCache,\n        context: ICanvasRenderingContext2D): number\n    {\n        let width = cache[key];\n\n        if (typeof width !== 'number')\n        {\n            width = CanvasTextMetrics._measureText(key, letterSpacing, context) + letterSpacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces.\n     * @param whiteSpace - The TextStyle property whiteSpace\n     * @returns Should collapse\n     */\n    private static _collapseSpaces(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars.\n     * @param whiteSpace - The white space\n     * @returns should collapse\n     */\n    private static _collapseNewlines(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * Trims breaking whitespaces from string.\n     * @param text - The text\n     * @returns Trimmed string\n     */\n    private static _trimRight(text: string): string\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!CanvasTextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     * @param char - The character\n     * @returns True if newline, False otherwise.\n     */\n    private static _isNewline(char: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return CanvasTextMetrics._newlines.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * It allows one to determine whether char should be a breaking whitespace\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param char - The character\n     * @param [_nextChar] - The next character\n     * @returns True if whitespace, False otherwise.\n     */\n    public static isBreakingSpace(char: string, _nextChar?: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return CanvasTextMetrics._breakingSpaces.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     * @param text - The text\n     * @returns A tokenized array\n     */\n    private static _tokenize(text: string): string[]\n    {\n        const tokens: string[] = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n            const nextChar = text[i + 1];\n\n            if (CanvasTextMetrics.isBreakingSpace(char, nextChar) || CanvasTextMetrics._isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     * @param _token - The token\n     * @param breakWords - The style attr break words\n     * @returns Whether to break word or not\n     */\n    public static canBreakWords(_token: string, breakWords: boolean): boolean\n    {\n        return breakWords;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param _char - The character\n     * @param _nextChar - The next character\n     * @param _token - The token/word the characters are from\n     * @param _index - The index in the token of the char\n     * @param _breakWords - The style attr break words\n     * @returns whether to break word or not\n     */\n    public static canBreakChars(_char: string, _nextChar: string, _token: string, _index: number,\n        _breakWords: boolean): boolean\n    {\n        return true;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     * @param token - The token to split\n     * @returns The characters of the token\n     * @see CanvasTextMetrics.graphemeSegmenter\n     */\n    public static wordWrapSplit(token: string): string[]\n    {\n        return CanvasTextMetrics.graphemeSegmenter(token);\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     * @param font - String representing the style of the font\n     * @returns Font properties object\n     */\n    public static measureFont(font: string): FontMetrics\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (CanvasTextMetrics._fonts[font])\n        {\n            return CanvasTextMetrics._fonts[font];\n        }\n\n        const context = CanvasTextMetrics._context;\n\n        context.font = font;\n        const metrics = context.measureText(CanvasTextMetrics.METRICS_STRING + CanvasTextMetrics.BASELINE_SYMBOL);\n\n        const properties = {\n            ascent: metrics.actualBoundingBoxAscent,\n            descent: metrics.actualBoundingBoxDescent,\n            fontSize: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent\n        };\n\n        CanvasTextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    public static clearMetrics(font = ''): void\n    {\n        if (font)\n        {\n            delete CanvasTextMetrics._fonts[font];\n        }\n        else\n        {\n            CanvasTextMetrics._fonts = {};\n        }\n    }\n\n    /**\n     * Cached canvas element for measuring text\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _canvas(): ICanvas\n    {\n        if (!CanvasTextMetrics.__canvas)\n        {\n            let canvas: ICanvas;\n\n            try\n            {\n                // OffscreenCanvas2D measureText can be up to 40% faster.\n                const c = new OffscreenCanvas(0, 0);\n                const context = c.getContext('2d', contextSettings);\n\n                if (context?.measureText)\n                {\n                    CanvasTextMetrics.__canvas = c as ICanvas;\n\n                    return c as ICanvas;\n                }\n\n                canvas = DOMAdapter.get().createCanvas();\n            }\n            catch (_cx)\n            {\n                canvas = DOMAdapter.get().createCanvas();\n            }\n            canvas.width = canvas.height = 10;\n            CanvasTextMetrics.__canvas = canvas;\n        }\n\n        return CanvasTextMetrics.__canvas;\n    }\n\n    /**\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _context(): ICanvasRenderingContext2D\n    {\n        if (!CanvasTextMetrics.__context)\n        {\n            CanvasTextMetrics.__context = CanvasTextMetrics._canvas.getContext('2d', contextSettings);\n        }\n\n        return CanvasTextMetrics.__context;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 9221, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9226, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/slot-game/frontend/node_modules/parse-svg-path/index.js"],"sourcesContent":["\nmodule.exports = parse\n\n/**\n * expected argument lengths\n * @type {Object}\n */\n\nvar length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0}\n\n/**\n * segment pattern\n * @type {RegExp}\n */\n\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig\n\n/**\n * parse an svg path data string. Generates an Array\n * of commands where each command is an Array of the\n * form `[command, arg1, arg2, ...]`\n *\n * @param {String} path\n * @return {Array}\n */\n\nfunction parse(path) {\n\tvar data = []\n\tpath.replace(segment, function(_, command, args){\n\t\tvar type = command.toLowerCase()\n\t\targs = parseValues(args)\n\n\t\t// overloaded moveTo\n\t\tif (type == 'm' && args.length > 2) {\n\t\t\tdata.push([command].concat(args.splice(0, 2)))\n\t\t\ttype = 'l'\n\t\t\tcommand = command == 'm' ? 'l' : 'L'\n\t\t}\n\n\t\twhile (true) {\n\t\t\tif (args.length == length[type]) {\n\t\t\t\targs.unshift(command)\n\t\t\t\treturn data.push(args)\n\t\t\t}\n\t\t\tif (args.length < length[type]) throw new Error('malformed path data')\n\t\t\tdata.push([command].concat(args.splice(0, length[type])))\n\t\t}\n\t})\n\treturn data\n}\n\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig\n\nfunction parseValues(args) {\n\tvar numbers = args.match(number)\n\treturn numbers ? numbers.map(Number) : []\n}\n"],"names":[],"mappings":"AACA,OAAO,OAAO,GAAG;AAEjB;;;CAGC,GAED,IAAI,SAAS;IAAC,GAAG;IAAG,GAAG;IAAG,GAAG;IAAG,GAAG;IAAG,GAAG;IAAG,GAAG;IAAG,GAAG;IAAG,GAAG;IAAG,GAAG;IAAG,GAAG;AAAC;AAExE;;;CAGC,GAED,IAAI,UAAU;AAEd;;;;;;;CAOC,GAED,SAAS,MAAM,IAAI;IAClB,IAAI,OAAO,EAAE;IACb,KAAK,OAAO,CAAC,SAAS,SAAS,CAAC,EAAE,OAAO,EAAE,IAAI;QAC9C,IAAI,OAAO,QAAQ,WAAW;QAC9B,OAAO,YAAY;QAEnB,oBAAoB;QACpB,IAAI,QAAQ,OAAO,KAAK,MAAM,GAAG,GAAG;YACnC,KAAK,IAAI,CAAC;gBAAC;aAAQ,CAAC,MAAM,CAAC,KAAK,MAAM,CAAC,GAAG;YAC1C,OAAO;YACP,UAAU,WAAW,MAAM,MAAM;QAClC;QAEA,MAAO,KAAM;YACZ,IAAI,KAAK,MAAM,IAAI,MAAM,CAAC,KAAK,EAAE;gBAChC,KAAK,OAAO,CAAC;gBACb,OAAO,KAAK,IAAI,CAAC;YAClB;YACA,IAAI,KAAK,MAAM,GAAG,MAAM,CAAC,KAAK,EAAE,MAAM,IAAI,MAAM;YAChD,KAAK,IAAI,CAAC;gBAAC;aAAQ,CAAC,MAAM,CAAC,KAAK,MAAM,CAAC,GAAG,MAAM,CAAC,KAAK;QACvD;IACD;IACA,OAAO;AACR;AAEA,IAAI,SAAS;AAEb,SAAS,YAAY,IAAI;IACxB,IAAI,UAAU,KAAK,KAAK,CAAC;IACzB,OAAO,UAAU,QAAQ,GAAG,CAAC,UAAU,EAAE;AAC1C","ignoreList":[0]}},
    {"offset": {"line": 9284, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9290, "column": 0}, "map": {"version":3,"file":"SVGToGraphicsPath.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/svg/SVGToGraphicsPath.ts"],"sourcesContent":["import parse from 'parse-svg-path';\nimport { warn } from '../../../../utils/logging/warn';\n\nimport type { GraphicsPath } from '../path/GraphicsPath';\n\ninterface SubPath\n{\n    startX: number;\n    startY: number;\n}\n\n// TODO optimise and cache the paths?\nexport function SVGToGraphicsPath(svgPath: string, path: GraphicsPath): GraphicsPath\n{\n    const commands = parse(svgPath);\n\n    const subpaths: SubPath[] = [];\n    let currentSubPath: SubPath | null = null;\n\n    let lastX = 0;\n    let lastY = 0;\n\n    for (let i = 0; i < commands.length; i++)\n    {\n        const command = commands[i];\n        const type = command[0];\n        const data = command; // alias for 1-based referencing\n\n        switch (type)\n        {\n            case 'M':\n                lastX = data[1];\n                lastY = data[2];\n\n                path.moveTo(lastX, lastY);\n                break;\n            case 'm':\n\n                lastX += data[1];\n                lastY += data[2];\n\n                path.moveTo(lastX, lastY);\n                break;\n            case 'H':\n                lastX = data[1];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'h':\n                lastX += data[1];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'V':\n                lastY = data[1];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'v':\n                lastY += data[1];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'L':\n                lastX = data[1];\n                lastY = data[2];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'l':\n                lastX += data[1];\n                lastY += data[2];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'C':\n\n                lastX = data[5];\n                lastY = data[6];\n\n                path.bezierCurveTo(\n                    data[1], data[2],\n                    data[3], data[4],\n                    lastX, lastY\n                );\n                break;\n            case 'c':\n                path.bezierCurveTo(\n                    lastX + data[1], lastY + data[2],\n                    lastX + data[3], lastY + data[4],\n                    lastX + data[5], lastY + data[6]\n                );\n\n                lastX += data[5];\n                lastY += data[6];\n                break;\n            case 'S':\n                lastX = data[3];\n                lastY = data[4];\n\n                path.bezierCurveToShort(\n                    data[1], data[2],\n                    lastX, lastY\n                );\n                break;\n            case 's':\n                path.bezierCurveToShort(\n                    lastX + data[1], lastY + data[2],\n                    lastX + data[3], lastY + data[4],\n                );\n\n                lastX += data[3];\n                lastY += data[4];\n                break;\n            case 'Q':\n                lastX = data[3];\n                lastY = data[4];\n\n                path.quadraticCurveTo(\n                    data[1], data[2],\n                    lastX, lastY\n                );\n                break;\n            case 'q':\n                path.quadraticCurveTo(\n                    lastX + data[1], lastY + data[2],\n                    lastX + data[3], lastY + data[4]\n                );\n\n                lastX += data[3];\n                lastY += data[4];\n                break;\n            case 'T':\n                lastX = data[1];\n                lastY = data[2];\n\n                path.quadraticCurveToShort(\n                    lastX, lastY\n                );\n                break;\n            case 't':\n                lastX += data[1];\n                lastY += data[2];\n\n                path.quadraticCurveToShort(\n                    lastX, lastY\n                );\n                break;\n            case 'A':\n                lastX = data[6];\n                lastY = data[7];\n\n                path.arcToSvg(\n                    data[1],\n                    data[2],\n                    data[3],\n                    data[4],\n                    data[5],\n                    lastX, lastY\n                );\n                break;\n            case 'a':\n                lastX += data[6];\n                lastY += data[7];\n\n                path.arcToSvg(\n                    data[1],\n                    data[2],\n                    data[3],\n                    data[4],\n                    data[5],\n                    lastX, lastY\n                );\n                break;\n            case 'Z':\n            case 'z':\n                path.closePath();\n                if (subpaths.length > 0)\n                {\n                    currentSubPath = subpaths.pop();\n                    if (currentSubPath)\n                    {\n                        lastX = currentSubPath.startX;\n                        lastY = currentSubPath.startY;\n                    }\n                    else\n                    {\n                        lastX = 0;\n                        lastY = 0;\n                    }\n                }\n                currentSubPath = null;\n                break;\n            default:\n                // #if _DEBUG\n                warn(`Unknown SVG path command: ${type}`);\n                // #endif\n        }\n\n        if (type !== 'Z' && type !== 'z')\n        {\n            if (currentSubPath === null)\n            {\n                currentSubPath = { startX: lastX, startY: lastY };\n                subpaths.push(currentSubPath);\n            }\n        }\n    }\n\n    return path;\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 9427, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9433, "column": 0}, "map": {"version":3,"file":"buildArc.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildArc.ts"],"sourcesContent":["export function buildArc(\n    points: number[],\n    x: number, y: number,\n    radius: number,\n    start: number,\n    end: number,\n    clockwise: boolean,\n    steps?: number\n)\n{\n    // determine distance between the two angles\n    // ...probably a nicer way of writing this\n    let dist = Math.abs(start - end);\n\n    if (!clockwise && start > end)\n    {\n        dist = (2 * Math.PI) - dist;\n    }\n    else if (clockwise && end > start)\n    {\n        dist = (2 * Math.PI) - dist;\n    }\n\n    // approximate the # of steps using the cube root of the radius\n\n    steps ||= Math.max(6, Math.floor(6 * Math.pow(radius, 1 / 3) * (dist / (Math.PI))));\n\n    // ensure we have at least 3 steps..\n    steps = Math.max(steps, 3);\n\n    let f = dist / (steps);\n    let t = start;\n\n    // modify direction\n    f *= clockwise ? -1 : 1;\n\n    for (let i = 0; i < steps + 1; i++)\n    {\n        const cs = Math.cos(t);\n        const sn = Math.sin(t);\n\n        const nx = x + (cs * radius);\n        const ny = y + (sn * radius);\n\n        points.push(nx, ny);\n\n        t += f;\n    }\n}\n"],"names":[],"mappings":";;;;AAAgB,SAAA,QAAA,CACZ,MAAA,EACA,CAAW,EAAA,CAAA,EACX,MAAA,EACA,KACA,EAAA,GAAA,EACA,SAAA,EACA,KAEJ,EAAA;IAGI,IAAI,IAAO,GAAA,IAAA,CAAK,GAAI,CAAA,KAAA,GAAQ,GAAG,CAAA,CAAA;IAE3B,IAAA,CAAC,SAAa,IAAA,KAAA,GAAQ,GAC1B,EAAA;QACY,IAAA,GAAA,CAAA,GAAI,KAAK,EAAM,GAAA,IAAA,CAAA;IAAA,CAC3B,MAAA,IACS,SAAa,IAAA,GAAA,GAAM,KAC5B,EAAA;QACY,IAAA,GAAA,CAAA,GAAI,KAAK,EAAM,GAAA,IAAA,CAAA;IAAA,CAC3B;IAIA,KAAA,IAAA,CAAA,KAAA,GAAU,IAAK,CAAA,GAAA,CAAI,CAAG,EAAA,IAAA,CAAK,KAAA,CAAM,CAAI,GAAA,IAAA,CAAK,GAAI,CAAA,MAAA,EAAQ,IAAI,CAAC,CAAA,GAAA,CAAK,IAAQ,GAAA,IAAA,CAAK,EAAA,CAAI,CAAC,CAAA,CAAA,CAAA;IAG1E,KAAA,GAAA,IAAA,CAAK,GAAI,CAAA,KAAA,EAAO,CAAC,CAAA,CAAA;IAEzB,IAAI,IAAI,IAAQ,GAAA,KAAA,CAAA;IAChB,IAAI,CAAI,GAAA,KAAA,CAAA;IAGR,CAAA,IAAK,YAAY,CAAK,CAAA,GAAA,CAAA,CAAA;IAEtB,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,GAAQ,GAAG,CAC/B,EAAA,CAAA;QACU,MAAA,EAAA,GAAK,IAAK,CAAA,GAAA,CAAI,CAAC,CAAA,CAAA;QACf,MAAA,EAAA,GAAK,IAAK,CAAA,GAAA,CAAI,CAAC,CAAA,CAAA;QAEf,MAAA,EAAA,GAAK,IAAK,EAAK,GAAA,MAAA,CAAA;QACf,MAAA,EAAA,GAAK,IAAK,EAAK,GAAA,MAAA,CAAA;QAEd,MAAA,CAAA,IAAA,CAAK,IAAI,EAAE,CAAA,CAAA;QAEb,CAAA,IAAA,CAAA,CAAA;IAAA,CACT;AACJ","ignoreList":[0]}},
    {"offset": {"line": 9460, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9466, "column": 0}, "map": {"version":3,"file":"buildArcTo.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildArcTo.ts"],"sourcesContent":["import { buildArc } from './buildArc';\n\n/**\n * The arcTo() method creates an arc/curve between two tangents on the canvas.\n *\n * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n * @param points\n * @param x1\n * @param y1\n * @param x2\n * @param y2\n * @param radius\n */\nexport function buildArcTo(\n    points: number[],\n    x1: number, y1: number,\n    x2: number, y2: number,\n    radius: number,\n): void\n{\n    const fromX = points[points.length - 2];\n    const fromY = points[points.length - 1];\n\n    const a1 = fromY - y1;\n    const b1 = fromX - x1;\n    const a2 = y2 - y1;\n    const b2 = x2 - x1;\n    const mm = Math.abs((a1 * b2) - (b1 * a2));\n\n    if (mm < 1.0e-8 || radius === 0)\n    {\n        if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1)\n        {\n            points.push(x1, y1);\n        }\n\n        return;\n    }\n\n    const dd = (a1 * a1) + (b1 * b1);\n    const cc = (a2 * a2) + (b2 * b2);\n    const tt = (a1 * a2) + (b1 * b2);\n    const k1 = radius * Math.sqrt(dd) / mm;\n    const k2 = radius * Math.sqrt(cc) / mm;\n    const j1 = k1 * tt / dd;\n    const j2 = k2 * tt / cc;\n    const cx = (k1 * b2) + (k2 * b1);\n    const cy = (k1 * a2) + (k2 * a1);\n    const px = b1 * (k2 + j1);\n    const py = a1 * (k2 + j1);\n    const qx = b2 * (k1 + j2);\n    const qy = a2 * (k1 + j2);\n    const startAngle = Math.atan2(py - cy, px - cx);\n    const endAngle = Math.atan2(qy - cy, qx - cx);\n\n    buildArc(points,\n        (cx + x1),\n        (cy + y1),\n        radius,\n        startAngle,\n        endAngle,\n        b1 * a2 > b2 * a1\n    );\n}\n"],"names":[],"mappings":";;;;;;AAaO,SAAS,WACZ,MACA,EAAA,EAAA,EAAY,EACZ,EAAA,EAAA,EAAY,EAAA,EACZ,MAEJ,EAAA;IACI,MAAM,KAAQ,GAAA,MAAA,CAAO,MAAO,CAAA,MAAA,GAAS,CAAC,CAAA,CAAA;IACtC,MAAM,KAAQ,GAAA,MAAA,CAAO,MAAO,CAAA,MAAA,GAAS,CAAC,CAAA,CAAA;IAEtC,MAAM,KAAK,KAAQ,GAAA,EAAA,CAAA;IACnB,MAAM,KAAK,KAAQ,GAAA,EAAA,CAAA;IACnB,MAAM,KAAK,EAAK,GAAA,EAAA,CAAA;IAChB,MAAM,KAAK,EAAK,GAAA,EAAA,CAAA;IAChB,MAAM,KAAK,IAAK,CAAA,GAAA,CAAK,EAAK,GAAA,EAAA,GAAO,KAAK,EAAG,CAAA,CAAA;IAErC,IAAA,EAAA,GAAK,IAAU,IAAA,MAAA,KAAW,CAC9B,EAAA;QACQ,IAAA,MAAA,CAAO,MAAO,CAAA,MAAA,GAAS,CAAC,CAAA,KAAM,EAAM,IAAA,MAAA,CAAO,MAAO,CAAA,MAAA,GAAS,CAAC,CAAA,KAAM,EACtE,EAAA;YACW,MAAA,CAAA,IAAA,CAAK,IAAI,EAAE,CAAA,CAAA;QAAA,CACtB;QAEA,OAAA;IAAA,CACJ;IAEM,MAAA,EAAA,GAAM,EAAK,GAAA,EAAA,GAAO,EAAK,GAAA,EAAA,CAAA;IACvB,MAAA,EAAA,GAAM,EAAK,GAAA,EAAA,GAAO,EAAK,GAAA,EAAA,CAAA;IACvB,MAAA,EAAA,GAAM,EAAK,GAAA,EAAA,GAAO,EAAK,GAAA,EAAA,CAAA;IAC7B,MAAM,EAAK,GAAA,MAAA,GAAS,IAAK,CAAA,IAAA,CAAK,EAAE,CAAI,GAAA,EAAA,CAAA;IACpC,MAAM,EAAK,GAAA,MAAA,GAAS,IAAK,CAAA,IAAA,CAAK,EAAE,CAAI,GAAA,EAAA,CAAA;IAC9B,MAAA,EAAA,GAAK,KAAK,EAAK,GAAA,EAAA,CAAA;IACf,MAAA,EAAA,GAAK,KAAK,EAAK,GAAA,EAAA,CAAA;IACf,MAAA,EAAA,GAAM,EAAK,GAAA,EAAA,GAAO,EAAK,GAAA,EAAA,CAAA;IACvB,MAAA,EAAA,GAAM,EAAK,GAAA,EAAA,GAAO,EAAK,GAAA,EAAA,CAAA;IACvB,MAAA,EAAA,GAAK,KAAA,CAAM,EAAK,GAAA,EAAA,CAAA,CAAA;IAChB,MAAA,EAAA,GAAK,KAAA,CAAM,EAAK,GAAA,EAAA,CAAA,CAAA;IAChB,MAAA,EAAA,GAAK,KAAA,CAAM,EAAK,GAAA,EAAA,CAAA,CAAA;IAChB,MAAA,EAAA,GAAK,KAAA,CAAM,EAAK,GAAA,EAAA,CAAA,CAAA;IACtB,MAAM,aAAa,IAAK,CAAA,KAAA,CAAM,EAAK,GAAA,EAAA,EAAI,KAAK,EAAE,CAAA,CAAA;IAC9C,MAAM,WAAW,IAAK,CAAA,KAAA,CAAM,EAAK,GAAA,EAAA,EAAI,KAAK,EAAE,CAAA,CAAA;uMAE5C,WAAA,EAAS,MAAA,EACJ,EAAK,GAAA,EAAA,EACL,EAAK,GAAA,EAAA,EACN,MAAA,EACA,UAAA,EACA,QAAA,EACA,EAAA,GAAK,KAAK,EAAK,GAAA,EAAA;AAEvB","ignoreList":[0]}},
    {"offset": {"line": 9505, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9511, "column": 0}, "map": {"version":3,"file":"buildAdaptiveBezier.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildAdaptiveBezier.ts"],"sourcesContent":["// thanks to https://github.com/mattdesl/adaptive-bezier-curve\n// for the original code!\n\nimport { GraphicsContextSystem } from '../GraphicsContextSystem';\n\nconst RECURSION_LIMIT = 8;\nconst FLT_EPSILON = 1.19209290e-7;\nconst PATH_DISTANCE_EPSILON = 1.0;\n\nconst curveAngleToleranceEpsilon = 0.01;\nconst mAngleTolerance = 0;\nconst mCuspLimit = 0;\n\nexport function buildAdaptiveBezier(\n    points: number[],\n    sX: number, sY: number,\n    cp1x: number, cp1y: number,\n    cp2x: number, cp2y: number,\n    eX: number, eY: number,\n    smoothness?: number,\n)\n{\n    // TODO expose as a parameter\n    const scale = 1;\n    const smoothing = Math.min(\n        0.99, // a value of 1.0 actually inverts smoothing, so we cap it at 0.99\n        Math.max(0, smoothness ?? GraphicsContextSystem.defaultOptions.bezierSmoothness)\n    );\n    let distanceTolerance = (PATH_DISTANCE_EPSILON - smoothing) / scale;\n\n    distanceTolerance *= distanceTolerance;\n    begin(sX, sY, cp1x, cp1y, cp2x, cp2y, eX, eY, points, distanceTolerance);\n\n    return points;\n}\n\n// //// Based on:\n// //// https://github.com/pelson/antigrain/blob/master/agg-2.4/src/agg_curves.cpp\n\nfunction begin(\n    sX: number, sY: number,\n    cp1x: number, cp1y: number,\n    cp2x: number, cp2y: number,\n    eX: number, eY: number,\n    points: number[],\n    distanceTolerance: number\n)\n{\n    // dont need to actually ad this!\n    // points.push(sX, sY);\n    recursive(sX, sY, cp1x, cp1y, cp2x, cp2y, eX, eY, points, distanceTolerance, 0);\n    points.push(eX, eY);\n}\n\n// eslint-disable-next-line max-params\nfunction recursive(\n    x1: number, y1: number,\n    x2: number, y2: number,\n    x3: number, y3: number,\n    x4: number, y4: number,\n    points: number[],\n    distanceTolerance: number,\n    level: number)\n{\n    if (level > RECURSION_LIMIT)\n    { return; }\n\n    const pi = Math.PI;\n\n    // Calculate all the mid-points of the line segments\n    // ----------------------\n    const x12 = (x1 + x2) / 2;\n    const y12 = (y1 + y2) / 2;\n    const x23 = (x2 + x3) / 2;\n    const y23 = (y2 + y3) / 2;\n    const x34 = (x3 + x4) / 2;\n    const y34 = (y3 + y4) / 2;\n    const x123 = (x12 + x23) / 2;\n    const y123 = (y12 + y23) / 2;\n    const x234 = (x23 + x34) / 2;\n    const y234 = (y23 + y34) / 2;\n    const x1234 = (x123 + x234) / 2;\n    const y1234 = (y123 + y234) / 2;\n\n    if (level > 0)\n    { // Enforce subdivision first time\n        // Try to approximate the full cubic curve by a single straight line\n        // ------------------\n        let dx = x4 - x1;\n        let dy = y4 - y1;\n\n        const d2 = Math.abs(((x2 - x4) * dy) - ((y2 - y4) * dx));\n        const d3 = Math.abs(((x3 - x4) * dy) - ((y3 - y4) * dx));\n\n        let da1; let da2;\n\n        if (d2 > FLT_EPSILON && d3 > FLT_EPSILON)\n        {\n            // Regular care\n            // -----------------\n            if ((d2 + d3) * (d2 + d3) <= distanceTolerance * ((dx * dx) + (dy * dy)))\n            {\n                // If the curvature doesn't exceed the distanceTolerance value\n                // we tend to finish subdivisions.\n                // ----------------------\n                if (mAngleTolerance < curveAngleToleranceEpsilon)\n                {\n                    points.push(x1234, y1234);\n\n                    return;\n                }\n\n                // Angle & Cusp Condition\n                // ----------------------\n                const a23 = Math.atan2(y3 - y2, x3 - x2);\n\n                da1 = Math.abs(a23 - Math.atan2(y2 - y1, x2 - x1));\n                da2 = Math.abs(Math.atan2(y4 - y3, x4 - x3) - a23);\n                if (da1 >= pi) da1 = (2 * pi) - da1;\n                if (da2 >= pi) da2 = (2 * pi) - da2;\n\n                if (da1 + da2 < mAngleTolerance)\n                {\n                    // Finally we can stop the recursion\n                    // ----------------------\n                    points.push(x1234, y1234);\n\n                    return;\n                }\n\n                if (mCuspLimit !== 0.0)\n                {\n                    if (da1 > mCuspLimit)\n                    {\n                        points.push(x2, y2);\n\n                        return;\n                    }\n\n                    if (da2 > mCuspLimit)\n                    {\n                        points.push(x3, y3);\n\n                        return;\n                    }\n                }\n            }\n        }\n        else if (d2 > FLT_EPSILON)\n        {\n            // p1,p3,p4 are collinear, p2 is considerable\n            // ----------------------\n            if (d2 * d2 <= distanceTolerance * ((dx * dx) + (dy * dy)))\n            {\n                if (mAngleTolerance < curveAngleToleranceEpsilon)\n                {\n                    points.push(x1234, y1234);\n\n                    return;\n                }\n\n                // Angle Condition\n                // ----------------------\n                da1 = Math.abs(Math.atan2(y3 - y2, x3 - x2) - Math.atan2(y2 - y1, x2 - x1));\n                if (da1 >= pi) da1 = (2 * pi) - da1;\n\n                if (da1 < mAngleTolerance)\n                {\n                    points.push(x2, y2);\n                    points.push(x3, y3);\n\n                    return;\n                }\n\n                if (mCuspLimit !== 0.0)\n                {\n                    if (da1 > mCuspLimit)\n                    {\n                        points.push(x2, y2);\n\n                        return;\n                    }\n                }\n            }\n        }\n        else if (d3 > FLT_EPSILON)\n        {\n            // p1,p2,p4 are collinear, p3 is considerable\n            // ----------------------\n            if (d3 * d3 <= distanceTolerance * ((dx * dx) + (dy * dy)))\n            {\n                if (mAngleTolerance < curveAngleToleranceEpsilon)\n                {\n                    points.push(x1234, y1234);\n\n                    return;\n                }\n\n                // Angle Condition\n                // ----------------------\n                da1 = Math.abs(Math.atan2(y4 - y3, x4 - x3) - Math.atan2(y3 - y2, x3 - x2));\n                if (da1 >= pi) da1 = (2 * pi) - da1;\n\n                if (da1 < mAngleTolerance)\n                {\n                    points.push(x2, y2);\n                    points.push(x3, y3);\n\n                    return;\n                }\n\n                if (mCuspLimit !== 0.0)\n                {\n                    if (da1 > mCuspLimit)\n                    {\n                        points.push(x3, y3);\n\n                        return;\n                    }\n                }\n            }\n        }\n        else\n        {\n            // Collinear case\n            // -----------------\n            dx = x1234 - ((x1 + x4) / 2);\n            dy = y1234 - ((y1 + y4) / 2);\n            if ((dx * dx) + (dy * dy) <= distanceTolerance)\n            {\n                points.push(x1234, y1234);\n\n                return;\n            }\n        }\n    }\n\n    // Continue subdivision\n    // ----------------------\n    recursive(x1, y1, x12, y12, x123, y123, x1234, y1234, points, distanceTolerance, level + 1);\n    recursive(x1234, y1234, x234, y234, x34, y34, x4, y4, points, distanceTolerance, level + 1);\n}\n\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 9627, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9633, "column": 0}, "map": {"version":3,"file":"buildArcToSvg.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildArcToSvg.ts"],"sourcesContent":["import { buildAdaptiveBezier } from './buildAdaptiveBezier';\n\nconst TAU = Math.PI * 2;\n\nconst out = {\n    centerX: 0,\n    centerY: 0,\n    ang1: 0,\n    ang2: 0\n};\n\nconst mapToEllipse = (\n    { x, y }: {x: number, y: number},\n    rx: number, ry: number,\n    cosPhi: number, sinPhi: number,\n    centerX: number, centerY: number,\n    out: {x: number, y: number}\n): {x: number, y: number} =>\n{\n    x *= rx;\n    y *= ry;\n\n    const xp = (cosPhi * x) - (sinPhi * y);\n    const yp = (sinPhi * x) + (cosPhi * y);\n\n    out.x = xp + centerX;\n    out.y = yp + centerY;\n\n    return out;\n};\n\nfunction approxUnitArc(ang1: number, ang2: number): {x: number, y: number}[]\n{\n    // If 90 degree circular arc, use a constant\n    // as derived from http://spencermortensen.com/articles/bezier-circle\n\n    const a1 = ang2 === -1.5707963267948966 ? -0.551915024494 : 4 / 3 * Math.tan(ang2 / 4);\n\n    const a = ang2 === 1.5707963267948966 ? 0.551915024494 : a1;\n\n    const x1 = Math.cos(ang1);\n    const y1 = Math.sin(ang1);\n    const x2 = Math.cos(ang1 + ang2);\n    const y2 = Math.sin(ang1 + ang2);\n\n    return [\n        {\n            x: x1 - (y1 * a),\n            y: y1 + (x1 * a)\n        },\n        {\n            x: x2 + (y2 * a),\n            y: y2 - (x2 * a)\n        },\n        {\n            x: x2,\n            y: y2\n        }\n    ];\n}\n\nconst vectorAngle = (ux: number, uy: number, vx: number, vy: number) =>\n{\n    const sign = ((ux * vy) - (uy * vx) < 0) ? -1 : 1;\n\n    let dot = (ux * vx) + (uy * vy);\n\n    if (dot > 1)\n    {\n        dot = 1;\n    }\n\n    if (dot < -1)\n    {\n        dot = -1;\n    }\n\n    return sign * Math.acos(dot);\n};\n\nconst getArcCenter = (\n    px: number,\n    py: number,\n    cx: number,\n    cy: number,\n    rx: number,\n    ry: number,\n    largeArcFlag: number,\n    sweepFlag: number,\n    sinPhi: number,\n    cosPhi: number,\n    pxp: number,\n    pyp: number,\n    out: {\n        centerX: number,\n        centerY: number,\n        ang1: number,\n        ang2: number\n    }\n// eslint-disable-next-line max-params\n) =>\n{\n    const rxSq = Math.pow(rx, 2);\n    const rySq = Math.pow(ry, 2);\n    const pxpSq = Math.pow(pxp, 2);\n    const pypSq = Math.pow(pyp, 2);\n\n    let radicant = (rxSq * rySq) - (rxSq * pypSq) - (rySq * pxpSq);\n\n    if (radicant < 0)\n    {\n        radicant = 0;\n    }\n\n    radicant /= (rxSq * pypSq) + (rySq * pxpSq);\n    radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);\n\n    const centerXp = radicant * rx / ry * pyp;\n    const centerYp = radicant * -ry / rx * pxp;\n\n    const centerX = (cosPhi * centerXp) - (sinPhi * centerYp) + ((px + cx) / 2);\n    const centerY = (sinPhi * centerXp) + (cosPhi * centerYp) + ((py + cy) / 2);\n\n    const vx1 = (pxp - centerXp) / rx;\n    const vy1 = (pyp - centerYp) / ry;\n    const vx2 = (-pxp - centerXp) / rx;\n    const vy2 = (-pyp - centerYp) / ry;\n\n    const ang1 = vectorAngle(1, 0, vx1, vy1);\n    let ang2 = vectorAngle(vx1, vy1, vx2, vy2);\n\n    if (sweepFlag === 0 && ang2 > 0)\n    {\n        ang2 -= TAU;\n    }\n\n    if (sweepFlag === 1 && ang2 < 0)\n    {\n        ang2 += TAU;\n    }\n\n    out.centerX = centerX;\n    out.centerY = centerY;\n    out.ang1 = ang1;\n    out.ang2 = ang2;\n};\n\nexport function buildArcToSvg(\n    points: number[],\n    px: number,\n    py: number,\n    cx: number,\n    cy: number,\n    rx: number,\n    ry: number,\n    xAxisRotation = 0,\n    largeArcFlag = 0,\n    sweepFlag = 0\n): void\n{\n    if (rx === 0 || ry === 0)\n    {\n        return;\n    }\n\n    const sinPhi = Math.sin(xAxisRotation * TAU / 360);\n    const cosPhi = Math.cos(xAxisRotation * TAU / 360);\n\n    const pxp = (cosPhi * (px - cx) / 2) + (sinPhi * (py - cy) / 2);\n    const pyp = (-sinPhi * (px - cx) / 2) + (cosPhi * (py - cy) / 2);\n\n    if (pxp === 0 && pyp === 0)\n    {\n        return;\n    }\n\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n\n    const lambda = (Math.pow(pxp, 2) / Math.pow(rx, 2)) + (Math.pow(pyp, 2) / Math.pow(ry, 2));\n\n    if (lambda > 1)\n    {\n        rx *= Math.sqrt(lambda);\n        ry *= Math.sqrt(lambda);\n    }\n\n    getArcCenter(\n        px,\n        py,\n        cx,\n        cy,\n        rx,\n        ry,\n        largeArcFlag,\n        sweepFlag,\n        sinPhi,\n        cosPhi,\n        pxp,\n        pyp,\n        out\n    );\n\n    let { ang1, ang2 } = out;\n    const { centerX, centerY } = out;\n\n    // If 'ang2' == 90.0000000001, then `ratio` will devalue to\n    // 1.0000000001. This causes `segments` to be greater than one, which is an\n    // unnecessary split, and adds extra points to the bezier curve. To alleviate\n    // this issue, we round to 1.0 when the ratio is close to 1.0.\n    let ratio = Math.abs(ang2) / (TAU / 4);\n\n    if (Math.abs(1.0 - ratio) < 0.0000001)\n    {\n        ratio = 1.0;\n    }\n\n    const segments = Math.max(Math.ceil(ratio), 1);\n\n    ang2 /= segments;\n\n    let lastX = points[points.length - 2];\n    let lastY = points[points.length - 1];\n\n    const outCurvePoint = { x: 0, y: 0 };\n\n    for (let i = 0; i < segments; i++)\n    {\n        const curve = approxUnitArc(ang1, ang2);\n\n        const { x: x1, y: y1 } = mapToEllipse(curve[0], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n        const { x: x2, y: y2 } = mapToEllipse(curve[1], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n        const { x, y } = mapToEllipse(curve[2], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n\n        buildAdaptiveBezier(\n            points,\n            lastX, lastY,\n            x1, y1, x2, y2, x, y\n        );\n\n        lastX = x;\n        lastY = y;\n\n        ang1 += ang2;\n    }\n}\n"],"names":["out"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 9766, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9772, "column": 0}, "map": {"version":3,"file":"buildAdaptiveQuadratic.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildAdaptiveQuadratic.ts"],"sourcesContent":["// thanks to https://github.com/mattdesl/adaptive-quadratic-curve\n// for the original code!\n\nimport { GraphicsContextSystem } from '../GraphicsContextSystem';\n\nconst RECURSION_LIMIT = 8;\nconst FLT_EPSILON = 1.19209290e-7;\nconst PATH_DISTANCE_EPSILON = 1.0;\n\nconst curveAngleToleranceEpsilon = 0.01;\nconst mAngleTolerance = 0;\n\nexport function buildAdaptiveQuadratic(\n    points: number[],\n    sX: number, sY: number,\n    cp1x: number, cp1y: number,\n    eX: number, eY: number,\n    smoothness?: number,\n)\n{\n    const scale = 1.0;\n    const smoothing = Math.min(\n        0.99, // a value of 1.0 actually inverts smoothing, so we cap it at 0.99\n        Math.max(0, smoothness ?? GraphicsContextSystem.defaultOptions.bezierSmoothness)\n    );\n    let distanceTolerance = (PATH_DISTANCE_EPSILON - smoothing) / scale;\n\n    distanceTolerance *= distanceTolerance;\n    begin(sX, sY, cp1x, cp1y, eX, eY, points, distanceTolerance);\n\n    return points;\n}\n\n// //// Based on:\n// //// https://github.com/pelson/antigrain/blob/master/agg-2.4/src/agg_curves.cpp\n\nfunction begin(\n    sX: number, sY: number,\n    cp1x: number, cp1y: number,\n    eX: number, eY: number,\n    points: number[],\n    distanceTolerance: number\n)\n{\n    recursive(points, sX, sY, cp1x, cp1y, eX, eY, distanceTolerance, 0);\n\n    points.push(eX, eY);\n}\n\nfunction recursive(\n    points: number[],\n    x1: number, y1: number,\n    x2: number, y2: number,\n    x3: number, y3: number,\n    distanceTolerance: number,\n    level: number\n)\n{\n    if (level > RECURSION_LIMIT)\n    { return; }\n\n    const pi = Math.PI;\n\n    // Calculate all the mid-points of the line segments\n    // ----------------------\n    const x12 = (x1 + x2) / 2;\n    const y12 = (y1 + y2) / 2;\n    const x23 = (x2 + x3) / 2;\n    const y23 = (y2 + y3) / 2;\n    const x123 = (x12 + x23) / 2;\n    const y123 = (y12 + y23) / 2;\n\n    let dx = x3 - x1;\n    let dy = y3 - y1;\n    const d = Math.abs((((x2 - x3) * dy) - ((y2 - y3) * dx)));\n\n    if (d > FLT_EPSILON)\n    {\n        // Regular care\n        // -----------------\n        if (d * d <= distanceTolerance * ((dx * dx) + (dy * dy)))\n        {\n            // If the curvature doesn't exceed the distance_tolerance value\n            // we tend to finish subdivisions.\n            // ----------------------\n            if (mAngleTolerance < curveAngleToleranceEpsilon)\n            {\n                points.push(x123, y123);\n\n                return;\n            }\n\n            // Angle & Cusp Condition\n            // ----------------------\n            let da = Math.abs(Math.atan2(y3 - y2, x3 - x2) - Math.atan2(y2 - y1, x2 - x1));\n\n            if (da >= pi) da = (2 * pi) - da;\n\n            if (da < mAngleTolerance)\n            {\n                // Finally we can stop the recursion\n                // ----------------------\n                points.push(x123, y123);\n\n                return;\n            }\n        }\n    }\n    else\n    {\n        // Collinear case\n        // -----------------\n        dx = x123 - ((x1 + x3) / 2);\n        dy = y123 - ((y1 + y3) / 2);\n        if ((dx * dx) + (dy * dy) <= distanceTolerance)\n        {\n            points.push(x123, y123);\n\n            return;\n        }\n    }\n\n    // Continue subdivision\n    // ----------------------\n    recursive(points, x1, y1, x12, y12, x123, y123, distanceTolerance, level + 1);\n    recursive(points, x123, y123, x23, y23, x3, y3, distanceTolerance, level + 1);\n}\n\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 9836, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9842, "column": 0}, "map": {"version":3,"file":"Circle.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/maths/shapes/Circle.ts"],"sourcesContent":["import { Rectangle } from './Rectangle';\n\nimport type { SHAPE_PRIMITIVE } from '../misc/const';\nimport type { ShapePrimitive } from './ShapePrimitive';\n\n/**\n * The Circle object is used to help draw graphics and can also be used to specify a hit area for containers.\n * @memberof maths\n */\nexport class Circle implements ShapePrimitive\n{\n    /**\n     * The X coordinate of the center of this circle\n     * @default 0\n     */\n    public x: number;\n\n    /**\n     * The Y coordinate of the center of this circle\n     * @default 0\n     */\n    public y: number;\n\n    /**\n     * The radius of the circle\n     *  @default 0\n     */\n    public radius: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'circle'\n     */\n    public readonly type: SHAPE_PRIMITIVE = 'circle';\n\n    /**\n     * @param x - The X coordinate of the center of this circle\n     * @param y - The Y coordinate of the center of this circle\n     * @param radius - The radius of the circle\n     */\n    constructor(x = 0, y = 0, radius = 0)\n    {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n    }\n\n    /**\n     * Creates a clone of this Circle instance\n     * @returns A copy of the Circle\n     */\n    public clone(): Circle\n    {\n        return new Circle(this.x, this.y, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this circle\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coordinates are within this Circle\n     */\n    public contains(x: number, y: number): boolean\n    {\n        if (this.radius <= 0) return false;\n\n        const r2 = this.radius * this.radius;\n        let dx = (this.x - x);\n        let dy = (this.y - y);\n\n        dx *= dx;\n        dy *= dy;\n\n        return (dx + dy <= r2);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this circle including the stroke.\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @param width - The width of the line to check\n     * @returns Whether the x/y coordinates are within this Circle\n     */\n    public strokeContains(x: number, y: number, width: number): boolean\n    {\n        if (this.radius === 0) return false;\n\n        const dx = (this.x - x);\n        const dy = (this.y - y);\n        const r = this.radius;\n        const w2 = width / 2;\n        const distance = Math.sqrt((dx * dx) + (dy * dy));\n\n        return (distance < r + w2 && distance > r - w2);\n    }\n\n    /**\n     * Returns the framing rectangle of the circle as a Rectangle object\n     * @param out\n     * @returns The framing rectangle\n     */\n    public getBounds(out?: Rectangle): Rectangle\n    {\n        out ||= new Rectangle();\n\n        out.x = this.x - this.radius;\n        out.y = this.y - this.radius;\n        out.width = this.radius * 2;\n        out.height = this.radius * 2;\n\n        return out;\n    }\n\n    /**\n     * Copies another circle to this one.\n     * @param circle - The circle to copy from.\n     * @returns Returns itself.\n     */\n    public copyFrom(circle: Circle): this\n    {\n        this.x = circle.x;\n        this.y = circle.y;\n        this.radius = circle.radius;\n\n        return this;\n    }\n\n    /**\n     * Copies this circle to another one.\n     * @param circle - The circle to copy to.\n     * @returns Returns given parameter.\n     */\n    public copyTo(circle: Circle): Circle\n    {\n        circle.copyFrom(this);\n\n        return circle;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/math:Circle x=${this.x} y=${this.y} radius=${this.radius}]`;\n    }\n    // #endif\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 9933, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9939, "column": 0}, "map": {"version":3,"file":"squaredDistanceToLineSegment.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/maths/misc/squaredDistanceToLineSegment.ts"],"sourcesContent":["export function squaredDistanceToLineSegment(\n    x: number, y: number,\n    x1: number, y1: number,\n    x2: number, y2: number\n): number\n{\n    const a = x - x1;\n    const b = y - y1;\n    const c = x2 - x1;\n    const d = y2 - y1;\n\n    const dot = (a * c) + (b * d);\n    const lenSq = (c * c) + (d * d);\n    let param = -1;\n\n    if (lenSq !== 0)\n    {\n        param = dot / lenSq;\n    }\n\n    let xx; let\n        yy;\n\n    if (param < 0)\n    {\n        xx = x1;\n        yy = y1;\n    }\n    else if (param > 1)\n    {\n        xx = x2;\n        yy = y2;\n    }\n\n    else\n    {\n        xx = x1 + (param * c);\n        yy = y1 + (param * d);\n    }\n\n    const dx = x - xx;\n    const dy = y - yy;\n\n    return (dx * dx) + (dy * dy);\n}\n"],"names":[],"mappings":";;;;AAAO,SAAS,6BACZ,CAAW,EAAA,CAAA,EACX,EAAY,EAAA,EAAA,EACZ,EAAA,EAAY,EAEhB,EAAA;IACI,MAAM,IAAI,CAAI,GAAA,EAAA,CAAA;IACd,MAAM,IAAI,CAAI,GAAA,EAAA,CAAA;IACd,MAAM,IAAI,EAAK,GAAA,EAAA,CAAA;IACf,MAAM,IAAI,EAAK,GAAA,EAAA,CAAA;IAET,MAAA,GAAA,GAAO,CAAI,GAAA,CAAA,GAAM,CAAI,GAAA,CAAA,CAAA;IACrB,MAAA,KAAA,GAAS,CAAI,GAAA,CAAA,GAAM,CAAI,GAAA,CAAA,CAAA;IAC7B,IAAI,KAAQ,GAAA,CAAA,CAAA,CAAA;IAEZ,IAAI,UAAU,CACd,EAAA;QACI,KAAA,GAAQ,GAAM,GAAA,KAAA,CAAA;IAAA,CAClB;IAEI,IAAA,EAAA,CAAA;IACA,IAAA,EAAA,CAAA;IAEJ,IAAI,QAAQ,CACZ,EAAA;QACS,EAAA,GAAA,EAAA,CAAA;QACA,EAAA,GAAA,EAAA,CAAA;IAAA,CACT,MAAA,IACS,QAAQ,CACjB,EAAA;QACS,EAAA,GAAA,EAAA,CAAA;QACA,EAAA,GAAA,EAAA,CAAA;IAAA,CAIT,MAAA;QACI,EAAA,GAAK,KAAM,KAAQ,GAAA,CAAA,CAAA;QACnB,EAAA,GAAK,KAAM,KAAQ,GAAA,CAAA,CAAA;IAAA,CACvB;IAEA,MAAM,KAAK,CAAI,GAAA,EAAA,CAAA;IACf,MAAM,KAAK,CAAI,GAAA,EAAA,CAAA;IAEP,OAAA,EAAA,GAAK,KAAO,EAAK,GAAA,EAAA,CAAA;AAC7B","ignoreList":[0]}},
    {"offset": {"line": 9972, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9978, "column": 0}, "map": {"version":3,"file":"Polygon.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/maths/shapes/Polygon.ts"],"sourcesContent":["import { squaredDistanceToLineSegment } from '../misc/squaredDistanceToLineSegment';\nimport { Rectangle } from './Rectangle';\n\nimport type { SHAPE_PRIMITIVE } from '../misc/const';\nimport type { PointData } from '../point/PointData';\nimport type { ShapePrimitive } from './ShapePrimitive';\n\n/**\n * A class to define a shape via user defined coordinates.\n *\n *\n * `Polygon` can accept the following different constructor arguments:\n * - An array of `Point` objects\n * - An array of coordinate pairs\n *\n *\n * These can be passed as a single array, or as a sequence of arguments.\n * ```js\n * import { Polygon } from 'pixi.js';\n *\n * // create a polygon object from an array of points, or an array of coordinate pairs\n * const polygon1 = new Polygon([ new Point(0, 0), new Point(0, 100), new Point(100, 100) ]);\n * const polygon2 = new Polygon([ 0, 0, 0, 100, 100, 100 ]);\n *\n * // or create a polygon object from a sequence of points, or coordinate pairs\n * const polygon3 = new Polygon(new Point(0, 0), new Point(0, 100), new Point(100, 100));\n * const polygon4 = new Polygon(0, 0, 0, 100, 100, 100);\n * ```\n * @memberof maths\n */\nexport class Polygon implements ShapePrimitive\n{\n    /** An array of the points of this polygon. */\n    public points: number[];\n\n    /** `false` after moveTo, `true` after `closePath`. In all other cases it is `true`. */\n    public closePath: boolean;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'polygon'\n     */\n    public readonly type: SHAPE_PRIMITIVE = 'polygon';\n\n    constructor(points: PointData[] | number[]);\n    constructor(...points: PointData[] | number[]);\n    /**\n     * @param points - This can be an array of Points\n     *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n     *  the arguments passed can be all the points of the polygon e.g.\n     *  `new Polygon(new Point(), new Point(), ...)`, or the arguments passed can be flat\n     *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n     */\n    constructor(...points: (PointData[] | number[])[] | PointData[] | number[])\n    {\n        let flat = Array.isArray(points[0]) ? points[0] : points;\n\n        // if this is an array of points, convert it to a flat array of numbers\n        if (typeof flat[0] !== 'number')\n        {\n            const p: number[] = [];\n\n            for (let i = 0, il = flat.length; i < il; i++)\n            {\n                p.push((flat[i] as PointData).x, (flat[i] as PointData).y);\n            }\n\n            flat = p;\n        }\n\n        this.points = flat as number[];\n\n        this.closePath = true;\n    }\n\n    /**\n     * Creates a clone of this polygon.\n     * @returns - A copy of the polygon.\n     */\n    public clone(): Polygon\n    {\n        const points = this.points.slice();\n        const polygon = new Polygon(points);\n\n        polygon.closePath = this.closePath;\n\n        return polygon;\n    }\n\n    /**\n     * Checks whether the x and y coordinates passed to this function are contained within this polygon.\n     * @param x - The X coordinate of the point to test.\n     * @param y - The Y coordinate of the point to test.\n     * @returns - Whether the x/y coordinates are within this polygon.\n     */\n    public contains(x: number, y: number): boolean\n    {\n        let inside = false;\n\n        // use some raycasting to test hits\n        // https://github.com/substack/point-in-polygon/blob/master/index.js\n        const length = this.points.length / 2;\n\n        for (let i = 0, j = length - 1; i < length; j = i++)\n        {\n            const xi = this.points[i * 2];\n            const yi = this.points[(i * 2) + 1];\n            const xj = this.points[j * 2];\n            const yj = this.points[(j * 2) + 1];\n            const intersect = ((yi > y) !== (yj > y)) && (x < ((xj - xi) * ((y - yi) / (yj - yi))) + xi);\n\n            if (intersect)\n            {\n                inside = !inside;\n            }\n        }\n\n        return inside;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this polygon including the stroke.\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @param strokeWidth - The width of the line to check\n     * @returns Whether the x/y coordinates are within this polygon\n     */\n    public strokeContains(x: number, y: number, strokeWidth: number): boolean\n    {\n        const halfStrokeWidth = strokeWidth / 2;\n        const halfStrokeWidthSqrd = halfStrokeWidth * halfStrokeWidth;\n        const { points } = this;\n        const iterationLength = points.length - (this.closePath ? 0 : 2);\n\n        for (let i = 0; i < iterationLength; i += 2)\n        {\n            const x1 = points[i];\n            const y1 = points[i + 1];\n            const x2 = points[(i + 2) % points.length];\n            const y2 = points[(i + 3) % points.length];\n\n            const distanceSqrd = squaredDistanceToLineSegment(x, y, x1, y1, x2, y2);\n\n            if (distanceSqrd <= halfStrokeWidthSqrd)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns the framing rectangle of the polygon as a Rectangle object\n     * @param out - optional rectangle to store the result\n     * @returns The framing rectangle\n     */\n    public getBounds(out?: Rectangle): Rectangle\n    {\n        out ||= new Rectangle();\n\n        const points = this.points;\n\n        let minX = Infinity;\n        let maxX = -Infinity;\n\n        let minY = Infinity;\n        let maxY = -Infinity;\n\n        for (let i = 0, n = points.length; i < n; i += 2)\n        {\n            const x = points[i];\n            const y = points[i + 1];\n\n            minX = x < minX ? x : minX;\n            maxX = x > maxX ? x : maxX;\n\n            minY = y < minY ? y : minY;\n            maxY = y > maxY ? y : maxY;\n        }\n\n        out.x = minX;\n        out.width = maxX - minX;\n\n        out.y = minY;\n        out.height = maxY - minY;\n\n        return out;\n    }\n\n    /**\n     * Copies another polygon to this one.\n     * @param polygon - The polygon to copy from.\n     * @returns Returns itself.\n     */\n    public copyFrom(polygon: Polygon): this\n    {\n        this.points = polygon.points.slice();\n        this.closePath = polygon.closePath;\n\n        return this;\n    }\n\n    /**\n     * Copies this polygon to another one.\n     * @param polygon - The polygon to copy to.\n     * @returns Returns given parameter.\n     */\n    public copyTo(polygon: Polygon): Polygon\n    {\n        polygon.copyFrom(this);\n\n        return polygon;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/math:Polygon`\n            + `closeStroke=${this.closePath}`\n            + `points=${this.points.reduce((pointsDesc, currentPoint) => `${pointsDesc}, ${currentPoint}`, '')}]`;\n    }\n    // #endif\n\n    /**\n     * Get the last X coordinate of the polygon\n     * @readonly\n     */\n    get lastX(): number\n    {\n        return this.points[this.points.length - 2];\n    }\n\n    /**\n     * Get the last Y coordinate of the polygon\n     * @readonly\n     */\n    get lastY(): number\n    {\n        return this.points[this.points.length - 1];\n    }\n\n    /**\n     * Get the first X coordinate of the polygon\n     * @readonly\n     */\n    get x(): number\n    {\n        return this.points[this.points.length - 2];\n    }\n    /**\n     * Get the first Y coordinate of the polygon\n     * @readonly\n     */\n    get y(): number\n    {\n        return this.points[this.points.length - 1];\n    }\n}\n\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 10133, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10139, "column": 0}, "map": {"version":3,"file":"roundShape.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/path/roundShape.ts"],"sourcesContent":["import type { PointData } from '../../../../maths/point/PointData';\nimport type { ShapePath } from './ShapePath';\n\n/**\n * Typed and cleaned up version of:\n * https://stackoverflow.com/questions/44855794/html5-canvas-triangle-with-rounded-corners/44856925#44856925\n * @param g - Graphics to be drawn on.\n * @param points - Corners of the shape to draw. Minimum length is 3.\n * @param radius - Corners default radius.\n * @ignore\n */\nexport function roundedShapeArc(\n    g: ShapePath,\n    points: RoundedPoint[],\n    radius: number\n): void\n{\n    const vecFrom = (p: PointData, pp: PointData) =>\n    {\n        const x = pp.x - p.x;\n        const y = pp.y - p.y;\n        const len = Math.sqrt((x * x) + (y * y));\n        const nx = x / len;\n        const ny = y / len;\n\n        return { len, nx, ny };\n    };\n\n    const sharpCorner = (i: number, p: PointData) =>\n    {\n        if (i === 0)\n        {\n            g.moveTo(p.x, p.y);\n        }\n        else\n        {\n            g.lineTo(p.x, p.y);\n        }\n    };\n\n    let p1 = points[points.length - 1];\n\n    for (let i = 0; i < points.length; i++)\n    {\n        const p2 = points[i % points.length];\n        const pRadius = p2.radius ?? radius;\n\n        if (pRadius <= 0)\n        {\n            sharpCorner(i, p2);\n            p1 = p2;\n            continue;\n        }\n\n        const p3 = points[(i + 1) % points.length];\n        const v1 = vecFrom(p2, p1);\n        const v2 = vecFrom(p2, p3);\n\n        if (v1.len < 1e-4 || v2.len < 1e-4)\n        {\n            sharpCorner(i, p2);\n            p1 = p2;\n            continue;\n        }\n\n        let angle = Math.asin((v1.nx * v2.ny) - (v1.ny * v2.nx));\n        let radDirection = 1;\n        let drawDirection = false;\n\n        if ((v1.nx * v2.nx) - (v1.ny * -v2.ny) < 0)\n        {\n            if (angle < 0)\n            {\n                angle = Math.PI + angle;\n            }\n            else\n            {\n                angle = Math.PI - angle;\n                radDirection = -1;\n                drawDirection = true;\n            }\n        }\n        else if (angle > 0)\n        {\n            radDirection = -1;\n            drawDirection = true;\n        }\n\n        const halfAngle = angle / 2;\n\n        let cRadius: number;\n        let lenOut = Math.abs(\n            (Math.cos(halfAngle) * pRadius) / Math.sin(halfAngle)\n        );\n\n        if (lenOut > Math.min(v1.len / 2, v2.len / 2))\n        {\n            lenOut = Math.min(v1.len / 2, v2.len / 2);\n            cRadius = Math.abs((lenOut * Math.sin(halfAngle)) / Math.cos(halfAngle));\n        }\n        else\n        {\n            cRadius = pRadius;\n        }\n\n        const cX = p2.x + (v2.nx * lenOut) + (-v2.ny * cRadius * radDirection);\n        const cY = p2.y + (v2.ny * lenOut) + (v2.nx * cRadius * radDirection);\n        const startAngle = Math.atan2(v1.ny, v1.nx) + ((Math.PI / 2) * radDirection);\n        const endAngle = Math.atan2(v2.ny, v2.nx) - ((Math.PI / 2) * radDirection);\n\n        if (i === 0)\n        {\n            g.moveTo(\n                cX + (Math.cos(startAngle) * cRadius),\n                cY + (Math.sin(startAngle) * cRadius)\n            );\n        }\n\n        g.arc(cX, cY, cRadius, startAngle, endAngle, drawDirection);\n\n        p1 = p2;\n    }\n}\n\nexport type RoundedPoint = PointData & { radius?: number };\n\n/**\n * Typed and cleaned up version of:\n * https://stackoverflow.com/questions/44855794/html5-canvas-triangle-with-rounded-corners/56214413#56214413\n * @param g - Graphics to be drawn on.\n * @param points - Corners of the shape to draw. Minimum length is 3.\n * @param radius - Corners default radius.\n * @ignore\n */\nexport function roundedShapeQuadraticCurve(\n    g: ShapePath,\n    points: RoundedPoint[],\n    radius: number,\n    smoothness?: number,\n): void\n{\n    const distance = (p1: PointData, p2: PointData) =>\n        Math.sqrt(((p1.x - p2.x) ** 2) + ((p1.y - p2.y) ** 2));\n\n    const pointLerp = (p1: PointData, p2: PointData, t: number) => ({\n        x: p1.x + ((p2.x - p1.x) * t),\n        y: p1.y + ((p2.y - p1.y) * t),\n    });\n\n    const numPoints = points.length;\n\n    for (let i = 0; i < numPoints; i++)\n    {\n        const thisPoint = points[(i + 1) % numPoints];\n        const pRadius = thisPoint.radius ?? radius;\n\n        if (pRadius <= 0)\n        {\n            if (i === 0)\n            {\n                g.moveTo(thisPoint.x, thisPoint.y);\n            }\n            else\n            {\n                g.lineTo(thisPoint.x, thisPoint.y);\n            }\n\n            continue;\n        }\n\n        const lastPoint = points[i];\n        const nextPoint = points[(i + 2) % numPoints];\n\n        const lastEdgeLength = distance(lastPoint, thisPoint);\n        let start;\n\n        if (lastEdgeLength < 1e-4)\n        {\n            start = thisPoint;\n        }\n        else\n        {\n            const lastOffsetDistance = Math.min(lastEdgeLength / 2, pRadius);\n\n            start = pointLerp(\n                thisPoint,\n                lastPoint,\n                lastOffsetDistance / lastEdgeLength\n            );\n        }\n\n        const nextEdgeLength = distance(nextPoint, thisPoint);\n        let end;\n\n        if (nextEdgeLength < 1e-4)\n        {\n            end = thisPoint;\n        }\n        else\n        {\n            const nextOffsetDistance = Math.min(nextEdgeLength / 2, pRadius);\n\n            end = pointLerp(\n                thisPoint,\n                nextPoint,\n                nextOffsetDistance / nextEdgeLength\n            );\n        }\n\n        if (i === 0)\n        {\n            g.moveTo(start.x, start.y);\n        }\n        else\n        {\n            g.lineTo(start.x, start.y);\n        }\n        g.quadraticCurveTo(thisPoint.x, thisPoint.y, end.x, end.y, smoothness);\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 10262, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10268, "column": 0}, "map": {"version":3,"file":"Ellipse.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/maths/shapes/Ellipse.ts"],"sourcesContent":["import { Rectangle } from './Rectangle';\n\nimport type { ShapePrimitive } from './ShapePrimitive';\n\n/**\n * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for containers.\n * ```js\n * import { Ellipse } from 'pixi.js';\n *\n * const ellipse = new Ellipse(0, 0, 20, 10); // 40x20 rectangle\n * const isPointInEllipse = ellipse.contains(0, 0); // true\n * ```\n * @memberof maths\n */\nexport class Ellipse implements ShapePrimitive\n{\n    /**\n     * The X coordinate of the center of this ellipse\n     * @default 0\n     */\n    public x: number;\n\n    /**\n     * The Y coordinate of the center of this ellipse\n     * @default 0\n     */\n    public y: number;\n\n    /**\n     * The half width of this ellipse\n     * @default 0\n     */\n    public halfWidth: number;\n\n    /**\n     * The half height of this ellipse\n     * @default 0\n     */\n    public halfHeight: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'ellipse'\n     */\n    public readonly type = 'ellipse';\n\n    /**\n     * @param x - The X coordinate of the center of this ellipse\n     * @param y - The Y coordinate of the center of this ellipse\n     * @param halfWidth - The half width of this ellipse\n     * @param halfHeight - The half height of this ellipse\n     */\n    constructor(x = 0, y = 0, halfWidth = 0, halfHeight = 0)\n    {\n        this.x = x;\n        this.y = y;\n        this.halfWidth = halfWidth;\n        this.halfHeight = halfHeight;\n    }\n\n    /**\n     * Creates a clone of this Ellipse instance\n     * @returns {Ellipse} A copy of the ellipse\n     */\n    public clone(): Ellipse\n    {\n        return new Ellipse(this.x, this.y, this.halfWidth, this.halfHeight);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this ellipse\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coords are within this ellipse\n     */\n    public contains(x: number, y: number): boolean\n    {\n        if (this.halfWidth <= 0 || this.halfHeight <= 0)\n        {\n            return false;\n        }\n\n        // normalize the coords to an ellipse with center 0,0\n        let normx = ((x - this.x) / this.halfWidth);\n        let normy = ((y - this.y) / this.halfHeight);\n\n        normx *= normx;\n        normy *= normy;\n\n        return (normx + normy <= 1);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this ellipse including stroke\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @param width\n     * @returns Whether the x/y coords are within this ellipse\n     */\n    public strokeContains(x: number, y: number, width: number): boolean\n    {\n        const { halfWidth, halfHeight } = this;\n\n        if (halfWidth <= 0 || halfHeight <= 0)\n        {\n            return false;\n        }\n\n        const halfStrokeWidth = width / 2;\n        const innerA = halfWidth - halfStrokeWidth;\n        const innerB = halfHeight - halfStrokeWidth;\n        const outerA = halfWidth + halfStrokeWidth;\n        const outerB = halfHeight + halfStrokeWidth;\n\n        const normalizedX = x - this.x;\n        const normalizedY = y - this.y;\n\n        const innerEllipse = ((normalizedX * normalizedX) / (innerA * innerA))\n                           + ((normalizedY * normalizedY) / (innerB * innerB));\n        const outerEllipse = ((normalizedX * normalizedX) / (outerA * outerA))\n                           + ((normalizedY * normalizedY) / (outerB * outerB));\n\n        return innerEllipse > 1 && outerEllipse <= 1;\n    }\n\n    /**\n     * Returns the framing rectangle of the ellipse as a Rectangle object\n     * @param out\n     * @returns The framing rectangle\n     */\n    public getBounds(out?: Rectangle): Rectangle\n    {\n        out ||= new Rectangle();\n\n        out.x = this.x - this.halfWidth;\n        out.y = this.y - this.halfHeight;\n        out.width = this.halfWidth * 2;\n        out.height = this.halfHeight * 2;\n\n        return out;\n    }\n\n    /**\n     * Copies another ellipse to this one.\n     * @param ellipse - The ellipse to copy from.\n     * @returns Returns itself.\n     */\n    public copyFrom(ellipse: Ellipse): this\n    {\n        this.x = ellipse.x;\n        this.y = ellipse.y;\n        this.halfWidth = ellipse.halfWidth;\n        this.halfHeight = ellipse.halfHeight;\n\n        return this;\n    }\n\n    /**\n     * Copies this ellipse to another one.\n     * @param ellipse - The ellipse to copy to.\n     * @returns Returns given parameter.\n     */\n    public copyTo(ellipse: Ellipse): Ellipse\n    {\n        ellipse.copyFrom(this);\n\n        return ellipse;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/math:Ellipse x=${this.x} y=${this.y} halfWidth=${this.halfWidth} halfHeight=${this.halfHeight}]`;\n    }\n    // #endif\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 10370, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10376, "column": 0}, "map": {"version":3,"file":"RoundedRectangle.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/maths/shapes/RoundedRectangle.ts"],"sourcesContent":["import { Rectangle } from './Rectangle';\n\nimport type { ShapePrimitive } from './ShapePrimitive';\n\n// Check corner within stroke width\nconst isCornerWithinStroke = (\n    pX: number,\n    pY: number,\n    cornerX: number,\n    cornerY: number,\n    radius: number,\n    halfStrokeWidth: number\n) =>\n{\n    const dx = pX - cornerX;\n    const dy = pY - cornerY;\n    const distance = Math.sqrt((dx * dx) + (dy * dy));\n\n    return distance >= radius - halfStrokeWidth && distance <= radius + halfStrokeWidth;\n};\n\n/**\n * The `RoundedRectangle` object is an area defined by its position, as indicated by its top-left corner\n * point (`x`, `y`) and by its `width` and its `height`, including a `radius` property that\n * defines the radius of the rounded corners.\n * @memberof maths\n */\nexport class RoundedRectangle implements ShapePrimitive\n{\n    /**\n     * The X coordinate of the upper-left corner of the rounded rectangle\n     * @default 0\n     */\n    public x: number;\n\n    /**\n     * The Y coordinate of the upper-left corner of the rounded rectangle\n     * @default 0\n     */\n    public y: number;\n\n    /**\n     * The overall width of this rounded rectangle\n     * @default 0\n     */\n    public width: number;\n\n    /**\n     * The overall height of this rounded rectangle\n     * @default 0\n     */\n    public height: number;\n\n    /**\n     * Controls the radius of the rounded corners\n     * @default 20\n     */\n    public radius: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'roundedRectangle'\n     */\n    public readonly type = 'roundedRectangle';\n\n    /**\n     * @param x - The X coordinate of the upper-left corner of the rounded rectangle\n     * @param y - The Y coordinate of the upper-left corner of the rounded rectangle\n     * @param width - The overall width of this rounded rectangle\n     * @param height - The overall height of this rounded rectangle\n     * @param radius - Controls the radius of the rounded corners\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0, radius = 20)\n    {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.radius = radius;\n    }\n\n    /**\n     * Returns the framing rectangle of the rounded rectangle as a Rectangle object\n     * @param out - optional rectangle to store the result\n     * @returns The framing rectangle\n     */\n    public getBounds(out?: Rectangle): Rectangle\n    {\n        out ||= new Rectangle();\n\n        out.x = this.x;\n        out.y = this.y;\n        out.width = this.width;\n        out.height = this.height;\n\n        return out;\n    }\n\n    /**\n     * Creates a clone of this Rounded Rectangle.\n     * @returns - A copy of the rounded rectangle.\n     */\n    public clone(): RoundedRectangle\n    {\n        return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n    }\n\n    /**\n     * Copies another rectangle to this one.\n     * @param rectangle - The rectangle to copy from.\n     * @returns Returns itself.\n     */\n    public copyFrom(rectangle: RoundedRectangle): this\n    {\n        this.x = rectangle.x;\n        this.y = rectangle.y;\n        this.width = rectangle.width;\n        this.height = rectangle.height;\n\n        return this;\n    }\n\n    /**\n     * Copies this rectangle to another one.\n     * @param rectangle - The rectangle to copy to.\n     * @returns Returns given parameter.\n     */\n    public copyTo(rectangle: RoundedRectangle): RoundedRectangle\n    {\n        rectangle.copyFrom(this);\n\n        return rectangle;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n     * @param x - The X coordinate of the point to test.\n     * @param y - The Y coordinate of the point to test.\n     * @returns - Whether the x/y coordinates are within this Rounded Rectangle.\n     */\n    public contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n        if (x >= this.x && x <= this.x + this.width)\n        {\n            if (y >= this.y && y <= this.y + this.height)\n            {\n                const radius = Math.max(0, Math.min(this.radius, Math.min(this.width, this.height) / 2));\n\n                if ((y >= this.y + radius && y <= this.y + this.height - radius)\n                || (x >= this.x + radius && x <= this.x + this.width - radius))\n                {\n                    return true;\n                }\n                let dx = x - (this.x + radius);\n                let dy = y - (this.y + radius);\n                const radius2 = radius * radius;\n\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + this.width - radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dy = y - (this.y + this.height - radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this rectangle including the stroke.\n     * @param pX - The X coordinate of the point to test\n     * @param pY - The Y coordinate of the point to test\n     * @param strokeWidth - The width of the line to check\n     * @returns Whether the x/y coordinates are within this rectangle\n     */\n    public strokeContains(pX: number, pY: number, strokeWidth: number): boolean\n    {\n        const { x, y, width, height, radius } = this;\n\n        const halfStrokeWidth = strokeWidth / 2;\n        const innerX = x + radius;\n        const innerY = y + radius;\n        const innerWidth = width - (radius * 2);\n        const innerHeight = height - (radius * 2);\n        const rightBound = x + width;\n        const bottomBound = y + height;\n\n        // Check if point is within the vertical edges (excluding corners)\n        if (((pX >= x - halfStrokeWidth && pX <= x + halfStrokeWidth)\n             || (pX >= rightBound - halfStrokeWidth && pX <= rightBound + halfStrokeWidth))\n            && pY >= innerY && pY <= innerY + innerHeight)\n        {\n            return true;\n        }\n\n        // Check if point is within the horizontal edges (excluding corners)\n        if (((pY >= y - halfStrokeWidth && pY <= y + halfStrokeWidth)\n             || (pY >= bottomBound - halfStrokeWidth && pY <= bottomBound + halfStrokeWidth))\n            && pX >= innerX && pX <= innerX + innerWidth)\n        {\n            return true;\n        }\n\n        // Top-left, top-right, bottom-right, bottom-left corners\n        return (\n            // Top-left\n            (pX < innerX && pY < innerY\n                && isCornerWithinStroke(pX, pY, innerX, innerY, radius, halfStrokeWidth))\n            //  top-right\n            || (pX > rightBound - radius && pY < innerY\n                && isCornerWithinStroke(pX, pY, rightBound - radius, innerY, radius, halfStrokeWidth))\n            // bottom-right\n            || (pX > rightBound - radius && pY > bottomBound - radius\n                && isCornerWithinStroke(pX, pY, rightBound - radius, bottomBound - radius, radius, halfStrokeWidth))\n            // bottom-left\n            || (pX < innerX && pY > bottomBound - radius\n                && isCornerWithinStroke(pX, pY, innerX, bottomBound - radius, radius, halfStrokeWidth)));\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/math:RoundedRectangle x=${this.x} y=${this.y}`\n            + `width=${this.width} height=${this.height} radius=${this.radius}]`;\n    }\n    // #endif\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 10510, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10516, "column": 0}, "map": {"version":3,"file":"ShapePath.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/path/ShapePath.ts"],"sourcesContent":["// a shape lets you build out a shape with lines and curves and primitives..\n\nimport { Circle } from '../../../../maths/shapes/Circle';\nimport { Ellipse } from '../../../../maths/shapes/Ellipse';\nimport { Polygon } from '../../../../maths/shapes/Polygon';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { RoundedRectangle } from '../../../../maths/shapes/RoundedRectangle';\nimport { Bounds } from '../../../container/bounds/Bounds';\nimport { buildAdaptiveBezier } from '../buildCommands/buildAdaptiveBezier';\nimport { buildAdaptiveQuadratic } from '../buildCommands/buildAdaptiveQuadratic';\nimport { buildArc } from '../buildCommands/buildArc';\nimport { buildArcTo } from '../buildCommands/buildArcTo';\nimport { buildArcToSvg } from '../buildCommands/buildArcToSvg';\nimport { roundedShapeArc, roundedShapeQuadraticCurve } from './roundShape';\n\nimport type { Matrix } from '../../../../maths/matrix/Matrix';\nimport type { PointData } from '../../../../maths/point/PointData';\nimport type { ShapePrimitive } from '../../../../maths/shapes/ShapePrimitive';\nimport type { GraphicsPath } from './GraphicsPath';\nimport type { RoundedPoint } from './roundShape';\n\nconst tempRectangle = new Rectangle();\n\n/**\n * The `ShapePath` class acts as a bridge between high-level drawing commands\n * and the lower-level `GraphicsContext` rendering engine.\n * It translates drawing commands, such as those for creating lines, arcs, ellipses, rectangles, and complex polygons, into a\n * format that can be efficiently processed by a `GraphicsContext`. This includes handling path starts,\n * ends, and transformations for shapes.\n *\n * It is used internally by `GraphicsPath` to build up the path.\n * @memberof scene\n */\nexport class ShapePath\n{\n    /** The list of shape primitives that make up the path. */\n    public shapePrimitives: { shape: ShapePrimitive, transform?: Matrix }[] = [];\n    private _currentPoly: Polygon | null = null;\n    private readonly _graphicsPath2D: GraphicsPath;\n    private readonly _bounds = new Bounds();\n\n    constructor(graphicsPath2D: GraphicsPath)\n    {\n        this._graphicsPath2D = graphicsPath2D;\n    }\n\n    /**\n     * Sets the starting point for a new sub-path. Any subsequent drawing commands are considered part of this path.\n     * @param x - The x-coordinate for the starting point.\n     * @param y - The y-coordinate for the starting point.\n     * @returns The instance of the current object for chaining.\n     */\n    public moveTo(x: number, y: number): this\n    {\n        this.startPoly(x, y);\n\n        return this;\n    }\n\n    /**\n     * Connects the current point to a new point with a straight line. This method updates the current path.\n     * @param x - The x-coordinate of the new point to connect to.\n     * @param y - The y-coordinate of the new point to connect to.\n     * @returns The instance of the current object for chaining.\n     */\n    public lineTo(x: number, y: number): this\n    {\n        this._ensurePoly();\n\n        const points = this._currentPoly.points;\n\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        if (fromX !== x || fromY !== y)\n        {\n            points.push(x, y);\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds an arc to the path. The arc is centered at (x, y)\n     *  position with radius `radius` starting at `startAngle` and ending at `endAngle`.\n     * @param x - The x-coordinate of the arc's center.\n     * @param y - The y-coordinate of the arc's center.\n     * @param radius - The radius of the arc.\n     * @param startAngle - The starting angle of the arc, in radians.\n     * @param endAngle - The ending angle of the arc, in radians.\n     * @param counterclockwise - Specifies whether the arc should be drawn in the anticlockwise direction. False by default.\n     * @returns The instance of the current object for chaining.\n     */\n    public arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise: boolean): this\n    {\n        // TODO - if its 360 degrees.. make it a circle object?\n\n        this._ensurePoly(false);\n\n        const points = this._currentPoly.points;\n\n        buildArc(points, x, y, radius, startAngle, endAngle, counterclockwise);\n\n        return this;\n    }\n\n    /**\n     * Adds an arc to the path with the arc tangent to the line joining two specified points.\n     * The arc radius is specified by `radius`.\n     * @param x1 - The x-coordinate of the first point.\n     * @param y1 - The y-coordinate of the first point.\n     * @param x2 - The x-coordinate of the second point.\n     * @param y2 - The y-coordinate of the second point.\n     * @param radius - The radius of the arc.\n     * @returns The instance of the current object for chaining.\n     */\n    public arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this\n    {\n        this._ensurePoly();\n\n        const points = this._currentPoly.points;\n\n        buildArcTo(points, x1, y1, x2, y2, radius);\n\n        return this;\n    }\n\n    /**\n     * Adds an SVG-style arc to the path, allowing for elliptical arcs based on the SVG spec.\n     * @param rx - The x-radius of the ellipse.\n     * @param ry - The y-radius of the ellipse.\n     * @param xAxisRotation - The rotation of the ellipse's x-axis relative\n     * to the x-axis of the coordinate system, in degrees.\n     * @param largeArcFlag - Determines if the arc should be greater than or less than 180 degrees.\n     * @param sweepFlag - Determines if the arc should be swept in a positive angle direction.\n     * @param x - The x-coordinate of the arc's end point.\n     * @param y - The y-coordinate of the arc's end point.\n     * @returns The instance of the current object for chaining.\n     */\n    public arcToSvg(\n        rx: number, ry: number,\n        xAxisRotation: number, largeArcFlag: number, sweepFlag: number,\n        x: number, y: number\n    ): this\n    {\n        const points = this._currentPoly.points;\n\n        // this needs to work on both canvas and GPU backends so might want to move this to the Graphics2D path..\n        buildArcToSvg(\n            points,\n            this._currentPoly.lastX,\n            this._currentPoly.lastY,\n            x,\n            y,\n            rx,\n            ry,\n            xAxisRotation,\n            largeArcFlag,\n            sweepFlag,\n        );\n\n        return this;\n    }\n\n    /**\n     * Adds a cubic Bezier curve to the path.\n     * It requires three points: the first two are control points and the third one is the end point.\n     * The starting point is the last point in the current path.\n     * @param cp1x - The x-coordinate of the first control point.\n     * @param cp1y - The y-coordinate of the first control point.\n     * @param cp2x - The x-coordinate of the second control point.\n     * @param cp2y - The y-coordinate of the second control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public bezierCurveTo(\n        cp1x: number, cp1y: number, cp2x: number, cp2y: number,\n        x: number, y: number,\n        smoothness?: number\n    ): this\n    {\n        this._ensurePoly();\n\n        const currentPoly = this._currentPoly;\n\n        // ensure distance from last point to first control point is not too small\n\n        // TODO - make this a plugin that people can override..\n        buildAdaptiveBezier(\n            this._currentPoly.points,\n            currentPoly.lastX, currentPoly.lastY,\n            cp1x, cp1y, cp2x, cp2y, x, y,\n            smoothness,\n        );\n\n        return this;\n    }\n\n    /**\n     * Adds a quadratic curve to the path. It requires two points: the control point and the end point.\n     * The starting point is the last point in the current path.\n     * @param cp1x - The x-coordinate of the control point.\n     * @param cp1y - The y-coordinate of the control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothing - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public quadraticCurveTo(cp1x: number, cp1y: number, x: number, y: number, smoothing?: number): this\n    {\n        this._ensurePoly();\n\n        const currentPoly = this._currentPoly;\n\n        // ensure distance from last point to first control point is not too small\n\n        // TODO - make this a plugin that people can override..\n        buildAdaptiveQuadratic(\n            this._currentPoly.points,\n            currentPoly.lastX, currentPoly.lastY,\n            cp1x, cp1y, x, y,\n            smoothing,\n        );\n\n        return this;\n    }\n\n    /**\n     * Closes the current path by drawing a straight line back to the start.\n     * If the shape is already closed or there are no points in the path, this method does nothing.\n     * @returns The instance of the current object for chaining.\n     */\n    public closePath(): this\n    {\n        this.endPoly(true);\n\n        return this;\n    }\n\n    /**\n     * Adds another path to the current path. This method allows for the combination of multiple paths into one.\n     * @param path - The `GraphicsPath` object representing the path to add.\n     * @param transform - An optional `Matrix` object to apply a transformation to the path before adding it.\n     * @returns The instance of the current object for chaining.\n     */\n    public addPath(path: GraphicsPath, transform?: Matrix): this\n    {\n        this.endPoly();\n\n        if (transform && !transform.isIdentity())\n        {\n            path = path.clone(true);\n            path.transform(transform);\n        }\n\n        for (let i = 0; i < path.instructions.length; i++)\n        {\n            const instruction = path.instructions[i];\n\n            // Sorry TS! this is the best we could do...\n            this[instruction.action](...(instruction.data as [never, never, never, never, never, never, never]));\n            // build out the path points\n        }\n\n        return this;\n    }\n\n    /**\n     * Finalizes the drawing of the current path. Optionally, it can close the path.\n     * @param closePath - A boolean indicating whether to close the path after finishing. False by default.\n     */\n    public finish(closePath = false)\n    {\n        this.endPoly(closePath);\n    }\n\n    /**\n     * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @param transform - An optional `Matrix` object to apply a transformation to the rectangle.\n     * @returns The instance of the current object for chaining.\n     */\n    public rect(x: number, y: number, w: number, h: number, transform?: Matrix): this\n    {\n        this.drawShape(new Rectangle(x, y, w, h), transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a circle shape. This method adds a new circle path to the current drawing.\n     * @param x - The x-coordinate of the center of the circle.\n     * @param y - The y-coordinate of the center of the circle.\n     * @param radius - The radius of the circle.\n     * @param transform - An optional `Matrix` object to apply a transformation to the circle.\n     * @returns The instance of the current object for chaining.\n     */\n    public circle(x: number, y: number, radius: number, transform?: Matrix): this\n    {\n        this.drawShape(new Circle(x, y, radius), transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a polygon shape. This method allows for the creation of complex polygons by specifying a sequence of points.\n     * @param points - An array of numbers, or or an array of PointData objects eg [{x,y}, {x,y}, {x,y}]\n     * representing the x and y coordinates of the polygon's vertices, in sequence.\n     * @param close - A boolean indicating whether to close the polygon path. True by default.\n     * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n     * @returns The instance of the current object for chaining.\n     */\n    public poly(points: number[] | PointData[], close?: boolean, transform?: Matrix): this\n    {\n        const polygon = new Polygon(points);\n\n        polygon.closePath = close;\n\n        this.drawShape(polygon, transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a regular polygon with a specified number of sides. All sides and angles are equal.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n     * @returns The instance of the current object for chaining.\n     */\n    public regularPoly(x: number, y: number, radius: number, sides: number, rotation = 0, transform?: Matrix): this\n    {\n        sides = Math.max(sides | 0, 3);\n        const startAngle = (-1 * Math.PI / 2) + rotation;\n        const delta = (Math.PI * 2) / sides;\n        const polygon = [];\n\n        for (let i = 0; i < sides; i++)\n        {\n            const angle = (i * delta) + startAngle;\n\n            polygon.push(\n                x + (radius * Math.cos(angle)),\n                y + (radius * Math.sin(angle))\n            );\n        }\n\n        this.poly(polygon, true, transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a polygon with rounded corners.\n     * Similar to `regularPoly` but with the ability to round the corners of the polygon.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param corner - The radius of the rounding of the corners.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @param smoothness - Optional parameter to adjust the smoothness of the rounding.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundPoly(\n        x: number, y: number,\n        radius: number,\n        sides: number, corner: number,\n        rotation = 0,\n        smoothness?: number,\n    ): this\n    {\n        sides = Math.max((sides | 0), 3);\n\n        if (corner <= 0)\n        {\n            return this.regularPoly(x, y, radius, sides, rotation);\n        }\n\n        const sideLength = (radius * Math.sin(Math.PI / sides)) - 0.001;\n\n        corner = Math.min(corner, sideLength);\n\n        const startAngle = (-1 * Math.PI / 2) + rotation;\n        const delta = (Math.PI * 2) / sides;\n        const internalAngle = ((sides - 2) * Math.PI) / sides / 2;\n\n        for (let i = 0; i < sides; i++)\n        {\n            const angle = (i * delta) + startAngle;\n            const x0 = x + (radius * Math.cos(angle));\n            const y0 = y + (radius * Math.sin(angle));\n            const a1 = angle + (Math.PI) + internalAngle;\n            const a2 = angle - (Math.PI) - internalAngle;\n            const x1 = x0 + (corner * Math.cos(a1));\n            const y1 = y0 + (corner * Math.sin(a1));\n            const x3 = x0 + (corner * Math.cos(a2));\n            const y3 = y0 + (corner * Math.sin(a2));\n\n            if (i === 0)\n            {\n                this.moveTo(x1, y1);\n            }\n            else\n            {\n                this.lineTo(x1, y1);\n            }\n            this.quadraticCurveTo(x0, y0, x3, y3, smoothness);\n        }\n\n        return this.closePath();\n    }\n\n    /**\n     * Draws a shape with rounded corners. This function supports custom radius for each corner of the shape.\n     * Optionally, corners can be rounded using a quadratic curve instead of an arc, providing a different aesthetic.\n     * @param points - An array of `RoundedPoint` representing the corners of the shape to draw.\n     * A minimum of 3 points is required.\n     * @param radius - The default radius for the corners.\n     * This radius is applied to all corners unless overridden in `points`.\n     * @param useQuadratic - If set to true, rounded corners are drawn using a quadraticCurve\n     *  method instead of an arc method. Defaults to false.\n     * @param smoothness - Specifies the smoothness of the curve when `useQuadratic` is true.\n     * Higher values make the curve smoother.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundShape(points: RoundedPoint[], radius: number, useQuadratic = false, smoothness?: number): this\n    {\n        if (points.length < 3)\n        {\n            return this;\n        }\n\n        if (useQuadratic)\n        {\n            roundedShapeQuadraticCurve(this, points, radius, smoothness);\n        }\n        else\n        {\n            roundedShapeArc(this, points, radius);\n        }\n\n        return this.closePath();\n    }\n\n    /**\n     * Draw Rectangle with fillet corners. This is much like rounded rectangle\n     * however it support negative numbers as well for the corner radius.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param fillet - accept negative or positive values\n     */\n    public filletRect(x: number, y: number, width: number, height: number, fillet: number): this\n    {\n        if (fillet === 0)\n        {\n            return this.rect(x, y, width, height);\n        }\n\n        const maxFillet = Math.min(width, height) / 2;\n        const inset = Math.min(maxFillet, Math.max(-maxFillet, fillet));\n        const right = x + width;\n        const bottom = y + height;\n        const dir = inset < 0 ? -inset : 0;\n        const size = Math.abs(inset);\n\n        return this\n            .moveTo(x, y + size)\n            .arcTo(x + dir, y + dir, x + size, y, size)\n            .lineTo(right - size, y)\n            .arcTo(right - dir, y + dir, right, y + size, size)\n            .lineTo(right, bottom - size)\n            .arcTo(right - dir, bottom - dir, x + width - size, bottom, size)\n            .lineTo(x + size, bottom)\n            .arcTo(x + dir, bottom - dir, x, bottom - size, size)\n            .closePath();\n    }\n\n    /**\n     * Draw Rectangle with chamfer corners. These are angled corners.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param chamfer - non-zero real number, size of corner cutout\n     * @param transform\n     */\n    public chamferRect(x: number, y: number, width: number, height: number, chamfer: number, transform?: Matrix): this\n    {\n        if (chamfer <= 0)\n        {\n            return this.rect(x, y, width, height);\n        }\n\n        const inset = Math.min(chamfer, Math.min(width, height) / 2);\n        const right = x + width;\n        const bottom = y + height;\n        const points = [\n            x + inset, y,\n            right - inset, y,\n            right, y + inset,\n            right, bottom - inset,\n            right - inset, bottom,\n            x + inset, bottom,\n            x, bottom - inset,\n            x, y + inset,\n        ];\n\n        // Remove overlapping points\n        for (let i = points.length - 1; i >= 2; i -= 2)\n        {\n            if (points[i] === points[i - 2] && points[i - 1] === points[i - 3])\n            {\n                points.splice(i - 1, 2);\n            }\n        }\n\n        return this.poly(points, true, transform);\n    }\n\n    /**\n     * Draws an ellipse at the specified location and with the given x and y radii.\n     * An optional transformation can be applied, allowing for rotation, scaling, and translation.\n     * @param x - The x-coordinate of the center of the ellipse.\n     * @param y - The y-coordinate of the center of the ellipse.\n     * @param radiusX - The horizontal radius of the ellipse.\n     * @param radiusY - The vertical radius of the ellipse.\n     * @param transform - An optional `Matrix` object to apply a transformation to the ellipse. This can include rotations.\n     * @returns The instance of the current object for chaining.\n     */\n    public ellipse(x: number, y: number, radiusX: number, radiusY: number, transform?: Matrix): this\n    {\n        // TODO apply rotation to transform...\n\n        this.drawShape(new Ellipse(x, y, radiusX, radiusY), transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a rectangle with rounded corners.\n     * The corner radius can be specified to determine how rounded the corners should be.\n     * An optional transformation can be applied, which allows for rotation, scaling, and translation of the rectangle.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @param radius - The radius of the rectangle's corners. If not specified, corners will be sharp.\n     * @param transform - An optional `Matrix` object to apply a transformation to the rectangle.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundRect(x: number, y: number, w: number, h: number, radius?: number, transform?: Matrix): this\n    {\n        this.drawShape(new RoundedRectangle(x, y, w, h, radius), transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a given shape on the canvas.\n     * This is a generic method that can draw any type of shape specified by the `ShapePrimitive` parameter.\n     * An optional transformation matrix can be applied to the shape, allowing for complex transformations.\n     * @param shape - The shape to draw, defined as a `ShapePrimitive` object.\n     * @param matrix - An optional `Matrix` for transforming the shape. This can include rotations,\n     * scaling, and translations.\n     * @returns The instance of the current object for chaining.\n     */\n    public drawShape(shape: ShapePrimitive, matrix?: Matrix): this\n    {\n        this.endPoly();\n\n        this.shapePrimitives.push({ shape, transform: matrix });\n\n        return this;\n    }\n\n    /**\n     * Starts a new polygon path from the specified starting point.\n     * This method initializes a new polygon or ends the current one if it exists.\n     * @param x - The x-coordinate of the starting point of the new polygon.\n     * @param y - The y-coordinate of the starting point of the new polygon.\n     * @returns The instance of the current object for chaining.\n     */\n    public startPoly(x: number, y: number): this\n    {\n        let currentPoly = this._currentPoly;\n\n        if (currentPoly)\n        {\n            this.endPoly();\n        }\n\n        currentPoly = new Polygon();\n\n        currentPoly.points.push(x, y);\n\n        this._currentPoly = currentPoly;\n\n        return this;\n    }\n\n    /**\n     * Ends the current polygon path. If `closePath` is set to true,\n     * the path is closed by connecting the last point to the first one.\n     * This method finalizes the current polygon and prepares it for drawing or adding to the shape primitives.\n     * @param closePath - A boolean indicating whether to close the polygon by connecting the last point\n     *  back to the starting point. False by default.\n     * @returns The instance of the current object for chaining.\n     */\n    public endPoly(closePath = false): this\n    {\n        const shape = this._currentPoly;\n\n        if (shape && shape.points.length > 2)\n        {\n            shape.closePath = closePath;\n\n            this.shapePrimitives.push({ shape });\n        }\n\n        this._currentPoly = null;\n\n        return this;\n    }\n\n    private _ensurePoly(start = true): void\n    {\n        if (this._currentPoly) return;\n\n        this._currentPoly = new Polygon();\n\n        if (start)\n        {\n            // get last points..\n            const lastShape = this.shapePrimitives[this.shapePrimitives.length - 1];\n\n            if (lastShape)\n            {\n                // i KNOW its a rect..\n                let lx = lastShape.shape.x;\n                let ly = lastShape.shape.y;\n\n                if (lastShape.transform && !lastShape.transform.isIdentity())\n                {\n                    const t = lastShape.transform;\n\n                    const tempX = lx;\n\n                    lx = (t.a * lx) + (t.c * ly) + t.tx;\n                    ly = (t.b * tempX) + (t.d * ly) + t.ty;\n                }\n\n                this._currentPoly.points.push(lx, ly);\n            }\n            else\n            {\n                this._currentPoly.points.push(0, 0);\n            }\n        }\n    }\n\n    /** Builds the path. */\n    public buildPath()\n    {\n        const path = this._graphicsPath2D;\n\n        this.shapePrimitives.length = 0;\n        this._currentPoly = null;\n\n        for (let i = 0; i < path.instructions.length; i++)\n        {\n            const instruction = path.instructions[i];\n\n            // Sorry TS! this is the best we could do...\n            this[instruction.action](...(instruction.data as [never, never, never, never, never, never, never]));\n        }\n\n        this.finish();\n    }\n\n    /** Gets the bounds of the path. */\n    get bounds(): Bounds\n    {\n        const bounds = this._bounds;\n\n        bounds.clear();\n\n        const shapePrimitives = this.shapePrimitives;\n\n        for (let i = 0; i < shapePrimitives.length; i++)\n        {\n            const shapePrimitive = shapePrimitives[i];\n\n            const boundsRect = shapePrimitive.shape.getBounds(tempRectangle);\n\n            if (shapePrimitive.transform)\n            {\n                bounds.addRect(boundsRect, shapePrimitive.transform);\n            }\n            else\n            {\n                bounds.addRect(boundsRect);\n            }\n        }\n\n        return bounds;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 10993, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10999, "column": 0}, "map": {"version":3,"file":"GraphicsPath.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/path/GraphicsPath.ts"],"sourcesContent":["import { Point } from '../../../../maths/point/Point';\nimport { uid } from '../../../../utils/data/uid';\nimport { warn } from '../../../../utils/logging/warn';\nimport { SVGToGraphicsPath } from '../svg/SVGToGraphicsPath';\nimport { ShapePath } from './ShapePath';\n\nimport type { Matrix } from '../../../../maths/matrix/Matrix';\nimport type { PointData } from '../../../../maths/point/PointData';\nimport type { Bounds } from '../../../container/bounds/Bounds';\nimport type { RoundedPoint } from './roundShape';\n\nexport interface PathInstruction\n{\n    action: 'moveTo' | 'lineTo' | 'quadraticCurveTo' |\n    'bezierCurveTo' | 'arc' | 'closePath' |\n    'addPath' | 'arcTo' | 'ellipse' |\n    'rect' | 'roundRect' | 'arcToSvg' |\n    'poly' | 'circle' |\n    'regularPoly' | 'roundPoly' | 'roundShape' | 'filletRect' | 'chamferRect'\n    data: any[];\n}\n\n/**\n * The `GraphicsPath` class is designed to represent a graphical path consisting of multiple drawing instructions.\n * This class serves as a collection of drawing commands that can be executed to render shapes and paths on a canvas or\n * similar graphical context. It supports high-level drawing operations like lines, arcs, curves, and more, enabling\n * complex graphic constructions with relative ease.\n */\nexport class GraphicsPath\n{\n    public instructions: PathInstruction[] = [];\n\n    /** unique id for this graphics path */\n    public readonly uid: number = uid('graphicsPath');\n\n    private _dirty = true;\n    // needed for hit testing and bounds calculations\n    private _shapePath: ShapePath;\n\n    /**\n     * Provides access to the internal shape path, ensuring it is up-to-date with the current instructions.\n     * @returns The `ShapePath` instance associated with this `GraphicsPath`.\n     */\n    get shapePath(): ShapePath\n    {\n        if (!this._shapePath)\n        {\n            this._shapePath = new ShapePath(this);\n        }\n\n        if (this._dirty)\n        {\n            this._dirty = false;\n            this._shapePath.buildPath();\n        }\n\n        return this._shapePath;\n    }\n\n    /**\n     * Creates a `GraphicsPath` instance optionally from an SVG path string or an array of `PathInstruction`.\n     * @param instructions - An SVG path string or an array of `PathInstruction` objects.\n     */\n    constructor(instructions?: string | PathInstruction[])\n    {\n        if (typeof instructions === 'string')\n        {\n            SVGToGraphicsPath(instructions, this);\n        }\n        else\n        {\n            this.instructions = instructions?.slice() ?? [];\n        }\n    }\n\n    /**\n     * Adds another `GraphicsPath` to this path, optionally applying a transformation.\n     * @param path - The `GraphicsPath` to add.\n     * @param transform - An optional transformation to apply to the added path.\n     * @returns The instance of the current object for chaining.\n     */\n    public addPath(path: GraphicsPath, transform?: Matrix): this\n    {\n        path = path.clone();\n        this.instructions.push({ action: 'addPath', data: [path, transform] });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Adds an arc to the path. The arc is centered at (x, y)\n     *  position with radius `radius` starting at `startAngle` and ending at `endAngle`.\n     * @param x - The x-coordinate of the arc's center.\n     * @param y - The y-coordinate of the arc's center.\n     * @param radius - The radius of the arc.\n     * @param startAngle - The starting angle of the arc, in radians.\n     * @param endAngle - The ending angle of the arc, in radians.\n     * @param counterclockwise - Specifies whether the arc should be drawn in the anticlockwise direction. False by default.\n     * @returns The instance of the current object for chaining.\n     */\n    public arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): this;\n    public arc(...args: [number, number, number, number, number, boolean]): this\n    {\n        this.instructions.push({ action: 'arc', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Adds an arc to the path with the arc tangent to the line joining two specified points.\n     * The arc radius is specified by `radius`.\n     * @param x1 - The x-coordinate of the first point.\n     * @param y1 - The y-coordinate of the first point.\n     * @param x2 - The x-coordinate of the second point.\n     * @param y2 - The y-coordinate of the second point.\n     * @param radius - The radius of the arc.\n     * @returns The instance of the current object for chaining.\n     */\n    public arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this;\n    public arcTo(...args: [number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'arcTo', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Adds an SVG-style arc to the path, allowing for elliptical arcs based on the SVG spec.\n     * @param rx - The x-radius of the ellipse.\n     * @param ry - The y-radius of the ellipse.\n     * @param xAxisRotation - The rotation of the ellipse's x-axis relative\n     * to the x-axis of the coordinate system, in degrees.\n     * @param largeArcFlag - Determines if the arc should be greater than or less than 180 degrees.\n     * @param sweepFlag - Determines if the arc should be swept in a positive angle direction.\n     * @param x - The x-coordinate of the arc's end point.\n     * @param y - The y-coordinate of the arc's end point.\n     * @returns The instance of the current object for chaining.\n     */\n    // eslint-disable-next-line max-len\n    public arcToSvg(rx: number, ry: number, xAxisRotation: number, largeArcFlag: number, sweepFlag: number, x: number, y: number): this;\n    public arcToSvg(...args: [number, number, number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'arcToSvg', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Adds a cubic Bezier curve to the path.\n     * It requires three points: the first two are control points and the third one is the end point.\n     * The starting point is the last point in the current path.\n     * @param cp1x - The x-coordinate of the first control point.\n     * @param cp1y - The y-coordinate of the first control point.\n     * @param cp2x - The x-coordinate of the second control point.\n     * @param cp2y - The y-coordinate of the second control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public bezierCurveTo(\n        cp1x: number, cp1y: number, cp2x: number, cp2y: number,\n        x: number, y: number,\n        smoothness?: number\n    ): this;\n    public bezierCurveTo(...args: [number, number, number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'bezierCurveTo', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Adds a cubic Bezier curve to the path.\n     * It requires two points: the second control point and the end point. The first control point is assumed to be\n     * The starting point is the last point in the current path.\n     * @param cp2x - The x-coordinate of the second control point.\n     * @param cp2y - The y-coordinate of the second control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public bezierCurveToShort(cp2x: number, cp2y: number, x: number, y: number, smoothness?: number): this\n    {\n        const last = this.instructions[this.instructions.length - 1];\n\n        const lastPoint = this.getLastPoint(Point.shared);\n\n        let cp1x = 0;\n        let cp1y = 0;\n\n        if (!last || last.action !== 'bezierCurveTo')\n        {\n            cp1x = lastPoint.x;\n            cp1y = lastPoint.y;\n        }\n        else\n        {\n            cp1x = last.data[2];\n            cp1y = last.data[3];\n\n            const currentX = lastPoint.x;\n            const currentY = lastPoint.y;\n\n            cp1x = currentX + (currentX - cp1x);\n            cp1y = currentY + (currentY - cp1y);\n        }\n\n        this.instructions.push({ action: 'bezierCurveTo', data: [cp1x, cp1y, cp2x, cp2y, x, y, smoothness] });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Closes the current path by drawing a straight line back to the start.\n     * If the shape is already closed or there are no points in the path, this method does nothing.\n     * @returns The instance of the current object for chaining.\n     */\n    public closePath(): this\n    {\n        this.instructions.push({ action: 'closePath', data: [] });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws an ellipse at the specified location and with the given x and y radii.\n     * An optional transformation can be applied, allowing for rotation, scaling, and translation.\n     * @param x - The x-coordinate of the center of the ellipse.\n     * @param y - The y-coordinate of the center of the ellipse.\n     * @param radiusX - The horizontal radius of the ellipse.\n     * @param radiusY - The vertical radius of the ellipse.\n     * @param transform - An optional `Matrix` object to apply a transformation to the ellipse. This can include rotations.\n     * @returns The instance of the current object for chaining.\n     */\n    public ellipse(x: number, y: number, radiusX: number, radiusY: number, matrix?: Matrix): this;\n    public ellipse(...args: [number, number, number, number, Matrix]): this\n    {\n        this.instructions.push({ action: 'ellipse', data: args });\n\n        // TODO nail this!\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Connects the current point to a new point with a straight line. This method updates the current path.\n     * @param x - The x-coordinate of the new point to connect to.\n     * @param y - The y-coordinate of the new point to connect to.\n     * @returns The instance of the current object for chaining.\n     */\n    public lineTo(x: number, y: number): this;\n    public lineTo(...args: [number, number]): this\n    {\n        this.instructions.push({ action: 'lineTo', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Sets the starting point for a new sub-path. Any subsequent drawing commands are considered part of this path.\n     * @param x - The x-coordinate for the starting point.\n     * @param y - The y-coordinate for the starting point.\n     * @returns The instance of the current object for chaining.\n     */\n    public moveTo(x: number, y: number): this;\n    public moveTo(...args: [number, number]): this\n    {\n        this.instructions.push({ action: 'moveTo', data: args });\n\n        return this;\n    }\n\n    /**\n     * Adds a quadratic curve to the path. It requires two points: the control point and the end point.\n     * The starting point is the last point in the current path.\n     * @param cp1x - The x-coordinate of the control point.\n     * @param cp1y - The y-coordinate of the control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public quadraticCurveTo(cpx: number, cpy: number, x: number, y: number, smoothness?: number): this;\n    public quadraticCurveTo(...args: [number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'quadraticCurveTo', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Adds a quadratic curve to the path. It uses the previous point as the control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public quadraticCurveToShort(x: number, y: number, smoothness?: number): this\n    {\n        // check if we have a previous quadraticCurveTo\n        const last = this.instructions[this.instructions.length - 1];\n\n        const lastPoint = this.getLastPoint(Point.shared);\n\n        let cpx1 = 0;\n        let cpy1 = 0;\n\n        if (!last || last.action !== 'quadraticCurveTo')\n        {\n            cpx1 = lastPoint.x;\n            cpy1 = lastPoint.y;\n        }\n        else\n        {\n            cpx1 = last.data[0];\n            cpy1 = last.data[1];\n\n            const currentX = lastPoint.x;\n            const currentY = lastPoint.y;\n\n            cpx1 = currentX + (currentX - cpx1);\n            cpy1 = currentY + (currentY - cpy1);\n        }\n\n        this.instructions.push({ action: 'quadraticCurveTo', data: [cpx1, cpy1, x, y, smoothness] });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @param transform - An optional `Matrix` object to apply a transformation to the rectangle.\n     * @returns The instance of the current object for chaining.\n     */\n    public rect(x: number, y: number, w: number, h: number, transform?: Matrix): this\n    {\n        this.instructions.push({ action: 'rect', data: [x, y, w, h, transform] });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a circle shape. This method adds a new circle path to the current drawing.\n     * @param x - The x-coordinate of the center of the circle.\n     * @param y - The y-coordinate of the center of the circle.\n     * @param radius - The radius of the circle.\n     * @param transform - An optional `Matrix` object to apply a transformation to the circle.\n     * @returns The instance of the current object for chaining.\n     */\n    public circle(x: number, y: number, radius: number, transform?: Matrix): this\n    {\n        this.instructions.push({ action: 'circle', data: [x, y, radius, transform] });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a rectangle with rounded corners.\n     * The corner radius can be specified to determine how rounded the corners should be.\n     * An optional transformation can be applied, which allows for rotation, scaling, and translation of the rectangle.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @param radius - The radius of the rectangle's corners. If not specified, corners will be sharp.\n     * @param transform - An optional `Matrix` object to apply a transformation to the rectangle.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundRect(x: number, y: number, w: number, h: number, radius?: number, transform?: Matrix): this;\n    public roundRect(...args: [number, number, number, number, number, Matrix?]): this\n    {\n        this.instructions.push({ action: 'roundRect', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a polygon shape by specifying a sequence of points. This method allows for the creation of complex polygons,\n     * which can be both open and closed. An optional transformation can be applied, enabling the polygon to be scaled,\n     * rotated, or translated as needed.\n     * @param points - An array of numbers representing the x and y coordinates of the polygon's vertices, in sequence.\n     * @param close - A boolean indicating whether to close the polygon path. True by default.\n     * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n     * @returns The instance of the current object for chaining further drawing commands.\n     */\n    public poly(points: number[] | PointData[], close?: boolean, transform?: Matrix): this;\n    public poly(...args: [number[] | PointData[], boolean, Matrix?]): this\n    {\n        this.instructions.push({ action: 'poly', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a regular polygon with a specified number of sides. All sides and angles are equal.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n     * @returns The instance of the current object for chaining.\n     */\n    public regularPoly(x: number, y: number, radius: number, sides: number, rotation?: number, transform?: Matrix): this;\n    public regularPoly(...args: [number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'regularPoly', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a polygon with rounded corners.\n     * Similar to `regularPoly` but with the ability to round the corners of the polygon.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param corner - The radius of the rounding of the corners.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundPoly(x: number, y: number, radius: number, sides: number, corner: number, rotation?: number): this;\n    public roundPoly(...args: [number, number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'roundPoly', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a shape with rounded corners. This function supports custom radius for each corner of the shape.\n     * Optionally, corners can be rounded using a quadratic curve instead of an arc, providing a different aesthetic.\n     * @param points - An array of `RoundedPoint` representing the corners of the shape to draw.\n     * A minimum of 3 points is required.\n     * @param radius - The default radius for the corners.\n     * This radius is applied to all corners unless overridden in `points`.\n     * @param useQuadratic - If set to true, rounded corners are drawn using a quadraticCurve\n     *  method instead of an arc method. Defaults to false.\n     * @param smoothness - Specifies the smoothness of the curve when `useQuadratic` is true.\n     * Higher values make the curve smoother.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundShape(points: RoundedPoint[], radius: number, useQuadratic?: boolean, smoothness?: number): this;\n    public roundShape(...args: [RoundedPoint[], number, boolean, number]): this\n    {\n        this.instructions.push({ action: 'roundShape', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draw Rectangle with fillet corners. This is much like rounded rectangle\n     * however it support negative numbers as well for the corner radius.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param fillet - accept negative or positive values\n     */\n    public filletRect(x: number, y: number, width: number, height: number, fillet: number): this;\n    public filletRect(...args: [number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'filletRect', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draw Rectangle with chamfer corners. These are angled corners.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param chamfer - non-zero real number, size of corner cutout\n     * @param transform\n     */\n    public chamferRect(x: number, y: number, width: number, height: number, chamfer: number, transform?: Matrix): this;\n    public chamferRect(...args: [number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'chamferRect', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a star shape centered at a specified location. This method allows for the creation\n     *  of stars with a variable number of points, outer radius, optional inner radius, and rotation.\n     * The star is drawn as a closed polygon with alternating outer and inner vertices to create the star's points.\n     * An optional transformation can be applied to scale, rotate, or translate the star as needed.\n     * @param x - The x-coordinate of the center of the star.\n     * @param y - The y-coordinate of the center of the star.\n     * @param points - The number of points of the star.\n     * @param radius - The outer radius of the star (distance from the center to the outer points).\n     * @param innerRadius - Optional. The inner radius of the star\n     * (distance from the center to the inner points between the outer points).\n     * If not provided, defaults to half of the `radius`.\n     * @param rotation - Optional. The rotation of the star in radians, where 0 is aligned with the y-axis.\n     * Defaults to 0, meaning one point is directly upward.\n     * @param transform - An optional `Matrix` object to apply a transformation to the star.\n     * This can include rotations, scaling, and translations.\n     * @returns The instance of the current object for chaining further drawing commands.\n     */\n    // eslint-disable-next-line max-len\n    public star(x: number, y: number, points: number, radius: number, innerRadius?: number, rotation?: number, transform?: Matrix): this\n    {\n        innerRadius ||= radius / 2;\n\n        const startAngle = (-1 * Math.PI / 2) + rotation;\n        const len = points * 2;\n        const delta = (Math.PI * 2) / len;\n        const polygon = [];\n\n        for (let i = 0; i < len; i++)\n        {\n            const r = i % 2 ? innerRadius : radius;\n            const angle = (i * delta) + startAngle;\n\n            polygon.push(\n                x + (r * Math.cos(angle)),\n                y + (r * Math.sin(angle))\n            );\n        }\n\n        this.poly(polygon, true, transform);\n\n        return this;\n    }\n\n    /**\n     * Creates a copy of the current `GraphicsPath` instance. This method supports both shallow and deep cloning.\n     * A shallow clone copies the reference of the instructions array, while a deep clone creates a new array and\n     * copies each instruction individually, ensuring that modifications to the instructions of the cloned `GraphicsPath`\n     * do not affect the original `GraphicsPath` and vice versa.\n     * @param deep - A boolean flag indicating whether the clone should be deep.\n     * @returns A new `GraphicsPath` instance that is a clone of the current instance.\n     */\n    public clone(deep = false): GraphicsPath\n    {\n        const newGraphicsPath2D = new GraphicsPath();\n\n        if (!deep)\n        {\n            newGraphicsPath2D.instructions = this.instructions.slice();\n        }\n        else\n        {\n            for (let i = 0; i < this.instructions.length; i++)\n            {\n                const instruction = this.instructions[i];\n\n                newGraphicsPath2D.instructions.push({ action: instruction.action, data: instruction.data.slice() });\n            }\n        }\n\n        return newGraphicsPath2D;\n    }\n\n    public clear(): this\n    {\n        this.instructions.length = 0;\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Applies a transformation matrix to all drawing instructions within the `GraphicsPath`.\n     * This method enables the modification of the path's geometry according to the provided\n     * transformation matrix, which can include translations, rotations, scaling, and skewing.\n     *\n     * Each drawing instruction in the path is updated to reflect the transformation,\n     * ensuring the visual representation of the path is consistent with the applied matrix.\n     *\n     * Note: The transformation is applied directly to the coordinates and control points of the drawing instructions,\n     * not to the path as a whole. This means the transformation's effects are baked into the individual instructions,\n     * allowing for fine-grained control over the path's appearance.\n     * @param matrix - A `Matrix` object representing the transformation to apply.\n     * @returns The instance of the current object for chaining further operations.\n     */\n    public transform(matrix: Matrix): this\n    {\n        if (matrix.isIdentity()) return this;\n\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        let x = 0;\n        let y = 0;\n\n        let cpx1 = 0;\n        let cpy1 = 0;\n        let cpx2 = 0;\n        let cpy2 = 0;\n\n        let rx = 0;\n        let ry = 0;\n\n        for (let i = 0; i < this.instructions.length; i++)\n        {\n            const instruction = this.instructions[i];\n            const data = instruction.data as any[];\n\n            switch (instruction.action)\n            {\n                case 'moveTo':\n                case 'lineTo':\n\n                    x = data[0];\n                    y = data[1];\n\n                    data[0] = (a * x) + (c * y) + tx;\n                    data[1] = (b * x) + (d * y) + ty;\n                    break;\n                case 'bezierCurveTo':\n\n                    cpx1 = data[0];\n                    cpy1 = data[1];\n                    cpx2 = data[2];\n                    cpy2 = data[3];\n\n                    x = data[4];\n                    y = data[5];\n\n                    data[0] = (a * cpx1) + (c * cpy1) + tx;\n                    data[1] = (b * cpx1) + (d * cpy1) + ty;\n                    data[2] = (a * cpx2) + (c * cpy2) + tx;\n                    data[3] = (b * cpx2) + (d * cpy2) + ty;\n                    data[4] = (a * x) + (c * y) + tx;\n                    data[5] = (b * x) + (d * y) + ty;\n                    break;\n\n                case 'quadraticCurveTo':\n\n                    cpx1 = data[0];\n                    cpy1 = data[1];\n\n                    x = data[2];\n                    y = data[3];\n\n                    data[0] = (a * cpx1) + (c * cpy1) + tx;\n                    data[1] = (b * cpx1) + (d * cpy1) + ty;\n\n                    data[2] = (a * x) + (c * y) + tx;\n                    data[3] = (b * x) + (d * y) + ty;\n\n                    break;\n\n                case 'arcToSvg':\n\n                    x = data[5];\n                    y = data[6];\n\n                    rx = data[0];\n                    ry = data[1];\n\n                    // multiply the radius by the transform..\n\n                    data[0] = (a * rx) + (c * ry);\n                    data[1] = (b * rx) + (d * ry);\n\n                    data[5] = (a * x) + (c * y) + tx;\n                    data[6] = (b * x) + (d * y) + ty;\n\n                    break;\n\n                case 'circle':\n                    data[4] = adjustTransform(data[3], matrix);\n                    break;\n                case 'rect':\n                    data[4] = adjustTransform(data[4], matrix);\n                    break;\n                case 'ellipse':\n                    data[8] = adjustTransform(data[8], matrix);\n                    break;\n                case 'roundRect':\n                    data[5] = adjustTransform(data[5], matrix);\n                    break;\n                case 'addPath':\n                    data[0].transform(matrix);\n                    break;\n                case 'poly':\n                    data[2] = adjustTransform(data[2], matrix);\n                    break;\n                default:\n                    // #if _DEBUG\n                    warn('unknown transform action', instruction.action);\n                    // #endif\n                    break;\n            }\n        }\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    get bounds(): Bounds\n    {\n        return this.shapePath.bounds;\n    }\n\n    /**\n     * Retrieves the last point from the current drawing instructions in the `GraphicsPath`.\n     * This method is useful for operations that depend on the path's current endpoint,\n     * such as connecting subsequent shapes or paths. It supports various drawing instructions,\n     * ensuring the last point's position is accurately determined regardless of the path's complexity.\n     *\n     * If the last instruction is a `closePath`, the method iterates backward through the instructions\n     *  until it finds an actionable instruction that defines a point (e.g., `moveTo`, `lineTo`,\n     * `quadraticCurveTo`, etc.). For compound paths added via `addPath`, it recursively retrieves\n     * the last point from the nested path.\n     * @param out - A `Point` object where the last point's coordinates will be stored.\n     * This object is modified directly to contain the result.\n     * @returns The `Point` object containing the last point's coordinates.\n     */\n    public getLastPoint(out: Point): Point\n    {\n        let index = this.instructions.length - 1;\n\n        let lastInstruction = this.instructions[index];\n\n        if (!lastInstruction)\n        {\n            out.x = 0;\n            out.y = 0;\n\n            return out;\n        }\n\n        while (lastInstruction.action === 'closePath')\n        {\n            index--;\n\n            if (index < 0)\n            {\n                out.x = 0;\n                out.y = 0;\n\n                return out;\n            }\n\n            lastInstruction = this.instructions[index];\n        }\n\n        switch (lastInstruction.action)\n        {\n            case 'moveTo':\n            case 'lineTo':\n                out.x = lastInstruction.data[0];\n                out.y = lastInstruction.data[1];\n                break;\n            case 'quadraticCurveTo':\n                out.x = lastInstruction.data[2];\n                out.y = lastInstruction.data[3];\n                break;\n            case 'bezierCurveTo':\n                out.x = lastInstruction.data[4];\n                out.y = lastInstruction.data[5];\n                break;\n            case 'arc':\n            case 'arcToSvg':\n                out.x = lastInstruction.data[5];\n                out.y = lastInstruction.data[6];\n                break;\n            case 'addPath':\n                // TODO prolly should transform the last point of the path\n                lastInstruction.data[0].getLastPoint(out);\n                break;\n        }\n\n        return out;\n    }\n}\n\nfunction adjustTransform(currentMatrix?: Matrix, transform?: Matrix): Matrix\n{\n    if (currentMatrix)\n    {\n        return currentMatrix.prepend(transform);\n    }\n\n    return transform.clone();\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 11532, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11538, "column": 0}, "map": {"version":3,"file":"FillPattern.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/fill/FillPattern.ts"],"sourcesContent":["import { Matrix } from '../../../../maths/matrix/Matrix';\nimport { uid } from '../../../../utils/data/uid';\n\nimport type { WRAP_MODE } from '../../../../rendering/renderers/shared/texture/const';\nimport type { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\n\nexport type PatternRepetition = 'repeat' | 'repeat-x' | 'repeat-y' | 'no-repeat';\n\nconst repetitionMap = {\n    repeat: {\n        addressModeU: 'repeat',\n        addressModeV: 'repeat',\n    },\n    'repeat-x': {\n        addressModeU: 'repeat',\n        addressModeV: 'clamp-to-edge',\n    },\n    'repeat-y': {\n        addressModeU: 'clamp-to-edge',\n        addressModeV: 'repeat',\n    },\n    'no-repeat': {\n        addressModeU: 'clamp-to-edge',\n        addressModeV: 'clamp-to-edge',\n    },\n};\n\nexport class FillPattern implements CanvasPattern\n{\n    /** unique id for this fill pattern */\n    public readonly uid: number = uid('fillPattern');\n    public texture: Texture;\n    public transform = new Matrix();\n\n    private _styleKey: string | null = null;\n\n    constructor(texture: Texture, repetition?: PatternRepetition)\n    {\n        this.texture = texture;\n\n        this.transform.scale(\n            1 / texture.frame.width,\n            1 / texture.frame.height\n        );\n\n        if (repetition)\n        {\n            texture.source.style.addressModeU = repetitionMap[repetition].addressModeU as WRAP_MODE;\n            texture.source.style.addressModeV = repetitionMap[repetition].addressModeV as WRAP_MODE;\n        }\n    }\n\n    public setTransform(transform?: Matrix): void\n    {\n        const texture = this.texture;\n\n        this.transform.copyFrom(transform);\n        this.transform.invert();\n        //  transform.scale\n        this.transform.scale(\n            1 / texture.frame.width,\n            1 / texture.frame.height\n        );\n\n        this._styleKey = null;\n    }\n\n    public get styleKey(): string\n    {\n        if (this._styleKey) return this._styleKey;\n\n        this._styleKey = `fill-pattern-${this.uid}-${this.texture.uid}-${this.transform.toArray().join('-')}`;\n\n        return this._styleKey;\n    }\n}\n"],"names":[],"mappings":";;;;;;;;AAQA,MAAM,aAAgB,GAAA;IAClB,MAAQ,EAAA;QACJ,YAAc,EAAA,QAAA;QACd,YAAc,EAAA,QAAA;IAAA,CAClB;IACA,UAAY,EAAA;QACR,YAAc,EAAA,QAAA;QACd,YAAc,EAAA,eAAA;IAAA,CAClB;IACA,UAAY,EAAA;QACR,YAAc,EAAA,eAAA;QACd,YAAc,EAAA,QAAA;IAAA,CAClB;IACA,WAAa,EAAA;QACT,YAAc,EAAA,eAAA;QACd,YAAc,EAAA,eAAA;IAAA,CAClB;AACJ,CAAA,CAAA;AAEO,MAAM,WACb,CAAA;IAQI,WAAA,CAAY,OAAA,EAAkB,UAC9B,CAAA;QAPA,oCAAA,GAAgB,IAAA,CAAA,GAAA,kKAAc,MAAA,EAAI,aAAa,CAAA,CAAA;QAExC,IAAA,CAAA,SAAA,GAAY,oKAAI,SAAO,EAAA,CAAA;QAE9B,IAAA,CAAQ,SAA2B,GAAA,IAAA,CAAA;QAI/B,IAAA,CAAK,OAAU,GAAA,OAAA,CAAA;QAEf,IAAA,CAAK,SAAU,CAAA,KAAA,CACX,CAAA,GAAI,QAAQ,KAAM,CAAA,KAAA,EAClB,CAAA,GAAI,QAAQ,KAAM,CAAA,MAAA;QAGtB,IAAI,UACJ,EAAA;YACI,OAAA,CAAQ,MAAO,CAAA,KAAA,CAAM,YAAe,GAAA,aAAA,CAAc,UAAU,CAAE,CAAA,YAAA,CAAA;YAC9D,OAAA,CAAQ,MAAO,CAAA,KAAA,CAAM,YAAe,GAAA,aAAA,CAAc,UAAU,CAAE,CAAA,YAAA,CAAA;QAAA,CAClE;IAAA,CACJ;IAEO,aAAa,SACpB,EAAA;QACI,MAAM,UAAU,IAAK,CAAA,OAAA,CAAA;QAEhB,IAAA,CAAA,SAAA,CAAU,QAAA,CAAS,SAAS,CAAA,CAAA;QACjC,IAAA,CAAK,SAAA,CAAU,MAAO,EAAA,CAAA;QAEtB,IAAA,CAAK,SAAU,CAAA,KAAA,CACX,CAAA,GAAI,QAAQ,KAAM,CAAA,KAAA,EAClB,CAAA,GAAI,QAAQ,KAAM,CAAA,MAAA;QAGtB,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;IAAA,CACrB;IAEA,IAAW,QACX,GAAA;QACI,IAAI,IAAK,CAAA,SAAA,EAAW,OAAO,IAAK,CAAA,SAAA,CAAA;QAEhC,IAAA,CAAK,SAAY,GAAA,CAAA,aAAA,EAAgB,IAAK,CAAA,GAAG,CAAA,CAAA,EAAI,IAAK,CAAA,OAAA,CAAQ,GAAG,CAAA,CAAA,EAAI,IAAA,CAAK,SAAU,CAAA,OAAA,EAAU,CAAA,IAAA,CAAK,GAAG,CAAC,CAAA,CAAA,CAAA;QAEnG,OAAO,IAAK,CAAA,SAAA,CAAA;IAAA,CAChB;AACJ","ignoreList":[0]}},
    {"offset": {"line": 11591, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11597, "column": 0}, "map": {"version":3,"file":"FillGradient.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/fill/FillGradient.ts"],"sourcesContent":["import { Color } from '../../../../color/Color';\nimport { DOMAdapter } from '../../../../environment/adapter';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { ImageSource } from '../../../../rendering/renderers/shared/texture/sources/ImageSource';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { uid } from '../../../../utils/data/uid';\n\nimport type { ColorSource } from '../../../../color/Color';\n\nexport type GradientType = 'linear' | 'radial';\n\n// export type GradientSource =\n//     string // CSS gradient string: 'linear-gradient(...)'\n//     | IGradientOptions // Gradient options: { x0, y0, x1, y1, ...}\n//     | Gradient; // class Gradient itself\n\nexport interface LinearGradientFillStyle\n{\n    x0: number;\n    y0: number;\n    x1: number;\n    y1: number;\n    colors: number[];\n    stops: number[];\n}\n\nexport class FillGradient implements CanvasGradient\n{\n    public static defaultTextureSize = 256;\n\n    /** unique id for this fill gradient */\n    public readonly uid: number = uid('fillGradient');\n    public readonly type: GradientType = 'linear';\n\n    public x0: number;\n    public y0: number;\n    public x1: number;\n    public y1: number;\n\n    public texture: Texture;\n    public transform: Matrix;\n    public gradientStops: Array<{ offset: number, color: string }> = [];\n\n    private _styleKey: string | null = null;\n\n    constructor(x0: number, y0: number, x1: number, y1: number)\n    {\n        this.x0 = x0;\n        this.y0 = y0;\n\n        this.x1 = x1;\n        this.y1 = y1;\n    }\n\n    public addColorStop(offset: number, color: ColorSource): this\n    {\n        this.gradientStops.push({ offset, color: Color.shared.setValue(color).toHexa() });\n        this._styleKey = null;\n\n        return this;\n    }\n\n    // TODO move to the system!\n    public buildLinearGradient(): void\n    {\n        if (this.texture) return;\n\n        const defaultSize = FillGradient.defaultTextureSize;\n\n        const { gradientStops } = this;\n\n        const canvas = DOMAdapter.get().createCanvas();\n\n        canvas.width = defaultSize;\n        canvas.height = defaultSize;\n\n        const ctx = canvas.getContext('2d');\n\n        const gradient = ctx.createLinearGradient(0, 0, FillGradient.defaultTextureSize, 1);\n\n        for (let i = 0; i < gradientStops.length; i++)\n        {\n            const stop = gradientStops[i];\n\n            gradient.addColorStop(stop.offset, stop.color);\n        }\n\n        ctx.fillStyle = gradient;\n        ctx.fillRect(0, 0, defaultSize, defaultSize);\n\n        this.texture = new Texture({\n            source: new ImageSource({\n                resource: canvas,\n                addressModeU: 'clamp-to-edge',\n                addressModeV: 'repeat',\n            }),\n        });\n\n        // generate some UVS based on the gradient direction sent\n\n        const { x0, y0, x1, y1 } = this;\n\n        const m = new Matrix();\n\n        // get angle\n        const dx = x1 - x0;\n        const dy = y1 - y0;\n\n        const dist = Math.sqrt((dx * dx) + (dy * dy));\n\n        const angle = Math.atan2(dy, dx);\n\n        m.translate(-x0, -y0);\n        m.scale(1 / defaultSize, 1 / defaultSize);\n        m.rotate(-angle);\n        m.scale(256 / dist, 1);\n\n        this.transform = m;\n        this._styleKey = null;\n    }\n\n    public get styleKey(): string\n    {\n        if (this._styleKey)\n        {\n            return this._styleKey;\n        }\n\n        const stops = this.gradientStops.map((stop) => `${stop.offset}-${stop.color}`).join('-');\n        const texture = this.texture.uid;\n        const transform = this.transform.toArray().join('-');\n\n        return `fill-gradient-${this.uid}-${stops}-${texture}-${transform}-${this.x0}-${this.y0}-${this.x1}-${this.y1}`;\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AA0BO,MAAM,aAAA,GAAN,MAAM,aACb,CAAA;IAkBI,WAAY,CAAA,EAAA,EAAY,EAAY,EAAA,EAAA,EAAY,EAChD,CAAA;QAfA,qCAAA,GAAgB,IAAA,CAAA,GAAA,IAAc,oKAAA,EAAI,cAAc,CAAA,CAAA;QAChD,IAAA,CAAgB,IAAqB,GAAA,QAAA,CAAA;QASrC,IAAA,CAAO,aAAA,GAA0D,EAAC,CAAA;QAElE,IAAA,CAAQ,SAA2B,GAAA,IAAA,CAAA;QAI/B,IAAA,CAAK,EAAK,GAAA,EAAA,CAAA;QACV,IAAA,CAAK,EAAK,GAAA,EAAA,CAAA;QAEV,IAAA,CAAK,EAAK,GAAA,EAAA,CAAA;QACV,IAAA,CAAK,EAAK,GAAA,EAAA,CAAA;IAAA,CACd;IAEO,YAAA,CAAa,MAAA,EAAgB,KACpC,EAAA;QACI,IAAA,CAAK,aAAc,CAAA,IAAA,CAAK;YAAE,MAAA;YAAQ,KAAO,uJAAA,QAAA,CAAM,MAAO,CAAA,QAAA,CAAS,KAAK,CAAA,CAAE,MAAO,EAAA;QAAA,CAAG,CAAA,CAAA;QAChF,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;QAEV,OAAA,IAAA,CAAA;IAAA,CACX;IAAA,2BAAA;IAGO,mBACP,GAAA;QACI,IAAI,IAAK,CAAA,OAAA,EAAS,OAAA;QAElB,MAAM,cAAc,aAAa,CAAA,kBAAA,CAAA;QAE3B,MAAA,EAAE,aAAA,EAAkB,GAAA,IAAA,CAAA;QAE1B,MAAM,MAAS,GAAA,0KAAA,CAAW,GAAI,EAAA,CAAE,YAAa,EAAA,CAAA;QAE7C,MAAA,CAAO,KAAQ,GAAA,WAAA,CAAA;QACf,MAAA,CAAO,MAAS,GAAA,WAAA,CAAA;QAEV,MAAA,GAAA,GAAM,MAAO,CAAA,UAAA,CAAW,IAAI,CAAA,CAAA;QAElC,MAAM,WAAW,GAAI,CAAA,oBAAA,CAAqB,GAAG,CAAG,EAAA,aAAA,CAAa,kBAAA,EAAoB,CAAC,CAAA,CAAA;QAElF,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,aAAA,CAAc,MAAA,EAAQ,CAC1C,EAAA,CAAA;YACU,MAAA,IAAA,GAAO,aAAA,CAAc,CAAC,CAAA,CAAA;YAE5B,QAAA,CAAS,YAAa,CAAA,IAAA,CAAK,MAAQ,EAAA,IAAA,CAAK,KAAK,CAAA,CAAA;QAAA,CACjD;QAEA,GAAA,CAAI,SAAY,GAAA,QAAA,CAAA;QAChB,GAAA,CAAI,QAAS,CAAA,CAAA,EAAG,CAAG,EAAA,WAAA,EAAa,WAAW,CAAA,CAAA;QAEtC,IAAA,CAAA,OAAA,GAAU,gMAAI,WAAQ,CAAA;YACvB,MAAA,EAAQ,gNAAI,cAAY,CAAA;gBACpB,QAAU,EAAA,MAAA;gBACV,YAAc,EAAA,eAAA;gBACd,YAAc,EAAA,QAAA;YAAA,CACjB,CAAA;QAAA,CACJ,CAAA,CAAA;QAID,MAAM,EAAE,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAA,EAAO,GAAA,IAAA,CAAA;QAErB,MAAA,CAAA,GAAI,oKAAI,SAAO,EAAA,CAAA;QAGrB,MAAM,KAAK,EAAK,GAAA,EAAA,CAAA;QAChB,MAAM,KAAK,EAAK,GAAA,EAAA,CAAA;QAEhB,MAAM,OAAO,IAAK,CAAA,IAAA,CAAM,EAAK,GAAA,EAAA,GAAO,KAAK,EAAG,CAAA,CAAA;QAE5C,MAAM,KAAQ,GAAA,IAAA,CAAK,KAAM,CAAA,EAAA,EAAI,EAAE,CAAA,CAAA;QAE/B,CAAA,CAAE,SAAU,CAAA,CAAC,EAAI,EAAA,CAAC,EAAE,CAAA,CAAA;QACpB,CAAA,CAAE,KAAM,CAAA,CAAA,GAAI,WAAa,EAAA,CAAA,GAAI,WAAW,CAAA,CAAA;QACtC,CAAA,CAAA,MAAA,CAAO,CAAC,KAAK,CAAA,CAAA;QACb,CAAA,CAAA,KAAA,CAAM,GAAM,GAAA,IAAA,EAAM,CAAC,CAAA,CAAA;QAErB,IAAA,CAAK,SAAY,GAAA,CAAA,CAAA;QACjB,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;IAAA,CACrB;IAEA,IAAW,QACX,GAAA;QACI,IAAI,IAAA,CAAK,SACT,EAAA;YACI,OAAO,IAAK,CAAA,SAAA,CAAA;QAAA,CAChB;QAEA,MAAM,KAAQ,GAAA,IAAA,CAAK,aAAc,CAAA,GAAA,CAAI,CAAC,IAAS,GAAA,CAAA,EAAG,IAAK,CAAA,MAAM,CAAA,CAAA,EAAI,IAAK,CAAA,KAAK,CAAE,CAAA,CAAA,CAAE,IAAA,CAAK,GAAG,CAAA,CAAA;QACjF,MAAA,OAAA,GAAU,IAAA,CAAK,OAAQ,CAAA,GAAA,CAAA;QAC7B,MAAM,YAAY,IAAK,CAAA,SAAA,CAAU,OAAQ,EAAA,CAAE,IAAA,CAAK,GAAG,CAAA,CAAA;QAE5C,OAAA,CAAA,cAAA,EAAiB,IAAA,CAAK,GAAG,CAAA,CAAA,EAAI,KAAK,CAAI,CAAA,EAAA,OAAO,CAAA,CAAA,EAAI,SAAS,CAAA,CAAA,EAAI,IAAA,CAAK,EAAE,CAAA,CAAA,EAAI,IAAA,CAAK,EAAE,CAAA,CAAA,EAAI,IAAA,CAAK,EAAE,CAAA,CAAA,EAAI,IAAA,CAAK,EAAE,CAAA,CAAA,CAAA;IAAA,CACjH;AACJ,CAAA,CAAA;AA5Ga,aAAA,CAEK,kBAAqB,GAAA,GAAA,CAAA;AAFhC,IAAM,YAAN,GAAA","ignoreList":[0]}},
    {"offset": {"line": 11682, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11688, "column": 0}, "map": {"version":3,"file":"convertFillInputToFillStyle.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/utils/convertFillInputToFillStyle.ts"],"sourcesContent":["import { Color } from '../../../../color/Color';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { FillGradient } from '../fill/FillGradient';\nimport { FillPattern } from '../fill/FillPattern';\n\nimport type { ColorSource } from '../../../../color/Color';\nimport type {\n    ConvertedFillStyle,\n    ConvertedStrokeStyle,\n    FillInput,\n    FillStyle,\n    StrokeInput,\n} from '../FillTypes';\n\nfunction isColorLike(value: unknown): value is ColorSource\n{\n    return Color.isColorLike(value as ColorSource);\n}\n\nfunction isFillPattern(value: unknown): value is FillPattern\n{\n    return value instanceof FillPattern;\n}\n\nfunction isFillGradient(value: unknown): value is FillGradient\n{\n    return value instanceof FillGradient;\n}\n\n/**\n * Handles the case where the value is a ColorLike\n * @param fill\n * @param value\n * @param defaultStyle\n * @example\n * graphics.fill(0xff0000)\n * graphics.fill(new Color(0xff0000))\n * graphics.fill({ r: 255, g: 0, b: 0 })\n */\nfunction handleColorLike(\n    fill: FillStyle,\n    value: ColorSource,\n    defaultStyle: ConvertedFillStyle\n): ConvertedFillStyle\n{\n    const temp = Color.shared.setValue(value ?? 0);\n\n    fill.color = temp.toNumber();\n    fill.alpha = temp.alpha === 1 ? defaultStyle.alpha : temp.alpha;\n    fill.texture = Texture.WHITE;\n\n    return { ...defaultStyle, ...fill } as ConvertedFillStyle;\n}\n\n/**\n * Handles the case where the value is a FillPattern\n * @param fill\n * @param value\n * @param defaultStyle\n * @example\n * graphics.fill(new FillPattern(0xff0000))\n */\nfunction handleFillPattern(\n    fill: FillStyle,\n    value: FillPattern,\n    defaultStyle: ConvertedFillStyle\n): ConvertedFillStyle\n{\n    fill.fill = value;\n    fill.color = 0xffffff;\n    fill.texture = value.texture;\n    fill.matrix = value.transform;\n\n    return { ...defaultStyle, ...fill } as ConvertedFillStyle;\n}\n\n/**\n * Handles the case where the value is a FillGradient\n * @param fill\n * @param value\n * @param defaultStyle\n * @example\n * graphics.fill(new FillGradient(0, 0, 200, 0))\n */\nfunction handleFillGradient(\n    fill: FillStyle,\n    value: FillGradient,\n    defaultStyle: ConvertedFillStyle\n): ConvertedFillStyle\n{\n    value.buildLinearGradient();\n    fill.fill = value;\n    fill.color = 0xffffff;\n    fill.texture = value.texture;\n    fill.matrix = value.transform;\n\n    return { ...defaultStyle, ...fill } as ConvertedFillStyle;\n}\n\n/**\n * Handles the case where the value is not a direct Pixi Color, PatternFill, or GradientFill but instead\n * an object with potentially `color`\n * @example\n * {\n *   color: new Color(0xff0000)\n *   alpha: 0.5,\n *   texture?: null,\n *   matrix?: null,\n * }\n * @param value\n * @param defaultStyle\n */\nfunction handleFillObject(value: FillStyle, defaultStyle: ConvertedFillStyle): ConvertedFillStyle\n{\n    const style = { ...defaultStyle, ...(value as FillStyle) };\n\n    if (style.texture)\n    {\n        if (style.texture !== Texture.WHITE)\n        {\n            const m = style.matrix?.clone().invert() || new Matrix();\n\n            m.translate(style.texture.frame.x, style.texture.frame.y);\n            m.scale(1 / style.texture.source.width, 1 / style.texture.source.height);\n\n            style.matrix = m;\n        }\n\n        const sourceStyle = style.texture.source.style;\n\n        if (sourceStyle.addressMode === 'clamp-to-edge')\n        {\n            sourceStyle.addressMode = 'repeat';\n            sourceStyle.update();\n        }\n    }\n\n    const color = Color.shared.setValue(style.color);\n\n    style.alpha *= color.alpha;\n    style.color = color.toNumber();\n    style.matrix = style.matrix ? style.matrix.clone() : null; // todo: lets optimise this!\n\n    return style as ConvertedFillStyle;\n}\n\n/**\n * Converts a value to a fill style, we do this as PixiJS has a number of ways to define a fill style\n * They can be a direct color, a texture, a gradient, or an object with these values in them\n * This function will take any of these input types and convert them into a single object\n * that PixiJS can understand and use internally.\n * @param value - The value to convert to a fill style\n * @param defaultStyle - The default fill style to use\n * @private\n */\nexport function toFillStyle<T extends FillInput>(\n    value: T,\n    defaultStyle: ConvertedFillStyle\n): ConvertedFillStyle\n{\n    if (value === undefined || value === null)\n    {\n        return null;\n    }\n\n    const fill: ConvertedFillStyle = {} as ConvertedFillStyle;\n    const objectStyle = value as FillStyle;\n\n    if (isColorLike(value))\n    {\n        return handleColorLike(fill, value, defaultStyle);\n    }\n    else if (isFillPattern(value))\n    {\n        return handleFillPattern(fill, value, defaultStyle);\n    }\n    else if (isFillGradient(value))\n    {\n        return handleFillGradient(fill, value, defaultStyle);\n    }\n    else if (objectStyle.fill && isFillPattern(objectStyle.fill))\n    {\n        return handleFillPattern(objectStyle, objectStyle.fill, defaultStyle);\n    }\n    else if (objectStyle.fill && isFillGradient(objectStyle.fill))\n    {\n        return handleFillGradient(objectStyle, objectStyle.fill, defaultStyle);\n    }\n\n    return handleFillObject(objectStyle, defaultStyle);\n}\n\n/**\n * Converts a value to a stroke style, similar to `toFillStyle` but for strokes\n * @param value - The value to convert to a stroke style\n * @param defaultStyle - The default stroke style to use\n * @private\n */\nexport function toStrokeStyle(value: StrokeInput, defaultStyle: ConvertedStrokeStyle): ConvertedStrokeStyle\n{\n    const { width, alignment, miterLimit, cap, join, pixelLine, ...rest } = defaultStyle;\n    const fill = toFillStyle(value, rest);\n\n    if (!fill)\n    {\n        return null;\n    }\n\n    return {\n        width,\n        alignment,\n        miterLimit,\n        cap,\n        join,\n        pixelLine,\n        ...fill,\n    };\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 11804, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11810, "column": 0}, "map": {"version":3,"file":"SVGParser.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/svg/SVGParser.ts"],"sourcesContent":["import { Color } from '../../../../color/Color';\nimport { GraphicsPath } from '../path/GraphicsPath';\n\nimport type { ConvertedFillStyle, ConvertedStrokeStyle, FillStyle, StrokeStyle } from '../FillTypes';\nimport type {\n    GraphicsContext,\n} from '../GraphicsContext';\n\ninterface Session\n{\n    context: GraphicsContext;\n    path: GraphicsPath;\n}\n\nexport function SVGParser(\n    svg: string | SVGElement | SVGSVGElement,\n    graphicsContext?: GraphicsContext\n): GraphicsContext\n{\n    if (typeof svg === 'string')\n    {\n        const div = document.createElement('div');\n\n        div.innerHTML = svg.trim();\n        svg = div.querySelector('svg') as SVGElement;\n    }\n\n    const session = {\n        context: graphicsContext,\n        path: new GraphicsPath(),\n    };\n\n    renderChildren(svg, session, null, null);\n\n    return graphicsContext;\n}\n\nfunction renderChildren(svg: SVGElement, session: Session, fillStyle: FillStyle, strokeStyle: StrokeStyle): void\n{\n    const children = svg.children;\n\n    const { fillStyle: f1, strokeStyle: s1 } = parseStyle(svg);\n\n    if (f1 && fillStyle)\n    {\n        fillStyle = { ...fillStyle, ...f1 };\n    }\n    else if (f1)\n    {\n        fillStyle = f1;\n    }\n\n    if (s1 && strokeStyle)\n    {\n        strokeStyle = { ...strokeStyle, ...s1 };\n    }\n    else if (s1)\n    {\n        strokeStyle = s1;\n    }\n\n    session.context.fillStyle = fillStyle;\n    session.context.strokeStyle = strokeStyle;\n\n    let x;\n    let y;\n    let x1;\n    let y1;\n    let x2;\n    let y2;\n    let cx;\n    let cy;\n    let r;\n    let rx;\n    let ry;\n    let points;\n    let pointsString;\n    let d;\n    let graphicsPath;\n    let width;\n    let height;\n\n    switch (svg.nodeName.toLowerCase())\n    {\n        case 'path':\n            d = svg.getAttribute('d') as string;\n\n            graphicsPath = new GraphicsPath(d);\n\n            session.context.path(graphicsPath);\n\n            if (fillStyle) session.context.fill();\n            if (strokeStyle) session.context.stroke();\n\n            break;\n        case 'circle':\n            cx = parseFloatAttribute(svg, 'cx', 0);\n            cy = parseFloatAttribute(svg, 'cy', 0);\n\n            r = parseFloatAttribute(svg, 'r', 0);\n\n            session.context.ellipse(cx, cy, r, r);\n\n            if (fillStyle) session.context.fill();\n            if (strokeStyle) session.context.stroke();\n\n            break;\n        case 'rect':\n            x = parseFloatAttribute(svg, 'x', 0);\n            y = parseFloatAttribute(svg, 'y', 0);\n\n            width = parseFloatAttribute(svg, 'width', 0);\n            height = parseFloatAttribute(svg, 'height', 0);\n\n            rx = parseFloatAttribute(svg, 'rx', 0);\n            ry = parseFloatAttribute(svg, 'ry', 0);\n\n            if (rx || ry)\n            {\n                session.context.roundRect(x, y, width, height, rx || ry);\n            }\n            else\n            {\n                session.context.rect(x, y, width, height);\n            }\n\n            if (fillStyle) session.context.fill();\n            if (strokeStyle) session.context.stroke();\n\n            break;\n        case 'ellipse':\n            cx = parseFloatAttribute(svg, 'cx', 0);\n            cy = parseFloatAttribute(svg, 'cy', 0);\n\n            rx = parseFloatAttribute(svg, 'rx', 0);\n            ry = parseFloatAttribute(svg, 'ry', 0);\n\n            session.context.beginPath();\n            session.context.ellipse(cx, cy, rx, ry); // , 0, Math.PI * 2);\n\n            if (fillStyle) session.context.fill();\n            if (strokeStyle) session.context.stroke();\n\n            break;\n        case 'line':\n            x1 = parseFloatAttribute(svg, 'x1', 0);\n            y1 = parseFloatAttribute(svg, 'y1', 0);\n\n            x2 = parseFloatAttribute(svg, 'x2', 0);\n            y2 = parseFloatAttribute(svg, 'y2', 0);\n\n            session.context.beginPath();\n            session.context.moveTo(x1, y1);\n            session.context.lineTo(x2, y2);\n\n            if (strokeStyle) session.context.stroke();\n\n            break;\n\n        case 'polygon':\n            pointsString = svg.getAttribute('points') as string;\n\n            points = pointsString.match(/\\d+/g).map((n) => parseInt(n, 10));\n\n            session.context.poly(points, true);\n\n            if (fillStyle) session.context.fill();\n            if (strokeStyle) session.context.stroke();\n\n            break;\n        case 'polyline':\n            pointsString = svg.getAttribute('points') as string;\n\n            points = pointsString.match(/\\d+/g).map((n) => parseInt(n, 10));\n\n            session.context.poly(points, false);\n\n            if (strokeStyle) session.context.stroke();\n\n            break;\n        // children will cover these two..\n        case 'g':\n        case 'svg':\n            break;\n        default: {\n            // eslint-disable-next-line no-console\n            console.info(`[SVG parser] <${svg.nodeName}> elements unsupported`);\n            break;\n        }\n    }\n\n    for (let i = 0; i < children.length; i++)\n    {\n        renderChildren(children[i] as SVGElement, session, fillStyle, strokeStyle);\n    }\n}\n\nfunction parseFloatAttribute(svg: SVGElement, id: string, defaultValue: number): number\n{\n    const value = svg.getAttribute(id) as string;\n\n    return value ? Number(value) : defaultValue;\n}\n\nfunction parseStyle(svg: SVGElement): { strokeStyle: ConvertedStrokeStyle; fillStyle: ConvertedFillStyle }\n{\n    const style = svg.getAttribute('style');\n\n    const strokeStyle: StrokeStyle = {};\n\n    const fillStyle: FillStyle = {};\n\n    let useFill = false;\n    let useStroke = false;\n\n    if (style)\n    {\n        const styleParts = style.split(';');\n\n        for (let i = 0; i < styleParts.length; i++)\n        {\n            const stylePart = styleParts[i];\n\n            const [key, value] = stylePart.split(':');\n\n            switch (key)\n            {\n                case 'stroke':\n                    if (value !== 'none')\n                    {\n                        strokeStyle.color = Color.shared.setValue(value).toNumber();\n                        useStroke = true;\n                    }\n\n                    break;\n                case 'stroke-width':\n                    strokeStyle.width = Number(value);\n                    break;\n                case 'fill':\n                    if (value !== 'none')\n                    {\n                        useFill = true;\n                        fillStyle.color = Color.shared.setValue(value).toNumber();\n                    }\n                    break;\n                case 'fill-opacity':\n                    fillStyle.alpha = Number(value);\n                    break;\n                case 'stroke-opacity':\n                    strokeStyle.alpha = Number(value);\n                    break;\n                case 'opacity':\n                    fillStyle.alpha = Number(value);\n                    strokeStyle.alpha = Number(value);\n                    break;\n            }\n        }\n    }\n    else\n    {\n        const stroke = svg.getAttribute('stroke');\n\n        if (stroke && stroke !== 'none')\n        {\n            useStroke = true;\n            strokeStyle.color = Color.shared.setValue(stroke).toNumber();\n\n            strokeStyle.width = parseFloatAttribute(svg, 'stroke-width', 1);\n        }\n\n        const fill = svg.getAttribute('fill');\n\n        if (fill && fill !== 'none')\n        {\n            useFill = true;\n            fillStyle.color = Color.shared.setValue(fill).toNumber();\n        }\n    }\n\n    return {\n        strokeStyle: useStroke ? (strokeStyle as ConvertedStrokeStyle) : null,\n        fillStyle: useFill ? (fillStyle as ConvertedFillStyle) : null,\n    };\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 12009, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12015, "column": 0}, "map": {"version":3,"file":"GraphicsContext.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/GraphicsContext.ts"],"sourcesContent":["/* eslint-disable max-len */\nimport EventEmitter from 'eventemitter3';\nimport { Color, type ColorSource } from '../../../color/Color';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { Point } from '../../../maths/point/Point';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { uid } from '../../../utils/data/uid';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\nimport { Bounds } from '../../container/bounds/Bounds';\nimport { GraphicsPath } from './path/GraphicsPath';\nimport { SVGParser } from './svg/SVGParser';\nimport { toFillStyle, toStrokeStyle } from './utils/convertFillInputToFillStyle';\n\nimport type { PointData } from '../../../maths/point/PointData';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { TextureDestroyOptions, TypeOrBool } from '../../container/destroyTypes';\nimport type { ConvertedFillStyle, ConvertedStrokeStyle, FillInput, StrokeInput } from './FillTypes';\nimport type { RoundedPoint } from './path/roundShape';\n\nconst tmpPoint = new Point();\n\nexport type BatchMode = 'auto' | 'batch' | 'no-batch';\n\nexport interface FillInstruction\n{\n    action: 'fill' | 'cut'\n    data: { style: ConvertedFillStyle, path: GraphicsPath, hole?: GraphicsPath }\n}\n\nexport interface StrokeInstruction\n{\n    action: 'stroke'\n    data: { style: ConvertedStrokeStyle, path: GraphicsPath, hole?: GraphicsPath }\n}\n\nexport interface TextureInstruction\n{\n    action: 'texture'\n    data: {\n        image: Texture,\n\n        dx: number\n        dy: number\n\n        dw: number\n        dh: number\n\n        transform: Matrix\n        alpha: number\n        style: number,\n    }\n}\n\nexport type GraphicsInstructions = FillInstruction | StrokeInstruction | TextureInstruction;\n\nconst tempMatrix = new Matrix();\n\n/**\n * The GraphicsContext class allows for the creation of lightweight objects that contain instructions for drawing shapes and paths.\n * It is used internally by the Graphics class to draw shapes and paths, and can be used directly and shared between Graphics objects,\n *\n * This sharing of a `GraphicsContext` means that the intensive task of converting graphics instructions into GPU-ready geometry is done once, and the results are reused,\n * much like sprites reusing textures.\n * @memberof scene\n */\nexport class GraphicsContext extends EventEmitter<{\n    update: GraphicsContext\n    destroy: GraphicsContext\n}>\n{\n    /** The default fill style to use when none is provided. */\n    public static defaultFillStyle: ConvertedFillStyle = {\n        /** The color to use for the fill. */\n        color: 0xffffff,\n        /** The alpha value to use for the fill. */\n        alpha: 1,\n        /** The texture to use for the fill. */\n        texture: Texture.WHITE,\n        /** The matrix to apply. */\n        matrix: null,\n        /** The fill pattern to use. */\n        fill: null,\n    };\n\n    /** The default stroke style to use when none is provided. */\n    public static defaultStrokeStyle: ConvertedStrokeStyle = {\n        /** The width of the stroke. */\n        width: 1,\n        /** The color to use for the stroke. */\n        color: 0xffffff,\n        /** The alpha value to use for the stroke. */\n        alpha: 1,\n        /** The alignment of the stroke. */\n        alignment: 0.5,\n        /** The miter limit to use. */\n        miterLimit: 10,\n        /** The line cap style to use. */\n        cap: 'butt',\n        /** The line join style to use. */\n        join: 'miter',\n        /** The texture to use for the fill. */\n        texture: Texture.WHITE,\n        /** The matrix to apply. */\n        matrix: null,\n        /** The fill pattern to use. */\n        fill: null,\n        /** If the stroke is a pixel line. */\n        pixelLine: false,\n    };\n\n    /** unique id for this graphics context */\n    public readonly uid: number = uid('graphicsContext');\n    public dirty = true;\n    public batchMode: BatchMode = 'auto';\n    public instructions: GraphicsInstructions[] = [];\n    public customShader?: Shader;\n\n    private _activePath: GraphicsPath = new GraphicsPath();\n    private _transform: Matrix = new Matrix();\n\n    private _fillStyle: ConvertedFillStyle = { ...GraphicsContext.defaultFillStyle };\n    private _strokeStyle: ConvertedStrokeStyle = { ...GraphicsContext.defaultStrokeStyle };\n    private _stateStack: { fillStyle: ConvertedFillStyle; strokeStyle: ConvertedStrokeStyle, transform: Matrix }[] = [];\n\n    private _tick = 0;\n\n    private _bounds = new Bounds();\n    private _boundsDirty = true;\n\n    /**\n     * Creates a new GraphicsContext object that is a clone of this instance, copying all properties,\n     * including the current drawing state, transformations, styles, and instructions.\n     * @returns A new GraphicsContext instance with the same properties and state as this one.\n     */\n    public clone(): GraphicsContext\n    {\n        const clone = new GraphicsContext();\n\n        clone.batchMode = this.batchMode;\n        clone.instructions = this.instructions.slice();\n        clone._activePath = this._activePath.clone();\n        clone._transform = this._transform.clone();\n        clone._fillStyle = { ...this._fillStyle };\n        clone._strokeStyle = { ...this._strokeStyle };\n        clone._stateStack = this._stateStack.slice();\n        clone._bounds = this._bounds.clone();\n        clone._boundsDirty = true;\n\n        return clone;\n    }\n\n    /**\n     * The current fill style of the graphics context. This can be a color, gradient, pattern, or a more complex style defined by a FillStyle object.\n     */\n    get fillStyle(): ConvertedFillStyle\n    {\n        return this._fillStyle;\n    }\n\n    set fillStyle(value: FillInput)\n    {\n        this._fillStyle = toFillStyle(value, GraphicsContext.defaultFillStyle);\n    }\n\n    /**\n     * The current stroke style of the graphics context. Similar to fill styles, stroke styles can encompass colors, gradients, patterns, or more detailed configurations via a StrokeStyle object.\n     */\n    get strokeStyle(): ConvertedStrokeStyle\n    {\n        return this._strokeStyle;\n    }\n\n    set strokeStyle(value: FillInput)\n    {\n        this._strokeStyle = toStrokeStyle(value, GraphicsContext.defaultStrokeStyle);\n    }\n\n    /**\n     * Sets the current fill style of the graphics context. The fill style can be a color, gradient,\n     * pattern, or a more complex style defined by a FillStyle object.\n     * @param style - The fill style to apply. This can be a simple color, a gradient or pattern object,\n     *                or a FillStyle or ConvertedFillStyle object.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setFillStyle(style: FillInput): this\n    {\n        this._fillStyle = toFillStyle(style, GraphicsContext.defaultFillStyle);\n\n        return this;\n    }\n\n    /**\n     * Sets the current stroke style of the graphics context. Similar to fill styles, stroke styles can\n     * encompass colors, gradients, patterns, or more detailed configurations via a StrokeStyle object.\n     * @param style - The stroke style to apply. Can be defined as a color, a gradient or pattern,\n     *                or a StrokeStyle or ConvertedStrokeStyle object.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setStrokeStyle(style: StrokeInput): this\n    {\n        this._strokeStyle = toFillStyle(style, GraphicsContext.defaultStrokeStyle) as ConvertedStrokeStyle;\n\n        return this;\n    }\n\n    /**\n     * Adds a texture to the graphics context. This method supports multiple overloads for specifying the texture, tint, and dimensions.\n     * If only a texture is provided, it uses the texture's width and height for drawing. Additional parameters allow for specifying\n     * a tint color, and custom dimensions for the texture drawing area.\n     * @param texture - The Texture object to use.\n     * @param tint - (Optional) A ColorSource to tint the texture. If not provided, defaults to white (0xFFFFFF).\n     * @param dx - (Optional) The x-coordinate in the destination canvas at which to place the top-left corner of the source image.\n     * @param dy - (Optional) The y-coordinate in the destination canvas at which to place the top-left corner of the source image.\n     * @param dw - (Optional) The width of the rectangle within the source image to draw onto the destination canvas. If not provided, uses the texture's frame width.\n     * @param dh - (Optional) The height of the rectangle within the source image to draw onto the destination canvas. If not provided, uses the texture's frame height.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public texture(texture: Texture): this;\n    public texture(texture: Texture, tint: ColorSource): this;\n    public texture(texture: Texture, tint: ColorSource, dx: number, dy: number): this;\n    public texture(texture: Texture, tint: ColorSource, dx: number, dy: number, dw: number, dh: number): this;\n    public texture(texture: Texture, tint?: ColorSource, dx?: number, dy?: number, dw?: number, dh?: number): this\n    {\n        this.instructions.push({\n            action: 'texture',\n            data: {\n                image: texture,\n\n                dx: dx || 0,\n                dy: dy || 0,\n\n                dw: dw || texture.frame.width,\n                dh: dh || texture.frame.height,\n\n                transform: this._transform.clone(),\n                alpha: this._fillStyle.alpha,\n                style: tint ? Color.shared.setValue(tint).toNumber() : 0xFFFFFF,\n            }\n        });\n\n        this.onUpdate();\n\n        return this;\n    }\n\n    /**\n     * Resets the current path. Any previous path and its commands are discarded and a new path is\n     * started. This is typically called before beginning a new shape or series of drawing commands.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public beginPath(): this\n    {\n        this._activePath = new GraphicsPath();\n\n        return this;\n    }\n\n    /**\n     * Fills the current or given path with the current fill style. This method can optionally take\n     * a color and alpha for a simple fill, or a more complex FillInput object for advanced fills.\n     * @param style - (Optional) The style to fill the path with. Can be a color, gradient, pattern, or a complex style object. If omitted, uses the current fill style.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public fill(style?: FillInput): this;\n    /** @deprecated 8.0.0 */\n    public fill(color: ColorSource, alpha: number): this;\n    public fill(style?: FillInput, alpha?: number): this\n    {\n        let path: GraphicsPath;\n\n        const lastInstruction = this.instructions[this.instructions.length - 1];\n\n        if (this._tick === 0 && lastInstruction && lastInstruction.action === 'stroke')\n        {\n            path = lastInstruction.data.path;\n        }\n        else\n        {\n            path = this._activePath.clone();\n        }\n\n        if (!path) return this;\n\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        if (style != null)\n        {\n            if (alpha !== undefined && typeof style === 'number')\n            {\n                // #if _DEBUG\n                deprecation(v8_0_0, 'GraphicsContext.fill(color, alpha) is deprecated, use GraphicsContext.fill({ color, alpha }) instead');\n                // #endif\n\n                style = { color: style, alpha };\n            }\n            this._fillStyle = toFillStyle(style, GraphicsContext.defaultFillStyle);\n        }\n\n        // TODO not a fan of the clone!!\n        this.instructions.push({\n            action: 'fill',\n            // TODO copy fill style!\n            data: { style: this.fillStyle, path }\n        });\n\n        this.onUpdate();\n\n        this._initNextPathLocation();\n        this._tick = 0;\n\n        return this;\n    }\n\n    private _initNextPathLocation()\n    {\n        // Reset the _activePath with the last point of the current path\n        const { x, y } = this._activePath.getLastPoint(Point.shared);\n\n        this._activePath.clear();\n        this._activePath.moveTo(x, y);\n    }\n\n    /**\n     * Strokes the current path with the current stroke style. This method can take an optional\n     * FillInput parameter to define the stroke's appearance, including its color, width, and other properties.\n     * @param style - (Optional) The stroke style to apply. Can be defined as a simple color or a more complex style object. If omitted, uses the current stroke style.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public stroke(style?: StrokeInput): this\n    {\n        let path: GraphicsPath;\n\n        const lastInstruction = this.instructions[this.instructions.length - 1];\n\n        if (this._tick === 0 && lastInstruction && lastInstruction.action === 'fill')\n        {\n            path = lastInstruction.data.path;\n        }\n        else\n        {\n            path = this._activePath.clone();\n        }\n\n        if (!path) return this;\n\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        if (style != null)\n        {\n            this._strokeStyle = toStrokeStyle(style, GraphicsContext.defaultStrokeStyle);\n        }\n\n        // TODO not a fan of the clone!!\n        this.instructions.push({\n            action: 'stroke',\n            // TODO copy fill style!\n            data: { style: this.strokeStyle, path }\n        });\n\n        this.onUpdate();\n\n        this._initNextPathLocation();\n        this._tick = 0;\n\n        return this;\n    }\n\n    /**\n     * Applies a cutout to the last drawn shape. This is used to create holes or complex shapes by\n     * subtracting a path from the previously drawn path. If a hole is not completely in a shape, it will\n     * fail to cut correctly!\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public cut(): this\n    {\n        for (let i = 0; i < 2; i++)\n        {\n            const lastInstruction = this.instructions[this.instructions.length - 1 - i];\n\n            const holePath = this._activePath.clone();\n\n            if (lastInstruction)\n            {\n                if (lastInstruction.action === 'stroke' || lastInstruction.action === 'fill')\n                {\n                    if (lastInstruction.data.hole)\n                    {\n                        lastInstruction.data.hole.addPath(holePath);\n                    }\n                    else\n                    {\n                        lastInstruction.data.hole = holePath;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this._initNextPathLocation();\n\n        return this;\n    }\n\n    /**\n     * Adds an arc to the current path, which is centered at (x, y) with the specified radius,\n     * starting and ending angles, and direction.\n     * @param x - The x-coordinate of the arc's center.\n     * @param y - The y-coordinate of the arc's center.\n     * @param radius - The arc's radius.\n     * @param startAngle - The starting angle, in radians.\n     * @param endAngle - The ending angle, in radians.\n     * @param counterclockwise - (Optional) Specifies whether the arc is drawn counterclockwise (true) or clockwise (false). Defaults to false.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        this._activePath.arc(\n            (t.a * x) + (t.c * y) + t.tx,\n            (t.b * x) + (t.d * y) + t.ty,\n            radius,\n            startAngle,\n            endAngle,\n            counterclockwise,\n        );\n\n        return this;\n    }\n\n    /**\n     * Adds an arc to the current path with the given control points and radius, connected to the previous point\n     * by a straight line if necessary.\n     * @param x1 - The x-coordinate of the first control point.\n     * @param y1 - The y-coordinate of the first control point.\n     * @param x2 - The x-coordinate of the second control point.\n     * @param y2 - The y-coordinate of the second control point.\n     * @param radius - The arc's radius.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        this._activePath.arcTo(\n            (t.a * x1) + (t.c * y1) + t.tx,\n            (t.b * x1) + (t.d * y1) + t.ty,\n            (t.a * x2) + (t.c * y2) + t.tx,\n            (t.b * x2) + (t.d * y2) + t.ty,\n            radius,\n        );\n\n        return this;\n    }\n\n    /**\n     * Adds an SVG-style arc to the path, allowing for elliptical arcs based on the SVG spec.\n     * @param rx - The x-radius of the ellipse.\n     * @param ry - The y-radius of the ellipse.\n     * @param xAxisRotation - The rotation of the ellipse's x-axis relative\n     * to the x-axis of the coordinate system, in degrees.\n     * @param largeArcFlag - Determines if the arc should be greater than or less than 180 degrees.\n     * @param sweepFlag - Determines if the arc should be swept in a positive angle direction.\n     * @param x - The x-coordinate of the arc's end point.\n     * @param y - The y-coordinate of the arc's end point.\n     * @returns The instance of the current object for chaining.\n     */\n    public arcToSvg(\n        rx: number, ry: number,\n        xAxisRotation: number,\n        largeArcFlag: number,\n        sweepFlag: number,\n        x: number, y: number\n    ): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        this._activePath.arcToSvg(\n            rx, ry,\n            xAxisRotation, // should we rotate this with transform??\n            largeArcFlag,\n            sweepFlag,\n            (t.a * x) + (t.c * y) + t.tx,\n            (t.b * x) + (t.d * y) + t.ty,\n        );\n\n        return this;\n    }\n\n    /**\n     * Adds a cubic Bezier curve to the path.\n     * It requires three points: the first two are control points and the third one is the end point.\n     * The starting point is the last point in the current path.\n     * @param cp1x - The x-coordinate of the first control point.\n     * @param cp1y - The y-coordinate of the first control point.\n     * @param cp2x - The x-coordinate of the second control point.\n     * @param cp2y - The y-coordinate of the second control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number, smoothness?: number): this\n    {\n        this._tick++;\n\n        // TODO optimize for no transform\n        const t = this._transform;\n\n        this._activePath.bezierCurveTo(\n            (t.a * cp1x) + (t.c * cp1y) + t.tx,\n            (t.b * cp1x) + (t.d * cp1y) + t.ty,\n            (t.a * cp2x) + (t.c * cp2y) + t.tx,\n            (t.b * cp2x) + (t.d * cp2y) + t.ty,\n            (t.a * x) + (t.c * y) + t.tx,\n            (t.b * x) + (t.d * y) + t.ty,\n            smoothness,\n        );\n\n        return this;\n    }\n\n    /**\n     * Closes the current path by drawing a straight line back to the start.\n     * If the shape is already closed or there are no points in the path, this method does nothing.\n     * @returns The instance of the current object for chaining.\n     */\n    public closePath(): this\n    {\n        this._tick++;\n\n        this._activePath?.closePath();\n\n        return this;\n    }\n\n    /**\n     * Draws an ellipse at the specified location and with the given x and y radii.\n     * An optional transformation can be applied, allowing for rotation, scaling, and translation.\n     * @param x - The x-coordinate of the center of the ellipse.\n     * @param y - The y-coordinate of the center of the ellipse.\n     * @param radiusX - The horizontal radius of the ellipse.\n     * @param radiusY - The vertical radius of the ellipse.\n     * @returns The instance of the current object for chaining.\n     */\n    public ellipse(x: number, y: number, radiusX: number, radiusY: number): this\n    {\n        this._tick++;\n\n        this._activePath.ellipse(x, y, radiusX, radiusY, this._transform.clone());\n\n        return this;\n    }\n\n    /**\n     * Draws a circle shape. This method adds a new circle path to the current drawing.\n     * @param x - The x-coordinate of the center of the circle.\n     * @param y - The y-coordinate of the center of the circle.\n     * @param radius - The radius of the circle.\n     * @returns The instance of the current object for chaining.\n     */\n    public circle(x: number, y: number, radius: number): this\n    {\n        this._tick++;\n\n        this._activePath.circle(x, y, radius, this._transform.clone());\n\n        return this;\n    }\n\n    /**\n     * Adds another `GraphicsPath` to this path, optionally applying a transformation.\n     * @param path - The `GraphicsPath` to add.\n     * @returns The instance of the current object for chaining.\n     */\n    public path(path: GraphicsPath): this\n    {\n        this._tick++;\n\n        this._activePath.addPath(path, this._transform.clone());\n\n        return this;\n    }\n\n    /**\n     * Connects the current point to a new point with a straight line. This method updates the current path.\n     * @param x - The x-coordinate of the new point to connect to.\n     * @param y - The y-coordinate of the new point to connect to.\n     * @returns The instance of the current object for chaining.\n     */\n    public lineTo(x: number, y: number): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        this._activePath.lineTo(\n            (t.a * x) + (t.c * y) + t.tx,\n            (t.b * x) + (t.d * y) + t.ty\n        );\n\n        return this;\n    }\n\n    /**\n     * Sets the starting point for a new sub-path. Any subsequent drawing commands are considered part of this path.\n     * @param x - The x-coordinate for the starting point.\n     * @param y - The y-coordinate for the starting point.\n     * @returns The instance of the current object for chaining.\n     */\n    public moveTo(x: number, y: number): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        const instructions = this._activePath.instructions;\n\n        const transformedX = (t.a * x) + (t.c * y) + t.tx;\n        const transformedY = (t.b * x) + (t.d * y) + t.ty;\n\n        if (instructions.length === 1 && instructions[0].action === 'moveTo')\n        {\n            instructions[0].data[0] = transformedX;\n            instructions[0].data[1] = transformedY;\n\n            return this;\n        }\n        this._activePath.moveTo(\n            transformedX,\n            transformedY\n        );\n\n        return this;\n    }\n\n    /**\n     * Adds a quadratic curve to the path. It requires two points: the control point and the end point.\n     * The starting point is the last point in the current path.\n     * @param cpx - The x-coordinate of the control point.\n     * @param cpy - The y-coordinate of the control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public quadraticCurveTo(cpx: number, cpy: number, x: number, y: number, smoothness?: number): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        this._activePath.quadraticCurveTo(\n            (t.a * cpx) + (t.c * cpy) + t.tx,\n            (t.b * cpx) + (t.d * cpy) + t.ty,\n            (t.a * x) + (t.c * y) + t.tx,\n            (t.b * x) + (t.d * y) + t.ty,\n            smoothness,\n        );\n\n        return this;\n    }\n\n    /**\n     * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @returns The instance of the current object for chaining.\n     */\n    public rect(x: number, y: number, w: number, h: number): this\n    {\n        this._tick++;\n\n        this._activePath.rect(x, y, w, h, this._transform.clone());\n\n        return this;\n    }\n\n    /**\n     * Draws a rectangle with rounded corners.\n     * The corner radius can be specified to determine how rounded the corners should be.\n     * An optional transformation can be applied, which allows for rotation, scaling, and translation of the rectangle.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @param radius - The radius of the rectangle's corners. If not specified, corners will be sharp.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundRect(x: number, y: number, w: number, h: number, radius?: number): this\n    {\n        this._tick++;\n\n        this._activePath.roundRect(x, y, w, h, radius, this._transform.clone());\n\n        return this;\n    }\n\n    /**\n     * Draws a polygon shape by specifying a sequence of points. This method allows for the creation of complex polygons,\n     * which can be both open and closed. An optional transformation can be applied, enabling the polygon to be scaled,\n     * rotated, or translated as needed.\n     * @param points - An array of numbers, or an array of PointData objects eg [{x,y}, {x,y}, {x,y}]\n     * representing the x and y coordinates, of the polygon's vertices, in sequence.\n     * @param close - A boolean indicating whether to close the polygon path. True by default.\n     */\n    public poly(points: number[] | PointData[], close?: boolean): this\n    {\n        this._tick++;\n\n        this._activePath.poly(points, close, this._transform.clone());\n\n        return this;\n    }\n\n    /**\n     * Draws a regular polygon with a specified number of sides. All sides and angles are equal.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n     * @returns The instance of the current object for chaining.\n     */\n    public regularPoly(x: number, y: number, radius: number, sides: number, rotation = 0, transform?: Matrix): this\n    {\n        this._tick++;\n        this._activePath.regularPoly(x, y, radius, sides, rotation, transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a polygon with rounded corners.\n     * Similar to `regularPoly` but with the ability to round the corners of the polygon.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param corner - The radius of the rounding of the corners.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundPoly(x: number, y: number, radius: number, sides: number, corner: number, rotation?: number): this\n    {\n        this._tick++;\n        this._activePath.roundPoly(x, y, radius, sides, corner, rotation);\n\n        return this;\n    }\n\n    /**\n     * Draws a shape with rounded corners. This function supports custom radius for each corner of the shape.\n     * Optionally, corners can be rounded using a quadratic curve instead of an arc, providing a different aesthetic.\n     * @param points - An array of `RoundedPoint` representing the corners of the shape to draw.\n     * A minimum of 3 points is required.\n     * @param radius - The default radius for the corners.\n     * This radius is applied to all corners unless overridden in `points`.\n     * @param useQuadratic - If set to true, rounded corners are drawn using a quadraticCurve\n     *  method instead of an arc method. Defaults to false.\n     * @param smoothness - Specifies the smoothness of the curve when `useQuadratic` is true.\n     * Higher values make the curve smoother.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundShape(points: RoundedPoint[], radius: number, useQuadratic?: boolean, smoothness?: number): this\n    {\n        this._tick++;\n        this._activePath.roundShape(points, radius, useQuadratic, smoothness);\n\n        return this;\n    }\n\n    /**\n     * Draw Rectangle with fillet corners. This is much like rounded rectangle\n     * however it support negative numbers as well for the corner radius.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param fillet - accept negative or positive values\n     */\n    public filletRect(x: number, y: number, width: number, height: number, fillet: number): this\n    {\n        this._tick++;\n        this._activePath.filletRect(x, y, width, height, fillet);\n\n        return this;\n    }\n\n    /**\n     * Draw Rectangle with chamfer corners. These are angled corners.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param chamfer - non-zero real number, size of corner cutout\n     * @param transform\n     */\n    public chamferRect(x: number, y: number, width: number, height: number, chamfer: number, transform?: Matrix): this\n    {\n        this._tick++;\n        this._activePath.chamferRect(x, y, width, height, chamfer, transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a star shape centered at a specified location. This method allows for the creation\n     *  of stars with a variable number of points, outer radius, optional inner radius, and rotation.\n     * The star is drawn as a closed polygon with alternating outer and inner vertices to create the star's points.\n     * An optional transformation can be applied to scale, rotate, or translate the star as needed.\n     * @param x - The x-coordinate of the center of the star.\n     * @param y - The y-coordinate of the center of the star.\n     * @param points - The number of points of the star.\n     * @param radius - The outer radius of the star (distance from the center to the outer points).\n     * @param innerRadius - Optional. The inner radius of the star\n     * (distance from the center to the inner points between the outer points).\n     * If not provided, defaults to half of the `radius`.\n     * @param rotation - Optional. The rotation of the star in radians, where 0 is aligned with the y-axis.\n     * Defaults to 0, meaning one point is directly upward.\n     * @returns The instance of the current object for chaining further drawing commands.\n     */\n    public star(x: number, y: number, points: number, radius: number, innerRadius = 0, rotation = 0): this\n    {\n        this._tick++;\n\n        this._activePath.star(x, y, points, radius, innerRadius, rotation, this._transform.clone());\n\n        return this;\n    }\n\n    /**\n     * Parses and renders an SVG string into the graphics context. This allows for complex shapes and paths\n     * defined in SVG format to be drawn within the graphics context.\n     * @param svg - The SVG string to be parsed and rendered.\n     */\n    public svg(svg: string): this\n    {\n        this._tick++;\n\n        SVGParser(svg, this);\n\n        return this;\n    }\n\n    /**\n     * Restores the most recently saved graphics state by popping the top of the graphics state stack.\n     * This includes transformations, fill styles, and stroke styles.\n     */\n    public restore(): this\n    {\n        const state = this._stateStack.pop();\n\n        if (state)\n        {\n            this._transform = state.transform;\n            this._fillStyle = state.fillStyle;\n            this._strokeStyle = state.strokeStyle;\n        }\n\n        return this;\n    }\n\n    /** Saves the current graphics state, including transformations, fill styles, and stroke styles, onto a stack. */\n    public save(): this\n    {\n        this._stateStack.push({\n            transform: this._transform.clone(),\n            fillStyle: { ...this._fillStyle },\n            strokeStyle: { ...this._strokeStyle },\n        });\n\n        return this;\n    }\n\n    /**\n     * Returns the current transformation matrix of the graphics context.\n     * @returns The current transformation matrix.\n     */\n    public getTransform(): Matrix\n    {\n        return this._transform;\n    }\n\n    /**\n     * Resets the current transformation matrix to the identity matrix, effectively removing any transformations (rotation, scaling, translation) previously applied.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public resetTransform(): this\n    {\n        this._transform.identity();\n\n        return this;\n    }\n\n    /**\n     * Applies a rotation transformation to the graphics context around the current origin.\n     * @param angle - The angle of rotation in radians.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public rotate(angle: number): this\n    {\n        this._transform.rotate(angle);\n\n        return this;\n    }\n\n    /**\n     * Applies a scaling transformation to the graphics context, scaling drawings by x horizontally and by y vertically.\n     * @param x - The scale factor in the horizontal direction.\n     * @param y - (Optional) The scale factor in the vertical direction. If not specified, the x value is used for both directions.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public scale(x: number, y: number = x): this\n    {\n        this._transform.scale(x, y);\n\n        return this;\n    }\n\n    /**\n     * Sets the current transformation matrix of the graphics context to the specified matrix or values.\n     * This replaces the current transformation matrix.\n     * @param a - The value for the a property of the matrix, or a Matrix object to use directly.\n     * @param b - The value for the b property of the matrix.\n     * @param c - The value for the c property of the matrix.\n     * @param d - The value for the d property of the matrix.\n     * @param dx - The value for the tx (translate x) property of the matrix.\n     * @param dy - The value for the ty (translate y) property of the matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setTransform(transform: Matrix): this;\n    public setTransform(a: number, b: number, c: number, d: number, dx: number, dy: number): this;\n    public setTransform(a: number | Matrix, b?: number, c?: number, d?: number, dx?: number, dy?: number): this\n    {\n        if (a instanceof Matrix)\n        {\n            this._transform.set(a.a, a.b, a.c, a.d, a.tx, a.ty);\n\n            return this;\n        }\n\n        this._transform.set(a, b, c, d, dx, dy);\n\n        return this;\n    }\n\n    /**\n     * Applies the specified transformation matrix to the current graphics context by multiplying the current matrix with the specified matrix.\n     * @param a - The value for the a property of the matrix, or a Matrix object to use directly.\n     * @param b - The value for the b property of the matrix.\n     * @param c - The value for the c property of the matrix.\n     * @param d - The value for the d property of the matrix.\n     * @param dx - The value for the tx (translate x) property of the matrix.\n     * @param dy - The value for the ty (translate y) property of the matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public transform(transform: Matrix): this;\n    public transform(a: number, b: number, c: number, d: number, dx: number, dy: number): this;\n    public transform(a: number | Matrix, b?: number, c?: number, d?: number, dx?: number, dy?: number): this\n    {\n        if (a instanceof Matrix)\n        {\n            this._transform.append(a);\n\n            return this;\n        }\n\n        tempMatrix.set(a, b, c, d, dx, dy);\n        this._transform.append(tempMatrix);\n\n        return this;\n    }\n\n    /**\n     * Applies a translation transformation to the graphics context, moving the origin by the specified amounts.\n     * @param x - The amount to translate in the horizontal direction.\n     * @param y - (Optional) The amount to translate in the vertical direction. If not specified, the x value is used for both directions.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public translate(x: number, y: number = x): this\n    {\n        this._transform.translate(x, y);\n\n        return this;\n    }\n\n    /**\n     * Clears all drawing commands from the graphics context, effectively resetting it. This includes clearing the path,\n     * and optionally resetting transformations to the identity matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public clear(): this\n    {\n        this._activePath.clear();\n        this.instructions.length = 0;\n        this.resetTransform();\n\n        this.onUpdate();\n\n        return this;\n    }\n\n    protected onUpdate(): void\n    {\n        if (this.dirty) return;\n\n        this.emit('update', this, 0x10);\n        this.dirty = true;\n        this._boundsDirty = true;\n    }\n\n    /** The bounds of the graphic shape. */\n    get bounds(): Bounds\n    {\n        if (!this._boundsDirty) return this._bounds;\n\n        // TODO switch to idy dirty with tick..\n        const bounds = this._bounds;\n\n        bounds.clear();\n\n        for (let i = 0; i < this.instructions.length; i++)\n        {\n            const instruction = this.instructions[i];\n            const action = instruction.action;\n\n            if (action === 'fill')\n            {\n                const data = instruction.data as FillInstruction['data'];\n\n                bounds.addBounds(data.path.bounds);\n            }\n            else if (action === 'texture')\n            {\n                const data = instruction.data as TextureInstruction['data'];\n\n                bounds.addFrame(data.dx, data.dy, data.dx + data.dw, data.dy + data.dh, data.transform);\n            }\n            if (action === 'stroke')\n            {\n                const data = instruction.data as StrokeInstruction['data'];\n\n                const alignment = data.style.alignment;\n\n                const padding = (data.style.width * (1 - alignment));\n\n                const _bounds = data.path.bounds;\n\n                bounds.addFrame(\n                    _bounds.minX - padding,\n                    _bounds.minY - padding,\n                    _bounds.maxX + padding,\n                    _bounds.maxY + padding\n                );\n            }\n        }\n\n        return bounds;\n    }\n\n    /**\n     * Check to see if a point is contained within this geometry.\n     * @param point - Point to check if it's contained.\n     * @returns {boolean} `true` if the point is contained within geometry.\n     */\n    public containsPoint(point: PointData): boolean\n    {\n        // early out if the bounding box is not hit\n        if (!this.bounds.containsPoint(point.x, point.y)) return false;\n\n        const instructions = this.instructions;\n        let hasHit = false;\n\n        for (let k = 0; k < instructions.length; k++)\n        {\n            const instruction = instructions[k];\n\n            const data = instruction.data as FillInstruction['data'];\n            const path = data.path;\n\n            if (!instruction.action || !path) continue;\n\n            const style = data.style;\n            const shapes = path.shapePath.shapePrimitives;\n\n            for (let i = 0; i < shapes.length; i++)\n            {\n                const shape = shapes[i].shape;\n\n                if (!style || !shape) continue;\n\n                const transform = shapes[i].transform;\n\n                const transformedPoint = transform ? transform.applyInverse(point, tmpPoint) : point;\n\n                if (instruction.action === 'fill')\n                {\n                    hasHit = shape.contains(transformedPoint.x, transformedPoint.y);\n                }\n                else\n                {\n                    hasHit = shape.strokeContains(transformedPoint.x, transformedPoint.y, (style as ConvertedStrokeStyle).width);\n                }\n\n                const holes = data.hole;\n\n                if (holes)\n                {\n                    const holeShapes = holes.shapePath?.shapePrimitives;\n\n                    if (holeShapes)\n                    {\n                        for (let j = 0; j < holeShapes.length; j++)\n                        {\n                            if (holeShapes[j].shape.contains(transformedPoint.x, transformedPoint.y))\n                            {\n                                hasHit = false;\n                            }\n                        }\n                    }\n                }\n\n                if (hasHit)\n                {\n                    return true;\n                }\n            }\n        }\n\n        return hasHit;\n    }\n\n    /**\n     * Destroys the GraphicsData object.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the fill/stroke style?\n     * @param {boolean} [options.textureSource=false] - Should it destroy the texture source of the fill/stroke style?\n     */\n    public destroy(options: TypeOrBool<TextureDestroyOptions> = false): void\n    {\n        this._stateStack.length = 0;\n        this._transform = null;\n\n        this.emit('destroy', this);\n        this.removeAllListeners();\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyTextureSource = typeof options === 'boolean' ? options : options?.textureSource;\n\n            if (this._fillStyle.texture)\n            {\n                this._fillStyle.texture.destroy(destroyTextureSource);\n            }\n\n            if (this._strokeStyle.texture)\n            {\n                this._strokeStyle.texture.destroy(destroyTextureSource);\n            }\n        }\n\n        this._fillStyle = null;\n        this._strokeStyle = null;\n\n        this.instructions = null;\n        this._activePath = null;\n        this._bounds = null;\n        this._stateStack = null;\n        this.customShader = null;\n        this._transform = null;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 12748, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12754, "column": 0}, "map": {"version":3,"file":"generateTextStyleKey.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/utils/generateTextStyleKey.ts"],"sourcesContent":["import { Color } from '../../../color/Color';\n\nimport type { ConvertedFillStyle, ConvertedStrokeStyle } from '../../graphics/shared/FillTypes';\nimport type { HTMLTextStyle } from '../../text-html/HTMLTextStyle';\nimport type { TextStyle } from '../TextStyle';\n\nconst valuesToIterateForKeys: Partial<keyof TextStyle | keyof HTMLTextStyle>[] = [\n    'align',\n    'breakWords',\n    'cssOverrides',\n    'fontVariant',\n    'fontWeight',\n    'leading',\n    'letterSpacing',\n    'lineHeight',\n    'padding',\n    'textBaseline',\n    'trim',\n    'whiteSpace',\n    'wordWrap',\n    'wordWrapWidth',\n    'fontFamily',\n    'fontStyle',\n    'fontSize',\n] as const;\n\n/**\n * Generates a unique key for the text style.\n * @param style - The style to generate a key for.\n * @returns the key for the style.\n */\nexport function generateTextStyleKey(style: TextStyle): string\n{\n    const key = [];\n\n    let index = 0;\n\n    for (let i = 0; i < valuesToIterateForKeys.length; i++)\n    {\n        const prop = `_${valuesToIterateForKeys[i]}`;\n\n        key[index++] = style[prop as keyof typeof style];\n    }\n\n    index = addFillStyleKey(style._fill, key as string[], index);\n    index = addStokeStyleKey(style._stroke, key as string[], index);\n    index = addDropShadowKey(style.dropShadow, key as string[], index);\n\n    return key.join('-');\n}\n\nfunction addFillStyleKey(fillStyle: ConvertedFillStyle, key: (number | string)[], index: number)\n{\n    if (!fillStyle) return index;\n\n    key[index++] = fillStyle.color;\n    key[index++] = fillStyle.alpha;\n    key[index++] = fillStyle.fill?.styleKey;\n\n    return index;\n}\n\nfunction addStokeStyleKey(strokeStyle: ConvertedStrokeStyle, key: (number | string)[], index: number)\n{\n    if (!strokeStyle) return index;\n\n    index = addFillStyleKey(strokeStyle, key, index);\n\n    key[index++] = strokeStyle.width;\n    key[index++] = strokeStyle.alignment;\n    key[index++] = strokeStyle.cap;\n    key[index++] = strokeStyle.join;\n    key[index++] = strokeStyle.miterLimit;\n\n    return index;\n}\n\nfunction addDropShadowKey(dropShadow: TextStyle['dropShadow'], key: (number | string)[], index: number)\n{\n    if (!dropShadow) return index;\n\n    key[index++] = dropShadow.alpha;\n    key[index++] = dropShadow.angle;\n    key[index++] = dropShadow.blur;\n    key[index++] = dropShadow.distance;\n    key[index++] = Color.shared.setValue(dropShadow.color).toNumber();\n\n    return index;\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 12819, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12825, "column": 0}, "map": {"version":3,"file":"TextStyle.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/TextStyle.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { Color, type ColorSource } from '../../color/Color';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { FillGradient } from '../graphics/shared/fill/FillGradient';\nimport { FillPattern } from '../graphics/shared/fill/FillPattern';\nimport { GraphicsContext } from '../graphics/shared/GraphicsContext';\nimport {\n    toFillStyle,\n    toStrokeStyle\n} from '../graphics/shared/utils/convertFillInputToFillStyle';\nimport { generateTextStyleKey } from './utils/generateTextStyleKey';\n\nimport type { TextureDestroyOptions, TypeOrBool } from '../container/destroyTypes';\nimport type {\n    ConvertedFillStyle,\n    ConvertedStrokeStyle,\n    FillInput,\n    FillStyle,\n    StrokeInput,\n    StrokeStyle\n} from '../graphics/shared/FillTypes';\n\nexport type TextStyleAlign = 'left' | 'center' | 'right' | 'justify';\nexport type TextStyleFill = string | string[] | number | number[] | CanvasGradient | CanvasPattern;\nexport type TextStyleFontStyle = 'normal' | 'italic' | 'oblique';\nexport type TextStyleFontVariant = 'normal' | 'small-caps';\n// eslint-disable-next-line max-len\nexport type TextStyleFontWeight = 'normal' | 'bold' | 'bolder' | 'lighter' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';\nexport type TextStyleLineJoin = 'miter' | 'round' | 'bevel';\nexport type TextStyleTextBaseline = 'alphabetic' | 'top' | 'hanging' | 'middle' | 'ideographic' | 'bottom';\nexport type TextStyleWhiteSpace = 'normal' | 'pre' | 'pre-line';\n\n/**\n * A collection of text related classes.\n * @namespace text\n */\n\n/**\n * A drop shadow effect.\n * @memberof text\n */\nexport type TextDropShadow = {\n    /** Set alpha for the drop shadow  */\n    alpha: number;\n    /** Set a angle of the drop shadow */\n    angle: number;\n    /** Set a shadow blur radius */\n    blur: number;\n    /** A fill style to be used on the  e.g., 'red', '#00FF00' */\n    color: ColorSource;\n    /** Set a distance of the drop shadow */\n    distance: number;\n};\n\n/**\n * Constructor options used for `TextStyle` instances.\n * ```js\n * const textStyle = new TextStyle({\n *    fontSize: 12,\n *    fill: 'black',\n * });\n * ```\n * @see {@link text.TextStyle}\n * @memberof text\n */\nexport interface TextStyleOptions\n{\n    /**\n     * Alignment for multiline text, does not affect single line text\n     * @type {'left'|'center'|'right'|'justify'}\n     */\n    align?: TextStyleAlign;\n    /** Indicates if lines can be wrapped within words, it needs `wordWrap` to be set to `true` */\n    breakWords?: boolean;\n    /** Set a drop shadow for the text */\n    dropShadow?: boolean | Partial<TextDropShadow>;\n    /**\n     * A canvas fillstyle that will be used on the text e.g., 'red', '#00FF00'.\n     * Can be an array to create a gradient, e.g., `['#000000','#FFFFFF']`\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    fill?: FillInput;\n    /** The font family, can be a single font name, or a list of names where the first is the preferred font. */\n    fontFamily?: string | string[];\n    /** The font size (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em') */\n    fontSize?: number | string;\n    /**\n     * The font style.\n     * @type {'normal'|'italic'|'oblique'}\n     */\n    fontStyle?: TextStyleFontStyle;\n    /**\n     * The font variant.\n     * @type {'normal'|'small-caps'}\n     */\n    fontVariant?: TextStyleFontVariant;\n    /**\n     * The font weight.\n     * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n     */\n    fontWeight?: TextStyleFontWeight;\n    /** The height of the line, a number that represents the vertical space that a letter uses. */\n    leading?: number;\n    /** The amount of spacing between letters, default is 0 */\n    letterSpacing?: number;\n    /** The line height, a number that represents the vertical space that a letter uses */\n    lineHeight?: number;\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from\n     * happening by adding padding to all sides of the text.\n     */\n    padding?: number;\n    /** A canvas fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00' */\n    stroke?: StrokeInput;\n    /**\n     * The baseline of the text that is rendered.\n     * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n     */\n    textBaseline?: TextStyleTextBaseline;\n    trim?: boolean,\n    /**\n     * Determines whether newlines & spaces are collapsed or preserved \"normal\"\n     * (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve,\n     * collapse). It needs wordWrap to be set to true.\n     * @type {'normal'|'pre'|'pre-line'}\n     */\n    whiteSpace?: TextStyleWhiteSpace;\n    /** Indicates if word wrap should be used */\n    wordWrap?: boolean;\n    /** The width at which text will wrap, it needs wordWrap to be set to true */\n    wordWrapWidth?: number;\n}\n\n/**\n * A TextStyle Object contains information to decorate a Text objects.\n *\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n * @memberof text\n * @example\n * import { TextStyle } from 'pixi.js';\n * const style = new TextStyle({\n *   fontFamily: ['Helvetica', 'Arial', 'sans-serif'],\n *   fontSize: 36,\n * });\n */\nexport class TextStyle extends EventEmitter<{\n    update: TextDropShadow\n}>\n{\n    /** The default drop shadow settings */\n    public static defaultDropShadow: TextDropShadow = {\n        /** Set alpha for the drop shadow */\n        alpha: 1,\n        /** Set a angle of the drop shadow */\n        angle: Math.PI / 6,\n        /** Set a shadow blur radius */\n        blur: 0,\n        /** A fill style to be used on the  e.g., 'red', '#00FF00' */\n        color: 'black',\n        /** Set a distance of the drop shadow */\n        distance: 5,\n    };\n\n    /** The default text style settings */\n    public static defaultTextStyle: TextStyleOptions = {\n        /**\n         * See {@link TextStyle.align}\n         * @type {'left'|'center'|'right'|'justify'}\n         */\n        align: 'left',\n        /** See {@link TextStyle.breakWords} */\n        breakWords: false,\n        /** See {@link TextStyle.dropShadow} */\n        dropShadow:  null,\n        /**\n         * See {@link TextStyle.fill}\n         * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n         */\n        fill: 'black',\n        /**\n         * See {@link TextStyle.fontFamily}\n         * @type {string|string[]}\n         */\n        fontFamily: 'Arial',\n        /**\n         * See {@link TextStyle.fontSize}\n         * @type {number|string}\n         */\n        fontSize: 26,\n        /**\n         * See {@link TextStyle.fontStyle}\n         * @type {'normal'|'italic'|'oblique'}\n         */\n        fontStyle: 'normal',\n        /**\n         * See {@link TextStyle.fontVariant}\n         * @type {'normal'|'small-caps'}\n         */\n        fontVariant: 'normal',\n        /**\n         * See {@link TextStyle.fontWeight}\n         * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n         */\n        fontWeight: 'normal',\n        /** See {@link TextStyle.leading} */\n        leading: 0,\n        /** See {@link TextStyle.letterSpacing} */\n        letterSpacing: 0,\n        /** See {@link TextStyle.lineHeight} */\n        lineHeight: 0,\n        /** See {@link TextStyle.padding} */\n        padding: 0,\n        /**\n         * See {@link TextStyle.stroke}\n         * @type {string|number}\n         */\n        stroke: null,\n        /**\n         * See {@link TextStyle.textBaseline}\n         * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n         */\n        textBaseline: 'alphabetic',\n        /** See {@link TextStyle.trim} */\n        trim: false,\n        /**\n         * See {@link TextStyle.whiteSpace}\n         * @type {'normal'|'pre'|'pre-line'}\n         */\n        whiteSpace: 'pre',\n        /** See {@link TextStyle.wordWrap} */\n        wordWrap: false,\n        /** See {@link TextStyle.wordWrapWidth} */\n        wordWrapWidth: 100,\n    };\n\n    // colors!!\n    public _fill: ConvertedFillStyle;\n    private _originalFill: FillInput;\n\n    public _stroke: ConvertedStrokeStyle;\n    private _originalStroke: StrokeInput;\n\n    private _dropShadow: TextDropShadow;\n\n    private _fontFamily: string | string[];\n    private _fontSize: number;\n    private _fontStyle: TextStyleFontStyle;\n    private _fontVariant: TextStyleFontVariant;\n    private _fontWeight: TextStyleFontWeight;\n\n    private _breakWords: boolean;\n    private _align: TextStyleAlign;\n    private _leading: number;\n    private _letterSpacing: number;\n    private _lineHeight: number;\n\n    private _textBaseline: TextStyleTextBaseline;\n    private _whiteSpace: TextStyleWhiteSpace;\n    private _wordWrap: boolean;\n    private _wordWrapWidth: number;\n\n    private _padding: number;\n\n    protected _styleKey: string;\n    private _trim: boolean;\n\n    constructor(style: Partial<TextStyleOptions> = {})\n    {\n        super();\n\n        convertV7Tov8Style(style);\n\n        const fullStyle = { ...TextStyle.defaultTextStyle, ...style };\n\n        for (const key in fullStyle)\n        {\n            const thisKey = key as keyof typeof this;\n\n            this[thisKey] = fullStyle[key as keyof TextStyleOptions] as any;\n        }\n\n        this.update();\n    }\n\n    /**\n     * Alignment for multiline text, does not affect single line text.\n     * @member {'left'|'center'|'right'|'justify'}\n     */\n    get align(): TextStyleAlign { return this._align; }\n    set align(value: TextStyleAlign) { this._align = value; this.update(); }\n    /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n    get breakWords(): boolean { return this._breakWords; }\n    set breakWords(value: boolean) { this._breakWords = value; this.update(); }\n    /** Set a drop shadow for the text. */\n    get dropShadow(): TextDropShadow { return this._dropShadow; }\n    set dropShadow(value: boolean | TextDropShadow)\n    {\n        if (value !== null && typeof value === 'object')\n        {\n            this._dropShadow = this._createProxy({ ...TextStyle.defaultDropShadow, ...value });\n        }\n        else\n        {\n            this._dropShadow = value ? this._createProxy({ ...TextStyle.defaultDropShadow }) : null;\n        }\n\n        this.update();\n    }\n    /** The font family, can be a single font name, or a list of names where the first is the preferred font. */\n    get fontFamily(): string | string[] { return this._fontFamily; }\n    set fontFamily(value: string | string[]) { this._fontFamily = value; this.update(); }\n    /** The font size (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em') */\n    get fontSize(): number { return this._fontSize; }\n    set fontSize(value: string | number)\n    {\n        if (typeof value === 'string')\n        {\n            // eg '34px' to number\n            this._fontSize = parseInt(value as string, 10);\n        }\n        else\n        {\n            this._fontSize = value as number;\n        }\n        this.update();\n    }\n    /**\n     * The font style.\n     * @member {'normal'|'italic'|'oblique'}\n     */\n    get fontStyle(): TextStyleFontStyle { return this._fontStyle; }\n    set fontStyle(value: TextStyleFontStyle)\n    {\n        this._fontStyle = value.toLowerCase() as TextStyleFontStyle;\n        this.update();\n    }\n    /**\n     * The font variant.\n     * @member {'normal'|'small-caps'}\n     */\n    get fontVariant(): TextStyleFontVariant { return this._fontVariant; }\n    set fontVariant(value: TextStyleFontVariant) { this._fontVariant = value; this.update(); }\n    /**\n     * The font weight.\n     * @member {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n     */\n    get fontWeight(): TextStyleFontWeight { return this._fontWeight; }\n    set fontWeight(value: TextStyleFontWeight) { this._fontWeight = value; this.update(); }\n    /** The space between lines. */\n    get leading(): number { return this._leading; }\n    set leading(value: number) { this._leading = value; this.update(); }\n    /** The amount of spacing between letters, default is 0. */\n    get letterSpacing(): number { return this._letterSpacing; }\n    set letterSpacing(value: number) { this._letterSpacing = value; this.update(); }\n    /** The line height, a number that represents the vertical space that a letter uses. */\n    get lineHeight(): number { return this._lineHeight; }\n    set lineHeight(value: number) { this._lineHeight = value; this.update(); }\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     */\n    get padding(): number { return this._padding; }\n    set padding(value: number) { this._padding = value; this.update(); }\n\n    /** Trim transparent borders. This is an expensive operation so only use this if you have to! */\n    get trim(): boolean { return this._trim; }\n    set trim(value: boolean) { this._trim = value; this.update(); }\n    /**\n     * The baseline of the text that is rendered.\n     * @member {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n     */\n    get textBaseline(): TextStyleTextBaseline { return this._textBaseline; }\n    set textBaseline(value: TextStyleTextBaseline) { this._textBaseline = value; this.update(); }\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     * @member {'normal'|'pre'|'pre-line'}\n     */\n    get whiteSpace(): TextStyleWhiteSpace { return this._whiteSpace; }\n    set whiteSpace(value: TextStyleWhiteSpace) { this._whiteSpace = value; this.update(); }\n    /** Indicates if word wrap should be used. */\n    get wordWrap(): boolean { return this._wordWrap; }\n    set wordWrap(value: boolean) { this._wordWrap = value; this.update(); }\n    /** The width at which text will wrap, it needs wordWrap to be set to true. */\n    get wordWrapWidth(): number { return this._wordWrapWidth; }\n    set wordWrapWidth(value: number) { this._wordWrapWidth = value; this.update(); }\n\n    /** A fillstyle that will be used on the text e.g., 'red', '#00FF00'. */\n    get fill(): FillInput\n    {\n        return this._originalFill;\n    }\n\n    set fill(value: FillInput)\n    {\n        if (value === this._originalFill) return;\n\n        this._originalFill = value;\n\n        if (this._isFillStyle(value))\n        {\n            this._originalFill = this._createProxy({ ...GraphicsContext.defaultFillStyle, ...value }, () =>\n            {\n                this._fill = toFillStyle(\n                    { ...this._originalFill as FillStyle },\n                    GraphicsContext.defaultFillStyle\n                );\n            });\n        }\n\n        this._fill = toFillStyle(\n            value === 0x0 ? 'black' : value,\n            GraphicsContext.defaultFillStyle\n        );\n        this.update();\n    }\n\n    /** A fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00'. */\n    get stroke(): StrokeInput\n    {\n        return this._originalStroke;\n    }\n\n    set stroke(value: StrokeInput)\n    {\n        if (value === this._originalStroke) return;\n\n        this._originalStroke = value;\n\n        if (this._isFillStyle(value))\n        {\n            this._originalStroke = this._createProxy({ ...GraphicsContext.defaultStrokeStyle, ...value }, () =>\n            {\n                this._stroke = toStrokeStyle(\n                    { ...this._originalStroke as StrokeStyle },\n                    GraphicsContext.defaultStrokeStyle\n                );\n            });\n        }\n\n        this._stroke = toStrokeStyle(value, GraphicsContext.defaultStrokeStyle);\n        this.update();\n    }\n\n    protected _generateKey(): string\n    {\n        this._styleKey = generateTextStyleKey(this);\n\n        return this._styleKey;\n    }\n\n    public update()\n    {\n        this._styleKey = null;\n        this.emit('update', this);\n    }\n\n    /** Resets all properties to the default values */\n    public reset()\n    {\n        const defaultStyle = TextStyle.defaultTextStyle;\n\n        for (const key in defaultStyle)\n        {\n            this[key as keyof typeof this] = defaultStyle[key as keyof TextStyleOptions] as any;\n        }\n    }\n\n    get styleKey()\n    {\n        return this._styleKey || this._generateKey();\n    }\n\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * @returns New cloned TextStyle object\n     */\n    public clone(): TextStyle\n    {\n        return new TextStyle({\n            align: this.align,\n            breakWords: this.breakWords,\n            dropShadow: this._dropShadow ? { ...this._dropShadow } : null,\n            fill: this._fill,\n            fontFamily: this.fontFamily,\n            fontSize: this.fontSize,\n            fontStyle: this.fontStyle,\n            fontVariant: this.fontVariant,\n            fontWeight: this.fontWeight,\n            leading: this.leading,\n            letterSpacing: this.letterSpacing,\n            lineHeight: this.lineHeight,\n            padding: this.padding,\n            stroke: this._stroke,\n            textBaseline: this.textBaseline,\n            whiteSpace: this.whiteSpace,\n            wordWrap: this.wordWrap,\n            wordWrapWidth: this.wordWrapWidth,\n        });\n    }\n\n    /**\n     * Destroys this text style.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.texture=false] - Should it destroy the texture of the this style\n     * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the this style\n     */\n    public destroy(options: TypeOrBool<TextureDestroyOptions> = false)\n    {\n        this.removeAllListeners();\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyTextureSource = typeof options === 'boolean' ? options : options?.textureSource;\n\n            if (this._fill?.texture)\n            {\n                this._fill.texture.destroy(destroyTextureSource);\n            }\n\n            if ((this._originalFill as FillStyle)?.texture)\n            {\n                (this._originalFill as FillStyle).texture.destroy(destroyTextureSource);\n            }\n\n            if (this._stroke?.texture)\n            {\n                this._stroke.texture.destroy(destroyTextureSource);\n            }\n\n            if ((this._originalStroke as FillStyle)?.texture)\n            {\n                (this._originalStroke as FillStyle).texture.destroy(destroyTextureSource);\n            }\n        }\n\n        this._fill = null;\n        this._stroke = null;\n        this.dropShadow = null;\n        this._originalStroke = null;\n        this._originalFill = null;\n    }\n\n    private _createProxy<T extends object>(value: T, cb?: (property: string, newValue: any) => void): T\n    {\n        return new Proxy<T>(value, {\n            set: (target, property, newValue) =>\n            {\n                target[property as keyof T] = newValue;\n                cb?.(property as string, newValue);\n                this.update();\n\n                return true;\n            }\n        });\n    }\n\n    private _isFillStyle(value: FillInput): value is FillStyle\n    {\n        return ((value ?? null) !== null\n            && !(Color.isColorLike(value) || value instanceof FillGradient || value instanceof FillPattern));\n    }\n}\n\nfunction convertV7Tov8Style(style: TextStyleOptions)\n{\n    const oldStyle = style as TextStyleOptions & {\n        dropShadowAlpha?: number;\n        dropShadowAngle?: number;\n        dropShadowBlur?: number;\n        dropShadowColor?: number;\n        dropShadowDistance?: number;\n        fillGradientStops?: number[];\n        strokeThickness?: number;\n    };\n\n    if (typeof oldStyle.dropShadow === 'boolean' && oldStyle.dropShadow)\n    {\n        const defaults = TextStyle.defaultDropShadow;\n\n        style.dropShadow = {\n            alpha: oldStyle.dropShadowAlpha ?? defaults.alpha,\n            angle: oldStyle.dropShadowAngle ?? defaults.angle,\n            blur: oldStyle.dropShadowBlur ?? defaults.blur,\n            color: oldStyle.dropShadowColor ?? defaults.color,\n            distance:   oldStyle.dropShadowDistance ?? defaults.distance,\n        };\n    }\n\n    if (oldStyle.strokeThickness !== undefined)\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'strokeThickness is now a part of stroke');\n        // #endif\n\n        const color = oldStyle.stroke;\n        let obj: FillStyle = {};\n\n        // handles stroke: 0x0, stroke: { r: 0, g: 0, b: 0, a: 0 } stroke: new Color(0x0)\n        if (Color.isColorLike(color as ColorSource))\n        {\n            obj.color = color as ColorSource;\n        }\n        // handles stroke: new FillGradient()\n        else if (color instanceof FillGradient || color instanceof FillPattern)\n        {\n            obj.fill = color as FillGradient | FillPattern;\n        }\n        // handles stroke: { color: 0x0 } or stroke: { fill: new FillGradient() }\n        else if (Object.hasOwnProperty.call(color, 'color') || Object.hasOwnProperty.call(color, 'fill'))\n        {\n            obj = color as FillStyle;\n        }\n        else\n        {\n            throw new Error('Invalid stroke value.');\n        }\n\n        style.stroke = {\n            ...obj,\n            width: oldStyle.strokeThickness\n        };\n    }\n\n    if (Array.isArray(oldStyle.fillGradientStops))\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'gradient fill is now a fill pattern: `new FillGradient(...)`');\n        // #endif\n\n        let fontSize: number;\n\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        if (style.fontSize == null)\n        {\n            style.fontSize = TextStyle.defaultTextStyle.fontSize;\n        }\n        else if (typeof style.fontSize === 'string')\n        {\n            // eg '34px' to number\n            fontSize = parseInt(style.fontSize as string, 10);\n        }\n        else\n        {\n            fontSize = style.fontSize as number;\n        }\n\n        const gradientFill = new FillGradient(0, 0, 0, fontSize * 1.7);\n\n        const fills: number[] = oldStyle.fillGradientStops\n            .map((color: ColorSource) => Color.shared.setValue(color).toNumber());\n\n        fills.forEach((number, index) =>\n        {\n            const ratio = index / (fills.length - 1);\n\n            gradientFill.addColorStop(ratio, number);\n        });\n\n        style.fill = {\n            fill: gradientFill\n        };\n    }\n}\n\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 13258, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13264, "column": 0}, "map": {"version":3,"file":"CanvasPool.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/renderers/shared/texture/CanvasPool.ts"],"sourcesContent":["import { DOMAdapter } from '../../../../environment/adapter';\nimport { nextPow2 } from '../../../../maths/misc/pow2';\n\nimport type { ICanvas, ICanvasRenderingContext2DSettings } from '../../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../../environment/canvas/ICanvasRenderingContext2D';\n\nexport interface CanvasAndContext\n{\n    canvas: ICanvas;\n    context: ICanvasRenderingContext2D;\n}\n\n/**\n * Texture pool, used by FilterSystem and plugins.\n *\n * Stores collection of temporary pow2 or screen-sized renderTextures\n *\n * If you use custom RenderTexturePool for your filters, you can use methods\n * `getFilterTexture` and `returnFilterTexture` same as in\n * @name CanvasPool\n * @memberof rendering\n */\nexport class CanvasPoolClass\n{\n    public canvasOptions: ICanvasRenderingContext2DSettings;\n\n    /**\n     * Allow renderTextures of the same size as screen, not just pow2\n     *\n     * Automatically sets to true after `setScreenSize`\n     * @default false\n     */\n    public enableFullScreen: boolean;\n    private _canvasPool: {[x in string | number]: CanvasAndContext[]};\n\n    constructor(canvasOptions?: ICanvasRenderingContext2DSettings)\n    {\n        this._canvasPool = Object.create(null);\n        this.canvasOptions = canvasOptions || {};\n        this.enableFullScreen = false;\n    }\n\n    /**\n     * Creates texture with params that were specified in pool constructor.\n     * @param pixelWidth - Width of texture in pixels.\n     * @param pixelHeight - Height of texture in pixels.\n     */\n    private _createCanvasAndContext(pixelWidth: number, pixelHeight: number): CanvasAndContext\n    {\n        const canvas = DOMAdapter.get().createCanvas();\n\n        canvas.width = pixelWidth;\n        canvas.height = pixelHeight;\n\n        const context = canvas.getContext('2d');\n\n        return { canvas, context };\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     * @param minWidth - The minimum width of the render texture.\n     * @param minHeight - The minimum height of the render texture.\n     * @param resolution - The resolution of the render texture.\n     * @returns The new render texture.\n     */\n    public getOptimalCanvasAndContext(minWidth: number, minHeight: number, resolution = 1): CanvasAndContext\n    {\n        minWidth = Math.ceil((minWidth * resolution) - 1e-6);\n        minHeight = Math.ceil((minHeight * resolution) - 1e-6);\n        minWidth = nextPow2(minWidth);\n        minHeight = nextPow2(minHeight);\n\n        const key = (minWidth << 17) + (minHeight << 1);\n\n        if (!this._canvasPool[key])\n        {\n            this._canvasPool[key] = [];\n        }\n\n        let canvasAndContext = this._canvasPool[key].pop();\n\n        if (!canvasAndContext)\n        {\n            canvasAndContext = this._createCanvasAndContext(minWidth, minHeight);\n        }\n\n        return canvasAndContext;\n    }\n\n    /**\n     * Place a render texture back into the pool.\n     * @param canvasAndContext\n     */\n    public returnCanvasAndContext(canvasAndContext: CanvasAndContext): void\n    {\n        const canvas = canvasAndContext.canvas;\n        const { width, height } = canvas;\n\n        const key = (width << 17) + (height << 1);\n\n        canvasAndContext.context.clearRect(0, 0, width, height);\n\n        this._canvasPool[key].push(canvasAndContext);\n    }\n\n    public clear(): void\n    {\n        this._canvasPool = {};\n    }\n}\n\nexport const CanvasPool = new CanvasPoolClass();\n"],"names":[],"mappings":";;;;;;;;;AAsBO,MAAM,eACb,CAAA;IAYI,YAAY,aACZ,CAAA;QACS,IAAA,CAAA,WAAA,GAAA,aAAA,GAAqB,MAAA,CAAA,MAAA,CAAO,IAAI,CAAA,CAAA;QAChC,IAAA,CAAA,aAAA,GAAgB,iBAAiB,CAAA,CAAC,CAAA;QACvC,IAAA,CAAK,gBAAmB,GAAA,KAAA,CAAA;IAAA,CAC5B;IAAA;;;;GAAA,GAOQ,uBAAA,CAAwB,UAAA,EAAoB,WACpD,EAAA;QACI,MAAM,MAAS,gKAAA,aAAA,CAAW,GAAI,EAAA,CAAE,YAAa,EAAA,CAAA;QAE7C,MAAA,CAAO,KAAQ,GAAA,UAAA,CAAA;QACf,MAAA,CAAO,MAAS,GAAA,WAAA,CAAA;QAEV,MAAA,OAAA,GAAU,MAAO,CAAA,UAAA,CAAW,IAAI,CAAA,CAAA;QAE/B,OAAA;YAAE;YAAQ,OAAQ;QAAA,CAAA,CAAA;IAAA,CAC7B;IAAA;;;;;;GAAA,GASO,0BAA2B,CAAA,QAAA,EAAkB,SAAmB,EAAA,UAAA,GAAa,CACpF,EAAA;QACI,QAAA,GAAW,IAAK,CAAA,IAAA,CAAM,QAAW,GAAA,UAAA,GAAc,IAAI,CAAA,CAAA;QACnD,SAAA,GAAY,IAAK,CAAA,IAAA,CAAM,SAAY,GAAA,UAAA,GAAc,IAAI,CAAA,CAAA;QACrD,QAAA,GAAW,2KAAA,EAAS,QAAQ,CAAA,CAAA;QAC5B,SAAA,mKAAY,WAAA,EAAS,SAAS,CAAA,CAAA;QAExB,MAAA,GAAA,GAAA,CAAO,QAAY,IAAA,EAAA,IAAA,CAAO,SAAa,IAAA,CAAA,CAAA,CAAA;QAE7C,IAAI,CAAC,IAAA,CAAK,WAAY,CAAA,GAAG,CACzB,EAAA;YACS,IAAA,CAAA,WAAA,CAAY,GAAG,CAAA,GAAI,EAAC,CAAA;QAAA,CAC7B;QAEA,IAAI,gBAAmB,GAAA,IAAA,CAAK,WAAY,CAAA,GAAG,CAAA,CAAE,GAAI,EAAA,CAAA;QAEjD,IAAI,CAAC,gBACL,EAAA;YACuB,gBAAA,GAAA,IAAA,CAAK,uBAAwB,CAAA,QAAA,EAAU,SAAS,CAAA,CAAA;QAAA,CACvE;QAEO,OAAA,gBAAA,CAAA;IAAA,CACX;IAAA;;;GAAA,GAMO,uBAAuB,gBAC9B,EAAA;QACI,MAAM,SAAS,gBAAiB,CAAA,MAAA,CAAA;QAC1B,MAAA,EAAE,KAAO,EAAA,MAAA,EAAW,GAAA,MAAA,CAAA;QAEpB,MAAA,GAAA,GAAA,CAAO,KAAS,IAAA,EAAA,IAAA,CAAO,MAAU,IAAA,CAAA,CAAA,CAAA;QAEvC,gBAAA,CAAiB,OAAQ,CAAA,SAAA,CAAU,CAAG,EAAA,CAAA,EAAG,OAAO,MAAM,CAAA,CAAA;QAEtD,IAAA,CAAK,WAAY,CAAA,GAAG,CAAE,CAAA,IAAA,CAAK,gBAAgB,CAAA,CAAA;IAAA,CAC/C;IAEO,KACP,GAAA;QACI,IAAA,CAAK,WAAA,GAAc,CAAA,CAAC,CAAA;IAAA,CACxB;AACJ,CAAA;AAEa,MAAA,UAAA,GAAa,IAAI,eAAgB","ignoreList":[0]}},
    {"offset": {"line": 13331, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13337, "column": 0}, "map": {"version":3,"file":"getPo2TextureFromSource.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/utils/getPo2TextureFromSource.ts"],"sourcesContent":["import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { Bounds } from '../../container/bounds/Bounds';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\n\nconst tempBounds = new Bounds();\n\n/**\n * Takes an image and creates a texture from it, using a power of 2 texture from the texture pool.\n * Remember to return the texture when you don't need it any more!\n * @param image - The image to create a texture from\n * @param width - the frame width of the texture\n * @param height - the frame height of the texture\n * @param resolution - The resolution of the texture\n * @returns - The texture\n */\nexport function getPo2TextureFromSource(\n    image: HTMLImageElement | HTMLCanvasElement | ICanvas,\n    width: number,\n    height: number,\n    resolution: number\n): Texture\n{\n    const bounds = tempBounds;\n\n    bounds.minX = 0;\n    bounds.minY = 0;\n\n    bounds.maxX = (image.width / resolution) | 0;\n    bounds.maxY = (image.height / resolution) | 0;\n\n    const texture = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        resolution,\n        false\n    );\n\n    texture.source.uploadMethodId = 'image';\n    texture.source.resource = image;\n    texture.source.alphaMode = 'premultiply-alpha-on-upload';\n\n    texture.frame.width = width / resolution;\n    texture.frame.height = height / resolution;\n\n    // We want to update the resource on the GPU,\n    // but we do not want to resize the texture.\n    // calling `texture.source.update` will fit the resource to the texture\n    // causing a resize of the texture on the GPU.\n    // which is not what we want!\n    texture.source.emit('update', texture.source);\n\n    texture.updateUvs();\n\n    return texture;\n}\n"],"names":[],"mappings":";;;;;;;;AAMA,MAAM,UAAA,GAAa,iLAAI,SAAO,EAAA,CAAA;AAWvB,SAAS,uBACZ,CAAA,KAAA,EACA,KACA,EAAA,MAAA,EACA,UAEJ,EAAA;IACI,MAAM,MAAS,GAAA,UAAA,CAAA;IAEf,MAAA,CAAO,IAAO,GAAA,CAAA,CAAA;IACd,MAAA,CAAO,IAAO,GAAA,CAAA,CAAA;IAEP,MAAA,CAAA,IAAA,GAAQ,KAAM,CAAA,KAAA,GAAQ,UAAc,GAAA,CAAA,CAAA;IACpC,MAAA,CAAA,IAAA,GAAQ,KAAM,CAAA,MAAA,GAAS,UAAc,GAAA,CAAA,CAAA;IAE5C,MAAM,2MAAU,cAAY,CAAA,iBAAA,CACxB,MAAO,CAAA,KAAA,EACP,MAAO,CAAA,MAAA,EACP,UAAA,EACA,KAAA;IAGJ,OAAA,CAAQ,MAAA,CAAO,cAAiB,GAAA,OAAA,CAAA;IAChC,OAAA,CAAQ,MAAA,CAAO,QAAW,GAAA,KAAA,CAAA;IAC1B,OAAA,CAAQ,MAAA,CAAO,SAAY,GAAA,6BAAA,CAAA;IAEnB,OAAA,CAAA,KAAA,CAAM,KAAA,GAAQ,KAAQ,GAAA,UAAA,CAAA;IACtB,OAAA,CAAA,KAAA,CAAM,MAAA,GAAS,MAAS,GAAA,UAAA,CAAA;IAOhC,OAAA,CAAQ,MAAO,CAAA,IAAA,CAAK,QAAU,EAAA,OAAA,CAAQ,MAAM,CAAA,CAAA;IAE5C,OAAA,CAAQ,SAAU,EAAA,CAAA;IAEX,OAAA,OAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 13364, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13370, "column": 0}, "map": {"version":3,"file":"getCanvasBoundingBox.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/utils/canvas/getCanvasBoundingBox.ts"],"sourcesContent":["import { Rectangle } from '../../maths/shapes/Rectangle';\n\nimport type { ICanvas } from '../../environment/canvas/ICanvas';\n\nfunction checkRow(data: Uint8ClampedArray, width: number, y: number)\n{\n    for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4)\n    {\n        if (data[index + 3] !== 0) return false;\n    }\n\n    return true;\n}\n\nfunction checkColumn(data: Uint8ClampedArray, width: number, x: number, top: number, bottom: number)\n{\n    const stride = 4 * width;\n\n    for (let y = top, index = (top * stride) + (4 * x); y <= bottom; ++y, index += stride)\n    {\n        if (data[index + 3] !== 0) return false;\n    }\n\n    return true;\n}\n\n/**\n * Measuring the bounds of a canvas' visible (non-transparent) pixels.\n * @param canvas - The canvas to measure.\n * @param resolution - The resolution of the canvas.\n * @returns The bounding box of the canvas' visible pixels.\n * @since 7.1.0\n * @memberof utils\n */\nexport function getCanvasBoundingBox(canvas: ICanvas, resolution = 1): Rectangle\n{\n    // https://gist.github.com/timdown/021d9c8f2aabc7092df564996f5afbbf\n\n    const { width, height } = canvas;\n\n    const context = canvas.getContext('2d', {\n        willReadFrequently: true,\n    });\n\n    if (context === null)\n    {\n        throw new TypeError('Failed to get canvas 2D context');\n    }\n\n    const imageData = context.getImageData(0, 0, width, height);\n    const data = imageData.data;\n\n    let left = 0;\n    let top = 0;\n    let right = width - 1;\n    let bottom = height - 1;\n\n    while (top < height && checkRow(data, width, top)) ++top;\n    if (top === height) return Rectangle.EMPTY;\n    while (checkRow(data, width, bottom)) --bottom;\n    while (checkColumn(data, width, left, top, bottom)) ++left;\n    while (checkColumn(data, width, right, top, bottom)) --right;\n\n    ++right;\n    ++bottom;\n\n    return new Rectangle(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n}\n"],"names":[],"mappings":";;;;;;AAIA,SAAS,QAAA,CAAS,IAAyB,EAAA,KAAA,EAAe,CAC1D,EAAA;IACa,IAAA,IAAA,CAAA,GAAI,CAAG,EAAA,KAAA,GAAQ,CAAI,GAAA,CAAA,GAAI,KAAO,EAAA,CAAA,GAAI,KAAO,EAAA,EAAE,CAAG,EAAA,KAAA,IAAS,CAChE,CAAA;QACQ,IAAA,IAAA,CAAK,KAAQ,GAAA,CAAC,CAAM,KAAA,CAAA,EAAU,OAAA,KAAA,CAAA;IAAA,CACtC;IAEO,OAAA,IAAA,CAAA;AACX,CAAA;AAEA,SAAS,WAAY,CAAA,IAAA,EAAyB,KAAe,EAAA,CAAA,EAAW,GAAA,EAAa,MACrF,EAAA;IACI,MAAM,SAAS,CAAI,GAAA,KAAA,CAAA;IAEnB,IAAA,IAAS,CAAI,GAAA,GAAA,EAAK,KAAS,GAAA,GAAA,GAAM,MAAW,GAAA,CAAA,GAAI,CAAI,EAAA,CAAA,IAAK,MAAQ,EAAA,EAAE,CAAG,EAAA,KAAA,IAAS,MAC/E,CAAA;QACQ,IAAA,IAAA,CAAK,KAAQ,GAAA,CAAC,CAAM,KAAA,CAAA,EAAU,OAAA,KAAA,CAAA;IAAA,CACtC;IAEO,OAAA,IAAA,CAAA;AACX,CAAA;AAUgB,SAAA,oBAAA,CAAqB,MAAiB,EAAA,UAAA,GAAa,CACnE,EAAA;IAGU,MAAA,EAAE,KAAO,EAAA,MAAA,EAAW,GAAA,MAAA,CAAA;IAEpB,MAAA,OAAA,GAAU,MAAO,CAAA,UAAA,CAAW,IAAM,EAAA;QACpC,kBAAoB,EAAA,IAAA;IAAA,CACvB,CAAA,CAAA;IAED,IAAI,YAAY,IAChB,EAAA;QACU,MAAA,IAAI,UAAU,iCAAiC,CAAA,CAAA;IAAA,CACzD;IAEA,MAAM,YAAY,OAAQ,CAAA,YAAA,CAAa,CAAG,EAAA,CAAA,EAAG,OAAO,MAAM,CAAA,CAAA;IAC1D,MAAM,OAAO,SAAU,CAAA,IAAA,CAAA;IAEvB,IAAI,IAAO,GAAA,CAAA,CAAA;IACX,IAAI,GAAM,GAAA,CAAA,CAAA;IACV,IAAI,QAAQ,KAAQ,GAAA,CAAA,CAAA;IACpB,IAAI,SAAS,MAAS,GAAA,CAAA,CAAA;IAEtB,MAAO,GAAM,GAAA,MAAA,IAAU,QAAS,CAAA,IAAA,EAAM,OAAO,GAAG,CAAA,CAAK,EAAA,GAAA,CAAA;IACrD,IAAI,GAAQ,KAAA,MAAA,EAAQ,0KAAO,YAAU,CAAA,KAAA,CAAA;IAC9B,MAAA,QAAA,CAAS,IAAM,EAAA,KAAA,EAAO,MAAM,CAAA,CAAK,EAAA,MAAA,CAAA;IACxC,MAAO,WAAY,CAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,KAAK,MAAM,CAAA,CAAK,EAAA,IAAA,CAAA;IACtD,MAAO,WAAY,CAAA,IAAA,EAAM,KAAO,EAAA,KAAA,EAAO,KAAK,MAAM,CAAA,CAAK,EAAA,KAAA,CAAA;IAErD,EAAA,KAAA,CAAA;IACA,EAAA,MAAA,CAAA;IAEK,OAAA,uKAAI,YAAU,CAAA,IAAA,GAAO,UAAY,EAAA,GAAA,GAAM,UAAa,EAAA,CAAA,KAAA,GAAQ,IAAQ,IAAA,UAAA,EAAA,CAAa,MAAS,GAAA,GAAA,IAAO,UAAU,CAAA,CAAA;AACtH","ignoreList":[0]}},
    {"offset": {"line": 13414, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13420, "column": 0}, "map": {"version":3,"file":"getCanvasFillStyle.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/canvas/utils/getCanvasFillStyle.ts"],"sourcesContent":["import { Color } from '../../../../color/Color';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { warn } from '../../../../utils/logging/warn';\nimport { FillGradient } from '../../../graphics/shared/fill/FillGradient';\nimport { FillPattern } from '../../../graphics/shared/fill/FillPattern';\n\nimport type { ICanvasRenderingContext2D } from '../../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { ConvertedFillStyle } from '../../../graphics/shared/FillTypes';\n\nexport function getCanvasFillStyle(\n    fillStyle: ConvertedFillStyle,\n    context: ICanvasRenderingContext2D): string | CanvasGradient | CanvasPattern\n{\n    if (fillStyle.texture === Texture.WHITE && !fillStyle.fill)\n    {\n        return Color.shared.setValue(fillStyle.color).setAlpha(fillStyle.alpha ?? 1).toHexa();\n    }\n    else if (!fillStyle.fill)\n    {\n        // fancy set up...\n        const pattern = context.createPattern(fillStyle.texture.source.resource, 'repeat');\n\n        // create an inverted scale matrix..\n        const tempMatrix = fillStyle.matrix.copyTo(Matrix.shared);\n\n        tempMatrix.scale(fillStyle.texture.frame.width, fillStyle.texture.frame.height);\n\n        pattern.setTransform(tempMatrix);\n\n        return pattern;\n    }\n    else if (fillStyle.fill instanceof FillPattern)\n    {\n        const fillPattern = fillStyle.fill;\n\n        const pattern = context.createPattern(fillPattern.texture.source.resource, 'repeat');\n\n        const tempMatrix = fillPattern.transform.copyTo(Matrix.shared);\n\n        tempMatrix.scale(\n            fillPattern.texture.frame.width,\n            fillPattern.texture.frame.height\n        );\n\n        pattern.setTransform(tempMatrix);\n\n        return pattern;\n    }\n    else if (fillStyle.fill instanceof FillGradient)\n    {\n        const fillGradient = fillStyle.fill;\n\n        if (fillGradient.type === 'linear')\n        {\n            const gradient = context.createLinearGradient(\n                fillGradient.x0,\n                fillGradient.y0,\n                fillGradient.x1,\n                fillGradient.y1\n            );\n\n            fillGradient.gradientStops.forEach((stop) =>\n            {\n                gradient.addColorStop(stop.offset, Color.shared.setValue(stop.color).toHex());\n            });\n\n            return gradient;\n        }\n    }\n\n    // #if _DEBUG\n    warn('FillStyle not recognised', fillStyle);\n    // #endif\n\n    return 'red';\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAUgB,SAAA,kBAAA,CACZ,SAAA,EACA,OACJ,EAAA;IACI,IAAI,UAAU,OAAY,kMAAA,UAAA,CAAQ,KAAS,IAAA,CAAC,UAAU,IACtD,EAAA;QACW,4JAAA,QAAA,CAAM,MAAO,CAAA,QAAA,CAAS,SAAU,CAAA,KAAK,CAAE,CAAA,QAAA,CAAS,SAAU,CAAA,KAAA,IAAS,CAAC,CAAA,CAAE,MAAO,EAAA,CAAA;IAAA,CACxF,MAAA,IACS,CAAC,SAAA,CAAU,IACpB,EAAA;QAEI,MAAM,UAAU,OAAQ,CAAA,aAAA,CAAc,UAAU,OAAQ,CAAA,MAAA,CAAO,QAAA,EAAU,QAAQ,CAAA,CAAA;QAGjF,MAAM,UAAa,GAAA,SAAA,CAAU,MAAO,CAAA,MAAA,gKAAO,UAAA,CAAO,MAAM,CAAA,CAAA;QAE7C,UAAA,CAAA,KAAA,CAAM,UAAU,OAAQ,CAAA,KAAA,CAAM,KAAA,EAAO,SAAU,CAAA,OAAA,CAAQ,KAAA,CAAM,MAAM,CAAA,CAAA;QAE9E,OAAA,CAAQ,YAAA,CAAa,UAAU,CAAA,CAAA;QAExB,OAAA,OAAA,CAAA;IAAA,CACX,MAAA,IACS,SAAU,CAAA,IAAA,qMAAgB,cACnC,EAAA;QACI,MAAM,cAAc,SAAU,CAAA,IAAA,CAAA;QAE9B,MAAM,UAAU,OAAQ,CAAA,aAAA,CAAc,YAAY,OAAQ,CAAA,MAAA,CAAO,QAAA,EAAU,QAAQ,CAAA,CAAA;QAEnF,MAAM,UAAa,GAAA,WAAA,CAAY,SAAU,CAAA,MAAA,iKAAO,SAAA,CAAO,MAAM,CAAA,CAAA;QAElD,UAAA,CAAA,KAAA,CACP,WAAA,CAAY,OAAA,CAAQ,KAAM,CAAA,KAAA,EAC1B,WAAA,CAAY,OAAA,CAAQ,KAAM,CAAA,MAAA;QAG9B,OAAA,CAAQ,YAAA,CAAa,UAAU,CAAA,CAAA;QAExB,OAAA,OAAA,CAAA;IAAA,CACX,MAAA,IACS,SAAU,CAAA,IAAA,sMAAgB,eACnC,EAAA;QACI,MAAM,eAAe,SAAU,CAAA,IAAA,CAAA;QAE3B,IAAA,YAAA,CAAa,IAAA,KAAS,QAC1B,EAAA;YACI,MAAM,WAAW,OAAQ,CAAA,oBAAA,CACrB,YAAa,CAAA,EAAA,EACb,YAAa,CAAA,EAAA,EACb,YAAa,CAAA,EAAA,EACb,YAAa,CAAA,EAAA;YAGJ,YAAA,CAAA,aAAA,CAAc,OAAQ,CAAA,CAAC,IACpC,KAAA;gBACa,QAAA,CAAA,YAAA,CAAa,IAAK,CAAA,MAAA,uJAAQ,QAAM,CAAA,MAAA,CAAO,QAAA,CAAS,IAAK,CAAA,KAAK,CAAE,CAAA,KAAA,EAAO,CAAA,CAAA;YAAA,CAC/E,CAAA,CAAA;YAEM,OAAA,QAAA,CAAA;QAAA,CACX;IAAA,CACJ;uKAGA,OAAA,EAAK,4BAA4B,SAAS,CAAA,CAAA;IAGnC,OAAA,KAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 13467, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13473, "column": 0}, "map": {"version":3,"file":"CanvasTextSystem.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/canvas/CanvasTextSystem.ts"],"sourcesContent":["import { Color } from '../../../color/Color';\nimport { ExtensionType } from '../../../extensions/Extensions';\nimport { nextPow2 } from '../../../maths/misc/pow2';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox';\nimport { deprecation } from '../../../utils/logging/deprecation';\nimport { TextStyle } from '../TextStyle';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource';\nimport { CanvasTextMetrics } from './CanvasTextMetrics';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { System } from '../../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { TextOptions } from '../AbstractText';\nimport type { Text } from '../Text';\n\ninterface CanvasAndContext\n{\n    canvas: ICanvas;\n    context: ICanvasRenderingContext2D;\n}\n\n/**\n * System plugin to the renderer to manage canvas text.\n * @memberof rendering\n */\nexport class CanvasTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'canvasText',\n    } as const;\n\n    private _activeTextures: Record<string, {\n        canvasAndContext: CanvasAndContext,\n        texture: Texture,\n        usageCount: number,\n    }> = {};\n\n    private readonly _renderer: Renderer;\n\n    constructor(_renderer: Renderer)\n    {\n        this._renderer = _renderer;\n    }\n\n    public getTextureSize(text: string, resolution: number, style: TextStyle): { width: number, height: number }\n    {\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);\n\n        let width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        let height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        width = Math.ceil((width) - 1e-6);\n        height = Math.ceil((height) - 1e-6);\n        width = nextPow2(width);\n        height = nextPow2(height);\n\n        return { width, height };\n    }\n\n    /**\n     * This is a function that will create a texture from a text string, style and resolution.\n     * Useful if you want to make a texture of your text and use if for various other pixi things!\n     * @param options - The options of the text that will be used to generate the texture.\n     * @param options.text - the text to render\n     * @param options.style - the style of the text\n     * @param options.resolution - the resolution of the texture\n     * @returns the newly created texture\n     */\n    /** @deprecated since 8.0.0 */\n    public getTexture(text: string, resolution: number, style: TextStyle, textKey: string): Texture;\n    public getTexture(options: TextOptions): Texture;\n    public getTexture(options: TextOptions | string, resolution?: number, style?: TextStyle, _textKey?: string): Texture\n    {\n        if (typeof options === 'string')\n        {\n            // #if _DEBUG\n            deprecation('8.0.0', 'CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments');\n            // #endif\n\n            options = {\n                text: options,\n                style,\n                resolution,\n            };\n        }\n\n        if (!(options.style instanceof TextStyle))\n        {\n            options.style = new TextStyle(options.style);\n        }\n\n        const { texture, canvasAndContext } = this.createTextureAndCanvas(\n            options as {text: string, style: TextStyle, resolution?: number}\n        );\n\n        this._renderer.texture.initSource(texture._source);\n\n        CanvasPool.returnCanvasAndContext(canvasAndContext);\n\n        return texture;\n    }\n\n    public createTextureAndCanvas(options: {text: string, style: TextStyle, resolution?: number})\n    {\n        const { text, style } = options;\n\n        const resolution = options.resolution ?? this._renderer.resolution;\n\n        // create a canvas with the word hello on it\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);\n\n        const width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        const height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n\n        // create a texture from the canvas\n        const { canvas } = canvasAndContext;\n\n        this.renderTextToCanvas(text, style, resolution, canvasAndContext);\n\n        const texture = getPo2TextureFromSource(canvas, width, height, resolution);\n\n        if (style.trim)\n        {\n            const trimmed = getCanvasBoundingBox(canvas, resolution);\n\n            texture.frame.copyFrom(trimmed);\n\n            texture.updateUvs();\n        }\n\n        return { texture, canvasAndContext };\n    }\n\n    public getManagedTexture(text: Text)\n    {\n        text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n        const textKey = text._getKey();\n\n        if (this._activeTextures[textKey])\n        {\n            this._increaseReferenceCount(textKey);\n\n            return this._activeTextures[textKey].texture;\n        }\n\n        const { texture, canvasAndContext } = this.createTextureAndCanvas(text);\n\n        this._activeTextures[textKey] = {\n            canvasAndContext,\n            texture,\n            usageCount: 1,\n        };\n\n        return texture;\n    }\n\n    private _increaseReferenceCount(textKey: string)\n    {\n        this._activeTextures[textKey].usageCount++;\n    }\n\n    public decreaseReferenceCount(textKey: string)\n    {\n        const activeTexture = this._activeTextures[textKey];\n\n        activeTexture.usageCount--;\n\n        if (activeTexture.usageCount === 0)\n        {\n            CanvasPool.returnCanvasAndContext(activeTexture.canvasAndContext);\n            TexturePool.returnTexture(activeTexture.texture);\n\n            const source = activeTexture.texture.source;\n\n            source.resource = null;\n            source.uploadMethodId = 'unknown';\n            source.alphaMode = 'no-premultiply-alpha';\n\n            this._activeTextures[textKey] = null;\n        }\n    }\n\n    public getReferenceCount(textKey: string)\n    {\n        return this._activeTextures[textKey].usageCount;\n    }\n\n    /**\n     * Renders text to its canvas, and updates its texture.\n     *\n     * By default this is used internally to ensure the texture is correct before rendering,\n     * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n     * and then shared across multiple Sprites.\n     * @param text\n     * @param style\n     * @param resolution\n     * @param canvasAndContext\n     */\n    public renderTextToCanvas(text: string, style: TextStyle, resolution: number, canvasAndContext: CanvasAndContext): void\n    {\n        const { canvas, context } = canvasAndContext;\n\n        const font = fontStringFromTextStyle(style);\n\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);// , canvas);\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        const height = canvas.height;\n\n        context.resetTransform();\n        context.scale(resolution, resolution);\n        context.textBaseline = style.textBaseline;\n\n        // set stroke styles..\n\n        if (style._stroke?.width)\n        {\n            const strokeStyle = style._stroke;\n\n            context.lineWidth = strokeStyle.width;\n\n            context.miterLimit = strokeStyle.miterLimit;\n            context.lineJoin = strokeStyle.join;\n            context.lineCap = strokeStyle.cap;\n        }\n\n        // return;\n        context.font = font;\n\n        let linePositionX: number;\n        let linePositionY: number;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            // we only want the drop shadow, so put text way off-screen\n            const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + (style.padding * 2)) : 0;\n            const dsOffsetShadow = dsOffsetText * resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const shadowOptions = style.dropShadow;\n\n                const dropShadowColor = shadowOptions.color;\n                const dropShadowAlpha = shadowOptions.alpha;\n\n                context.shadowColor = Color.shared\n                    .setValue(dropShadowColor)\n                    .setAlpha(dropShadowAlpha)\n                    .toRgbaString();\n\n                const dropShadowBlur = shadowOptions.blur * resolution;\n                const dropShadowDistance = shadowOptions.distance * resolution;\n\n                context.shadowBlur = dropShadowBlur;\n                context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(shadowOptions.angle) * dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context) : null;\n\n                if (style._stroke?.width)\n                {\n                    context.strokeStyle = getCanvasFillStyle(style._stroke, context);\n                }\n\n                context.shadowColor = 'black';\n            }\n\n            let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n\n            if (lineHeight - fontProperties.fontSize < 0)\n            {\n                linePositionYShift = 0;\n            }\n\n            const strokeWidth = style._stroke?.width ?? 0;\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = strokeWidth / 2;\n                linePositionY = ((strokeWidth / 2) + (i * lineHeight)) + fontProperties.ascent + linePositionYShift;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style._stroke?.width)\n                {\n                    this._drawLetterSpacing(\n                        lines[i],\n                        style,\n                        canvasAndContext,\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style._fill !== undefined)\n                {\n                    this._drawLetterSpacing(\n                        lines[i],\n                        style,\n                        canvasAndContext,\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     * @param text - The text to draw\n     * @param style\n     * @param canvasAndContext\n     * @param x - Horizontal position to draw the text\n     * @param y - Vertical position to draw the text\n     * @param isStroke - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     */\n    private _drawLetterSpacing(\n        text: string,\n        style: TextStyle,\n        canvasAndContext: CanvasAndContext,\n        x: number, y: number,\n        isStroke = false\n    ): void\n    {\n        const { context } = canvasAndContext;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        let useExperimentalLetterSpacing = false;\n\n        if (CanvasTextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (CanvasTextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        if (letterSpacing === 0 || useExperimentalLetterSpacing)\n        {\n            if (isStroke)\n            {\n                context.strokeText(text, x, y);\n            }\n            else\n            {\n                context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n        let previousWidth = context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                context.fillText(currentChar, currentPosition, y);\n            }\n            let textStr = '';\n\n            for (let j = i + 1; j < stringArray.length; ++j)\n            {\n                textStr += stringArray[j];\n            }\n            currentWidth = context.measureText(textStr).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    public destroy(): void\n    {\n        this._activeTextures = null;\n    }\n}\n"],"names":["i"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BO,MAAM,gBACb,CAAA;IAmBI,YAAY,SACZ,CAAA;QATA,IAAA,CAAQ,eAAA,GAIH,CAAA,CAAC,CAAA;QAMF,IAAA,CAAK,SAAY,GAAA,SAAA,CAAA;IAAA,CACrB;IAEO,cAAA,CAAe,IAAc,EAAA,UAAA,EAAoB,KACxD,EAAA;QACI,MAAM,QAAW,sLAAA,oBAAA,CAAkB,WAAY,CAAA,IAAA,IAAQ,KAAK,KAAK,CAAA,CAAA;QAEjE,IAAI,KAAQ,GAAA,IAAA,CAAK,IAAK,CAAA,IAAA,CAAK,IAAA,CAAM,IAAK,CAAA,GAAA,CAAI,CAAG,EAAA,QAAA,CAAS,KAAK,CAAK,GAAA,KAAA,CAAM,OAAU,GAAA,CAAG,IAAI,UAAU,CAAA,CAAA;QACjG,IAAI,MAAS,GAAA,IAAA,CAAK,IAAK,CAAA,IAAA,CAAK,IAAA,CAAM,IAAK,CAAA,GAAA,CAAI,CAAG,EAAA,QAAA,CAAS,MAAM,CAAK,GAAA,KAAA,CAAM,OAAU,GAAA,CAAG,IAAI,UAAU,CAAA,CAAA;QAE3F,KAAA,GAAA,IAAA,CAAK,IAAM,CAAA,KAAA,GAAS,IAAI,CAAA,CAAA;QACvB,MAAA,GAAA,IAAA,CAAK,IAAM,CAAA,MAAA,GAAU,IAAI,CAAA,CAAA;QAClC,KAAA,mKAAQ,WAAA,EAAS,KAAK,CAAA,CAAA;QACtB,MAAA,mKAAS,WAAA,EAAS,MAAM,CAAA,CAAA;QAEjB,OAAA;YAAE;YAAO,MAAO;QAAA,CAAA,CAAA;IAAA,CAC3B;IAcO,UAAW,CAAA,OAAA,EAA+B,UAAqB,EAAA,KAAA,EAAmB,QACzF,EAAA;QACQ,IAAA,OAAO,YAAY,QACvB,EAAA;sLAEI,cAAA,EAAY,SAAS,mFAAmF,CAAA,CAAA;YAG9F,OAAA,GAAA;gBACN,IAAM,EAAA,OAAA;gBACN,KAAA;gBACA,UAAA;YAAA,CACJ,CAAA;QAAA,CACJ;QAEI,IAAA,CAAA,CAAE,OAAQ,CAAA,KAAA,6KAAiB,YAC/B,CAAA,EAAA;YACI,OAAA,CAAQ,KAAQ,GAAA,oKAAI,aAAU,CAAA,OAAA,CAAQ,KAAK,CAAA,CAAA;QAAA,CAC/C;QAEA,MAAM,EAAE,OAAA,EAAS,gBAAiB,EAAA,GAAI,IAAK,CAAA,sBAAA,CACvC,OAAA;QAGJ,IAAA,CAAK,SAAU,CAAA,OAAA,CAAQ,UAAW,CAAA,OAAA,CAAQ,OAAO,CAAA,CAAA;wMAEjD,aAAA,CAAW,sBAAA,CAAuB,gBAAgB,CAAA,CAAA;QAE3C,OAAA,OAAA,CAAA;IAAA,CACX;IAEO,uBAAuB,OAC9B,EAAA;QACU,MAAA,EAAE,IAAM,EAAA,KAAA,EAAU,GAAA,OAAA,CAAA;QAExB,MAAM,UAAa,GAAA,OAAA,CAAQ,UAAc,IAAA,IAAA,CAAK,SAAU,CAAA,UAAA,CAAA;QAGxD,MAAM,QAAW,sLAAA,oBAAA,CAAkB,WAAY,CAAA,IAAA,IAAQ,KAAK,KAAK,CAAA,CAAA;QAEjE,MAAM,KAAQ,GAAA,IAAA,CAAK,IAAK,CAAA,IAAA,CAAK,IAAA,CAAM,IAAK,CAAA,GAAA,CAAI,CAAG,EAAA,QAAA,CAAS,KAAK,CAAK,GAAA,KAAA,CAAM,OAAU,GAAA,CAAG,IAAI,UAAU,CAAA,CAAA;QACnG,MAAM,MAAS,GAAA,IAAA,CAAK,IAAK,CAAA,IAAA,CAAK,IAAA,CAAM,IAAK,CAAA,GAAA,CAAI,CAAG,EAAA,QAAA,CAAS,MAAM,CAAK,GAAA,KAAA,CAAM,OAAU,GAAA,CAAG,IAAI,UAAU,CAAA,CAAA;QAErG,MAAM,gBAAmB,mMAAA,aAAA,CAAW,0BAA2B,CAAA,KAAA,EAAO,MAAM,CAAA,CAAA;QAGtE,MAAA,EAAE,MAAA,EAAW,GAAA,gBAAA,CAAA;QAEnB,IAAA,CAAK,kBAAmB,CAAA,IAAA,EAAM,KAAO,EAAA,UAAA,EAAY,gBAAgB,CAAA,CAAA;QAEjE,MAAM,OAAU,+LAAA,0BAAA,EAAwB,MAAQ,EAAA,KAAA,EAAO,QAAQ,UAAU,CAAA,CAAA;QAEzE,IAAI,MAAM,IACV,EAAA;YACU,MAAA,OAAA,GAAU,yMAAA,AAAqB,EAAA,MAAA,EAAQ,UAAU,CAAA,CAAA;YAE/C,OAAA,CAAA,KAAA,CAAM,QAAA,CAAS,OAAO,CAAA,CAAA;YAE9B,OAAA,CAAQ,SAAU,EAAA,CAAA;QAAA,CACtB;QAEO,OAAA;YAAE;YAAS,gBAAiB;QAAA,CAAA,CAAA;IAAA,CACvC;IAEO,kBAAkB,IACzB,EAAA;QACI,IAAA,CAAK,WAAA,GAAc,IAAK,CAAA,eAAA,GAAkB,IAAK,CAAA,SAAA,CAAU,UAAA,GAAa,IAAK,CAAA,UAAA,CAAA;QACrE,MAAA,OAAA,GAAU,KAAK,OAAQ,EAAA,CAAA;QAEzB,IAAA,IAAA,CAAK,eAAgB,CAAA,OAAO,CAChC,EAAA;YACI,IAAA,CAAK,uBAAA,CAAwB,OAAO,CAAA,CAAA;YAE7B,OAAA,IAAA,CAAK,eAAgB,CAAA,OAAO,CAAE,CAAA,OAAA,CAAA;QAAA,CACzC;QAEA,MAAM,EAAE,OAAS,EAAA,gBAAA,EAAqB,GAAA,IAAA,CAAK,sBAAA,CAAuB,IAAI,CAAA,CAAA;QAEjE,IAAA,CAAA,eAAA,CAAgB,OAAO,CAAI,GAAA;YAC5B,gBAAA;YACA,OAAA;YACA,UAAY,EAAA,CAAA;QAAA,CAChB,CAAA;QAEO,OAAA,OAAA,CAAA;IAAA,CACX;IAEQ,wBAAwB,OAChC,EAAA;QACS,IAAA,CAAA,eAAA,CAAgB,OAAO,CAAE,CAAA,UAAA,EAAA,CAAA;IAAA,CAClC;IAEO,uBAAuB,OAC9B,EAAA;QACU,MAAA,aAAA,GAAgB,IAAK,CAAA,eAAA,CAAgB,OAAO,CAAA,CAAA;QAEpC,aAAA,CAAA,UAAA,EAAA,CAAA;QAEV,IAAA,aAAA,CAAc,UAAA,KAAe,CACjC,EAAA;4MACe,aAAA,CAAA,sBAAA,CAAuB,cAAc,gBAAgB,CAAA,CAAA;YACpD,+MAAA,CAAA,aAAA,CAAc,cAAc,OAAO,CAAA,CAAA;YAEzC,MAAA,MAAA,GAAS,cAAc,OAAQ,CAAA,MAAA,CAAA;YAErC,MAAA,CAAO,QAAW,GAAA,IAAA,CAAA;YAClB,MAAA,CAAO,cAAiB,GAAA,SAAA,CAAA;YACxB,MAAA,CAAO,SAAY,GAAA,sBAAA,CAAA;YAEd,IAAA,CAAA,eAAA,CAAgB,OAAO,CAAI,GAAA,IAAA,CAAA;QAAA,CACpC;IAAA,CACJ;IAEO,kBAAkB,OACzB,EAAA;QACW,OAAA,IAAA,CAAK,eAAgB,CAAA,OAAO,CAAE,CAAA,UAAA,CAAA;IAAA,CACzC;IAAA;;;;;;;;;;GAAA,GAaO,kBAAmB,CAAA,IAAA,EAAc,KAAkB,EAAA,UAAA,EAAoB,gBAC9E,EAAA;QACU,MAAA,EAAE,MAAQ,EAAA,OAAA,EAAY,GAAA,gBAAA,CAAA;QAEtB,MAAA,IAAA,GAAO,gOAAA,EAAwB,KAAK,CAAA,CAAA;QAE1C,MAAM,QAAW,sLAAA,oBAAA,CAAkB,WAAY,CAAA,IAAA,IAAQ,KAAK,KAAK,CAAA,CAAA;QACjE,MAAM,QAAQ,QAAS,CAAA,KAAA,CAAA;QACvB,MAAM,aAAa,QAAS,CAAA,UAAA,CAAA;QAC5B,MAAM,aAAa,QAAS,CAAA,UAAA,CAAA;QAC5B,MAAM,eAAe,QAAS,CAAA,YAAA,CAAA;QAC9B,MAAM,iBAAiB,QAAS,CAAA,cAAA,CAAA;QAEhC,MAAM,SAAS,MAAO,CAAA,MAAA,CAAA;QAEtB,OAAA,CAAQ,cAAe,EAAA,CAAA;QACf,OAAA,CAAA,KAAA,CAAM,YAAY,UAAU,CAAA,CAAA;QACpC,OAAA,CAAQ,YAAA,GAAe,KAAM,CAAA,YAAA,CAAA;QAIzB,IAAA,KAAA,CAAM,OAAA,EAAS,KACnB,EAAA;YACI,MAAM,cAAc,KAAM,CAAA,OAAA,CAAA;YAE1B,OAAA,CAAQ,SAAA,GAAY,WAAY,CAAA,KAAA,CAAA;YAEhC,OAAA,CAAQ,UAAA,GAAa,WAAY,CAAA,UAAA,CAAA;YACjC,OAAA,CAAQ,QAAA,GAAW,WAAY,CAAA,IAAA,CAAA;YAC/B,OAAA,CAAQ,OAAA,GAAU,WAAY,CAAA,GAAA,CAAA;QAAA,CAClC;QAGA,OAAA,CAAQ,IAAO,GAAA,IAAA,CAAA;QAEX,IAAA,aAAA,CAAA;QACA,IAAA,aAAA,CAAA;QAGE,MAAA,WAAA,GAAc,KAAM,CAAA,UAAA,GAAa,CAAI,GAAA,CAAA,CAAA;QAa3C,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,WAAA,EAAa,EAAE,CACnC,CAAA;YACU,MAAA,YAAA,GAAe,KAAM,CAAA,UAAA,IAAc,CAAM,KAAA,CAAA,CAAA;YAE/C,MAAM,YAAe,GAAA,YAAA,GAAe,IAAK,CAAA,IAAA,CAAK,IAAK,CAAA,GAAA,CAAI,CAAG,EAAA,MAAM,CAAK,GAAA,KAAA,CAAM,OAAU,GAAA,CAAE,CAAI,GAAA,CAAA,CAAA;YAC3F,MAAM,iBAAiB,YAAe,GAAA,UAAA,CAAA;YAEtC,IAAI,YACJ,EAAA;gBAII,OAAA,CAAQ,SAAY,GAAA,OAAA,CAAA;gBACpB,OAAA,CAAQ,WAAc,GAAA,OAAA,CAAA;gBAEtB,MAAM,gBAAgB,KAAM,CAAA,UAAA,CAAA;gBAE5B,MAAM,kBAAkB,aAAc,CAAA,KAAA,CAAA;gBACtC,MAAM,kBAAkB,aAAc,CAAA,KAAA,CAAA;gBAE9B,OAAA,CAAA,WAAA,GAAc,6JAAA,CAAM,MACvB,CAAA,QAAA,CAAS,eAAe,CACxB,CAAA,QAAA,CAAS,eAAe,CAAA,CACxB,YAAa,EAAA,CAAA;gBAEZ,MAAA,cAAA,GAAiB,cAAc,IAAO,GAAA,UAAA,CAAA;gBACtC,MAAA,kBAAA,GAAqB,cAAc,QAAW,GAAA,UAAA,CAAA;gBAEpD,OAAA,CAAQ,UAAa,GAAA,cAAA,CAAA;gBACrB,OAAA,CAAQ,aAAgB,GAAA,IAAA,CAAK,GAAI,CAAA,aAAA,CAAc,KAAK,CAAI,GAAA,kBAAA,CAAA;gBACxD,OAAA,CAAQ,aAAA,GAAiB,IAAK,CAAA,GAAA,CAAI,aAAc,CAAA,KAAK,IAAI,kBAAsB,GAAA,cAAA,CAAA;YAAA,CAGnF,MAAA;gBACI,OAAA,CAAQ,SAAA,GAAY,KAAM,CAAA,KAAA,mMAAQ,sBAAA,EAAmB,KAAM,CAAA,KAAA,EAAO,OAAO,CAAI,GAAA,IAAA,CAAA;gBAEzE,IAAA,KAAA,CAAM,OAAA,EAAS,KACnB,EAAA;oBACI,OAAA,CAAQ,WAAc,OAAA,kNAAA,EAAmB,KAAM,CAAA,OAAA,EAAS,OAAO,CAAA,CAAA;gBAAA,CACnE;gBAEA,OAAA,CAAQ,WAAc,GAAA,OAAA,CAAA;YAAA,CAC1B;YAEI,IAAA,kBAAA,GAAA,CAAsB,UAAa,GAAA,cAAA,CAAe,QAAY,IAAA,CAAA,CAAA;YAE9D,IAAA,UAAA,GAAa,cAAe,CAAA,QAAA,GAAW,CAC3C,EAAA;gBACyB,kBAAA,GAAA,CAAA,CAAA;YAAA,CACzB;YAEM,MAAA,WAAA,GAAc,KAAM,CAAA,OAAA,EAAS,KAAS,IAAA,CAAA,CAAA;YAG5C,IAAA,IAASA,EAAI,GAAA,CAAA,EAAGA,EAAI,GAAA,KAAA,CAAM,MAAA,EAAQA,EAClC,EAAA,CAAA;gBACI,aAAA,GAAgB,WAAc,GAAA,CAAA,CAAA;gBAC9B,aAAA,GAAkB,WAAc,GAAA,CAAA,GAAMA,EAAI,GAAA,UAAA,GAAe,eAAe,MAAS,GAAA,kBAAA,CAAA;gBAE7E,IAAA,KAAA,CAAM,KAAA,KAAU,OACpB,EAAA;oBACqB,aAAA,IAAA,YAAA,GAAe,UAAA,CAAWA,EAAC,CAAA,CAAA;gBAAA,CAChD,MAAA,IACS,KAAM,CAAA,KAAA,KAAU,QACzB,EAAA;oBACsB,aAAA,IAAA,CAAA,YAAA,GAAe,UAAWA,CAAAA,EAAC,CAAK,IAAA,CAAA,CAAA;gBAAA,CACtD;gBAEI,IAAA,KAAA,CAAM,OAAA,EAAS,KACnB,EAAA;oBACS,IAAA,CAAA,kBAAA,CACD,KAAA,CAAMA,EAAC,CAAA,EACP,KAAA,EACA,gBAAA,EACA,gBAAgB,KAAM,CAAA,OAAA,EACtB,aAAA,GAAgB,MAAM,OAAU,GAAA,YAAA,EAChC,IAAA;gBACJ,CACJ;gBAEI,IAAA,KAAA,CAAM,KAAA,KAAU,KACpB,CAAA,EAAA;oBACS,IAAA,CAAA,kBAAA,CACD,KAAA,CAAMA,EAAC,CAAA,EACP,KAAA,EACA,gBAAA,EACA,gBAAgB,KAAM,CAAA,OAAA,EACtB,aAAA,GAAgB,MAAM,OAAU,GAAA,YAAA;gBACpC,CACJ;YAAA,CACJ;QAAA,CACJ;IAAA,CACJ;IAAA;;;;;;;;;GAAA,GAYQ,mBACJ,IACA,EAAA,KAAA,EACA,gBAAA,EACA,CAAW,EAAA,CAAA,EACX,WAAW,KAEf,EAAA;QACU,MAAA,EAAE,OAAA,EAAY,GAAA,gBAAA,CAAA;QAGpB,MAAM,gBAAgB,KAAM,CAAA,aAAA,CAAA;QAE5B,IAAI,4BAA+B,GAAA,KAAA,CAAA;QAEnC,IAAI,uMAAA,CAAkB,kCACtB,EAAA;YACI,uLAAI,oBAAA,CAAkB,yBACtB,EAAA;gBACY,OAAA,CAAA,aAAA,GAAgB,GAAG,aAAa,CAAA,EAAA,CAAA,CAAA;gBAChC,OAAA,CAAA,iBAAA,GAAoB,GAAG,aAAa,CAAA,EAAA,CAAA,CAAA;gBACb,4BAAA,GAAA,IAAA,CAAA;YAAA,CAGnC,MAAA;gBACI,OAAA,CAAQ,aAAgB,GAAA,KAAA,CAAA;gBACxB,OAAA,CAAQ,iBAAoB,GAAA,KAAA,CAAA;YAAA,CAChC;QAAA,CACJ;QAEI,IAAA,aAAA,KAAkB,KAAK,4BAC3B,EAAA;YACI,IAAI,QACJ,EAAA;gBACY,OAAA,CAAA,UAAA,CAAW,IAAM,EAAA,CAAA,EAAG,CAAC,CAAA,CAAA;YAAA,CAGjC,MAAA;gBACY,OAAA,CAAA,QAAA,CAAS,IAAM,EAAA,CAAA,EAAG,CAAC,CAAA,CAAA;YAAA,CAC/B;YAEA,OAAA;QAAA,CACJ;QAEA,IAAI,eAAkB,GAAA,CAAA,CAAA;QAEhB,MAAA,WAAA,GAAc,uMAAkB,CAAA,iBAAA,CAAkB,IAAI,CAAA,CAAA;QAC5D,IAAI,aAAgB,GAAA,OAAA,CAAQ,WAAY,CAAA,IAAI,CAAE,CAAA,KAAA,CAAA;QAC9C,IAAI,YAAe,GAAA,CAAA,CAAA;QAEnB,IAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,WAAY,CAAA,MAAA,EAAQ,EAAE,CAC1C,CAAA;YACU,MAAA,WAAA,GAAc,WAAA,CAAY,CAAC,CAAA,CAAA;YAEjC,IAAI,QACJ,EAAA;gBACY,OAAA,CAAA,UAAA,CAAW,WAAa,EAAA,eAAA,EAAiB,CAAC,CAAA,CAAA;YAAA,CAGtD,MAAA;gBACY,OAAA,CAAA,QAAA,CAAS,WAAa,EAAA,eAAA,EAAiB,CAAC,CAAA,CAAA;YAAA,CACpD;YACA,IAAI,OAAU,GAAA,EAAA,CAAA;YAEd,IAAA,IAAS,IAAI,CAAI,GAAA,CAAA,EAAG,IAAI,WAAY,CAAA,MAAA,EAAQ,EAAE,CAC9C,CAAA;gBACI,OAAA,IAAW,WAAA,CAAY,CAAC,CAAA,CAAA;YAAA,CAC5B;YACe,YAAA,GAAA,OAAA,CAAQ,WAAY,CAAA,OAAO,CAAE,CAAA,KAAA,CAAA;YAC5C,eAAA,IAAmB,gBAAgB,YAAe,GAAA,aAAA,CAAA;YAClC,aAAA,GAAA,YAAA,CAAA;QAAA,CACpB;IAAA,CACJ;IAEO,OACP,GAAA;QACI,IAAA,CAAK,eAAkB,GAAA,IAAA,CAAA;IAAA,CAC3B;AACJ,CAAA;AAAA,YAAA,GA/Za,gBAAA,CAGK,SAAY,GAAA;IACtB,IAAM,EAAA;uKACF,gBAAc,CAAA,WAAA;uKACd,gBAAc,CAAA,YAAA;uKACd,gBAAc,CAAA,YAAA;KAClB;IACA,IAAM,EAAA,YAAA;AACV,CAAA","ignoreList":[0]}},
    {"offset": {"line": 13734, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13740, "column": 0}, "map": {"version":3,"file":"BatchableSprite.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite/BatchableSprite.ts"],"sourcesContent":["import type { Matrix } from '../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableQuadElement } from '../../rendering/batcher/shared/DefaultBatcher';\nimport type { Topology } from '../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { BoundsData } from '../container/bounds/Bounds';\nimport type { Container } from '../container/Container';\n\n/**\n * A batchable sprite object.\n * @ignore\n */\nexport class BatchableSprite implements DefaultBatchableQuadElement\n{\n    public batcherName = 'default';\n    public topology: Topology = 'triangle-list';\n\n    // batch specific..\n    public readonly attributeSize = 4;\n    public readonly indexSize = 6;\n    public readonly packAsQuad = true;\n\n    public transform: Matrix;\n\n    public renderable: Container;\n    public texture: Texture;\n    public bounds: BoundsData;\n\n    public roundPixels: 0 | 1 = 0;\n\n    public _indexStart: number;\n    public _textureId: number;\n    public _attributeStart = 0; // location in the buffer\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n    get color() { return this.renderable.groupColorAlpha; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.bounds = null;\n    }\n}\n"],"names":[],"mappings":";;;;AAYO,MAAM,eACb,CAAA;IADO,WAAA,EAAA;QAEH,IAAA,CAAO,WAAc,GAAA,SAAA,CAAA;QACrB,IAAA,CAAO,QAAqB,GAAA,eAAA,CAAA;QAG5B,mBAAA;QAAA,IAAA,CAAgB,aAAgB,GAAA,CAAA,CAAA;QAChC,IAAA,CAAgB,SAAY,GAAA,CAAA,CAAA;QAC5B,IAAA,CAAgB,UAAa,GAAA,IAAA,CAAA;QAQ7B,IAAA,CAAO,WAAqB,GAAA,CAAA,CAAA;QAI5B,IAAA,CAAO,eAAkB,GAAA,CAAA,CAAA;QACzB,yBAAA;QAAA,IAAA,CAAO,QAAoB,GAAA,IAAA,CAAA;QAC3B,IAAA,CAAO,MAAgB,GAAA,IAAA,CAAA;IAAA,CAAA;IAEvB,IAAI,SAAY,GAAA;QAAE,OAAO,IAAA,CAAK,UAAW,CAAA,cAAA,CAAA;IAAA,CAAgB;IACzD,IAAI,KAAQ,GAAA;QAAE,OAAO,IAAA,CAAK,UAAW,CAAA,eAAA,CAAA;IAAA,CAAiB;IAE/C,KACP,GAAA;QACI,IAAA,CAAK,UAAa,GAAA,IAAA,CAAA;QAClB,IAAA,CAAK,OAAU,GAAA,IAAA,CAAA;QACf,IAAA,CAAK,QAAW,GAAA,IAAA,CAAA;QAChB,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QACd,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;IAAA,CAClB;AACJ","ignoreList":[0]}},
    {"offset": {"line": 13774, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13780, "column": 0}, "map": {"version":3,"file":"CanvasTextPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/canvas/CanvasTextPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { updateQuadBounds } from '../../../utils/data/updateQuadBounds';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../../sprite/BatchableSprite';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Container } from '../../container/Container';\nimport type { Text } from '../Text';\n\nexport class CanvasTextPipe implements RenderPipe<Text>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'text',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _gpuText: Record<number, {\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n    }> = Object.create(null);\n\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.runners.resolutionChange.add(this);\n        this._renderer.renderableGC.addManagedHash(this, '_gpuText');\n    }\n\n    public resolutionChange()\n    {\n        for (const i in this._gpuText)\n        {\n            const gpuText = this._gpuText[i];\n\n            if (!gpuText) continue;\n\n            const text = gpuText.batchableSprite.renderable as Text;\n\n            if (text._autoResolution)\n            {\n                text._resolution = this._renderer.resolution;\n                text.onViewUpdate();\n            }\n        }\n    }\n\n    public validateRenderable(text: Text): boolean\n    {\n        const gpuText = this._getGpuText(text);\n\n        const newKey = text._getKey();\n\n        if (gpuText.currentKey !== newKey)\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(text: Text, instructionSet: InstructionSet)\n    {\n        const gpuText = this._getGpuText(text);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (text._didTextUpdate)\n        {\n            this._updateText(text);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n    }\n\n    public updateRenderable(text: Text)\n    {\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (text._didTextUpdate)\n        {\n            this._updateText(text);\n        }\n\n        batchableSprite._batcher.updateElement(batchableSprite);\n    }\n\n    public destroyRenderable(text: Text)\n    {\n        text.off('destroyed', this._destroyRenderableBound);\n\n        this._destroyRenderableById(text.uid);\n    }\n\n    private _destroyRenderableById(textUid: number)\n    {\n        const gpuText = this._gpuText[textUid];\n\n        this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this._gpuText[textUid] = null;\n    }\n\n    private _updateText(text: Text)\n    {\n        const newKey = text._getKey();\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this._updateGpuText(text);\n        }\n\n        text._didTextUpdate = false;\n\n        const padding = text._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, text._anchor, batchableSprite.texture, padding);\n    }\n\n    private _updateGpuText(text: Text)\n    {\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.texture)\n        {\n            this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n        }\n\n        gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n        gpuText.currentKey = text._getKey();\n        batchableSprite.texture = gpuText.texture;\n    }\n\n    private _getGpuText(text: Text)\n    {\n        return this._gpuText[text.uid] || this.initGpuText(text);\n    }\n\n    public initGpuText(text: Text)\n    {\n        const gpuTextData: CanvasTextPipe['_gpuText'][number] = {\n            texture: null,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n        };\n\n        gpuTextData.batchableSprite.renderable = text;\n        gpuTextData.batchableSprite.transform = text.groupTransform;\n        gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        gpuTextData.batchableSprite.roundPixels = (this._renderer._roundPixels | text._roundPixels) as 0 | 1;\n\n        this._gpuText[text.uid] = gpuTextData;\n\n        text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n        this._updateText(text);\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        text.on('destroyed', this._destroyRenderableBound);\n\n        return gpuTextData;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuText)\n        {\n            this._destroyRenderableById(i as unknown as number);\n        }\n\n        this._gpuText = null;\n        this._renderer = null;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 13908, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13914, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem';\n\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n"],"names":[],"mappings":";;;;;;;;+JAIA,aAAA,CAAW,GAAA,mLAAI,mBAAgB,CAAA,CAAA;+JAC/B,aAAA,CAAW,GAAA,iLAAI,iBAAc,CAAA","ignoreList":[0]}},
    {"offset": {"line": 13924, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13930, "column": 0}, "map": {"version":3,"file":"resolveCharacters.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-bitmap/utils/resolveCharacters.ts"],"sourcesContent":["/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]} the flattened array of characters\n */\n\nexport function resolveCharacters(chars: string | (string | string[])[]): string[]\n{\n    // Skip unexpected 'empty set' check at end\n    if (chars === '')\n    {\n        return [];\n    }\n\n    // Split the chars string into individual characters\n    if (typeof chars === 'string')\n    {\n        chars = [chars];\n    }\n\n    // Handle an array of characters+ranges\n    const result: string[] = [];\n\n    for (let i = 0, j = chars.length; i < j; i++)\n    {\n        const item = chars[i];\n\n        // Handle range delimited by start/end chars\n        if (Array.isArray(item))\n        {\n            if (item.length !== 2)\n            {\n                throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n            }\n            if (item[0].length === 0 || item[1].length === 0)\n            {\n                throw new Error('[BitmapFont]: Invalid character delimiter.');\n            }\n\n            const startCode = item[0].charCodeAt(0);\n            const endCode = item[1].charCodeAt(0);\n\n            if (endCode < startCode)\n            {\n                throw new Error('[BitmapFont]: Invalid character range.');\n            }\n\n            for (let i = startCode, j = endCode; i <= j; i++)\n            {\n                result.push(String.fromCharCode(i));\n            }\n        }\n        else\n        {\n            result.push(...Array.from(item));\n        }\n    }\n\n    if (result.length === 0)\n    {\n        throw new Error('[BitmapFont]: Empty set when resolving characters.');\n    }\n\n    return result;\n}\n"],"names":["i","j"],"mappings":";;;;AASO,SAAS,kBAAkB,KAClC,EAAA;IAEI,IAAI,UAAU,EACd,EAAA;QACI,OAAO,EAAC,CAAA;IAAA,CACZ;IAGI,IAAA,OAAO,UAAU,QACrB,EAAA;QACI,KAAA,GAAQ;YAAC,KAAK;SAAA,CAAA;IAAA,CAClB;IAGA,MAAM,SAAmB,EAAC,CAAA;IAE1B,IAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,MAAM,MAAQ,EAAA,CAAA,GAAI,GAAG,CACzC,EAAA,CAAA;QACU,MAAA,IAAA,GAAO,KAAA,CAAM,CAAC,CAAA,CAAA;QAGhB,IAAA,KAAA,CAAM,OAAQ,CAAA,IAAI,CACtB,EAAA;YACQ,IAAA,IAAA,CAAK,MAAA,KAAW,CACpB,EAAA;gBACI,MAAM,IAAI,KAAA,CAAM,CAAiE,8DAAA,EAAA,IAAA,CAAK,MAAM,CAAG,CAAA,CAAA,CAAA,CAAA;YAAA,CACnG;YACI,IAAA,IAAA,CAAK,CAAC,CAAE,CAAA,MAAA,KAAW,KAAK,IAAK,CAAA,CAAC,CAAE,CAAA,MAAA,KAAW,CAC/C,EAAA;gBACU,MAAA,IAAI,MAAM,4CAA4C,CAAA,CAAA;YAAA,CAChE;YAEA,MAAM,SAAY,GAAA,IAAA,CAAK,CAAC,CAAA,CAAE,UAAA,CAAW,CAAC,CAAA,CAAA;YACtC,MAAM,OAAU,GAAA,IAAA,CAAK,CAAC,CAAA,CAAE,UAAA,CAAW,CAAC,CAAA,CAAA;YAEpC,IAAI,UAAU,SACd,EAAA;gBACU,MAAA,IAAI,MAAM,wCAAwC,CAAA,CAAA;YAAA,CAC5D;YAEA,IAAA,IAASA,KAAI,SAAWC,EAAAA,EAAAA,GAAI,OAASD,EAAAA,EAAAA,IAAKC,IAAGD,EAC7C,EAAA,CAAA;gBACI,MAAA,CAAO,IAAK,CAAA,MAAA,CAAO,YAAaA,CAAAA,EAAC,CAAC,CAAA,CAAA;YAAA,CACtC;QAAA,CAGJ,MAAA;YACI,MAAA,CAAO,IAAK,CAAA,GAAG,KAAM,CAAA,IAAA,CAAK,IAAI,CAAC,CAAA,CAAA;QAAA,CACnC;IAAA,CACJ;IAEI,IAAA,MAAA,CAAO,MAAA,KAAW,CACtB,EAAA;QACU,MAAA,IAAI,MAAM,oDAAoD,CAAA,CAAA;IAAA,CACxE;IAEO,OAAA,MAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 13972, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13978, "column": 0}, "map": {"version":3,"file":"AbstractBitmapFont.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-bitmap/AbstractBitmapFont.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\n\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { FontMetrics } from '../text/canvas/CanvasTextMetrics';\n\n/** @memberof text */\nexport interface CharData\n{\n    /** Unique id of character */\n    id: number;\n    /** x-offset to apply when rendering character */\n    xOffset: number;\n    /** y-offset to apply when rendering character. */\n    yOffset: number;\n    /** Advancement to apply to next character. */\n    xAdvance: number;\n    /** The kerning values for this character. */\n    kerning: Record<string, number>;\n    /** The texture of the character. */\n    texture?: Texture;\n}\n\n/**\n * The raw data of a character in a bitmap font.\n * @memberof text\n */\nexport interface RawCharData extends Omit<CharData, 'texture'>\n{\n    /** The page of the font texture that the character is on. */\n    page: number;\n    /** The x position of the character in the page. */\n    x: number;\n    /** The y position of the character in the page. */\n    y: number;\n    /** The width of the character in the page. */\n    width: number;\n    /** The height of the character in the page. */\n    height: number;\n    /** The letter of the character. */\n    letter: string;\n}\n\n/**\n * The raw data of a bitmap font.\n * @memberof text\n */\nexport interface BitmapFontData\n{\n    /** The offset of the font face from the baseline. */\n    baseLineOffset: number;\n    /** The map of characters by character code. */\n    chars: Record<string, RawCharData>;\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    pages: {\n        /** Unique id for bitmap texture */\n        id: number;\n        /** File name */\n        file: string\n    }[];\n    /** The line-height of the font face in pixels. */\n    lineHeight: number;\n    /** The size of the font face in pixels. */\n    fontSize: number;\n    /** The name of the font face. */\n    fontFamily: string;\n    /** The range and type of the distance field for this font. */\n    distanceField?: {\n        /** Type of distance field */\n        type: 'sdf' | 'msdf' | 'none';\n        /** Range of the distance field in pixels */\n        range: number;\n    };\n}\n\ninterface BitmapFontEvents<Type>\n{\n    destroy: [Type];\n}\n\n/**\n * An abstract representation of a bitmap font.\n * @memberof text\n */\nexport abstract class AbstractBitmapFont<FontType>\n    extends EventEmitter<BitmapFontEvents<FontType>>\n    implements Omit<BitmapFontData, 'chars' | 'pages' | 'fontSize'>\n{\n    /** The map of characters by character code. */\n    public readonly chars: Record<string, CharData> = Object.create(null);\n\n    /**\n     * The line-height of the font face in pixels.\n     * @type {number}\n     */\n    public readonly lineHeight: BitmapFontData['lineHeight'] = 0;\n\n    /**\n     * The name of the font face\n     * @type {string}\n     */\n    public readonly fontFamily: BitmapFontData['fontFamily'] = '';\n    /** The metrics of the font face. */\n    public readonly fontMetrics: FontMetrics = { fontSize: 0, ascent: 0, descent: 0 };\n    /**\n     * The offset of the font face from the baseline.\n     * @type {number}\n     */\n    public readonly baseLineOffset: BitmapFontData['baseLineOffset'] = 0;\n    /** The range and type of the distance field for this font. */\n    public readonly distanceField: BitmapFontData['distanceField'] = { type: 'none', range: 0 };\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    public readonly pages: { texture: Texture }[] = [];\n    /** should the fill for this font be applied as a tint to the text. */\n    public applyFillAsTint = true;\n\n    /** The size of the font face in pixels. */\n    public readonly baseMeasurementFontSize: number = 100;\n    protected baseRenderedFontSize = 100;\n\n    /**\n     * The name of the font face.\n     * @deprecated since 8.0.0 Use `fontFamily` instead.\n     */\n    public get font(): BitmapFontData['fontFamily']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead.');\n        // #endif\n\n        return this.fontFamily;\n    }\n\n    /**\n     * The map of base page textures (i.e., sheets of glyphs).\n     * @deprecated since 8.0.0 Use `pages` instead.\n     */\n    public get pageTextures(): AbstractBitmapFont<FontType>['pages']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.');\n        // #endif\n\n        return this.pages;\n    }\n\n    /**\n     * The size of the font face in pixels.\n     * @deprecated since 8.0.0 Use `fontMetrics.fontSize` instead.\n     */\n    public get size(): BitmapFontData['fontSize']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead.');\n        // #endif\n\n        return this.fontMetrics.fontSize;\n    }\n\n    /**\n     * The kind of distance field for this font or \"none\".\n     * @deprecated since 8.0.0 Use `distanceField.type` instead.\n     */\n    public get distanceFieldRange(): NonNullable<BitmapFontData['distanceField']>['range']\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead.');\n        // #endif\n\n        return this.distanceField.range;\n    }\n\n    /**\n     * The range of the distance field in pixels.\n     * @deprecated since 8.0.0 Use `distanceField.range` instead.\n     */\n    public get distanceFieldType(): NonNullable<BitmapFontData['distanceField']>['type']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead.');\n        // #endif\n\n        return this.distanceField.type;\n    }\n\n    public destroy(destroyTextures = false): void\n    {\n        this.emit('destroy', this as unknown as FontType);\n\n        this.removeAllListeners();\n\n        for (const i in this.chars)\n        {\n            // texture may not exist if the char is \" \", \\n, \\r, or \\t.\n            this.chars[i].texture?.destroy();\n        }\n\n        (this.chars as null) = null;\n\n        if (destroyTextures)\n        {\n            this.pages.forEach((page) => page.texture.destroy(true));\n            (this.pages as any) = null;\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;AAoFO,MAAe,iNACV,UAEZ,CAAA;IAHO,WAAA,EAAA;QAAA,KAAA,CAAA,GAAA,SAAA,CAAA,CAAA;QAKH,6CAAA,GAAgB,IAAA,CAAA,KAAA,GAAA,aAAA,GAAyC,MAAA,CAAA,MAAA,CAAO,IAAI,CAAA,CAAA;QAMpE;;;KAAA,GAAA,IAAA,CAAgB,UAA2C,GAAA,CAAA,CAAA;QAM3D;;;KAAA,GAAA,IAAA,CAAgB,UAA2C,GAAA,EAAA,CAAA;QAE3D,kCAAA,GAAA,IAAA,CAAgB,WAAA,GAA2B;YAAE,QAAA,EAAU;YAAG,MAAQ,EAAA,CAAA;YAAG,SAAS,CAAE;QAAA,CAAA,CAAA;QAKhF;;;KAAA,GAAA,IAAA,CAAgB,cAAmD,GAAA,CAAA,CAAA;QAEnE,4DAAA,GAAA,IAAA,CAAgB,aAAiD,GAAA;YAAE,IAAM,EAAA,MAAA;YAAQ,OAAO,CAAE;QAAA,CAAA,CAAA;QAE1F,4DAAA,GAAA,IAAA,CAAgB,KAAA,GAAgC,EAAC,CAAA;QAEjD,oEAAA,GAAA,IAAA,CAAO,eAAkB,GAAA,IAAA,CAAA;QAGzB,yCAAA,GAAA,IAAA,CAAgB,uBAAkC,GAAA,GAAA,CAAA;QAClD,IAAA,CAAU,oBAAuB,GAAA,GAAA,CAAA;IAAA,CAAA;IAAA;;;GAAA,GAMjC,IAAW,IACX,GAAA;YAEI,oLAAA,wKAAY,SAAA,EAAQ,0EAA0E,CAAA,CAAA;QAG9F,OAAO,IAAK,CAAA,UAAA,CAAA;IAAA,CAChB;IAAA;;;GAAA,GAMA,IAAW,YACX,GAAA;kLAEI,cAAA,wKAAY,SAAA,EAAQ,6EAA6E,CAAA,CAAA;QAGjG,OAAO,IAAK,CAAA,KAAA,CAAA;IAAA,CAChB;IAAA;;;GAAA,GAMA,IAAW,IACX,GAAA;kLAEI,cAAA,uKAAY,UAAA,EAAQ,oFAAoF,CAAA,CAAA;QAGxG,OAAO,IAAA,CAAK,WAAY,CAAA,QAAA,CAAA;IAAA,CAC5B;IAAA;;;GAAA,GAMA,IAAW,kBACX,GAAA;kLAGI,cAAA,uKAAY,UAAA,EAAQ,iGAAiG,CAAA,CAAA;QAGrH,OAAO,IAAA,CAAK,aAAc,CAAA,KAAA,CAAA;IAAA,CAC9B;IAAA;;;GAAA,GAMA,IAAW,iBACX,GAAA;QAEI,wLAAA,wKAAY,SAAA,EAAQ,+FAA+F,CAAA,CAAA;QAGnH,OAAO,IAAA,CAAK,aAAc,CAAA,IAAA,CAAA;IAAA,CAC9B;IAEO,OAAA,CAAQ,kBAAkB,KACjC,EAAA;QACS,IAAA,CAAA,IAAA,CAAK,WAAW,IAA2B,CAAA,CAAA;QAEhD,IAAA,CAAK,kBAAmB,EAAA,CAAA;QAEb,IAAA,MAAA,CAAA,IAAK,IAAA,CAAK,KACrB,CAAA;YAEI,IAAA,CAAK,KAAM,CAAA,CAAC,CAAE,CAAA,OAAA,EAAS,OAAQ,EAAA,CAAA;QAAA,CACnC;QAEC,IAAA,CAAK,KAAiB,GAAA,IAAA,CAAA;QAEvB,IAAI,eACJ,EAAA;YACS,IAAA,CAAA,KAAA,CAAM,OAAA,CAAQ,CAAC,IAAA,GAAS,KAAK,OAAQ,CAAA,OAAA,CAAQ,IAAI,CAAC,CAAA,CAAA;YACtD,IAAA,CAAK,KAAgB,GAAA,IAAA,CAAA;QAAA,CAC1B;IAAA,CACJ;AACJ","ignoreList":[0]}},
    {"offset": {"line": 14067, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14073, "column": 0}, "map": {"version":3,"file":"DynamicBitmapFont.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-bitmap/DynamicBitmapFont.ts"],"sourcesContent":["import { Color } from '../../color/Color';\nimport { Rectangle } from '../../maths/shapes/Rectangle';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport { ImageSource } from '../../rendering/renderers/shared/texture/sources/ImageSource';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics';\nimport { fontStringFromTextStyle } from '../text/canvas/utils/fontStringFromTextStyle';\nimport { getCanvasFillStyle } from '../text/canvas/utils/getCanvasFillStyle';\nimport { TextStyle } from '../text/TextStyle';\nimport { AbstractBitmapFont } from './AbstractBitmapFont';\nimport { resolveCharacters } from './utils/resolveCharacters';\n\nimport type { ICanvasRenderingContext2D } from '../../environment/canvas/ICanvasRenderingContext2D';\nimport type { CanvasAndContext } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport type { FontMetrics } from '../text/canvas/CanvasTextMetrics';\n\nexport interface DynamicBitmapFontOptions\n{\n    style: TextStyle\n    skipKerning?: boolean\n    resolution?: number\n    padding?: number\n    overrideFill?: boolean\n    overrideSize?: boolean\n    textureSize?: number\n    mipmap?: boolean\n}\n\n/**\n * A BitmapFont that generates its glyphs dynamically.\n * @memberof text\n * @ignore\n */\nexport class DynamicBitmapFont extends AbstractBitmapFont<DynamicBitmapFont>\n{\n    public static defaultOptions: DynamicBitmapFontOptions = {\n        textureSize: 512,\n        style: new TextStyle(),\n        mipmap: true,\n    };\n    /**\n     * this is a resolution modifier for the font size..\n     * texture resolution will also be used to scale texture according to its font size also\n     */\n    public resolution = 1;\n    /** The pages of the font. */\n    public override readonly pages: {canvasAndContext?: CanvasAndContext, texture: Texture}[] = [];\n\n    private readonly _padding: number = 0;\n    private readonly _measureCache: Record<string, number> = Object.create(null);\n    private _currentChars: string[] = [];\n    private _currentX = 0;\n    private _currentY = 0;\n    private _currentPageIndex = -1;\n    private readonly _style: TextStyle;\n    private readonly _skipKerning: boolean = false;\n    private readonly _textureSize: number;\n    private readonly _mipmap: boolean;\n\n    /**\n     * @param options - The options for the dynamic bitmap font.\n     */\n    constructor(options: DynamicBitmapFontOptions)\n    {\n        super();\n\n        const dynamicOptions = { ...DynamicBitmapFont.defaultOptions, ...options };\n\n        this._textureSize = dynamicOptions.textureSize;\n        this._mipmap = dynamicOptions.mipmap;\n\n        const style = dynamicOptions.style.clone();\n\n        if (dynamicOptions.overrideFill)\n        {\n            // assuming no shape fill..\n            style._fill.color = 0xffffff;\n            style._fill.alpha = 1;\n            style._fill.texture = Texture.WHITE;\n            style._fill.fill = null;\n        }\n\n        this.applyFillAsTint = dynamicOptions.overrideFill;\n\n        const requestedFontSize = style.fontSize;\n\n        // adjust font size to match the base measurement size\n        style.fontSize = this.baseMeasurementFontSize;\n\n        const font = fontStringFromTextStyle(style);\n\n        if (dynamicOptions.overrideSize)\n        {\n            if (style._stroke)\n            {\n                // we want the stroke to fit the size of the requested text, so we need to scale it\n                // accordingly (eg font size 20, with stroke 10 - stroke is 50% of size,\n                // as dynamic font is size 100, the stroke should be adjusted to 50 to make it look right)\n                style._stroke.width *= this.baseRenderedFontSize / requestedFontSize;\n            }\n        }\n        else\n        {\n            style.fontSize = this.baseRenderedFontSize = requestedFontSize;\n        }\n\n        this._style = style;\n        this._skipKerning = dynamicOptions.skipKerning ?? false;\n        this.resolution = dynamicOptions.resolution ?? 1;\n        this._padding = dynamicOptions.padding ?? 4;\n\n        (this.fontMetrics as FontMetrics) = CanvasTextMetrics.measureFont(font);\n        (this.lineHeight as number) = style.lineHeight || this.fontMetrics.fontSize || style.fontSize;\n    }\n\n    public ensureCharacters(chars: string): void\n    {\n        const charList = resolveCharacters(chars)\n            .filter((char) => !this._currentChars.includes(char))\n            .filter((char, index, self) => self.indexOf(char) === index);\n        // filter returns..\n\n        if (!charList.length) return;\n\n        this._currentChars = [...this._currentChars, ...charList];\n\n        let pageData;\n\n        if (this._currentPageIndex === -1)\n        {\n            pageData = this._nextPage();\n        }\n        else\n        {\n            pageData = this.pages[this._currentPageIndex];\n        }\n\n        let { canvas, context } = pageData.canvasAndContext;\n        let textureSource = pageData.texture.source;\n\n        const style = this._style;\n\n        let currentX = this._currentX;\n        let currentY = this._currentY;\n\n        const fontScale = this.baseRenderedFontSize / this.baseMeasurementFontSize;\n        const padding = this._padding * fontScale;\n\n        let maxCharHeight = 0;\n        let skipTexture = false;\n\n        const maxTextureWidth = canvas.width / this.resolution;\n        const maxTextureHeight = canvas.height / this.resolution;\n\n        for (let i = 0; i < charList.length; i++)\n        {\n            const char = charList[i];\n\n            const metrics = CanvasTextMetrics.measureText(char, style, canvas, false);\n\n            // override the line height.. we want this to be the glyps height\n            // not the user specified one.\n            metrics.lineHeight = metrics.height;\n\n            const width = metrics.width * fontScale;\n            // This is ugly - but italics are given more space so they don't overlap\n            const textureGlyphWidth = Math.ceil((style.fontStyle === 'italic' ? 2 : 1) * width);\n\n            const height = (metrics.height) * fontScale;\n\n            const paddedWidth = textureGlyphWidth + (padding * 2);\n            const paddedHeight = height + (padding * 2);\n\n            skipTexture = false;\n            // don't let empty characters count towards the maxCharHeight\n            if (char !== '\\n' && char !== '\\r' && char !== '\\t' && char !== ' ')\n            {\n                skipTexture = true;\n                maxCharHeight = Math.ceil(Math.max(paddedHeight, maxCharHeight));// / 1.5;\n            }\n\n            if (currentX + paddedWidth > maxTextureWidth)\n            {\n                currentY += maxCharHeight;\n\n                // reset the line x and height..\n                maxCharHeight = paddedHeight;\n                currentX = 0;\n\n                if (currentY + maxCharHeight > maxTextureHeight)\n                {\n                    textureSource.update();\n\n                    const pageData = this._nextPage();\n\n                    canvas = pageData.canvasAndContext.canvas;\n                    context = pageData.canvasAndContext.context;\n                    textureSource = pageData.texture.source;\n\n                    currentY = 0;\n                }\n            }\n\n            const xAdvance = (width / fontScale)\n                - (style.dropShadow?.distance ?? 0)\n                - (style._stroke?.width ?? 0);\n\n            // This is in coord space of the measurements.. not the texture\n            this.chars[char] = {\n                id: char.codePointAt(0),\n                xOffset: -this._padding,\n                yOffset: -this._padding,\n                xAdvance,\n                kerning: {},\n            };\n\n            if (skipTexture)\n            {\n                this._drawGlyph(\n                    context,\n                    metrics,\n                    currentX + padding,\n                    currentY + padding,\n                    fontScale,\n                    style,\n                );\n\n                const px = textureSource.width * fontScale;\n                const py = textureSource.height * fontScale;\n\n                const frame = new Rectangle(\n                    ((currentX) / px) * textureSource.width,\n                    ((currentY) / py) * textureSource.height,\n                    ((paddedWidth) / px) * textureSource.width,\n                    ((paddedHeight) / py) * textureSource.height,\n                );\n\n                this.chars[char].texture = new Texture({\n                    source: textureSource,\n                    frame,\n                });\n\n                currentX += Math.ceil(paddedWidth);\n            }\n\n            // now add it to the font data..\n        }\n\n        textureSource.update();\n\n        this._currentX = currentX;\n        this._currentY = currentY;\n\n        // now apply kerning..\n        this._skipKerning && this._applyKerning(charList, context);\n    }\n\n    /**\n     * @deprecated since 8.0.0\n     * The map of base page textures (i.e., sheets of glyphs).\n     */\n    public override get pageTextures(): DynamicBitmapFont['pages']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.');\n        // #endif\n\n        return this.pages;\n    }\n\n    private _applyKerning(newChars: string[], context: ICanvasRenderingContext2D): void\n    {\n        const measureCache = this._measureCache;\n\n        for (let i = 0; i < newChars.length; i++)\n        {\n            const first = newChars[i];\n\n            for (let j = 0; j < this._currentChars.length; j++)\n            {\n                // first go through new char being first\n                const second = this._currentChars[j];\n\n                let c1 = measureCache[first];\n\n                if (!c1) c1 = measureCache[first] = context.measureText(first).width;\n\n                let c2 = measureCache[second];\n\n                if (!c2) c2 = measureCache[second] = context.measureText(second).width;\n\n                let total = context.measureText(first + second).width;\n                let amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    this.chars[first].kerning[second] = amount;\n                }\n\n                // then go through new char being second\n                total = context.measureText(first + second).width;\n                amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    this.chars[second].kerning[first] = amount;\n                }\n            }\n        }\n    }\n\n    private _nextPage(): {canvasAndContext: CanvasAndContext, texture: Texture}\n    {\n        this._currentPageIndex++;\n\n        const textureResolution = this.resolution;\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n            this._textureSize,\n            this._textureSize,\n            textureResolution\n        );\n\n        this._setupContext(canvasAndContext.context, this._style, textureResolution);\n\n        const resolution = textureResolution * (this.baseRenderedFontSize / this.baseMeasurementFontSize);\n        const texture = new Texture({\n            source: new ImageSource({\n                resource: canvasAndContext.canvas,\n                resolution,\n                alphaMode: 'premultiply-alpha-on-upload',\n                autoGenerateMipmaps: this._mipmap,\n            }),\n\n        });\n\n        const pageData = {\n            canvasAndContext,\n            texture,\n        };\n\n        this.pages[this._currentPageIndex] = pageData;\n\n        return pageData;\n    }\n\n    // canvas style!\n    private _setupContext(context: ICanvasRenderingContext2D, style: TextStyle, resolution: number): void\n    {\n        style.fontSize = this.baseRenderedFontSize;\n        context.scale(resolution, resolution);\n        context.font = fontStringFromTextStyle(style);\n        style.fontSize = this.baseMeasurementFontSize;\n        context.textBaseline = style.textBaseline;\n\n        const stroke = style._stroke;\n        const strokeThickness = stroke?.width ?? 0;\n\n        if (stroke)\n        {\n            context.lineWidth = strokeThickness;\n            context.lineJoin = stroke.join;\n            context.miterLimit = stroke.miterLimit;\n\n            // TODO prolly cache this??\n            context.strokeStyle = getCanvasFillStyle(stroke, context);\n        }\n\n        if (style._fill)\n        {\n            // set canvas text styles\n            context.fillStyle = getCanvasFillStyle(style._fill, context);\n        }\n\n        if (style.dropShadow)\n        {\n            const shadowOptions = style.dropShadow;\n            const rgb = Color.shared.setValue(shadowOptions.color).toArray();\n\n            const dropShadowBlur = shadowOptions.blur * resolution;\n            const dropShadowDistance = shadowOptions.distance * resolution;\n\n            context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${shadowOptions.alpha})`;\n            context.shadowBlur = dropShadowBlur;\n            context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n            context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance;\n        }\n        else\n        {\n            context.shadowColor = 'black';\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n    }\n\n    private _drawGlyph(\n        context: ICanvasRenderingContext2D,\n        metrics: CanvasTextMetrics,\n        x: number,\n        y: number,\n        fontScale: number,\n        style: TextStyle\n    ): void\n    {\n        const char = metrics.text;\n        const fontProperties = metrics.fontProperties;\n        const stroke = style._stroke;\n\n        const strokeThickness = (stroke?.width ?? 0) * fontScale;\n\n        const tx = x + (strokeThickness / 2);\n        const ty = y - (strokeThickness / 2);\n\n        const descent = fontProperties.descent * fontScale;\n        const lineHeight = metrics.lineHeight * fontScale;\n\n        if (style.stroke && strokeThickness)\n        {\n            context.strokeText(char, tx, ty + lineHeight - descent);\n        }\n\n        if (style._fill)\n        {\n            context.fillText(char, tx, ty + lineHeight - descent);\n        }\n    }\n\n    public override destroy(): void\n    {\n        super.destroy();\n\n        for (let i = 0; i < this.pages.length; i++)\n        {\n            const { canvasAndContext, texture } = this.pages[i];\n\n            CanvasPool.returnCanvasAndContext(canvasAndContext);\n            texture.destroy(true);\n        }\n\n        (this.pages as null) = null;\n    }\n}\n"],"names":["pageData"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 14344, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14350, "column": 0}, "map": {"version":3,"file":"getBitmapTextLayout.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-bitmap/utils/getBitmapTextLayout.ts"],"sourcesContent":["import type { TextStyle } from '../../text/TextStyle';\nimport type { AbstractBitmapFont } from '../AbstractBitmapFont';\n\nexport interface BitmapTextLayoutData\n{\n    width: number;\n    height: number;\n    scale: number;\n    offsetY: number;\n    lines: {\n        width: number\n        charPositions: number[],\n        chars: string[],\n        // / spaces: number\n        spaceWidth: number\n        spacesIndex: number[]\n    }[];\n}\n\nexport function getBitmapTextLayout(\n    chars: string[],\n    style: TextStyle,\n    font: AbstractBitmapFont<any>,\n    trimEnd: boolean\n): BitmapTextLayoutData\n{\n    const layoutData: BitmapTextLayoutData = {\n        width: 0,\n        height: 0,\n        offsetY: 0,\n        scale: style.fontSize / font.baseMeasurementFontSize,\n        lines: [{\n            width: 0,\n            charPositions: [] as number[],\n            spaceWidth: 0,\n            spacesIndex: [],\n            chars: [],\n        }]\n    };\n\n    layoutData.offsetY = font.baseLineOffset;\n\n    let currentLine = layoutData.lines[0];\n\n    let previousChar: string = null;\n    let firstWord = true;\n    //    let spaceCount = 0;\n\n    const currentWord = {\n        spaceWord: false,\n        width: 0,\n        start: 0,\n        index: 0, // use index to not modify the array as we use it a lot!\n        positions: [] as number[],\n        chars: [] as string[],\n    };\n\n    const nextWord = (word: typeof currentWord) =>\n    {\n        const start = currentLine.width;\n\n        for (let j = 0; j < currentWord.index; j++)\n        {\n            const position = word.positions[j];\n\n            currentLine.chars.push(word.chars[j]);\n            currentLine.charPositions.push(position + start);\n        }\n\n        currentLine.width += word.width;\n\n        firstWord = false;\n\n        // reset the word..\n        currentWord.width = 0;\n        currentWord.index = 0;\n        currentWord.chars.length = 0;\n\n        // spaceCount = 0;\n    };\n\n    const nextLine = () =>\n    {\n        let index = currentLine.chars.length - 1;\n\n        if (trimEnd)\n        {\n            let lastChar = currentLine.chars[index];\n\n            while (lastChar === ' ')\n            {\n                currentLine.width -= font.chars[lastChar].xAdvance;\n                lastChar = currentLine.chars[--index];\n            }\n        }\n\n        layoutData.width = Math.max(layoutData.width, currentLine.width);\n\n        currentLine = {\n            width: 0,\n            charPositions: [],\n            chars: [],\n            spaceWidth: 0,\n            spacesIndex: [],\n        };\n\n        firstWord = true;\n        layoutData.lines.push(currentLine);\n        layoutData.height += font.lineHeight;\n    };\n\n    const scale = font.baseMeasurementFontSize / style.fontSize;\n\n    const adjustedLetterSpacing = style.letterSpacing * scale;\n    const adjustedWordWrapWidth = style.wordWrapWidth * scale;\n\n    // loop an extra time to force a line break..\n    for (let i = 0; i < chars.length + 1; i++)\n    {\n        let char: string;\n\n        const isEnd = i === chars.length;\n\n        if (!isEnd)\n        {\n            char = chars[i];\n        }\n\n        const charData = font.chars[char] || font.chars[' '];\n\n        const isSpace = (/(?:\\s)/).test(char);\n        const isWordBreak = isSpace || char === '\\r' || char === '\\n' || isEnd;\n\n        // spaceCount++;\n        // wasSpace = isSpace;\n\n        if (isWordBreak)\n        {\n            const addWordToNextLine = !firstWord\n                && style.wordWrap\n                && (currentLine.width + currentWord.width - adjustedLetterSpacing) > adjustedWordWrapWidth;\n\n            if (addWordToNextLine)\n            {\n                nextLine();\n\n                nextWord(currentWord);\n\n                if (!isEnd)\n                {\n                    currentLine.charPositions.push(0);\n                }\n            }\n            else\n            {\n                currentWord.start = currentLine.width;\n\n                nextWord(currentWord);\n\n                if (!isEnd)\n                {\n                    currentLine.charPositions.push(0);\n                }\n            }\n\n            if (char === '\\r' || char === '\\n')\n            {\n                if (currentLine.width !== 0)\n                {\n                    nextLine();\n                }\n            }\n            else if (!isEnd)\n            {\n                const spaceWidth = charData.xAdvance + (charData.kerning[previousChar] || 0) + adjustedLetterSpacing;\n\n                currentLine.width += spaceWidth;\n\n                currentLine.spaceWidth = spaceWidth;\n                currentLine.spacesIndex.push(currentLine.charPositions.length);\n                currentLine.chars.push(char);\n\n                // spaceCount++;\n            }\n        }\n        else\n        {\n            const kerning = charData.kerning[previousChar] || 0;\n\n            const nextCharWidth = charData.xAdvance + kerning + adjustedLetterSpacing;\n\n            currentWord.positions[currentWord.index++] = currentWord.width + kerning;\n            currentWord.chars.push(char);\n\n            currentWord.width += nextCharWidth;\n        }\n\n        previousChar = char;\n        // lastChar = char;\n    }\n\n    nextLine();\n\n    if (style.align === 'center')\n    {\n        alignCenter(layoutData);\n    }\n    else if (style.align === 'right')\n    {\n        alignRight(layoutData);\n    }\n    else if (style.align === 'justify')\n    {\n        alignJustify(layoutData);\n    }\n\n    return layoutData;\n}\n\nfunction alignCenter(measurementData: BitmapTextLayoutData)\n{\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n        const offset = ((measurementData.width / 2) - (line.width / 2));\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            line.charPositions[j] += offset;\n        }\n    }\n}\n\nfunction alignRight(measurementData: BitmapTextLayoutData)\n{\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n        const offset = ((measurementData.width) - (line.width));\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            line.charPositions[j] += offset;\n        }\n    }\n}\n\nfunction alignJustify(measurementData: BitmapTextLayoutData)\n{\n    const width = measurementData.width;\n\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n\n        let indy = 0;\n        let spaceIndex = line.spacesIndex[indy++];\n\n        let offset = 0;\n\n        const totalSpaces = line.spacesIndex.length;\n\n        const newSpaceWidth = (width - line.width) / totalSpaces;\n\n        const spaceWidth = newSpaceWidth;\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            if (j === spaceIndex)\n            {\n                spaceIndex = line.spacesIndex[indy++];\n\n                offset += spaceWidth;\n            }\n\n            line.charPositions[j] += offset;\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 14513, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14519, "column": 0}, "map": {"version":3,"file":"BitmapFontManager.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-bitmap/BitmapFontManager.ts"],"sourcesContent":["import { Cache } from '../../assets/cache/Cache';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { warn } from '../../utils/logging/warn';\nimport { TextStyle } from '../text/TextStyle';\nimport { DynamicBitmapFont } from './DynamicBitmapFont';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\nimport { resolveCharacters } from './utils/resolveCharacters';\n\nimport type { TextStyleOptions } from '../text/TextStyle';\nimport type { BitmapFont } from './BitmapFont';\nimport type { BitmapTextLayoutData } from './utils/getBitmapTextLayout';\n\nlet fontCount = 0;\n\n/**\n *\n * The options for installing a new BitmapFont. Once installed the font will be available for use in the BitmapText.\n * It can be accessed by the `fontFamily` property of the TextStyle.\n *\n * Install a new BitmapFont will create the characters provided for the font and store them in the cache.\n * But don't worry, if a character is requested that hasn't been generated yet, it will be created on the fly.\n * @memberof text\n */\nexport interface BitmapFontInstallOptions\n{\n    /** the name of the font, this will be the name you use in the fontFamily of text style to access this font */\n    name?: string;\n    /**\n     * Characters included in the font set. You can also use ranges.\n     * For example, `[['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[] \"]`.\n     * Don't forget to include spaces ' ' in your character set!\n     * @default BitmapFont.ALPHANUMERIC\n     */\n    chars?: string | (string | string[])[];\n    /**\n     * Render resolution for glyphs.\n     * @default 1\n     */\n    resolution?: number;\n    /**\n     * Padding between glyphs on texture atlas. Lower values could mean more visual artifacts\n     * and bleeding from other glyphs, larger values increase the space required on the texture.\n     * @default 4\n     */\n    padding?: number;\n    /**\n     * Skip generation of kerning information for the BitmapFont.\n     * If true, this could potentially increase the performance, but may impact the rendered text appearance.\n     * @default false\n     */\n    skipKerning?: boolean;\n    /** Style options to render with BitmapFont. */\n    style?: TextStyle | TextStyleOptions;\n}\n\n/**\n * The BitmapFontManager is a helper that exists to install and uninstall fonts\n * into the cache for BitmapText objects.\n * @memberof text\n * @name BitmapFontManager\n * @example\n * import { BitmapFontManager, BitmapText } from 'pixi.js';\n *\n * BitmapFontManager.install({\n *   name: 'TitleFont',\n *   style: {}\n * });\n *\n * const title = new BitmapText({ text: 'This is the title', style: { fontFamily: 'TitleFont' }});\n */\nclass BitmapFontManagerClass\n{\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    public readonly ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    public readonly NUMERIC = [['0', '9']];\n\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    public readonly ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n\n    /**\n     * This character set consists of all the ASCII table.\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    public readonly ASCII = [[' ', '~']];\n\n    /** Default options for installing a new BitmapFont. */\n    public defaultOptions: Omit<BitmapFontInstallOptions, 'style'> = {\n        chars: this.ALPHANUMERIC,\n        resolution: 1,\n        padding: 4,\n        skipKerning: false,\n    };\n\n    /**\n     * Get a font for the specified text and style.\n     * @param text - The text to get the font for\n     * @param style - The style to use\n     */\n    public getFont(text: string, style: TextStyle): BitmapFont\n    {\n        let fontFamilyKey = `${style.fontFamily as string}-bitmap`;\n        let overrideFill = true;\n\n        // assuming there is no texture we can use a tint!\n        if (style._fill.fill && !style._stroke)\n        {\n            fontFamilyKey += style._fill.fill.styleKey;\n            overrideFill = false;\n        }\n        else if (style._stroke || style.dropShadow)\n        {\n            // if there is a stoke, we need to use the style key as this the font generated cannot be tinted\n            // due to the fact the font has at least two colors.\n            let key = style.styleKey;\n\n            // remove the font size..\n            key = key.substring(0, key.lastIndexOf('-'));\n\n            fontFamilyKey = `${key}-bitmap`;\n            overrideFill = false;\n        }\n\n        // first get us the the right font...\n        if (!Cache.has(fontFamilyKey))\n        {\n            const fnt = new DynamicBitmapFont({\n                style,\n                overrideFill,\n                overrideSize: true,\n                ...this.defaultOptions,\n            });\n\n            fontCount++;\n\n            // warn users if they have created too many dynamic fonts\n            if (fontCount > 50)\n            {\n                // eslint-disable-next-line max-len\n                warn('BitmapText', `You have dynamically created ${fontCount} bitmap fonts, this can be inefficient. Try pre installing your font styles using \\`BitmapFont.install({name:\"style1\", style})\\``);\n            }\n\n            fnt.once('destroy', () =>\n            {\n                fontCount--;\n                Cache.remove(fontFamilyKey);\n            });\n\n            Cache.set(\n                fontFamilyKey as string,\n                fnt\n            );\n        }\n\n        const dynamicFont = Cache.get(fontFamilyKey);\n\n        (dynamicFont as DynamicBitmapFont).ensureCharacters?.(text);\n\n        return dynamicFont;\n    }\n\n    /**\n     * Get the layout of a text for the specified style.\n     * @param text - The text to get the layout for\n     * @param style - The style to use\n     * @param trimEnd - Whether to ignore whitespaces at the end of each line\n     */\n    public getLayout(text: string, style: TextStyle, trimEnd: boolean = true): BitmapTextLayoutData\n    {\n        const bitmapFont = this.getFont(text, style);\n\n        return getBitmapTextLayout([...text], style, bitmapFont, trimEnd);\n    }\n\n    /**\n     * Measure the text using the specified style.\n     * @param text - The text to measure\n     * @param style - The style to use\n     * @param trimEnd - Whether to ignore whitespaces at the end of each line\n     */\n    public measureText(\n        text: string,\n        style: TextStyle,\n        trimEnd: boolean = true\n    ): { width: number; height: number; scale: number; offsetY: number }\n    {\n        return this.getLayout(text, style, trimEnd);\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set\n     * @param options - Setup options for font generation.\n     * @returns Font generated by style options.\n     * @example\n     * import { BitmapFontManager, BitmapText } from 'pixi.js';\n     *\n     * BitmapFontManager.install('TitleFont', {\n     *     fontFamily: 'Arial',\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: 'purple',\n     * });\n     *\n     * const title = new BitmapText({ text: 'This is the title', fontFamily: 'TitleFont' });\n     */\n    public install(options: BitmapFontInstallOptions): BitmapFont;\n    /** @deprecated since 7.0.0 */\n    public install(name: string, style?: TextStyle | TextStyleOptions, options?: BitmapFontInstallOptions): BitmapFont;\n    // eslint-disable-next-line max-len\n    public install(...args: [string | BitmapFontInstallOptions, (TextStyle | TextStyleOptions)?, BitmapFontInstallOptions?]): BitmapFont\n    {\n        let options = args[0] as BitmapFontInstallOptions;\n\n        if (typeof options === 'string')\n        {\n            options = {\n                name: options,\n                style: args[1],\n                chars: args[2]?.chars,\n                resolution: args[2]?.resolution,\n                padding: args[2]?.padding,\n                skipKerning: args[2]?.skipKerning,\n            } as BitmapFontInstallOptions;\n\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})');\n            // #endif\n        }\n\n        const name = options?.name;\n\n        if (!name)\n        {\n            throw new Error('[BitmapFontManager] Property `name` is required.');\n        }\n\n        options = { ...this.defaultOptions, ...options };\n\n        const textStyle = options.style;\n\n        const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n        const overrideFill = style._fill.fill !== null && style._fill.fill !== undefined;\n        const font = new DynamicBitmapFont({\n            style,\n            overrideFill,\n            skipKerning: options.skipKerning,\n            padding: options.padding,\n            resolution: options.resolution,\n            overrideSize: false\n        });\n\n        const flatChars = resolveCharacters(options.chars);\n\n        font.ensureCharacters(flatChars.join(''));\n\n        Cache.set(`${name}-bitmap`, font);\n\n        font.once('destroy', () => Cache.remove(`${name}-bitmap`));\n\n        return font;\n    }\n\n    /**\n     * Uninstalls a bitmap font from the cache.\n     * @param {string} name - The name of the bitmap font to uninstall.\n     */\n    public uninstall(name: string)\n    {\n        const cacheKey = `${name}-bitmap`;\n        const font = Cache.get<BitmapFont>(cacheKey);\n\n        if (font)\n        {\n            font.destroy();\n        }\n    }\n}\n\nexport const BitmapFontManager = new BitmapFontManagerClass();\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 14711, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14717, "column": 0}, "map": {"version":3,"file":"localUniformMSDFBit.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/sdfShader/shader-bits/localUniformMSDFBit.ts"],"sourcesContent":["// TODO eventually we should not use this bit, but instead use the localUniformBit\n// have the MSDF bit be merged in with the localUniformBit\n\nexport const localUniformMSDFBit = {\n    name: 'local-uniform-msdf-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `,\n        main: /* wgsl */` \n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        `\n\n    }\n};\n\nexport const localUniformMSDFBitGl = {\n    name: 'local-uniform-msdf-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform float uDistance;\n         `,\n        main: /* glsl */` \n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        `\n\n    }\n};\n"],"names":[],"mappings":";;;;;AAGO,MAAM,mBAAsB,GAAA;IAC/B,IAAM,EAAA,wBAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;;;;;QAAA,CAAA;QAUlB,IAAA,EAAA,QAAA,GAAgB,CAAA;;;QAAA,CAAA;QAIhB,GAAA,EAAA,QAAA,GAAe,CAAA;;;;;QAAA,CAAA;IAAA,CAMnB;IACA,QAAU,EAAA;QACN,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;;;;SAAA,CAAA;QASlB,IAAA,EAAA,QAAA,GAAgB,CAAA;;QAAA,CAAA;IAAA,CAIpB;AACJ,EAAA;AAEO,MAAM,qBAAwB,GAAA;IACjC,IAAM,EAAA,wBAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;QAAA,CAAA;QAKlB,IAAA,EAAA,QAAA,GAAgB,CAAA;;;QAAA,CAAA;QAIhB,GAAA,EAAA,QAAA,GAAe,CAAA;;;;;QAAA,CAAA;IAAA,CAMnB;IACA,QAAU,EAAA;QACN,MAAA,EAAA,QAAA,GAAkB,CAAA;;SAAA,CAAA;QAGlB,IAAA,EAAA,QAAA,GAAgB,CAAA;;QAAA,CAAA;IAAA,CAIpB;AACJ","ignoreList":[0]}},
    {"offset": {"line": 14791, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14797, "column": 0}, "map": {"version":3,"file":"mSDFBit.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/sdfShader/shader-bits/mSDFBit.ts"],"sourcesContent":["export const mSDFBit = {\n    name: 'msdf-bit',\n    fragment: {\n        header: /* wgsl */`\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n             \n            }\n        `,\n    }\n\n};\n\nexport const mSDFBitGl = {\n    name: 'msdf-bit',\n    fragment: {\n        header: /* glsl */`\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);  \n              \n                return coverage;\n            }\n        `,\n    }\n\n};\n"],"names":[],"mappings":";;;;;AAAO,MAAM,OAAU,GAAA;IACnB,IAAM,EAAA,UAAA;IACN,QAAU,EAAA;QACN,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;QAAA,CAAA;IAAA,CA4BtB;AAEJ,EAAA;AAEO,MAAM,SAAY,GAAA;IACrB,IAAM,EAAA,UAAA;IACN,QAAU,EAAA;QACN,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;QAAA,CAAA;IAAA,CA4BtB;AAEJ","ignoreList":[0]}},
    {"offset": {"line": 14870, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14876, "column": 0}, "map": {"version":3,"file":"SdfShader.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/sdfShader/SdfShader.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit';\nimport {\n    generateTextureBatchBit,\n    generateTextureBatchBitGl\n} from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\nexport class SdfShader extends Shader\n{\n    constructor()\n    {\n        const uniforms = new UniformGroup({\n            uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n            uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uDistance: { value: 4, type: 'f32' },\n            uRound: { value: 0, type: 'f32' },\n        });\n\n        const maxTextures = getMaxTexturesPerBatch();\n\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBit,\n                generateTextureBatchBit(maxTextures),\n                localUniformMSDFBit,\n                mSDFBit,\n                roundPixelsBit\n            ]\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(maxTextures),\n                localUniformMSDFBitGl,\n                mSDFBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: uniforms,\n                batchSamplers: getBatchSamplersUniformGroup(maxTextures),\n            }\n        });\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAI,UAAA,CAAA;AACJ,IAAI,SAAA,CAAA;AAEG,MAAM,6MAAkB,SAC/B,CAAA;IACI,WACA,EAAA;QACU,MAAA,QAAA,GAAW,oMAAI,gBAAa,CAAA;YAC9B,MAAQ,EAAA;gBAAE,KAAO,EAAA,IAAI,YAAa,CAAA;oBAAC,CAAG;oBAAA,CAAA;oBAAG,CAAG;oBAAA,CAAC;iBAAC,CAAA;gBAAG,MAAM,WAAY;YAAA,CAAA;YACnE,kBAAkB;gBAAE,KAAA,EAAO,oKAAI,SAAO,EAAA;gBAAG,MAAM,aAAc;YAAA,CAAA;YAC7D,SAAW,EAAA;gBAAE,KAAO,EAAA,CAAA;gBAAG,MAAM,KAAM;YAAA,CAAA;YACnC,MAAQ,EAAA;gBAAE,KAAO,EAAA,CAAA;gBAAG,MAAM,KAAM;YAAA,CAAA;QAAA,CACnC,CAAA,CAAA;QAED,MAAM,cAAc,iOAAA,AAAuB,EAAA,CAAA;QAE3C,UAAA,IAAA,CAAA,UAAA,uMAAe,8BAAA,AAA4B,EAAA;YACvC,IAAM,EAAA,YAAA;YACN,IAAM,EAAA;gNACF,WAAA;iBACA,4OAAA,EAAwB,WAAW,CAAA;0NACnC,sBAAA;8MACA,UAAA;sNACA,iBAAA;aACJ;QAAA,CACH,CAAA,CAAA,CAAA;QAED,SAAA,IAAA,CAAA,SAAA,IAAc,gOAAA,AAA2B,EAAA;YACrC,IAAM,EAAA,YAAA;YACN,IAAM,EAAA;gNACF,aAAA;mOACA,4BAAA,EAA0B,WAAW,CAAA;gBACrC,kOAAA;8MACA,YAAA;sNACA,mBAAA;aACJ;QAAA,CACH,CAAA,CAAA,CAAA;QAEK,KAAA,CAAA;YACF,SAAA;YACA,UAAA;YACA,SAAW,EAAA;gBACP,aAAe,EAAA,QAAA;gBACf,aAAA,mNAAe,+BAAA,EAA6B,WAAW,CAAA;YAAA,CAC3D;QAAA,CACH,CAAA,CAAA;IAAA,CACL;AACJ","ignoreList":[0]}},
    {"offset": {"line": 14962, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14968, "column": 0}, "map": {"version":3,"file":"Graphics.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/Graphics.ts"],"sourcesContent":["import { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\nimport { ViewContainer } from '../../view/ViewContainer';\nimport { GraphicsContext } from './GraphicsContext';\n\nimport type { ColorSource } from '../../../color/Color';\nimport type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { PointData } from '../../../maths/point/PointData';\nimport type { Instruction } from '../../../rendering/renderers/shared/instructions/Instruction';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Bounds } from '../../container/bounds/Bounds';\nimport type { ContainerOptions } from '../../container/Container';\nimport type { ContextDestroyOptions, DestroyOptions } from '../../container/destroyTypes';\nimport type { FillInput, FillStyle, StrokeStyle } from './FillTypes';\nimport type { GraphicsPath } from './path/GraphicsPath';\nimport type { RoundedPoint } from './path/roundShape';\n\n/**\n * Constructor options used for `Graphics` instances.\n * ```js\n * const graphics = new Graphics({\n *    fillStyle: { color: 0xff0000, alpha: 0.5 },\n *    strokeStyle: { color: 0x00ff00, width: 2 },\n * });\n * ```\n * @see {@link scene.Graphics}\n * @memberof scene\n */\nexport interface GraphicsOptions extends ContainerOptions\n{\n    /** The GraphicsContext to use, useful for reuse and optimisation */\n    context?: GraphicsContext;\n    /** Whether or not to round the x/y position. */\n    roundPixels?: boolean;\n}\n\n/**\n * The Graphics class is primarily used to render primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them.  However, you can also use a Graphics\n * object to build a list of primitives to use as a mask, or as a complex hitArea.\n * @memberof scene\n * @extends scene.Container\n */\nexport class Graphics extends ViewContainer implements Instruction\n{\n    public override readonly renderPipeId: string = 'graphics';\n    public batched: boolean;\n\n    private _context: GraphicsContext;\n    private readonly _ownedContext: GraphicsContext;\n\n    /**\n     * @param options - Options for the Graphics.\n     */\n    constructor(options?: GraphicsOptions | GraphicsContext)\n    {\n        if (options instanceof GraphicsContext)\n        {\n            options = { context: options };\n        }\n\n        const { context, roundPixels, ...rest } = options || {};\n\n        super({\n            label: 'Graphics',\n            ...rest\n        });\n\n        if (!context)\n        {\n            this._context = this._ownedContext = new GraphicsContext();\n        }\n        else\n        {\n            this._context = context;\n        }\n\n        this._context.on('update', this.onViewUpdate, this);\n\n        this.allowChildren = false;\n        this.roundPixels = roundPixels ?? false;\n    }\n\n    set context(context: GraphicsContext)\n    {\n        if (context === this._context) return;\n\n        this._context.off('update', this.onViewUpdate, this);\n\n        this._context = context;\n\n        // TODO store this bound function somewhere else..\n        this._context.on('update', this.onViewUpdate, this);\n\n        this.onViewUpdate();\n    }\n\n    get context(): GraphicsContext\n    {\n        return this._context;\n    }\n\n    /**\n     * The local bounds of the graphic.\n     * @type {rendering.Bounds}\n     */\n    override get bounds(): Bounds\n    {\n        return this._context.bounds;\n    }\n\n    /**\n     * Graphics objects do not need to update their bounds as the context handles this.\n     * @private\n     */\n    protected updateBounds(): void { /** */ }\n\n    /**\n     * Checks if the object contains the given point.\n     * @param point - The point to check\n     */\n    public override containsPoint(point: PointData)\n    {\n        return this._context.containsPoint(point);\n    }\n\n    /**\n     * Destroys this graphics renderable and optionally its context.\n     * @param options - Options parameter. A boolean will act as if all options\n     *\n     * If the context was created by this graphics and `destroy(false)` or `destroy()` is called\n     * then the context will still be destroyed.\n     *\n     * If you want to explicitly not destroy this context that this graphics created,\n     * then you should pass destroy({ context: false })\n     *\n     * If the context was passed in as an argument to the constructor then it will not be destroyed\n     * @param {boolean} [options.texture=false] - Should destroy the texture of the graphics context\n     * @param {boolean} [options.textureSource=false] - Should destroy the texture source of the graphics context\n     * @param {boolean} [options.context=false] - Should destroy the context\n     */\n    public override destroy(options?: DestroyOptions): void\n    {\n        if (this._ownedContext && !options)\n        {\n            this._ownedContext.destroy(options);\n        }\n        else if (options === true || (options as ContextDestroyOptions)?.context === true)\n        {\n            this._context.destroy(options);\n        }\n\n        (this._ownedContext as null) = null;\n        this._context = null;\n\n        super.destroy(options);\n    }\n\n    private _callContextMethod(method: keyof GraphicsContext, args: any[]): this\n    {\n        (this.context as any)[method](...args);\n\n        return this;\n    }\n\n    // --------------------------------------- GraphicsContext methods ---------------------------------------\n    /**\n     * Sets the current fill style of the graphics context. The fill style can be a color, gradient,\n     * pattern, or a more complex style defined by a FillStyle object.\n     * @param {FillInput} args - The fill style to apply. This can be a simple color, a gradient or\n     * pattern object, or a FillStyle or ConvertedFillStyle object.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setFillStyle(...args: Parameters<GraphicsContext['setFillStyle']>): this\n    {\n        return this._callContextMethod('setFillStyle', args);\n    }\n\n    /**\n     * Sets the current stroke style of the graphics context. Similar to fill styles, stroke styles can\n     * encompass colors, gradients, patterns, or more detailed configurations via a StrokeStyle object.\n     * @param {StrokeInput} args - The stroke style to apply. Can be defined as a color, a gradient or pattern,\n     * or a StrokeStyle or ConvertedStrokeStyle object.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setStrokeStyle(...args: Parameters<GraphicsContext['setStrokeStyle']>): this\n    {\n        return this._callContextMethod('setStrokeStyle', args);\n    }\n\n    /**\n     * Fills the current or given path with the current fill style. This method can optionally take\n     * a color and alpha for a simple fill, or a more complex FillStyle object for advanced fills.\n     * @param {FillInput} style - (Optional) The style to fill the path with. Can be a color, gradient, pattern, or a\n     * complex style object. If omitted, uses the current fill style.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public fill(style?: FillInput): this;\n    /** @deprecated 8.0.0 */\n    public fill(color: ColorSource, alpha?: number): this;\n    public fill(...args: [FillStyle | ColorSource, number?]): this\n    {\n        return this._callContextMethod('fill', args);\n    }\n    /**\n     * Strokes the current path with the current stroke style. This method can take an optional\n     * FillStyle parameter to define the stroke's appearance, including its color, width, and other properties.\n     * @param {FillStyle} args - (Optional) The stroke style to apply. Can be defined as a simple color or a more\n     * complex style object. If omitted, uses the current stroke style.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public stroke(...args: Parameters<GraphicsContext['stroke']>): this\n    {\n        return this._callContextMethod('stroke', args);\n    }\n    /**\n     * Adds a texture to the graphics context. This method supports multiple overloads for specifying the texture,\n     * tint, and dimensions. If only a texture is provided, it uses the texture's width and height for drawing.\n     * Additional parameters allow for specifying a tint color, and custom dimensions for the texture drawing area.\n     * @param texture - The Texture object to use.\n     * @param tint - (Optional) A ColorSource to tint the texture. If not provided, defaults to white (0xFFFFFF).\n     * @param dx - (Optional) The x-coordinate in the destination canvas at which to place the top-left corner of\n     * the source image.\n     * @param dy - (Optional) The y-coordinate in the destination canvas at which to place the top-left corner of\n     * the source image.\n     * @param dw - (Optional) The width of the rectangle within the source image to draw onto the destination canvas.\n     * If not provided, uses the texture's frame width.\n     * @param dh - (Optional) The height of the rectangle within the source image to draw onto the destination canvas.\n     * If not provided, uses the texture's frame height.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public texture(texture: Texture, tint?: ColorSource, dx?: number, dy?: number, dw?: number, dh?: number): this;\n    public texture(texture: Texture): this;\n    public texture(...args: [Texture, number?, number?, number?, number?, number?]): this\n    {\n        return this._callContextMethod('texture', args);\n    }\n    /**\n     * Resets the current path. Any previous path and its commands are discarded and a new path is\n     * started. This is typically called before beginning a new shape or series of drawing commands.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public beginPath(): this\n    {\n        return this._callContextMethod('beginPath', []);\n    }\n    /**\n     * Applies a cutout to the last drawn shape. This is used to create holes or complex shapes by\n     * subtracting a path from the previously drawn path. If a hole is not completely in a shape, it will\n     * fail to cut correctly!\n     */\n    public cut(): this\n    {\n        return this._callContextMethod('cut', []);\n    }\n    /**\n     * Adds an arc to the current path, which is centered at (x, y) with the specified radius,\n     * starting and ending angles, and direction.\n     * @param x - The x-coordinate of the arc's center.\n     * @param y - The y-coordinate of the arc's center.\n     * @param radius - The arc's radius.\n     * @param startAngle - The starting angle, in radians.\n     * @param endAngle - The ending angle, in radians.\n     * @param counterclockwise - (Optional) Specifies whether the arc is drawn counterclockwise (true) or clockwise\n     * (false). Defaults to false.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): this;\n    public arc(...args: Parameters<GraphicsContext['arc']>): this\n    {\n        return this._callContextMethod('arc', args);\n    }\n    /**\n     * Adds an arc to the current path with the given control points and radius, connected to the previous point\n     * by a straight line if necessary.\n     * @param x1 - The x-coordinate of the first control point.\n     * @param y1 - The y-coordinate of the first control point.\n     * @param x2 - The x-coordinate of the second control point.\n     * @param y2 - The y-coordinate of the second control point.\n     * @param radius - The arc's radius.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this;\n    public arcTo(...args: Parameters<GraphicsContext['arcTo']>): this\n    {\n        return this._callContextMethod('arcTo', args);\n    }\n    /**\n     * Adds an SVG-style arc to the path, allowing for elliptical arcs based on the SVG spec.\n     * @param rx - The x-radius of the ellipse.\n     * @param ry - The y-radius of the ellipse.\n     * @param xAxisRotation - The rotation of the ellipse's x-axis relative\n     * to the x-axis of the coordinate system, in degrees.\n     * @param largeArcFlag - Determines if the arc should be greater than or less than 180 degrees.\n     * @param sweepFlag - Determines if the arc should be swept in a positive angle direction.\n     * @param x - The x-coordinate of the arc's end point.\n     * @param y - The y-coordinate of the arc's end point.\n     * @returns The instance of the current object for chaining.\n     */\n    public arcToSvg(\n        rx: number, ry: number, xAxisRotation: number, largeArcFlag: number, sweepFlag: number, x: number, y: number\n    ): this;\n    public arcToSvg(...args: Parameters<GraphicsContext['arcToSvg']>): this\n    {\n        return this._callContextMethod('arcToSvg', args);\n    }\n    /**\n     * Adds a cubic Bezier curve to the path.\n     * It requires three points: the first two are control points and the third one is the end point.\n     * The starting point is the last point in the current path.\n     * @param cp1x - The x-coordinate of the first control point.\n     * @param cp1y - The y-coordinate of the first control point.\n     * @param cp2x - The x-coordinate of the second control point.\n     * @param cp2y - The y-coordinate of the second control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public bezierCurveTo(\n        cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number, smoothness?: number\n    ): this;\n    public bezierCurveTo(...args: Parameters<GraphicsContext['bezierCurveTo']>): this\n    {\n        return this._callContextMethod('bezierCurveTo', args);\n    }\n    /**\n     * Closes the current path by drawing a straight line back to the start.\n     * If the shape is already closed or there are no points in the path, this method does nothing.\n     * @returns The instance of the current object for chaining.\n     */\n    public closePath(): this\n    {\n        return this._callContextMethod('closePath', []);\n    }\n    /**\n     * Draws an ellipse at the specified location and with the given x and y radii.\n     * An optional transformation can be applied, allowing for rotation, scaling, and translation.\n     * @param x - The x-coordinate of the center of the ellipse.\n     * @param y - The y-coordinate of the center of the ellipse.\n     * @param radiusX - The horizontal radius of the ellipse.\n     * @param radiusY - The vertical radius of the ellipse.\n     * @returns The instance of the current object for chaining.\n     */\n    public ellipse(x: number, y: number, radiusX: number, radiusY: number): this;\n    public ellipse(...args: Parameters<GraphicsContext['ellipse']>): this\n    {\n        return this._callContextMethod('ellipse', args);\n    }\n    /**\n     * Draws a circle shape. This method adds a new circle path to the current drawing.\n     * @param x - The x-coordinate of the center of the circle.\n     * @param y - The y-coordinate of the center of the circle.\n     * @param radius - The radius of the circle.\n     * @returns The instance of the current object for chaining.\n     */\n    public circle(x: number, y: number, radius: number): this;\n    public circle(...args: Parameters<GraphicsContext['circle']>): this\n    {\n        return this._callContextMethod('circle', args);\n    }\n    /**\n     * Adds another `GraphicsPath` to this path, optionally applying a transformation.\n     * @param path - The `GraphicsPath` to add.\n     * @returns The instance of the current object for chaining.\n     */\n    public path(path: GraphicsPath): this;\n    public path(...args: Parameters<GraphicsContext['path']>): this\n    {\n        return this._callContextMethod('path', args);\n    }\n    /**\n     * Connects the current point to a new point with a straight line. This method updates the current path.\n     * @param x - The x-coordinate of the new point to connect to.\n     * @param y - The y-coordinate of the new point to connect to.\n     * @returns The instance of the current object for chaining.\n     */\n    public lineTo(x: number, y: number): this;\n    public lineTo(...args: Parameters<GraphicsContext['lineTo']>): this\n    {\n        return this._callContextMethod('lineTo', args);\n    }\n    /**\n     * Sets the starting point for a new sub-path. Any subsequent drawing commands are considered part of this path.\n     * @param x - The x-coordinate for the starting point.\n     * @param y - The y-coordinate for the starting point.\n     * @returns The instance of the current object for chaining.\n     */\n    public moveTo(x: number, y: number): this;\n    public moveTo(...args: Parameters<GraphicsContext['moveTo']>): this\n    {\n        return this._callContextMethod('moveTo', args);\n    }\n    /**\n     * Adds a quadratic curve to the path. It requires two points: the control point and the end point.\n     * The starting point is the last point in the current path.\n     * @param cpx - The x-coordinate of the control point.\n     * @param cpy - The y-coordinate of the control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public quadraticCurveTo(cpx: number, cpy: number, x: number, y: number, smoothness?: number): this;\n    public quadraticCurveTo(...args: Parameters<GraphicsContext['quadraticCurveTo']>): this\n    {\n        return this._callContextMethod('quadraticCurveTo', args);\n    }\n    /**\n     * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @returns The instance of the current object for chaining.\n     */\n    public rect(x: number, y: number, w: number, h: number): this;\n    public rect(...args: Parameters<GraphicsContext['rect']>): this\n    {\n        return this._callContextMethod('rect', args);\n    }\n    /**\n     * Draws a rectangle with rounded corners.\n     * The corner radius can be specified to determine how rounded the corners should be.\n     * An optional transformation can be applied, which allows for rotation, scaling, and translation of the rectangle.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @param radius - The radius of the rectangle's corners. If not specified, corners will be sharp.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundRect(x: number, y: number, w: number, h: number, radius?: number): this;\n    public roundRect(...args: Parameters<GraphicsContext['roundRect']>): this\n    {\n        return this._callContextMethod('roundRect', args);\n    }\n    /**\n     * Draws a polygon shape by specifying a sequence of points. This method allows for the creation of complex polygons,\n     * which can be both open and closed. An optional transformation can be applied, enabling the polygon to be scaled,\n     * rotated, or translated as needed.\n     * @param points - An array of numbers, or an array of PointData objects eg [{x,y}, {x,y}, {x,y}]\n     * representing the x and y coordinates, of the polygon's vertices, in sequence.\n     * @param close - A boolean indicating whether to close the polygon path. True by default.\n     * @returns The instance of the current object for chaining further drawing commands.\n     */\n    public poly(points: number[] | PointData[], close?: boolean): this;\n    public poly(...args: Parameters<GraphicsContext['poly']>): this\n    {\n        return this._callContextMethod('poly', args);\n    }\n    /**\n     * Draws a regular polygon with a specified number of sides. All sides and angles are equal.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n     * @returns The instance of the current object for chaining.\n     */\n    public regularPoly(x: number, y: number, radius: number, sides: number, rotation?: number, transform?: Matrix): this;\n    public regularPoly(...args: Parameters<GraphicsContext['regularPoly']>): this\n    {\n        return this._callContextMethod('regularPoly', args);\n    }\n    /**\n     * Draws a polygon with rounded corners.\n     * Similar to `regularPoly` but with the ability to round the corners of the polygon.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param corner - The radius of the rounding of the corners.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundPoly(x: number, y: number, radius: number, sides: number, corner: number, rotation?: number): this;\n    public roundPoly(...args: Parameters<GraphicsContext['roundPoly']>): this\n    {\n        return this._callContextMethod('roundPoly', args);\n    }\n    /**\n     * Draws a shape with rounded corners. This function supports custom radius for each corner of the shape.\n     * Optionally, corners can be rounded using a quadratic curve instead of an arc, providing a different aesthetic.\n     * @param points - An array of `RoundedPoint` representing the corners of the shape to draw.\n     * A minimum of 3 points is required.\n     * @param radius - The default radius for the corners.\n     * This radius is applied to all corners unless overridden in `points`.\n     * @param useQuadratic - If set to true, rounded corners are drawn using a quadraticCurve\n     *  method instead of an arc method. Defaults to false.\n     * @param smoothness - Specifies the smoothness of the curve when `useQuadratic` is true.\n     * Higher values make the curve smoother.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundShape(points: RoundedPoint[], radius: number, useQuadratic?: boolean, smoothness?: number): this;\n    public roundShape(...args: Parameters<GraphicsContext['roundShape']>): this\n    {\n        return this._callContextMethod('roundShape', args);\n    }\n    /**\n     * Draw Rectangle with fillet corners. This is much like rounded rectangle\n     * however it support negative numbers as well for the corner radius.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param fillet - accept negative or positive values\n     */\n    public filletRect(x: number, y: number, width: number, height: number, fillet: number): this;\n    public filletRect(...args: Parameters<GraphicsContext['filletRect']>): this\n    {\n        return this._callContextMethod('filletRect', args);\n    }\n    /**\n     * Draw Rectangle with chamfer corners. These are angled corners.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param chamfer - non-zero real number, size of corner cutout\n     * @param transform\n     */\n    public chamferRect(x: number, y: number, width: number, height: number, chamfer: number, transform?: Matrix): this;\n    public chamferRect(...args: Parameters<GraphicsContext['chamferRect']>): this\n    {\n        return this._callContextMethod('chamferRect', args);\n    }\n    /**\n     * Draws a star shape centered at a specified location. This method allows for the creation\n     *  of stars with a variable number of points, outer radius, optional inner radius, and rotation.\n     * The star is drawn as a closed polygon with alternating outer and inner vertices to create the star's points.\n     * An optional transformation can be applied to scale, rotate, or translate the star as needed.\n     * @param x - The x-coordinate of the center of the star.\n     * @param y - The y-coordinate of the center of the star.\n     * @param points - The number of points of the star.\n     * @param radius - The outer radius of the star (distance from the center to the outer points).\n     * @param innerRadius - Optional. The inner radius of the star\n     * (distance from the center to the inner points between the outer points).\n     * If not provided, defaults to half of the `radius`.\n     * @param rotation - Optional. The rotation of the star in radians, where 0 is aligned with the y-axis.\n     * Defaults to 0, meaning one point is directly upward.\n     * @returns The instance of the current object for chaining further drawing commands.\n     */\n    public star(x: number, y: number, points: number, radius: number, innerRadius?: number, rotation?: number): this;\n    public star(...args: Parameters<GraphicsContext['star']>): this\n    {\n        return this._callContextMethod('star', args);\n    }\n    /**\n     * Parses and renders an SVG string into the graphics context. This allows for complex shapes and paths\n     * defined in SVG format to be drawn within the graphics context.\n     * @param svg - The SVG string to be parsed and rendered.\n     */\n    public svg(svg: string): this;\n    public svg(...args: Parameters<GraphicsContext['svg']>): this\n    {\n        return this._callContextMethod('svg', args);\n    }\n    /**\n     * Restores the most recently saved graphics state by popping the top of the graphics state stack.\n     * This includes transformations, fill styles, and stroke styles.\n     */\n    public restore(): this;\n    public restore(...args: Parameters<GraphicsContext['restore']>): this\n    {\n        return this._callContextMethod('restore', args);\n    }\n    /** Saves the current graphics state, including transformations, fill styles, and stroke styles, onto a stack. */\n    public save(): this\n    {\n        return this._callContextMethod('save', []);\n    }\n    /**\n     * Returns the current transformation matrix of the graphics context.\n     * @returns The current transformation matrix.\n     */\n    public getTransform(): Matrix\n    {\n        return this.context.getTransform();\n    }\n    /**\n     * Resets the current transformation matrix to the identity matrix, effectively removing\n     * any transformations (rotation, scaling, translation) previously applied.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public resetTransform(): this\n    {\n        return this._callContextMethod('resetTransform', []);\n    }\n    /**\n     * Applies a rotation transformation to the graphics context around the current origin.\n     * @param angle - The angle of rotation in radians.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public rotateTransform(angle: number): this;\n    public rotateTransform(...args: Parameters<GraphicsContext['rotate']>): this\n    {\n        return this._callContextMethod('rotate', args);\n    }\n    /**\n     * Applies a scaling transformation to the graphics context, scaling drawings by x horizontally and by y vertically.\n     * @param x - The scale factor in the horizontal direction.\n     * @param y - (Optional) The scale factor in the vertical direction.\n     * If not specified, the x value is used for both directions.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public scaleTransform(x: number, y?: number): this;\n    public scaleTransform(...args: Parameters<GraphicsContext['scale']>): this\n    {\n        return this._callContextMethod('scale', args);\n    }\n    /**\n     * Sets the current transformation matrix of the graphics context to the specified matrix or values.\n     * This replaces the current transformation matrix.\n     * @param a - The value for the a property of the matrix, or a Matrix object to use directly.\n     * @param b - The value for the b property of the matrix.\n     * @param c - The value for the c property of the matrix.\n     * @param d - The value for the d property of the matrix.\n     * @param dx - The value for the tx (translate x) property of the matrix.\n     * @param dy - The value for the ty (translate y) property of the matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setTransform(transform: Matrix): this;\n    public setTransform(a: number, b: number, c: number, d: number, dx: number, dy: number): this;\n    public setTransform(a: number | Matrix, b?: number, c?: number, d?: number, dx?: number, dy?: number): this;\n    public setTransform(...args: [Matrix] | [number, number, number, number, number, number]): this\n    {\n        return this._callContextMethod('setTransform', args);\n    }\n    /**\n     * Applies the specified transformation matrix to the current graphics context by multiplying\n     * the current matrix with the specified matrix.\n     * @param a - The value for the a property of the matrix, or a Matrix object to use directly.\n     * @param b - The value for the b property of the matrix.\n     * @param c - The value for the c property of the matrix.\n     * @param d - The value for the d property of the matrix.\n     * @param dx - The value for the tx (translate x) property of the matrix.\n     * @param dy - The value for the ty (translate y) property of the matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public transform(transform: Matrix): this;\n    public transform(a: number, b: number, c: number, d: number, dx: number, dy: number): this;\n    public transform(a: number | Matrix, b?: number, c?: number, d?: number, dx?: number, dy?: number): this;\n    public transform(...args: [Matrix] | [number, number, number, number, number, number]): this\n    {\n        return this._callContextMethod('transform', args);\n    }\n    /**\n     * Applies a translation transformation to the graphics context, moving the origin by the specified amounts.\n     * @param x - The amount to translate in the horizontal direction.\n     * @param y - (Optional) The amount to translate in the vertical direction. If not specified,\n     * the x value is used for both directions.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public translateTransform(x: number, y?: number): this;\n    public translateTransform(...args: Parameters<GraphicsContext['translate']>): this\n    {\n        return this._callContextMethod('translate', args);\n    }\n    /**\n     * Clears all drawing commands from the graphics context, effectively resetting it. This includes clearing the path,\n     * and optionally resetting transformations to the identity matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public clear(): this\n    {\n        return this._callContextMethod('clear', []);\n    }\n    /**\n     * The fill style to use.\n     * @type {ConvertedFillStyle}\n     */\n    get fillStyle(): GraphicsContext['fillStyle']\n    {\n        return this._context.fillStyle;\n    }\n    set fillStyle(value: FillInput)\n    {\n        this._context.fillStyle = value;\n    }\n    /**\n     * The stroke style to use.\n     * @type {ConvertedStrokeStyle}\n     */\n    get strokeStyle(): GraphicsContext['strokeStyle']\n    {\n        return this._context.strokeStyle;\n    }\n    set strokeStyle(value: StrokeStyle)\n    {\n        this._context.strokeStyle = value;\n    }\n\n    /**\n     * Creates a new Graphics object.\n     * Note that only the context of the object is cloned, not its transform (position,scale,etc)\n     * @param deep - Whether to create a deep clone of the graphics object. If false, the context\n     * will be shared between the two objects (default false). If true, the context will be\n     * cloned (recommended if you need to modify the context in any way).\n     * @returns - A clone of the graphics object\n     */\n    public clone(deep = false): Graphics\n    {\n        if (deep)\n        {\n            return new Graphics(this._context.clone());\n        }\n\n        (this._ownedContext as null) = null;\n        const clone = new Graphics(this._context);\n\n        return clone;\n    }\n\n    // -------- v7 deprecations ---------\n\n    /**\n     * @param width\n     * @param color\n     * @param alpha\n     * @deprecated since 8.0.0 Use {@link Graphics#setStrokeStyle} instead\n     */\n    public lineStyle(width?: number, color?: ColorSource, alpha?: number): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#lineStyle is no longer needed. Use Graphics#setStrokeStyle to set the stroke style.');\n        // #endif\n\n        const strokeStyle: Partial<StrokeStyle> = {};\n\n        // avoid undefined assignment\n        width && (strokeStyle.width = width);\n        color && (strokeStyle.color = color);\n        alpha && (strokeStyle.alpha = alpha);\n\n        this.context.strokeStyle = strokeStyle;\n\n        return this;\n    }\n\n    /**\n     * @param color\n     * @param alpha\n     * @deprecated since 8.0.0 Use {@link Graphics#fill} instead\n     */\n    public beginFill(color: ColorSource, alpha?: number)\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'Graphics#beginFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.');\n        // #endif\n\n        const fillStyle: Partial<FillStyle> = {};\n\n        // avoid undefined assignment\n        if (color !== undefined) fillStyle.color = color;\n        if (alpha !== undefined) fillStyle.alpha = alpha;\n\n        this.context.fillStyle = fillStyle;\n\n        return this;\n    }\n\n    /**\n     * @deprecated since 8.0.0 Use {@link Graphics#fill} instead\n     */\n    public endFill()\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'Graphics#endFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.');\n        // #endif\n\n        this.context.fill();\n        const strokeStyle = this.context.strokeStyle;\n\n        if (strokeStyle.width !== GraphicsContext.defaultStrokeStyle.width\n            || strokeStyle.color !== GraphicsContext.defaultStrokeStyle.color\n            || strokeStyle.alpha !== GraphicsContext.defaultStrokeStyle.alpha)\n        {\n            this.context.stroke();\n        }\n\n        return this;\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#circle} instead\n     */\n    public drawCircle(...args: Parameters<GraphicsContext['circle']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawCircle has been renamed to Graphics#circle');\n        // #endif\n\n        return this._callContextMethod('circle', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#ellipse} instead\n     */\n    public drawEllipse(...args: Parameters<GraphicsContext['ellipse']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawEllipse has been renamed to Graphics#ellipse');\n        // #endif\n\n        return this._callContextMethod('ellipse', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#poly} instead\n     */\n    public drawPolygon(...args: Parameters<GraphicsContext['poly']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawPolygon has been renamed to Graphics#poly');\n        // #endif\n\n        return this._callContextMethod('poly', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#rect} instead\n     */\n    public drawRect(...args: Parameters<GraphicsContext['rect']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawRect has been renamed to Graphics#rect');\n        // #endif\n\n        return this._callContextMethod('rect', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#roundRect} instead\n     */\n    public drawRoundedRect(...args: Parameters<GraphicsContext['roundRect']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawRoundedRect has been renamed to Graphics#roundRect');\n        // #endif\n\n        return this._callContextMethod('roundRect', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#star} instead\n     */\n    public drawStar(...args: Parameters<GraphicsContext['star']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawStar has been renamed to Graphics#star');\n        // #endif\n\n        return this._callContextMethod('star', args);\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 15328, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15334, "column": 0}, "map": {"version":3,"file":"BitmapTextPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-bitmap/BitmapTextPipe.ts"],"sourcesContent":["import { Cache } from '../../assets/cache/Cache';\nimport { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { Graphics } from '../graphics/shared/Graphics';\nimport { SdfShader } from '../text/sdfShader/SdfShader';\nimport { BitmapFontManager } from './BitmapFontManager';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../rendering/renderers/shared/Renderable';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { Container } from '../container/Container';\nimport type { BitmapText } from './BitmapText';\n\nexport class BitmapTextPipe implements RenderPipe<BitmapText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'bitmapText',\n    } as const;\n\n    private _renderer: Renderer;\n    private _gpuBitmapText: Record<number, Graphics> = {};\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_gpuBitmapText');\n    }\n\n    public validateRenderable(bitmapText: BitmapText): boolean\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        if (bitmapText._didTextUpdate)\n        {\n            bitmapText._didTextUpdate = false;\n\n            this._updateContext(bitmapText, graphicsRenderable);\n        }\n\n        return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n\n        // TODO - need to shift all the verts in the graphicsData to the new anchor\n\n        // update the anchor...\n    }\n\n    public addRenderable(bitmapText: BitmapText, instructionSet: InstructionSet)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        if (bitmapText._didTextUpdate)\n        {\n            bitmapText._didTextUpdate = false;\n\n            this._updateContext(bitmapText, graphicsRenderable);\n        }\n\n        this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    public destroyRenderable(bitmapText: BitmapText)\n    {\n        bitmapText.off('destroyed', this._destroyRenderableBound);\n\n        this._destroyRenderableByUid(bitmapText.uid);\n    }\n\n    private _destroyRenderableByUid(renderableUid: number)\n    {\n        const context = this._gpuBitmapText[renderableUid].context;\n\n        if (context.customShader)\n        {\n            BigPool.return(context.customShader as PoolItem);\n\n            context.customShader = null;\n        }\n\n        BigPool.return(this._gpuBitmapText[renderableUid] as PoolItem);\n        this._gpuBitmapText[renderableUid] = null;\n    }\n\n    public updateRenderable(bitmapText: BitmapText)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    private _updateContext(bitmapText: BitmapText, proxyGraphics: Graphics)\n    {\n        const { context } = proxyGraphics;\n\n        const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n\n        context.clear();\n\n        if (bitmapFont.distanceField.type !== 'none')\n        {\n            if (!context.customShader)\n            {\n                context.customShader = BigPool.get(SdfShader);\n            }\n        }\n\n        const chars = Array.from(bitmapText.text);\n        const style = bitmapText._style;\n\n        let currentY = bitmapFont.baseLineOffset;\n\n        // measure our text...\n        const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont, true);\n\n        let index = 0;\n\n        const padding = style.padding;\n        const scale = bitmapTextLayout.scale;\n\n        let tx = bitmapTextLayout.width;\n        let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n\n        if (style._stroke)\n        {\n            tx += style._stroke.width / scale;\n            ty += style._stroke.width / scale;\n        }\n\n        context\n            .translate((-bitmapText._anchor._x * tx) - padding, (-bitmapText._anchor._y * ty) - padding)\n            .scale(scale, scale);\n\n        const tint = bitmapFont.applyFillAsTint ? style._fill.color : 0xFFFFFF;\n\n        for (let i = 0; i < bitmapTextLayout.lines.length; i++)\n        {\n            const line = bitmapTextLayout.lines[i];\n\n            for (let j = 0; j < line.charPositions.length; j++)\n            {\n                const char = chars[index++];\n\n                const charData = bitmapFont.chars[char];\n\n                if (charData?.texture)\n                {\n                    context.texture(\n                        charData.texture,\n                        tint ? tint : 'black',\n                        Math.round(line.charPositions[j] + charData.xOffset),\n                        Math.round(currentY + charData.yOffset),\n                    );\n                }\n            }\n\n            currentY += bitmapFont.lineHeight;\n        }\n    }\n\n    private _getGpuBitmapText(bitmapText: BitmapText)\n    {\n        return this._gpuBitmapText[bitmapText.uid] || this.initGpuText(bitmapText);\n    }\n\n    public initGpuText(bitmapText: BitmapText)\n    {\n        // TODO we could keep a bunch of contexts around and reuse one that has the same style!\n        const proxyRenderable = BigPool.get(Graphics);\n\n        this._gpuBitmapText[bitmapText.uid] = proxyRenderable;\n\n        this._updateContext(bitmapText, proxyRenderable);\n\n        bitmapText.on('destroyed', this._destroyRenderableBound);\n\n        return this._gpuBitmapText[bitmapText.uid];\n    }\n\n    private _updateDistanceField(bitmapText: BitmapText)\n    {\n        const context = this._getGpuBitmapText(bitmapText).context;\n\n        const fontFamily = bitmapText._style.fontFamily as string;\n        const dynamicFont = Cache.get(`${fontFamily as string}-bitmap`);\n\n        // Inject the shader code with the correct value\n        const { a, b, c, d } = bitmapText.groupTransform;\n\n        const dx = Math.sqrt((a * a) + (b * b));\n        const dy = Math.sqrt((c * c) + (d * d));\n        const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n\n        const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n\n        const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n\n        context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n    }\n\n    public destroy()\n    {\n        for (const uid in this._gpuBitmapText)\n        {\n            this._destroyRenderableByUid(uid as unknown as number);\n        }\n\n        this._gpuBitmapText = null;\n\n        this._renderer = null;\n    }\n}\n\nfunction syncWithProxy(container: Renderable, proxy: Renderable)\n{\n    proxy.groupTransform = container.groupTransform;\n    proxy.groupColorAlpha = container.groupColorAlpha;\n    proxy.groupColor = container.groupColor;\n    proxy.groupBlendMode = container.groupBlendMode;\n    proxy.globalDisplayStatus = container.globalDisplayStatus;\n    proxy.groupTransform = container.groupTransform;\n    proxy.localDisplayStatus = container.localDisplayStatus;\n    proxy.groupAlpha = container.groupAlpha;\n    proxy._roundPixels = container._roundPixels;\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 15487, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15493, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-bitmap/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { BitmapTextPipe } from './BitmapTextPipe';\n\nextensions.add(BitmapTextPipe);\n"],"names":[],"mappings":";;;;;;+JAGA,aAAA,CAAW,GAAA,iLAAI,iBAAc,CAAA","ignoreList":[0]}},
    {"offset": {"line": 15500, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15506, "column": 0}, "map": {"version":3,"file":"HTMLTextRenderData.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/HTMLTextRenderData.ts"],"sourcesContent":["import type { CanvasAndContext } from '../../rendering/renderers/shared/texture/CanvasPool';\n\nexport const nssvg = 'http://www.w3.org/2000/svg';\nexport const nsxhtml = 'http://www.w3.org/1999/xhtml';\n\nexport class HTMLTextRenderData\n{\n    public svgRoot = document.createElementNS(nssvg, 'svg');\n    public foreignObject = document.createElementNS(nssvg, 'foreignObject');\n    public domElement = document.createElementNS(nsxhtml, 'div');\n    public styleElement = document.createElementNS(nsxhtml, 'style');\n    public image = new Image();\n    public canvasAndContext?: CanvasAndContext;\n\n    constructor()\n    {\n        const { foreignObject, svgRoot, styleElement, domElement } = this;\n        // Arbitrary max size\n\n        foreignObject.setAttribute('width', '10000');\n        foreignObject.setAttribute('height', '10000');\n        foreignObject.style.overflow = 'hidden';\n\n        svgRoot.appendChild(foreignObject);\n\n        foreignObject.appendChild(styleElement);\n        foreignObject.appendChild(domElement);\n    }\n}\n"],"names":[],"mappings":";;;;;;AAEO,MAAM,KAAQ,GAAA,6BAAA;AACd,MAAM,OAAU,GAAA,+BAAA;AAEhB,MAAM,kBACb,CAAA;IAQI,WACA,EAAA;QARA,IAAA,CAAO,OAAU,GAAA,QAAA,CAAS,eAAgB,CAAA,KAAA,EAAO,KAAK,CAAA,CAAA;QACtD,IAAA,CAAO,aAAgB,GAAA,QAAA,CAAS,eAAgB,CAAA,KAAA,EAAO,eAAe,CAAA,CAAA;QACtE,IAAA,CAAO,UAAa,GAAA,QAAA,CAAS,eAAgB,CAAA,OAAA,EAAS,KAAK,CAAA,CAAA;QAC3D,IAAA,CAAO,YAAe,GAAA,QAAA,CAAS,eAAgB,CAAA,OAAA,EAAS,OAAO,CAAA,CAAA;QACxD,IAAA,CAAA,KAAA,GAAQ,IAAI,KAAM,EAAA,CAAA;QAKrB,MAAM,EAAE,aAAA,EAAe,OAAS,EAAA,YAAA,EAAc,UAAA,EAAe,GAAA,IAAA,CAAA;QAG/C,aAAA,CAAA,YAAA,CAAa,SAAS,OAAO,CAAA,CAAA;QAC7B,aAAA,CAAA,YAAA,CAAa,UAAU,OAAO,CAAA,CAAA;QAC5C,aAAA,CAAc,KAAA,CAAM,QAAW,GAAA,QAAA,CAAA;QAE/B,OAAA,CAAQ,WAAA,CAAY,aAAa,CAAA,CAAA;QAEjC,aAAA,CAAc,WAAA,CAAY,YAAY,CAAA,CAAA;QACtC,aAAA,CAAc,WAAA,CAAY,UAAU,CAAA,CAAA;IAAA,CACxC;AACJ","ignoreList":[0]}},
    {"offset": {"line": 15532, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15538, "column": 0}, "map": {"version":3,"file":"extractFontFamilies.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/utils/extractFontFamilies.ts"],"sourcesContent":["import type { HTMLTextStyle } from '../HTMLTextStyle';\n\n/**\n * Extracts font families from text. It will extract font families from the style, tagStyles and any font families\n * embedded in the text. It should also strip out duplicates as it goes.\n * @param  text - The text to extract font families from\n * @param style - The style to extract font families from\n * @returns {string[]} - The font families as an array of strings\n */\nexport function extractFontFamilies(text: string, style: HTMLTextStyle): string[]\n{\n    const fontFamily = style.fontFamily;\n    const fontFamilies: string[] = [];\n    const dedupe: Record<string, boolean> = {};\n\n    // first ensure fonts are loaded inline..\n    // find any font..\n    const regex = /font-family:([^;\"\\s]+)/g;\n\n    const matches = text.match(regex);\n\n    function addFontFamily(fontFamily: string)\n    {\n        if (!dedupe[fontFamily])\n        {\n            fontFamilies.push(fontFamily);\n\n            dedupe[fontFamily] = true;\n        }\n    }\n\n    if (Array.isArray(fontFamily))\n    {\n        for (let i = 0; i < fontFamily.length; i++)\n        {\n            addFontFamily(fontFamily[i]);\n        }\n    }\n    else\n    {\n        addFontFamily(fontFamily);\n    }\n\n    if (matches)\n    {\n        matches.forEach((match) =>\n        {\n            const fontFamily = match.split(':')[1].trim();\n\n            addFontFamily(fontFamily);\n        });\n    }\n\n    for (const i in style.tagStyles)\n    {\n        const fontFamily = style.tagStyles[i].fontFamily;\n\n        addFontFamily(fontFamily as string);\n    }\n\n    return fontFamilies;\n}\n"],"names":["fontFamily"],"mappings":";;;;AASgB,SAAA,mBAAA,CAAoB,IAAA,EAAc,KAClD,EAAA;IACI,MAAM,aAAa,KAAM,CAAA,UAAA,CAAA;IACzB,MAAM,eAAyB,EAAC,CAAA;IAChC,MAAM,SAAkC,CAAA,CAAC,CAAA;IAIzC,MAAM,KAAQ,GAAA,yBAAA,CAAA;IAER,MAAA,OAAA,GAAU,IAAK,CAAA,KAAA,CAAM,KAAK,CAAA,CAAA;IAEhC,SAAS,cAAcA,WACvB,EAAA;QACQ,IAAA,CAAC,MAAOA,CAAAA,WAAU,CACtB,EAAA;YACI,YAAA,CAAa,IAAA,CAAKA,WAAU,CAAA,CAAA;YAE5B,MAAA,CAAOA,WAAU,CAAI,GAAA,IAAA,CAAA;QAAA,CACzB;IAAA,CACJ;IAEI,IAAA,KAAA,CAAM,OAAQ,CAAA,UAAU,CAC5B,EAAA;QACI,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,UAAA,CAAW,MAAA,EAAQ,CACvC,EAAA,CAAA;YACkB,aAAA,CAAA,UAAA,CAAW,CAAC,CAAC,CAAA,CAAA;QAAA,CAC/B;IAAA,CAGJ,MAAA;QACI,aAAA,CAAc,UAAU,CAAA,CAAA;IAAA,CAC5B;IAEA,IAAI,OACJ,EAAA;QACY,OAAA,CAAA,OAAA,CAAQ,CAAC,KACjB,KAAA;YACI,MAAMA,cAAa,KAAM,CAAA,KAAA,CAAM,GAAG,CAAE,CAAA,CAAC,CAAA,CAAE,IAAK,EAAA,CAAA;YAE5C,aAAA,CAAcA,WAAU,CAAA,CAAA;QAAA,CAC3B,CAAA,CAAA;IAAA,CACL;IAEW,IAAA,MAAA,CAAA,IAAK,MAAM,SACtB,CAAA;QACI,MAAMA,WAAa,GAAA,KAAA,CAAM,SAAU,CAAA,CAAC,CAAE,CAAA,UAAA,CAAA;QAEtC,aAAA,CAAcA,WAAoB,CAAA,CAAA;IAAA,CACtC;IAEO,OAAA,YAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 15575, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15581, "column": 0}, "map": {"version":3,"file":"loadFontAsBase64.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/utils/loadFontAsBase64.ts"],"sourcesContent":["import { DOMAdapter } from '../../../environment/adapter';\n\n/**\n * Resolves a font url to a base64 string\n * @param url - The url to load the font from\n * @returns - The font as a base64 string\n */\nexport async function loadFontAsBase64(url: string): Promise<string>\n{\n    const response = await DOMAdapter.get().fetch(url);\n\n    const blob = await response.blob();\n\n    const reader = new FileReader();\n\n    const dataSrc: string = await new Promise((resolve, reject) =>\n    {\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n    });\n\n    return dataSrc;\n}\n"],"names":[],"mappings":";;;;;;AAOA,eAAsB,iBAAiB,GACvC,EAAA;IACI,MAAM,WAAW,mKAAM,aAAA,CAAW,GAAI,EAAA,CAAE,KAAA,CAAM,GAAG,CAAA,CAAA;IAE3C,MAAA,IAAA,GAAO,MAAM,QAAA,CAAS,IAAK,EAAA,CAAA;IAE3B,MAAA,MAAA,GAAS,IAAI,UAAW,EAAA,CAAA;IAE9B,MAAM,UAAkB,MAAM,IAAI,OAAQ,CAAA,CAAC,SAAS,MACpD,KAAA;QACI,MAAA,CAAO,SAAY,GAAA,IAAM,OAAQ,CAAA,MAAA,CAAO,MAAgB,CAAA,CAAA;QACxD,MAAA,CAAO,OAAU,GAAA,MAAA,CAAA;QACjB,MAAA,CAAO,aAAA,CAAc,IAAI,CAAA,CAAA;IAAA,CAC5B,CAAA,CAAA;IAEM,OAAA,OAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 15600, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15606, "column": 0}, "map": {"version":3,"file":"loadFontCSS.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/utils/loadFontCSS.ts"],"sourcesContent":["import { loadFontAsBase64 } from './loadFontAsBase64';\n\nexport interface FontCSSStyleOptions\n{\n    fontFamily: string | string[]\n    fontWeight: string\n    fontStyle: string\n}\n\n/**\n * This will take a font url and a style and return a css string that can be injected into a style tag\n * This will contain inlined base64 font and the font family information\n * @param style - the style to generate the css for\n * @param url - The url to load the font from\n * @returns - The css string\n */\nexport async function loadFontCSS(style: FontCSSStyleOptions, url: string): Promise<string>\n{\n    const dataSrc = await loadFontAsBase64(url);\n\n    return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        src: url('${dataSrc}');\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n    }`;\n}\n"],"names":[],"mappings":";;;;;;AAgBsB,eAAA,WAAA,CAAY,KAAA,EAA4B,GAC9D,EAAA;IACU,MAAA,OAAA,GAAU,mMAAM,mBAAA,EAAiB,GAAG,CAAA,CAAA;IAEnC,OAAA,CAAA;sBAAA,EACa,MAAM,UAAU,CAAA;kBAAA,EACpB,OAAO,CAAA;qBAAA,EACJ,MAAM,UAAU,CAAA;oBAAA,EACjB,MAAM,SAAS,CAAA;KAAA,CAAA,CAAA;AAErC","ignoreList":[0]}},
    {"offset": {"line": 15623, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15629, "column": 0}, "map": {"version":3,"file":"getFontCss.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/utils/getFontCss.ts"],"sourcesContent":["import { Cache } from '../../../assets/cache/Cache';\nimport { loadFontCSS } from './loadFontCSS';\n\nimport type { FontCSSStyleOptions } from './loadFontCSS';\n\nexport const FontStylePromiseCache = new Map<string, Promise<string>>();\n\n/**\n * takes the font families and returns a css string that can be injected into a style tag\n * It will contain the font families and the font urls encoded as base64\n * @param fontFamilies - The font families to load\n * @param style - The FontCSSStyleOptions to load the font with (used for the first font family)\n * @param defaultOptions - The default options to load the font with (used for the rest of the font families)\n * @param defaultOptions.fontWeight - The default font weight\n * @param defaultOptions.fontStyle - The default font style\n * @returns - The css string\n */\nexport async function getFontCss(\n    fontFamilies: string[],\n    style: FontCSSStyleOptions,\n    defaultOptions: {fontWeight: string, fontStyle: string}\n)\n{\n    const fontPromises = fontFamilies\n        .filter((fontFamily) => Cache.has(`${fontFamily}-and-url`))\n        .map((fontFamily, i) =>\n        {\n            if (!FontStylePromiseCache.has(fontFamily))\n            {\n                const { url } = Cache.get(`${fontFamily}-and-url`);\n\n                if (i === 0)\n                {\n                    FontStylePromiseCache.set(fontFamily, loadFontCSS({\n                        fontWeight: style.fontWeight,\n                        fontStyle: style.fontStyle,\n                        fontFamily,\n                    }, url));\n                }\n\n                else\n                {\n                    FontStylePromiseCache.set(fontFamily, loadFontCSS({\n                        fontWeight: defaultOptions.fontWeight,\n                        fontStyle: defaultOptions.fontStyle,\n                        fontFamily,\n                    }, url));\n                }\n            }\n\n            return FontStylePromiseCache.get(fontFamily);\n        });\n\n    return (await Promise.all(fontPromises)).join('\\n');\n}\n"],"names":[],"mappings":";;;;;;;;;AAKa,MAAA,qBAAA,GAAA,aAAA,GAAA,IAA4B,GAA6B,GAAA;AAYhD,eAAA,UAAA,CAClB,YACA,EAAA,KAAA,EACA,cAEJ,EAAA;IACI,MAAM,YAAe,GAAA,YAAA,CAChB,MAAO,CAAA,CAAC,aAAe,uKAAM,CAAA,GAAA,CAAI,CAAG,EAAA,UAAU,CAAA,QAAA,CAAU,CAAC,CAAA,CACzD,GAAI,CAAA,CAAC,YAAY,CAClB,KAAA;QACI,IAAI,CAAC,qBAAA,CAAsB,GAAI,CAAA,UAAU,CACzC,EAAA;YACI,MAAM,EAAE,GAAI,EAAA,kKAAI,QAAA,CAAM,GAAI,CAAA,CAAA,EAAG,UAAU,CAAU,QAAA,CAAA,CAAA,CAAA;YAEjD,IAAI,MAAM,CACV,EAAA;gBAC0B,qBAAA,CAAA,GAAA,CAAI,oMAAY,cAAA,AAAY,EAAA;oBAC9C,YAAY,KAAM,CAAA,UAAA;oBAClB,WAAW,KAAM,CAAA,SAAA;oBACjB,UAAA;gBAAA,CACJ,EAAG,GAAG,CAAC,CAAA,CAAA;YAAA,CAIX,MAAA;gBAC0B,qBAAA,CAAA,GAAA,CAAI,oMAAY,cAAA,AAAY,EAAA;oBAC9C,YAAY,cAAe,CAAA,UAAA;oBAC3B,WAAW,cAAe,CAAA,SAAA;oBAC1B,UAAA;gBAAA,CACJ,EAAG,GAAG,CAAC,CAAA,CAAA;YAAA,CACX;QAAA,CACJ;QAEO,OAAA,qBAAA,CAAsB,GAAA,CAAI,UAAU,CAAA,CAAA;IAAA,CAC9C,CAAA,CAAA;IAEL,OAAA,CAAQ,MAAM,OAAQ,CAAA,GAAA,CAAI,YAAY,CAAA,EAAG,IAAA,CAAK,IAAI,CAAA,CAAA;AACtD","ignoreList":[0]}},
    {"offset": {"line": 15663, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15669, "column": 0}, "map": {"version":3,"file":"textStyleToCSS.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/utils/textStyleToCSS.ts"],"sourcesContent":["import { Color } from '../../../color/Color';\n\nimport type { ConvertedStrokeStyle } from '../../graphics/shared/FillTypes';\nimport type { TextStyle } from '../../text/TextStyle';\nimport type { HTMLTextStyle, HTMLTextStyleOptions } from '../HTMLTextStyle';\n\n/**\n * Internally converts all of the style properties into CSS equivalents.\n * @param style\n * @returns The CSS style string, for setting `style` property of root HTMLElement.\n */\nexport function textStyleToCSS(style: HTMLTextStyle): string\n{\n    const stroke = style._stroke;\n    const fill = style._fill;\n\n    const cssStyleString = [\n        `color: ${Color.shared.setValue(fill.color).toHex()}`,\n        `font-size: ${(style.fontSize as number)}px`,\n        `font-family: ${style.fontFamily}`,\n        `font-weight: ${style.fontWeight}`,\n        `font-style: ${style.fontStyle}`,\n        `font-variant: ${style.fontVariant}`,\n        `letter-spacing: ${style.letterSpacing}px`,\n        `text-align: ${style.align}`,\n        `padding: ${style.padding}px`,\n        `white-space: ${(style.whiteSpace === 'pre' && style.wordWrap) ? 'pre-wrap' : style.whiteSpace}`,\n        ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n        ...style.wordWrap ? [\n            `word-wrap: ${style.breakWords ? 'break-all' : 'break-word'}`,\n            `max-width: ${style.wordWrapWidth}px`\n        ] : [],\n        ...stroke ? [strokeToCSS(stroke)] : [],\n        ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n        ...style.cssOverrides,\n    ].join(';');\n\n    const cssStyles = [`div { ${cssStyleString} }`];\n\n    tagStyleToCSS(style.tagStyles, cssStyles);\n\n    return cssStyles.join(' ');\n}\n\nfunction dropShadowToCSS(dropShadowStyle: TextStyle['dropShadow']): string\n{\n    const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n    const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n    const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n\n    const position = `${x}px ${y}px`;\n\n    if (dropShadowStyle.blur > 0)\n    {\n        return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n    }\n\n    return `text-shadow: ${position} ${color}`;\n}\n\nfunction strokeToCSS(stroke: ConvertedStrokeStyle): string\n{\n    return [\n        `-webkit-text-stroke-width: ${stroke.width}px`,\n        `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n        `text-stroke-width: ${stroke.width}px`,\n        `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n        'paint-order: stroke',\n    ].join(';');\n}\n\n/** Converts the tag styles into CSS. */\nconst templates = {\n    fontSize: `font-size: {{VALUE}}px`,\n    fontFamily: `font-family: {{VALUE}}`,\n    fontWeight: `font-weight: {{VALUE}}`,\n    fontStyle: `font-style: {{VALUE}}`,\n    fontVariant: `font-variant: {{VALUE}}`,\n    letterSpacing: `letter-spacing: {{VALUE}}px`,\n    align: `text-align: {{VALUE}}`,\n    padding: `padding: {{VALUE}}px`,\n    whiteSpace: `white-space: {{VALUE}}`,\n    lineHeight: `line-height: {{VALUE}}px`,\n    wordWrapWidth: `max-width: {{VALUE}}px`,\n};\n\n/** Converts the tag styles into CSS if modifications are required */\nconst transform = {\n    fill: (value: string) => `color: ${Color.shared.setValue(value).toHex()}`,\n    breakWords: (value: string) => `word-wrap: ${value ? 'break-all' : 'break-word'}`,\n    stroke: strokeToCSS,\n    dropShadow: dropShadowToCSS\n};\n\nfunction tagStyleToCSS(tagStyles: Record<string, HTMLTextStyleOptions>, out: string[])\n{\n    for (const i in tagStyles)\n    {\n        const tagStyle = tagStyles[i];\n        const cssTagStyle = [];\n\n        for (const j in tagStyle)\n        {\n            if (transform[j as keyof typeof transform])\n            {\n                cssTagStyle.push(transform[j as keyof typeof transform](tagStyle[j as keyof HTMLTextStyleOptions] as any));\n            }\n            else if (templates[j as keyof typeof templates])\n            {\n                // eslint-disable-next-line max-len\n                cssTagStyle.push(templates[j as keyof typeof templates].replace('{{VALUE}}', tagStyle[j as keyof HTMLTextStyleOptions] as any));\n            }\n        }\n\n        out.push(`${i} { ${cssTagStyle.join(';')} }`);\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 15764, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15770, "column": 0}, "map": {"version":3,"file":"HTMLTextStyle.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/HTMLTextStyle.ts"],"sourcesContent":["/* eslint-disable accessor-pairs */\nimport { warn } from '../../utils/logging/warn';\nimport { TextStyle } from '../text/TextStyle';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey';\nimport { textStyleToCSS } from './utils/textStyleToCSS';\n\nimport type { FillInput, StrokeInput } from '../graphics/shared/FillTypes';\nimport type { TextStyleOptions } from '../text/TextStyle';\n\n/**\n * Options for HTML text style, extends {@link TextStyle}.\n * @memberof text\n * @extends text.TextStyleOptions\n * @property {string[]} [cssOverrides] - CSS style(s) to add.\n * @property {Record<string, text.HTMLTextStyleOptions>} [tagStyles] - Tag styles.\n */\nexport interface HTMLTextStyleOptions extends Omit<TextStyleOptions, 'leading' | 'textBaseline' | 'trim' >\n{\n    cssOverrides?: string[];\n    tagStyles?: Record<string, HTMLTextStyleOptions>;\n}\n\n/**\n * A TextStyle object rendered by the HTMLTextSystem.\n * @memberof text\n */\nexport class HTMLTextStyle extends TextStyle\n{\n    private _cssOverrides: string[] = [];\n    private _cssStyle: string;\n    /**\n     * List of styles per tag.\n     * @example\n     * new HTMLText({\n     *   text:'<red>Red</red>,<blue>Blue</blue>,<green>Green</green>',\n     *   style:{\n     *       fontFamily: 'DM Sans',\n     *       fill: 'white',\n     *       fontSize:100,\n     *       tagStyles:{\n     *           red:{\n     *               fill:'red',\n     *           },\n     *           blue:{\n     *               fill:'blue',\n     *           },\n     *           green:{\n     *               fill:'green',\n     *           }\n     *       }\n     *   }\n     * );\n     */\n    public tagStyles: Record<string, HTMLTextStyleOptions>;\n\n    constructor(options: HTMLTextStyleOptions = {})\n    {\n        super(options);\n\n        this.cssOverrides ??= options.cssOverrides;\n        this.tagStyles = options.tagStyles ?? {};\n    }\n\n    /** List of style overrides that will be applied to the HTML text. */\n    set cssOverrides(value: string | string[])\n    {\n        this._cssOverrides = value instanceof Array ? value : [value];\n        this.update();\n    }\n\n    get cssOverrides(): string[]\n    {\n        return this._cssOverrides;\n    }\n\n    protected override _generateKey(): string\n    {\n        this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join('-');\n\n        return this._styleKey;\n    }\n\n    public update()\n    {\n        this._cssStyle = null;\n        super.update();\n    }\n\n    /**\n     * Creates a new HTMLTextStyle object with the same values as this one.\n     * @returns New cloned HTMLTextStyle object\n     */\n    public clone(): HTMLTextStyle\n    {\n        return new HTMLTextStyle({\n            align: this.align,\n            breakWords: this.breakWords,\n            dropShadow: this.dropShadow ? { ...this.dropShadow } : null,\n            fill: this._fill,\n            fontFamily: this.fontFamily,\n            fontSize: this.fontSize,\n            fontStyle: this.fontStyle,\n            fontVariant: this.fontVariant,\n            fontWeight: this.fontWeight,\n            letterSpacing: this.letterSpacing,\n            lineHeight: this.lineHeight,\n            padding: this.padding,\n            stroke: this._stroke,\n            whiteSpace: this.whiteSpace,\n            wordWrap: this.wordWrap,\n            wordWrapWidth: this.wordWrapWidth,\n            cssOverrides: this.cssOverrides,\n        });\n    }\n\n    get cssStyle(): string\n    {\n        if (!this._cssStyle)\n        {\n            this._cssStyle = textStyleToCSS(this);\n        }\n\n        return this._cssStyle;\n    }\n\n    /**\n     * Add a style override, this can be any CSS property\n     * it will override any built-in style. This is the\n     * property and the value as a string (e.g., `color: red`).\n     * This will override any other internal style.\n     * @param {string} value - CSS style(s) to add.\n     * @example\n     * style.addOverride('background-color: red');\n     */\n    public addOverride(...value: string[]): void\n    {\n        const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n\n        if (toAdd.length > 0)\n        {\n            this.cssOverrides.push(...toAdd);\n            this.update();\n        }\n    }\n\n    /**\n     * Remove any overrides that match the value.\n     * @param {string} value - CSS style to remove.\n     * @example\n     * style.removeOverride('background-color: red');\n     */\n    public removeOverride(...value: string[]): void\n    {\n        const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n\n        if (toRemove.length > 0)\n        {\n            this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n            this.update();\n        }\n    }\n\n    override set fill(value: FillInput)\n    {\n        // if its not a string or a number, then its a texture!\n        if (typeof value !== 'string' && typeof value !== 'number')\n        {\n            // #if _DEBUG\n            warn('[HTMLTextStyle] only color fill is not supported by HTMLText');\n            // #endif\n        }\n\n        super.fill = value;\n    }\n\n    override set stroke(value: StrokeInput)\n    {\n        // if its not a string or a number, then its a texture!\n        if (value && typeof value !== 'string' && typeof value !== 'number')\n        {\n            // #if _DEBUG\n            warn('[HTMLTextStyle] only color stroke is not supported by HTMLText');\n            // #endif\n        }\n\n        super.stroke = value;\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AA0BO,MAAM,uLAAsB,YACnC,CAAA;IA4BI,WAAA,CAAY,OAAgC,GAAA,CAAA,CAC5C,CAAA;QACI,KAAA,CAAM,OAAO,CAAA,CAAA;QA7BjB,IAAA,CAAQ,aAAA,GAA0B,EAAC,CAAA;QA+B1B,IAAA,CAAA,YAAA,IAAA,CAAL,IAAK,CAAA,YAAA,GAAiB,OAAQ,CAAA,YAAA,CAAA,CAAA;QACzB,IAAA,CAAA,SAAA,GAAY,OAAQ,CAAA,SAAA,IAAa,CAAA,CAAC,CAAA;IAAA,CAC3C;IAAA,mEAAA,GAGA,IAAI,aAAa,KACjB,EAAA;QACI,IAAA,CAAK,aAAgB,GAAA,KAAA,YAAiB,KAAQ,GAAA,KAAA,GAAQ;YAAC,KAAK;SAAA,CAAA;QAC5D,IAAA,CAAK,MAAO,EAAA,CAAA;IAAA,CAChB;IAEA,IAAI,YACJ,GAAA;QACI,OAAO,IAAK,CAAA,aAAA,CAAA;IAAA,CAChB;IAEmB,YACnB,GAAA;QACI,IAAA,CAAK,SAAA,4LAAY,uBAAA,AAAqB,EAAA,IAAI,IAAI,IAAK,CAAA,aAAA,CAAc,IAAA,CAAK,GAAG,CAAA,CAAA;QAEzE,OAAO,IAAK,CAAA,SAAA,CAAA;IAAA,CAChB;IAEO,MACP,GAAA;QACI,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;QACjB,KAAA,CAAM,MAAO,EAAA,CAAA;IAAA,CACjB;IAAA;;;GAAA,GAMO,KACP,GAAA;QACI,OAAO,IAAI,aAAc,CAAA;YACrB,OAAO,IAAK,CAAA,KAAA;YACZ,YAAY,IAAK,CAAA,UAAA;YACjB,YAAY,IAAK,CAAA,UAAA,GAAa;gBAAE,GAAG,IAAA,CAAK,UAAA;YAAA,CAAe,GAAA,IAAA;YACvD,MAAM,IAAK,CAAA,KAAA;YACX,YAAY,IAAK,CAAA,UAAA;YACjB,UAAU,IAAK,CAAA,QAAA;YACf,WAAW,IAAK,CAAA,SAAA;YAChB,aAAa,IAAK,CAAA,WAAA;YAClB,YAAY,IAAK,CAAA,UAAA;YACjB,eAAe,IAAK,CAAA,aAAA;YACpB,YAAY,IAAK,CAAA,UAAA;YACjB,SAAS,IAAK,CAAA,OAAA;YACd,QAAQ,IAAK,CAAA,OAAA;YACb,YAAY,IAAK,CAAA,UAAA;YACjB,UAAU,IAAK,CAAA,QAAA;YACf,eAAe,IAAK,CAAA,aAAA;YACpB,cAAc,IAAK,CAAA,YAAA;QAAA,CACtB,CAAA,CAAA;IAAA,CACL;IAEA,IAAI,QACJ,GAAA;QACQ,IAAA,CAAC,IAAA,CAAK,SACV,EAAA;YACS,IAAA,CAAA,SAAA,8LAAY,iBAAA,EAAe,IAAI,CAAA,CAAA;QAAA,CACxC;QAEA,OAAO,IAAK,CAAA,SAAA,CAAA;IAAA,CAChB;IAAA;;;;;;;;GAAA,GAWO,YAAA,GAAe,KACtB,EAAA;QACU,MAAA,KAAA,GAAQ,KAAM,CAAA,MAAA,CAAO,CAAC,CAAA,GAAM,CAAC,IAAK,CAAA,YAAA,CAAa,QAAS,CAAA,CAAC,CAAC,CAAA,CAAA;QAE5D,IAAA,KAAA,CAAM,MAAA,GAAS,CACnB,EAAA;YACS,IAAA,CAAA,YAAA,CAAa,IAAK,CAAA,GAAG,KAAK,CAAA,CAAA;YAC/B,IAAA,CAAK,MAAO,EAAA,CAAA;QAAA,CAChB;IAAA,CACJ;IAAA;;;;;GAAA,GAQO,eAAA,GAAkB,KACzB,EAAA;QACU,MAAA,QAAA,GAAW,MAAM,MAAO,CAAA,CAAC,IAAM,IAAK,CAAA,YAAA,CAAa,QAAS,CAAA,CAAC,CAAC,CAAA,CAAA;QAE9D,IAAA,QAAA,CAAS,MAAA,GAAS,CACtB,EAAA;YACS,IAAA,CAAA,YAAA,GAAe,IAAK,CAAA,YAAA,CAAa,MAAO,CAAA,CAAC,IAAM,CAAC,QAAA,CAAS,QAAS,CAAA,CAAC,CAAC,CAAA,CAAA;YACzE,IAAA,CAAK,MAAO,EAAA,CAAA;QAAA,CAChB;IAAA,CACJ;IAEA,IAAa,KAAK,KAClB,EAAA;QAEI,IAAI,OAAO,KAAA,KAAU,QAAY,IAAA,OAAO,UAAU,QAClD,EAAA;+KAEI,OAAA,EAAK,8DAA8D,CAAA,CAAA;QAAA,CAEvE;QAEA,KAAA,CAAM,IAAO,GAAA,KAAA,CAAA;IAAA,CACjB;IAEA,IAAa,OAAO,KACpB,EAAA;QAEI,IAAI,SAAS,OAAO,KAAA,KAAU,QAAY,IAAA,OAAO,UAAU,QAC3D,EAAA;+KAEI,OAAA,EAAK,gEAAgE,CAAA,CAAA;QAAA,CAEzE;QAEA,KAAA,CAAM,MAAS,GAAA,KAAA,CAAA;IAAA,CACnB;AACJ","ignoreList":[0]}},
    {"offset": {"line": 15880, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15886, "column": 0}, "map": {"version":3,"file":"measureHtmlText.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/utils/measureHtmlText.ts"],"sourcesContent":["import { HTMLTextRenderData } from '../HTMLTextRenderData';\n\nimport type { Size } from '../../../maths/misc/Size';\nimport type { HTMLTextStyle } from '../HTMLTextStyle';\n\nlet tempHTMLTextRenderData: HTMLTextRenderData;\n\n/**\n * Measures the HTML text without actually generating an image.\n * This is used to calculate the size of the text.\n * @param text - The text to measure\n * @param style - The style to use\n * @param fontStyleCSS - The font css to use\n * @param htmlTextRenderData - The HTMLTextRenderData to write the SVG to\n * @returns - The size of the text\n */\nexport function measureHtmlText(\n    text: string,\n    style: HTMLTextStyle,\n    fontStyleCSS?: string,\n    htmlTextRenderData?: HTMLTextRenderData\n): Size\n{\n    htmlTextRenderData ||= tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData());\n\n    const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n\n    domElement.innerHTML = `<style>${style.cssStyle};</style><div style='padding:0'>${text}</div>`;\n\n    domElement.setAttribute('style', 'transform-origin: top left; display: inline-block');\n\n    if (fontStyleCSS)\n    {\n        styleElement.textContent = fontStyleCSS;\n    }\n\n    // Measure the contents using the shadow DOM\n    document.body.appendChild(svgRoot);\n\n    const contentBounds = domElement.getBoundingClientRect();\n\n    svgRoot.remove();\n\n    // padding is included in the CSS calculation, so we need to remove it here\n    const doublePadding = style.padding * 2;\n\n    return {\n        width: contentBounds.width - doublePadding,\n        height: contentBounds.height - doublePadding,\n    };\n}\n"],"names":[],"mappings":";;;;;;AAKA,IAAI,sBAAA,CAAA;AAWG,SAAS,eACZ,CAAA,IAAA,EACA,KACA,EAAA,YAAA,EACA,kBAEJ,EAAA;IAC2B,kBAAA,IAAA,CAAA,kBAAA,GAAA,sBAAA,IAAA,CAA2B,sBAAyB,GAAA,sLAAI,qBAAmB,EAAA,CAAA,CAAA,CAAA;IAElG,MAAM,EAAE,UAAA,EAAY,YAAc,EAAA,OAAA,EAAY,GAAA,kBAAA,CAAA;IAE9C,UAAA,CAAW,SAAY,GAAA,CAAA,OAAA,EAAU,KAAM,CAAA,QAAQ,CAAA,gCAAA,EAAmC,IAAI,CAAA,MAAA,CAAA,CAAA;IAE3E,UAAA,CAAA,YAAA,CAAa,SAAS,mDAAmD,CAAA,CAAA;IAEpF,IAAI,YACJ,EAAA;QACI,YAAA,CAAa,WAAc,GAAA,YAAA,CAAA;IAAA,CAC/B;IAGS,QAAA,CAAA,IAAA,CAAK,WAAA,CAAY,OAAO,CAAA,CAAA;IAE3B,MAAA,aAAA,GAAgB,WAAW,qBAAsB,EAAA,CAAA;IAEvD,OAAA,CAAQ,MAAO,EAAA,CAAA;IAGT,MAAA,aAAA,GAAgB,MAAM,OAAU,GAAA,CAAA,CAAA;IAE/B,OAAA;QACH,KAAA,EAAO,cAAc,KAAQ,GAAA,aAAA;QAC7B,MAAA,EAAQ,cAAc,MAAS,GAAA,aAAA;IAAA,CACnC,CAAA;AACJ","ignoreList":[0]}},
    {"offset": {"line": 15912, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15918, "column": 0}, "map": {"version":3,"file":"getSVGUrl.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/utils/getSVGUrl.ts"],"sourcesContent":["import type { HTMLTextRenderData } from '../HTMLTextRenderData';\nimport type { HTMLTextStyle } from '../HTMLTextStyle';\n\n/**\n * takes all the data and returns a svg url string can be loaded by an image element\n * @param text - The text to measure\n * @param style - The style to use\n * @param resolution - The resolution to use\n * @param fontCSS - The font css to use\n * @param htmlTextData - The HTMLTextRenderData to write the SVG to\n * @returns - The SVG as a url string\n */\nexport function getSVGUrl(\n    text: string,\n    style: HTMLTextStyle,\n    resolution: number,\n    fontCSS: string,\n    htmlTextData: HTMLTextRenderData\n)\n{\n    const { domElement, styleElement, svgRoot } = htmlTextData;\n\n    domElement.innerHTML = `<style>${style.cssStyle}</style><div style='padding:0;'>${text}</div>`;\n    domElement.setAttribute('style', `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n    styleElement.textContent = fontCSS;\n\n    const { width, height } = htmlTextData.image;\n\n    svgRoot.setAttribute('width', width.toString());\n    svgRoot.setAttribute('height', height.toString());\n\n    return new XMLSerializer().serializeToString(svgRoot);\n}\n"],"names":[],"mappings":";;;;AAYO,SAAS,SACZ,CAAA,IAAA,EACA,KACA,EAAA,UAAA,EACA,OAAA,EACA,YAEJ,EAAA;IACI,MAAM,EAAE,UAAA,EAAY,YAAc,EAAA,OAAA,EAAY,GAAA,YAAA,CAAA;IAE9C,UAAA,CAAW,SAAY,GAAA,CAAA,OAAA,EAAU,KAAM,CAAA,QAAQ,CAAA,gCAAA,EAAmC,IAAI,CAAA,MAAA,CAAA,CAAA;IACtF,UAAA,CAAW,YAAa,CAAA,OAAA,EAAS,CAAoB,iBAAA,EAAA,UAAU,CAAqD,mDAAA,CAAA,CAAA,CAAA;IACpH,YAAA,CAAa,WAAc,GAAA,OAAA,CAAA;IAE3B,MAAM,EAAE,KAAA,EAAO,MAAO,EAAA,GAAI,YAAa,CAAA,KAAA,CAAA;IAEvC,OAAA,CAAQ,YAAa,CAAA,OAAA,EAAS,KAAM,CAAA,QAAA,EAAU,CAAA,CAAA;IAC9C,OAAA,CAAQ,YAAa,CAAA,QAAA,EAAU,MAAO,CAAA,QAAA,EAAU,CAAA,CAAA;IAEhD,OAAO,IAAI,aAAA,EAAgB,CAAA,iBAAA,CAAkB,OAAO,CAAA,CAAA;AACxD","ignoreList":[0]}},
    {"offset": {"line": 15934, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15940, "column": 0}, "map": {"version":3,"file":"loadSVGImage.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/utils/loadSVGImage.ts"],"sourcesContent":["/**\n * This function loads an SVG image into an HTMLImageElement.\n * The image can then be uploaded as texture to the GPU.\n * iOS has a bug where embedded fonts are not available immediately after the image loads,\n * so we wait an arbitrary amount of time before resolving the promise.\n * @param image - The image to load the SVG into\n * @param url - The url to load the SVG from\n * @param delay - Whether to delay the load\n * @returns - A promise that resolves when the image has loaded\n */\nexport function loadSVGImage(image: HTMLImageElement, url: string, delay: boolean)\n{\n    return new Promise<void>(async (resolve) =>\n    {\n        // Safari has a known bug where embedded fonts are not available\n        // immediately after the image loads, to compensate we wait an\n        // arbitrary amount of time\n        // @see https://bugs.webkit.org/show_bug.cgi?id=219770\n        if (delay)\n        {\n            await new Promise<void>((resolve) => setTimeout(resolve, 100));\n        }\n\n        image.onload = () =>\n        {\n            resolve();\n        };\n\n        image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n        image.crossOrigin = 'anonymous';\n    });\n}\n"],"names":["resolve"],"mappings":";;;;AAUgB,SAAA,YAAA,CAAa,KAAyB,EAAA,GAAA,EAAa,KACnE,EAAA;IACW,OAAA,IAAI,OAAc,CAAA,OAAO,OAChC,KAAA;QAKI,IAAI,KACJ,EAAA;YACI,MAAM,IAAI,OAAc,CAAA,CAACA,WAAY,UAAWA,CAAAA,QAAAA,EAAS,GAAG,CAAC,CAAA,CAAA;QAAA,CACjE;QAEA,KAAA,CAAM,MAAA,GAAS,MACf;YACY,OAAA,EAAA,CAAA;QAAA,CACZ,CAAA;QAEA,KAAA,CAAM,GAAM,GAAA,CAAA,gCAAA,EAAmC,kBAAmB,CAAA,GAAG,CAAC,CAAA,CAAA,CAAA;QACtE,KAAA,CAAM,WAAc,GAAA,WAAA,CAAA;IAAA,CACvB,CAAA,CAAA;AACL","ignoreList":[0]}},
    {"offset": {"line": 15958, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15964, "column": 0}, "map": {"version":3,"file":"isSafari.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/utils/browser/isSafari.ts"],"sourcesContent":["import { DOMAdapter } from '../../environment/adapter';\n\nexport function isSafari(): boolean\n{\n    const { userAgent } = DOMAdapter.get().getNavigator();\n\n    return (/^((?!chrome|android).)*safari/i).test(userAgent);\n}\n"],"names":[],"mappings":";;;;;;AAEO,SAAS,QAChB,GAAA;IACI,MAAM,EAAE,SAAU,EAAA,gKAAI,aAAW,CAAA,GAAA,GAAM,YAAa,EAAA,CAAA;IAE5C,OAAA,gCAAA,CAAkC,IAAA,CAAK,SAAS,CAAA,CAAA;AAC5D","ignoreList":[0]}},
    {"offset": {"line": 15976, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15982, "column": 0}, "map": {"version":3,"file":"getTemporaryCanvasFromImage.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/utils/getTemporaryCanvasFromImage.ts"],"sourcesContent":["import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\n\nimport type { CanvasAndContext } from '../../../rendering/renderers/shared/texture/CanvasPool';\n\n/**\n * This function converts an image to a canvas, and returns the canvas.\n * It is used to convert images to canvases to work around a CORS issue where WebGPU cannot\n * upload an SVGImage to a texture.\n *\n * It uses the CanvasPool to get an optimal canvas and context, and then draws the image onto it.\n * Remember to return this canvas is immediately to the CanvasPool for reuse when you are done with it.\n * (eg upload it to the GPU!)\n * @param image - The image to convert to a canvas.\n * @param resolution - The resolution of the canvas.\n */\nexport function getTemporaryCanvasFromImage(image: HTMLImageElement, resolution: number): CanvasAndContext\n{\n    // Get an optimal canvas and context from the CanvasPool, based on the\n    // dimensions of the image and the desired resolution.\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n        image.width,\n        image.height,\n        resolution\n    );\n\n    // Clear the context of the canvas, and draw the image onto it.\n    const { context } = canvasAndContext;\n\n    context.clearRect(0, 0, image.width, image.height);\n    context.drawImage(image, 0, 0);\n\n    // Return the canvas.\n    return canvasAndContext;\n}\n\n"],"names":[],"mappings":";;;;;;AAegB,SAAA,2BAAA,CAA4B,KAAA,EAAyB,UACrE,EAAA;IAGI,MAAM,mNAAmB,aAAW,CAAA,0BAAA,CAChC,KAAM,CAAA,KAAA,EACN,KAAM,CAAA,MAAA,EACN,UAAA;IAIE,MAAA,EAAE,OAAA,EAAY,GAAA,gBAAA,CAAA;IAEpB,OAAA,CAAQ,SAAA,CAAU,CAAG,EAAA,CAAA,EAAG,KAAM,CAAA,KAAA,EAAO,MAAM,MAAM,CAAA,CAAA;IACzC,OAAA,CAAA,SAAA,CAAU,KAAO,EAAA,CAAA,EAAG,CAAC,CAAA,CAAA;IAGtB,OAAA,gBAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 15997, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16003, "column": 0}, "map": {"version":3,"file":"HTMLTextSystem.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/HTMLTextSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../extensions/Extensions';\nimport { type CanvasAndContext, CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { isSafari } from '../../utils/browser/isSafari';\nimport { warn } from '../../utils/logging/warn';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource';\nimport { HTMLTextRenderData } from './HTMLTextRenderData';\nimport { HTMLTextStyle } from './HTMLTextStyle';\nimport { extractFontFamilies } from './utils/extractFontFamilies';\nimport { getFontCss } from './utils/getFontCss';\nimport { getSVGUrl } from './utils/getSVGUrl';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage';\nimport { loadSVGImage } from './utils/loadSVGImage';\nimport { measureHtmlText } from './utils/measureHtmlText';\n\nimport type { System } from '../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { HTMLTextOptions } from './HTMLText';\nimport type { FontCSSStyleOptions } from './utils/loadFontCSS';\n\ninterface HTMLTextTexture\n{\n    texture: Texture,\n    usageCount: number,\n    promise: Promise<Texture>,\n}\n\n/**\n * System plugin to the renderer to manage HTMLText\n * @memberof rendering\n */\nexport class HTMLTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    public static defaultFontOptions: FontCSSStyleOptions = {\n        fontFamily: 'Arial',\n        fontStyle: 'normal',\n        fontWeight: 'normal',\n    };\n\n    private _activeTextures: Record<string, HTMLTextTexture> = {};\n\n    /**\n     * WebGPU has a cors issue when uploading an image that is an SVGImage\n     * To get around this we need to create a canvas draw the image to it and upload that instead.\n     * Bit of a shame.. but no other work around just yet!\n     */\n    private readonly _createCanvas: boolean;\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._createCanvas = renderer.type === RendererType.WEBGPU;\n    }\n\n    public getTexture(options: HTMLTextOptions): Promise<Texture>\n    {\n        return this._buildTexturePromise(\n            options.text as string,\n            options.resolution,\n            options.style as HTMLTextStyle\n        );\n    }\n\n    public getManagedTexture(\n        text: string,\n        resolution: number,\n        style: HTMLTextStyle,\n        textKey: string\n    ): Promise<Texture>\n    {\n        if (this._activeTextures[textKey])\n        {\n            this._increaseReferenceCount(textKey);\n\n            return this._activeTextures[textKey].promise;\n        }\n\n        const promise = this._buildTexturePromise(text, resolution, style)\n            .then((texture) =>\n            {\n                this._activeTextures[textKey].texture = texture;\n\n                return texture;\n            });\n\n        this._activeTextures[textKey] = {\n            texture: null,\n            promise,\n            usageCount: 1,\n        };\n\n        return promise;\n    }\n\n    private async _buildTexturePromise(\n        text: string,\n        resolution: number,\n        style: HTMLTextStyle,\n    )\n    {\n        const htmlTextData = BigPool.get(HTMLTextRenderData);\n        const fontFamilies = extractFontFamilies(text, style);\n        const fontCSS = await getFontCss(\n            fontFamilies,\n            style,\n            HTMLTextStyle.defaultTextStyle as {fontWeight: string, fontStyle: string}\n        );\n        const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n\n        const width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        const height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        const image = htmlTextData.image;\n\n        // this off set will ensure we don't get any UV bleeding!\n        const uvSafeOffset = 2;\n\n        image.width = (width | 0) + uvSafeOffset;\n        image.height = (height | 0) + uvSafeOffset;\n\n        const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n\n        await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n\n        const resource: HTMLImageElement | HTMLCanvasElement = image;\n        let canvasAndContext: CanvasAndContext;\n\n        if (this._createCanvas)\n        {\n            // silly webGPU workaround..\n            canvasAndContext = getTemporaryCanvasFromImage(image, resolution);\n        }\n\n        const texture = getPo2TextureFromSource(canvasAndContext ? canvasAndContext.canvas : resource,\n            image.width - uvSafeOffset,\n            image.height - uvSafeOffset,\n            resolution\n        );\n\n        if (this._createCanvas)\n        {\n            this._renderer.texture.initSource(texture.source);\n            CanvasPool.returnCanvasAndContext(canvasAndContext);\n        }\n\n        BigPool.return(htmlTextData as PoolItem);\n\n        return texture;\n    }\n\n    private _increaseReferenceCount(textKey: string)\n    {\n        this._activeTextures[textKey].usageCount++;\n    }\n\n    public decreaseReferenceCount(textKey: string)\n    {\n        const activeTexture = this._activeTextures[textKey];\n\n        // TODO SHOULD NOT BE NEEDED\n        if (!activeTexture) return;\n\n        activeTexture.usageCount--;\n\n        if (activeTexture.usageCount === 0)\n        {\n            if (activeTexture.texture)\n            {\n                this._cleanUp(activeTexture);\n            }\n            else\n            {\n                // we did not resolve...\n                activeTexture.promise.then((texture) =>\n                {\n                    activeTexture.texture = texture;\n\n                    this._cleanUp(activeTexture);\n                }).catch(() =>\n                {\n                    // #if _DEBUG\n                    warn('HTMLTextSystem: Failed to clean texture');\n                    // #endif\n                });\n            }\n\n            this._activeTextures[textKey] = null;\n        }\n    }\n\n    private _cleanUp(activeTexture: HTMLTextTexture)\n    {\n        TexturePool.returnTexture(activeTexture.texture);\n        activeTexture.texture.source.resource = null;\n        activeTexture.texture.source.uploadMethodId = 'unknown';\n    }\n\n    public getReferenceCount(textKey: string)\n    {\n        return this._activeTextures[textKey].usageCount;\n    }\n\n    public destroy(): void\n    {\n        this._activeTextures = null;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 16138, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16144, "column": 0}, "map": {"version":3,"file":"HTMLTextPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/HTMLTextPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../extensions/Extensions';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { updateQuadBounds } from '../../utils/data/updateQuadBounds';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../sprite/BatchableSprite';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { Container } from '../container/Container';\nimport type { HTMLText } from './HTMLText';\nimport type { HTMLTextStyle } from './HTMLTextStyle';\n\nexport class HTMLTextPipe implements RenderPipe<HTMLText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _gpuText: Record<number, {\n        textureNeedsUploading: boolean;\n        generatingTexture: boolean;\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n    }> = Object.create(null);\n\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.runners.resolutionChange.add(this);\n        this._renderer.renderableGC.addManagedHash(this, '_gpuText');\n    }\n\n    public resolutionChange()\n    {\n        for (const i in this._gpuText)\n        {\n            const gpuText = this._gpuText[i];\n\n            if (!gpuText) continue;\n\n            const text = gpuText.batchableSprite.renderable as HTMLText;\n\n            if (text._autoResolution)\n            {\n                text._resolution = this._renderer.resolution;\n                text.onViewUpdate();\n            }\n        }\n    }\n\n    public validateRenderable(htmlText: HTMLText): boolean\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const newKey = htmlText._getKey();\n\n        if (gpuText.textureNeedsUploading)\n        {\n            gpuText.textureNeedsUploading = false;\n\n            return true;\n        }\n\n        if (gpuText.currentKey !== newKey)\n        {\n            // TODO - could look into optimising this a tad!\n            // if its a single texture, then we could just swap it?\n            // same for CanvasText..\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(htmlText: HTMLText, instructionSet: InstructionSet)\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateText(htmlText);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n    }\n\n    public updateRenderable(htmlText: HTMLText)\n    {\n        const gpuText = this._getGpuText(htmlText);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateText(htmlText);\n        }\n\n        batchableSprite._batcher.updateElement(batchableSprite);\n    }\n\n    public destroyRenderable(htmlText: HTMLText)\n    {\n        htmlText.off('destroyed', this._destroyRenderableBound);\n        this._destroyRenderableById(htmlText.uid);\n    }\n\n    private _destroyRenderableById(htmlTextUid: number)\n    {\n        const gpuText = this._gpuText[htmlTextUid];\n\n        this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this._gpuText[htmlTextUid] = null;\n    }\n\n    private _updateText(htmlText: HTMLText)\n    {\n        const newKey = htmlText._getKey();\n        const gpuText = this._getGpuText(htmlText);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this._updateGpuText(htmlText).catch((e) =>\n            {\n                console.error(e);\n            });\n        }\n\n        htmlText._didTextUpdate = false;\n\n        const padding = htmlText._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n    }\n\n    private async _updateGpuText(htmlText: HTMLText)\n    {\n        htmlText._didTextUpdate = false;\n\n        const gpuText = this._getGpuText(htmlText);\n\n        if (gpuText.generatingTexture) return;\n\n        const newKey = htmlText._getKey();\n\n        this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n\n        gpuText.generatingTexture = true;\n\n        gpuText.currentKey = newKey;\n\n        const resolution = htmlText.resolution ?? this._renderer.resolution;\n\n        const texture = await this._renderer.htmlText.getManagedTexture(\n            htmlText.text,\n            resolution,\n            htmlText._style as HTMLTextStyle,\n            htmlText._getKey()\n        );\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        batchableSprite.texture = gpuText.texture = texture;\n\n        gpuText.generatingTexture = false;\n\n        gpuText.textureNeedsUploading = true;\n        htmlText.onViewUpdate();\n\n        const padding = htmlText._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n    }\n\n    private _getGpuText(htmlText: HTMLText)\n    {\n        return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n    }\n\n    public initGpuText(htmlText: HTMLText)\n    {\n        const gpuTextData: HTMLTextPipe['_gpuText'][number] = {\n            texture: Texture.EMPTY,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n            textureNeedsUploading: false,\n            generatingTexture: false,\n        };\n\n        const batchableSprite = gpuTextData.batchableSprite;\n\n        batchableSprite.renderable = htmlText;\n        batchableSprite.transform = htmlText.groupTransform;\n        batchableSprite.texture = Texture.EMPTY;\n        batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        batchableSprite.roundPixels = (this._renderer._roundPixels | htmlText._roundPixels) as 0 | 1;\n\n        htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n        this._gpuText[htmlText.uid] = gpuTextData;\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        htmlText.on('destroyed', this._destroyRenderableBound);\n\n        return gpuTextData;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuText)\n        {\n            this._destroyRenderableById(i as unknown as number);\n        }\n\n        this._gpuText = null;\n        this._renderer = null;\n    }\n}\n\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 16291, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16297, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { HTMLTextPipe } from './HTMLTextPipe';\nimport { HTMLTextSystem } from './HTMLTextSystem';\n\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n"],"names":[],"mappings":";;;;;;;;+JAIA,aAAA,CAAW,GAAA,+KAAI,iBAAc,CAAA,CAAA;+JAC7B,aAAA,CAAW,GAAA,6KAAI,eAAY,CAAA","ignoreList":[0]}},
    {"offset": {"line": 16307, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16313, "column": 0}, "map": {"version":3,"file":"MeshGeometry.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/mesh/shared/MeshGeometry.ts"],"sourcesContent":["import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\n\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { BatchMode } from '../../graphics/shared/GraphicsContext';\n\n/**\n * Options for the mesh geometry.\n * @memberof scene\n */\nexport interface MeshGeometryOptions\n{\n    /** The positions of the mesh. */\n    positions?: Float32Array;\n    /** The UVs of the mesh. */\n    uvs?: Float32Array;\n    /** The indices of the mesh. */\n    indices?: Uint32Array;\n    /** The topology of the mesh. */\n    topology?: Topology;\n    /** Whether to shrink the buffers to fit the data. */\n    shrinkBuffersToFit?: boolean;\n}\n\n/**\n * A geometry used to batch multiple meshes with the same texture.\n * @memberof scene\n */\nexport class MeshGeometry extends Geometry\n{\n    public static defaultOptions: MeshGeometryOptions = {\n        topology: 'triangle-list',\n        shrinkBuffersToFit: false,\n    };\n\n    public batchMode: BatchMode = 'auto';\n\n    /**\n     * @param {scene.MeshGeometryOptions} options - The options of the mesh geometry.\n     */\n    constructor(options: MeshGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(positions: Float32Array, uvs: Float32Array, indices: Uint32Array);\n    constructor(...args: [MeshGeometryOptions] | [Float32Array, Float32Array, Uint32Array])\n    {\n        let options = args[0] ?? {};\n\n        if (options instanceof Float32Array)\n        {\n            // #if _DEBUG\n            deprecation(v8_0_0, 'use new MeshGeometry({ positions, uvs, indices }) instead');\n            // #endif\n\n            options = {\n                positions: options,\n                uvs: args[1],\n                indices: args[2],\n            };\n        }\n\n        options = { ...MeshGeometry.defaultOptions, ...options };\n\n        const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n        const uvs = options.uvs || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n        const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n\n        const shrinkToFit = options.shrinkBuffersToFit;\n\n        const positionBuffer = new Buffer({\n            data: positions,\n            label: 'attribute-mesh-positions',\n            shrinkToFit,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const uvBuffer = new Buffer({\n            data: uvs,\n            label: 'attribute-mesh-uvs',\n            shrinkToFit,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const indexBuffer = new Buffer({\n            data: indices,\n            label: 'index-mesh-buffer',\n            shrinkToFit,\n            usage: BufferUsage.INDEX | BufferUsage.COPY_DST,\n        });\n\n        super({\n            attributes: {\n                aPosition: {\n                    buffer: positionBuffer,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n                aUV: {\n                    buffer: uvBuffer,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n            },\n            indexBuffer,\n            topology: options.topology,\n        });\n    }\n\n    /** The positions of the mesh. */\n    get positions(): Float32Array\n    {\n        return this.attributes.aPosition.buffer.data as Float32Array;\n    }\n\n    set positions(value: Float32Array)\n    {\n        this.attributes.aPosition.buffer.data = value;\n    }\n\n    /** The UVs of the mesh. */\n    get uvs(): Float32Array\n    {\n        return this.attributes.aUV.buffer.data as Float32Array;\n    }\n\n    set uvs(value: Float32Array)\n    {\n        this.attributes.aUV.buffer.data = value;\n    }\n\n    /** The indices of the mesh. */\n    get indices(): Uint32Array\n    {\n        return this.indexBuffer.data as Uint32Array;\n    }\n\n    set indices(value: Uint32Array)\n    {\n        this.indexBuffer.data = value;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 16433, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16439, "column": 0}, "map": {"version":3,"file":"QuadGeometry.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/utils/QuadGeometry.ts"],"sourcesContent":["import { MeshGeometry } from '../../mesh/shared/MeshGeometry';\n\nexport class QuadGeometry extends MeshGeometry\n{\n    constructor()\n    {\n        super({\n            positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            indices: new Uint32Array([0, 1, 2, 0, 2, 3]),\n        });\n    }\n}\n"],"names":[],"mappings":";;;;;;AAEO,MAAM,mMAAqB,eAClC,CAAA;IACI,WACA,EAAA;QACU,KAAA,CAAA;YACF,SAAW,EAAA,IAAI,YAAa,CAAA;gBAAC,CAAG;gBAAA,CAAA;gBAAG,CAAG;gBAAA,CAAA;gBAAG,CAAG;gBAAA,CAAA;gBAAG,CAAG;gBAAA,CAAC;aAAC,CAAA;YACpD,GAAK,EAAA,IAAI,YAAa,CAAA;gBAAC,CAAG;gBAAA,CAAA;gBAAG,CAAG;gBAAA,CAAA;gBAAG,CAAG;gBAAA,CAAA;gBAAG,CAAG;gBAAA,CAAC;aAAC,CAAA;YAC9C,OAAA,EAAS,IAAI,WAAA,CAAY;gBAAC,CAAA;gBAAG;gBAAG,CAAG;gBAAA,CAAA;gBAAG,CAAG;gBAAA,CAAC;aAAC,CAAA;QAAA,CAC9C,CAAA,CAAA;IAAA,CACL;AACJ","ignoreList":[0]}},
    {"offset": {"line": 16481, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16487, "column": 0}, "map": {"version":3,"file":"localUniformBit.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/high-shader/shader-bits/localUniformBit.ts"],"sourcesContent":["export const localUniformBit = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* wgsl */`\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n};\n\n// TODO this works, but i think down the road it will be better to manage groups automatically if there are clashes\nexport const localUniformBitGroup2 = {\n    ...localUniformBit,\n    vertex: {\n        ...localUniformBit.vertex,\n        // replace the group!\n        header: localUniformBit.vertex.header.replace('group(1)', 'group(2)'),\n    }\n};\n\nexport const localUniformBitGl = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* glsl */`\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n};\n"],"names":[],"mappings":";;;;;;AAAO,MAAM,eAAkB,GAAA;IAC3B,IAAM,EAAA,mBAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;;;;;QAAA,CAAA;QAUlB,IAAA,EAAA,QAAA,GAAgB,CAAA;;;QAAA,CAAA;QAIhB,GAAA,EAAA,QAAA,GAAe,CAAA;;;;;QAAA,CAAA;IAAA,CAMnB;AACJ,EAAA;AAGO,MAAM,qBAAwB,GAAA;IACjC,GAAG,eAAA;IACH,MAAQ,EAAA;QACJ,GAAG,eAAgB,CAAA,MAAA;QAAA,qBAAA;QAEnB,QAAQ,eAAgB,CAAA,MAAA,CAAO,MAAO,CAAA,OAAA,CAAQ,YAAY,UAAU,CAAA;IAAA,CACxE;AACJ,EAAA;AAEO,MAAM,iBAAoB,GAAA;IAC7B,IAAM,EAAA,mBAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;QAAA,CAAA;QAMlB,IAAA,EAAA,QAAA,GAAgB,CAAA;;;QAAA,CAAA;QAIhB,GAAA,EAAA,QAAA,GAAe,CAAA;;;;;QAAA,CAAA;IAAA,CAMnB;AACJ","ignoreList":[0]}},
    {"offset": {"line": 16549, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16555, "column": 0}, "map": {"version":3,"file":"tilingBit.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/shader/tilingBit.ts"],"sourcesContent":["export const tilingBit = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    }\n\n};\n\nexport const tilingBitGl = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        `,\n        main: /* glsl */`\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `,\n        main: /* glsl */`\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        `\n    }\n\n};\n"],"names":[],"mappings":";;;;;AAAO,MAAM,SAAY,GAAA;IACrB,IAAM,EAAA,YAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;;;;;;;;QAAA,CAAA;QAalB,IAAA,EAAA,QAAA,GAAgB,CAAA;;;;QAAA,CAAA;IAAA,CAMpB;IACA,QAAU,EAAA;QACN,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;;;;;;;;QAAA,CAAA;QAalB,IAAA,EAAA,QAAA,GAAgB,CAAA;;;;;;;;;;;;;;;QAAA,CAAA;IAAA,CAgBpB;AAEJ,EAAA;AAEO,MAAM,WAAc,GAAA;IACvB,IAAM,EAAA,YAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;QAAA,CAAA;QAKlB,IAAA,EAAA,QAAA,GAAgB,CAAA;;;;QAAA,CAAA;IAAA,CAMpB;IACA,QAAU,EAAA;QACN,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;QAAA,CAAA;QAMlB,IAAA,EAAA,QAAA,GAAgB,CAAA;;;;;;;;;QAAA,CAAA;IAAA,CAUpB;AAEJ","ignoreList":[0]}},
    {"offset": {"line": 16649, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16655, "column": 0}, "map": {"version":3,"file":"TilingSpriteShader.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/shader/TilingSpriteShader.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { tilingBit, tilingBitGl } from './tilingBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\nexport class TilingSpriteShader extends Shader\n{\n    constructor()\n    {\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBit,\n                tilingBit,\n                roundPixelsBit,\n            ],\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBitGl,\n                tilingBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        const tilingUniforms = new UniformGroup({\n            uMapCoord: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: 'vec4<f32>' },\n            uClampOffset: { value: new Float32Array([0, 0]), type: 'vec2<f32>' },\n            uTextureTransform: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: 'vec4<f32>' },\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: new UniformGroup({\n                    uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n                    uRound: { value: 0, type: 'f32' },\n                }),\n                tilingUniforms,\n                uTexture: Texture.EMPTY.source,\n                uSampler: Texture.EMPTY.source.style,\n            }\n        });\n    }\n\n    public updateUniforms(\n        width: number, height: number,\n        matrix: Matrix,\n        anchorX: number, anchorY: number,\n        texture: Texture\n    ): void\n    {\n        const tilingUniforms = this.resources.tilingUniforms;\n\n        const textureWidth = texture.width;\n        const textureHeight = texture.height;\n        const textureMatrix = texture.textureMatrix;\n\n        const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n\n        uTextureTransform.set(\n            matrix.a * textureWidth / width,\n            matrix.b * textureWidth / height,\n            matrix.c * textureHeight / width,\n            matrix.d * textureHeight / height,\n            matrix.tx / width,\n            matrix.ty / height);\n\n        uTextureTransform.invert();\n\n        tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n        tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n        tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n        tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n        tilingUniforms.uniforms.uSizeAnchor[0] = width;\n        tilingUniforms.uniforms.uSizeAnchor[1] = height;\n        tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n        tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n\n        if (texture)\n        {\n            this.resources.uTexture = texture.source;\n            this.resources.uSampler = texture.source.style;\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 16783, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16789, "column": 0}, "map": {"version":3,"file":"applyMatrix.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/utils/applyMatrix.ts"],"sourcesContent":["import type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { TypedArray } from '../../../rendering/renderers/shared/buffer/Buffer';\n\nexport function applyMatrix(array: TypedArray, stride: number, offset: number, matrix: Matrix)\n{\n    let index = 0;\n    const size = array.length / (stride || 2);\n\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n\n    offset *= stride;\n\n    while (index < size)\n    {\n        const x = array[offset];\n        const y = array[offset + 1];\n\n        array[offset] = (a * x) + (c * y) + tx;\n        array[offset + 1] = (b * x) + (d * y) + ty;\n\n        offset += stride;\n\n        index++;\n    }\n}\n"],"names":[],"mappings":";;;;AAGO,SAAS,WAAY,CAAA,KAAA,EAAmB,MAAgB,EAAA,MAAA,EAAgB,MAC/E,EAAA;IACI,IAAI,KAAQ,GAAA,CAAA,CAAA;IACN,MAAA,IAAA,GAAO,KAAM,CAAA,MAAA,GAAA,CAAU,MAAU,IAAA,CAAA,CAAA,CAAA;IAEvC,MAAM,IAAI,MAAO,CAAA,CAAA,CAAA;IACjB,MAAM,IAAI,MAAO,CAAA,CAAA,CAAA;IACjB,MAAM,IAAI,MAAO,CAAA,CAAA,CAAA;IACjB,MAAM,IAAI,MAAO,CAAA,CAAA,CAAA;IACjB,MAAM,KAAK,MAAO,CAAA,EAAA,CAAA;IAClB,MAAM,KAAK,MAAO,CAAA,EAAA,CAAA;IAER,MAAA,IAAA,MAAA,CAAA;IAEV,MAAO,QAAQ,IACf,CAAA;QACU,MAAA,CAAA,GAAI,KAAA,CAAM,MAAM,CAAA,CAAA;QAChB,MAAA,CAAA,GAAI,KAAM,CAAA,MAAA,GAAS,CAAC,CAAA,CAAA;QAE1B,KAAA,CAAM,MAAM,CAAA,GAAK,CAAI,GAAA,CAAA,GAAM,IAAI,CAAK,GAAA,EAAA,CAAA;QACpC,KAAA,CAAM,SAAS,CAAC,CAAA,GAAK,CAAI,GAAA,CAAA,GAAM,IAAI,CAAK,GAAA,EAAA,CAAA;QAE9B,MAAA,IAAA,MAAA,CAAA;QAEV,KAAA,EAAA,CAAA;IAAA,CACJ;AACJ","ignoreList":[0]}},
    {"offset": {"line": 16814, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16820, "column": 0}, "map": {"version":3,"file":"setUvs.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/utils/setUvs.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { applyMatrix } from './applyMatrix';\n\nimport type { TilingSprite } from '../TilingSprite';\n\nexport function setUvs(tilingSprite: TilingSprite, uvs: Float32Array)\n{\n    const texture = tilingSprite.texture;\n\n    const width = texture.frame.width;\n    const height = texture.frame.height;\n\n    let anchorX = 0;\n    let anchorY = 0;\n\n    if (tilingSprite.applyAnchorToTexture)\n    {\n        anchorX = tilingSprite.anchor.x;\n        anchorY = tilingSprite.anchor.y;\n    }\n\n    uvs[0] = uvs[6] = -anchorX;\n    uvs[2] = uvs[4] = 1 - anchorX;\n    uvs[1] = uvs[3] = -anchorY;\n    uvs[5] = uvs[7] = 1 - anchorY;\n\n    const textureMatrix = Matrix.shared;\n\n    textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n\n    textureMatrix.tx /= tilingSprite.width;\n    textureMatrix.ty /= tilingSprite.height;\n\n    textureMatrix.invert();\n\n    textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n\n    applyMatrix(uvs, 2, 0, textureMatrix);\n}\n"],"names":[],"mappings":";;;;;;;;AAKgB,SAAA,MAAA,CAAO,YAAA,EAA4B,GACnD,EAAA;IACI,MAAM,UAAU,YAAa,CAAA,OAAA,CAAA;IAEvB,MAAA,KAAA,GAAQ,QAAQ,KAAM,CAAA,KAAA,CAAA;IACtB,MAAA,MAAA,GAAS,QAAQ,KAAM,CAAA,MAAA,CAAA;IAE7B,IAAI,OAAU,GAAA,CAAA,CAAA;IACd,IAAI,OAAU,GAAA,CAAA,CAAA;IAEd,IAAI,aAAa,oBACjB,EAAA;QACI,OAAA,GAAU,aAAa,MAAO,CAAA,CAAA,CAAA;QAC9B,OAAA,GAAU,aAAa,MAAO,CAAA,CAAA,CAAA;IAAA,CAClC;IAEA,GAAA,CAAI,CAAC,CAAA,GAAI,GAAI,CAAA,CAAC,CAAA,GAAI,CAAC,OAAA,CAAA;IACnB,GAAA,CAAI,CAAC,CAAA,GAAI,GAAI,CAAA,CAAC,CAAA,GAAI,CAAI,GAAA,OAAA,CAAA;IACtB,GAAA,CAAI,CAAC,CAAA,GAAI,GAAI,CAAA,CAAC,CAAA,GAAI,CAAC,OAAA,CAAA;IACnB,GAAA,CAAI,CAAC,CAAA,GAAI,GAAI,CAAA,CAAC,CAAA,GAAI,CAAI,GAAA,OAAA,CAAA;IAEtB,MAAM,gLAAgB,SAAO,CAAA,MAAA,CAAA;IAEf,aAAA,CAAA,QAAA,CAAS,YAAa,CAAA,cAAA,CAAe,MAAM,CAAA,CAAA;IAEzD,aAAA,CAAc,EAAA,IAAM,YAAa,CAAA,KAAA,CAAA;IACjC,aAAA,CAAc,EAAA,IAAM,YAAa,CAAA,MAAA,CAAA;IAEjC,aAAA,CAAc,MAAO,EAAA,CAAA;IAErB,aAAA,CAAc,KAAA,CAAM,YAAa,CAAA,KAAA,GAAQ,KAAO,EAAA,YAAA,CAAa,MAAA,GAAS,MAAM,CAAA,CAAA;gMAEhE,cAAA,EAAA,GAAA,EAAK,CAAG,EAAA,CAAA,EAAG,aAAa,CAAA,CAAA;AACxC","ignoreList":[0]}},
    {"offset": {"line": 16852, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16858, "column": 0}, "map": {"version":3,"file":"setPositions.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/utils/setPositions.ts"],"sourcesContent":["import type { TilingSprite } from '../TilingSprite';\n\nexport function setPositions(tilingSprite: TilingSprite, positions: Float32Array)\n{\n    const anchorX = tilingSprite.anchor.x;\n    const anchorY = tilingSprite.anchor.y;\n\n    positions[0] = -anchorX * tilingSprite.width;\n    positions[1] = -anchorY * tilingSprite.height;\n    positions[2] = (1 - anchorX) * tilingSprite.width;\n    positions[3] = -anchorY * tilingSprite.height;\n    positions[4] = (1 - anchorX) * tilingSprite.width;\n    positions[5] = (1 - anchorY) * tilingSprite.height;\n    positions[6] = -anchorX * tilingSprite.width;\n    positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n"],"names":[],"mappings":";;;;AAEgB,SAAA,YAAA,CAAa,YAAA,EAA4B,SACzD,EAAA;IACU,MAAA,OAAA,GAAU,aAAa,MAAO,CAAA,CAAA,CAAA;IAC9B,MAAA,OAAA,GAAU,aAAa,MAAO,CAAA,CAAA,CAAA;IAEpC,SAAA,CAAU,CAAC,CAAA,GAAI,CAAC,OAAA,GAAU,YAAa,CAAA,KAAA,CAAA;IACvC,SAAA,CAAU,CAAC,CAAA,GAAI,CAAC,OAAA,GAAU,YAAa,CAAA,MAAA,CAAA;IACvC,SAAA,CAAU,CAAC,CAAA,GAAA,CAAK,CAAI,GAAA,OAAA,IAAW,YAAa,CAAA,KAAA,CAAA;IAC5C,SAAA,CAAU,CAAC,CAAA,GAAI,CAAC,OAAA,GAAU,YAAa,CAAA,MAAA,CAAA;IACvC,SAAA,CAAU,CAAC,CAAA,GAAA,CAAK,CAAI,GAAA,OAAA,IAAW,YAAa,CAAA,KAAA,CAAA;IAC5C,SAAA,CAAU,CAAC,CAAA,GAAA,CAAK,CAAI,GAAA,OAAA,IAAW,YAAa,CAAA,MAAA,CAAA;IAC5C,SAAA,CAAU,CAAC,CAAA,GAAI,CAAC,OAAA,GAAU,YAAa,CAAA,KAAA,CAAA;IACvC,SAAA,CAAU,CAAC,CAAA,GAAA,CAAK,CAAI,GAAA,OAAA,IAAW,YAAa,CAAA,MAAA,CAAA;AAChD","ignoreList":[0]}},
    {"offset": {"line": 16876, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16882, "column": 0}, "map": {"version":3,"file":"TilingSpritePipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/TilingSpritePipe.ts"],"sourcesContent":["import { ExtensionType } from '../../extensions/Extensions';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { State } from '../../rendering/renderers/shared/state/State';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader';\nimport { QuadGeometry } from './utils/QuadGeometry';\nimport { setPositions } from './utils/setPositions';\nimport { setUvs } from './utils/setUvs';\n\nimport type { WebGLRenderer } from '../../rendering/renderers/gl/WebGLRenderer';\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Container } from '../container/Container';\nimport type { TilingSprite } from './TilingSprite';\n\ninterface RenderableData\n{\n    canBatch: boolean;\n    renderable: TilingSprite\n    batchableMesh?: BatchableMesh;\n    geometry?: MeshGeometry;\n    shader?: TilingSpriteShader;\n}\n\nconst sharedQuad = new QuadGeometry();\n\nexport class TilingSpritePipe implements RenderPipe<TilingSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'tilingSprite',\n    } as const;\n\n    private _renderer: Renderer;\n    private readonly _state: State = State.default2d;\n    private readonly _tilingSpriteDataHash: Record<number, RenderableData> = Object.create(null);\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_tilingSpriteDataHash');\n    }\n\n    public validateRenderable(renderable: TilingSprite): boolean\n    {\n        const tilingSpriteData = this._getTilingSpriteData(renderable);\n\n        const couldBatch = tilingSpriteData.canBatch;\n\n        this._updateCanBatch(renderable);\n\n        const canBatch = tilingSpriteData.canBatch;\n\n        if (canBatch && canBatch === couldBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            return !batchableMesh._batcher.checkAndUpdateTexture(\n                batchableMesh,\n                renderable.texture\n            );\n        }\n\n        return (couldBatch !== canBatch);\n\n        // // TODO - only update if required?\n        // // only texture\n        // // only uvs\n        // // only positions?\n    }\n\n    public addRenderable(tilingSprite: TilingSprite, instructionSet: InstructionSet)\n    {\n        const batcher = this._renderer.renderPipes.batch;\n\n        // init\n        this._updateCanBatch(tilingSprite);\n\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry, canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            tilingSpriteData.batchableMesh ||= new BatchableMesh();\n\n            const batchableMesh = tilingSpriteData.batchableMesh;\n\n            if (tilingSprite.didViewUpdate)\n            {\n                this._updateBatchableMesh(tilingSprite);\n\n                batchableMesh.geometry = geometry;\n                batchableMesh.renderable = tilingSprite;\n                batchableMesh.transform = tilingSprite.groupTransform;\n                batchableMesh.texture = tilingSprite._texture;\n            }\n\n            batchableMesh.roundPixels = (this._renderer._roundPixels | tilingSprite._roundPixels) as 0 | 1;\n\n            batcher.addToBatch(batchableMesh, instructionSet);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            tilingSpriteData.shader ||= new TilingSpriteShader();\n\n            this.updateRenderable(tilingSprite);\n\n            instructionSet.add(tilingSprite);\n        }\n    }\n\n    public execute(tilingSprite: TilingSprite)\n    {\n        const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n\n        shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n\n        // deal with local uniforms...\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n        localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n\n        color32BitToUniform(\n            tilingSprite.groupColorAlpha,\n            localUniforms.uColor,\n            0\n        );\n\n        this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n\n        this._renderer.encoder.draw({\n            geometry: sharedQuad,\n            shader,\n            state: this._state,\n        });\n    }\n\n    public updateRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            if (tilingSprite.didViewUpdate) this._updateBatchableMesh(tilingSprite);\n\n            batchableMesh._batcher.updateElement(batchableMesh);\n        }\n        else if (tilingSprite.didViewUpdate)\n        {\n            const { shader } = tilingSpriteData;\n            // now update uniforms...\n\n            shader.updateUniforms(\n                tilingSprite.width,\n                tilingSprite.height,\n                tilingSprite._tileTransform.matrix,\n                tilingSprite.anchor.x,\n                tilingSprite.anchor.y,\n                tilingSprite.texture,\n            );\n        }\n    }\n\n    public destroyRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        tilingSpriteData.batchableMesh = null;\n\n        tilingSpriteData.shader?.destroy();\n\n        this._tilingSpriteDataHash[tilingSprite.uid] = null;\n\n        tilingSprite.off('destroyed', this._destroyRenderableBound);\n    }\n\n    private _getTilingSpriteData(renderable: TilingSprite): RenderableData\n    {\n        return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n    }\n\n    private _initTilingSpriteData(tilingSprite: TilingSprite): RenderableData\n    {\n        const geometry = new MeshGeometry({\n            indices: sharedQuad.indices,\n            positions: sharedQuad.positions.slice(),\n            uvs: sharedQuad.uvs.slice(),\n        });\n\n        this._tilingSpriteDataHash[tilingSprite.uid] = {\n            canBatch: true,\n            renderable: tilingSprite,\n            geometry,\n        };\n\n        tilingSprite.on('destroyed', this._destroyRenderableBound);\n\n        return this._tilingSpriteDataHash[tilingSprite.uid];\n    }\n\n    private _updateBatchableMesh(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry } = renderableData;\n\n        const style = tilingSprite.texture.source.style;\n\n        if (style.addressMode !== 'repeat')\n        {\n            style.addressMode = 'repeat';\n            style.update();\n        }\n\n        setUvs(tilingSprite, geometry.uvs);\n        setPositions(tilingSprite, geometry.positions);\n    }\n\n    public destroy()\n    {\n        for (const i in this._tilingSpriteDataHash)\n        {\n            this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n        }\n\n        (this._tilingSpriteDataHash as null) = null;\n        this._renderer = null;\n    }\n\n    private _updateCanBatch(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n        const texture = tilingSprite.texture;\n\n        let _nonPowOf2wrapping = true;\n\n        if (this._renderer.type === RendererType.WEBGL)\n        {\n            _nonPowOf2wrapping = (this._renderer as WebGLRenderer).context.supports.nonPowOf2wrapping;\n        }\n\n        renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n\n        return renderableData.canBatch;\n    }\n}\n\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 17041, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17047, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { TilingSpritePipe } from './TilingSpritePipe';\n\nextensions.add(TilingSpritePipe);\n"],"names":[],"mappings":";;;;;;+JAGA,aAAA,CAAW,GAAA,qLAAI,mBAAgB,CAAA","ignoreList":[0]}},
    {"offset": {"line": 17054, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17060, "column": 0}, "map": {"version":3,"file":"PlaneGeometry.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/mesh-plane/PlaneGeometry.ts"],"sourcesContent":["import { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\n\nimport type { MeshGeometryOptions } from '../mesh/shared/MeshGeometry';\n\n/**\n * Constructor options used for `PlaneGeometry` instances.\n * ```js\n * const planeGeometry = new PlaneGeometry({\n *    width: 100,\n *    height: 100,\n *    verticesX: 10,\n *    verticesY: 10,\n * });\n * ```\n * @see {@link scene.PlaneGeometry}\n * @memberof scene\n */\nexport interface PlaneGeometryOptions\n{\n    /** Width of plane */\n    width?: number;\n    /** Height of plane */\n    height?: number;\n    /** Number of vertices on x-axis */\n    verticesX?: number;\n    /** Number of vertices on y-axis */\n    verticesY?: number;\n}\n\n/**\n * The PlaneGeometry allows you to draw a 2d plane\n * @memberof scene\n */\nexport class PlaneGeometry extends MeshGeometry\n{\n    public static defaultOptions: PlaneGeometryOptions & MeshGeometryOptions = {\n        width: 100,\n        height: 100,\n        verticesX: 10,\n        verticesY: 10,\n    };\n\n    /** The number of vertices on x-axis */\n    public verticesX: number;\n    /** The number of vertices on y-axis */\n    public verticesY: number;\n    /** The width of plane */\n    public width: number;\n    /** The height of plane */\n    public height: number;\n\n    /**\n     * @param {PlaneGeometryOptions} options - Options to be applied to plane geometry\n     */\n    constructor(options: PlaneGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(width?: number, height?: number, verticesX?: number, verticesY?: number);\n    constructor(...args: [PlaneGeometryOptions?] | [number?, number?, number?, number?])\n    {\n        super({});\n\n        let options = args[0] ?? {};\n\n        if (typeof options === 'number')\n        {\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead');\n            // #endif\n\n            options = {\n                width: options,\n                height: args[1],\n                verticesX: args[2],\n                verticesY: args[3],\n            };\n        }\n\n        this.build(options);\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @param options - Options to be applied to plane geometry\n     */\n    public build(options: PlaneGeometryOptions): void\n    {\n        options = { ...PlaneGeometry.defaultOptions, ...options };\n\n        this.verticesX = this.verticesX ?? options.verticesX;\n        this.verticesY = this.verticesY ?? options.verticesY;\n\n        this.width = this.width ?? options.width;\n        this.height = this.height ?? options.height;\n\n        const total = this.verticesX * this.verticesY;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const verticesX = this.verticesX - 1;\n        const verticesY = this.verticesY - 1;\n\n        const sizeX = (this.width) / verticesX;\n        const sizeY = (this.height) / verticesY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.verticesX);\n            const y = ((i / this.verticesX) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / verticesX, y / verticesY);\n        }\n\n        const totalSub = verticesX * verticesY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % verticesX;\n            const ypos = (i / verticesX) | 0;\n\n            const value = (ypos * this.verticesX) + xpos;\n            const value2 = (ypos * this.verticesX) + xpos + 1;\n            const value3 = ((ypos + 1) * this.verticesX) + xpos;\n            const value4 = ((ypos + 1) * this.verticesX) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint32Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 17136, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17142, "column": 0}, "map": {"version":3,"file":"NineSliceGeometry.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceGeometry.ts"],"sourcesContent":["import { PlaneGeometry } from '../mesh-plane/PlaneGeometry';\n\n/**\n * Options for the NineSliceGeometry.\n * @memberof scene\n */\nexport interface NineSliceGeometryOptions\n{\n\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    width?: number\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    height?: number\n    /** The original width of the texture */\n    originalWidth?: number\n    /** The original height of the texture */\n    originalHeight?: number\n    /** The width of the left column. */\n    leftWidth?: number\n    /** The height of the top row. */\n    topHeight?: number\n    /** The width of the right column. */\n    rightWidth?: number\n    /** The height of the bottom row. */\n    bottomHeight?: number\n}\n\n/**\n * The NineSliceGeometry class allows you to create a NineSlicePlane object.\n * @memberof scene\n */\nexport class NineSliceGeometry extends PlaneGeometry\n{\n    /** The default options for the NineSliceGeometry. */\n    public static defaultOptions: NineSliceGeometryOptions = {\n        /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        width: 100,\n        /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        height: 100,\n        /** The width of the left column. */\n        leftWidth: 10,\n        /** The height of the top row. */\n        topHeight: 10,\n        /** The width of the right column. */\n        rightWidth: 10,\n        /** The height of the bottom row. */\n        bottomHeight: 10,\n\n        /** The original width of the texture */\n        originalWidth: 100,\n        /** The original height of the texture */\n        originalHeight: 100,\n    };\n\n    public _leftWidth: number;\n    public _rightWidth: number;\n    public _topHeight: number;\n    public _bottomHeight: number;\n\n    private _originalWidth: number;\n    private _originalHeight: number;\n\n    constructor(options: NineSliceGeometryOptions = {})\n    {\n        options = { ...NineSliceGeometry.defaultOptions, ...options };\n\n        super({\n            width: options.width,\n            height: options.height,\n            verticesX: 4,\n            verticesY: 4,\n        });\n\n        this.update(options);\n    }\n\n    /**\n     * Updates the NineSliceGeometry with the options.\n     * @param options - The options of the NineSliceGeometry.\n     */\n    public update(options: NineSliceGeometryOptions)\n    {\n        this.width = options.width ?? this.width;\n        this.height = options.height ?? this.height;\n        this._originalWidth = options.originalWidth ?? this._originalWidth;\n        this._originalHeight = options.originalHeight ?? this._originalHeight;\n        this._leftWidth = options.leftWidth ?? this._leftWidth;\n        this._rightWidth = options.rightWidth ?? this._rightWidth;\n        this._topHeight = options.topHeight ?? this._topHeight;\n        this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n\n        this.updateUvs();\n        this.updatePositions();\n    }\n\n    /** Updates the positions of the vertices. */\n    public updatePositions()\n    {\n        const positions = this.positions;\n\n        const w = this._leftWidth + this._rightWidth;\n        const scaleW = this.width > w ? 1.0 : this.width / w;\n\n        const h = this._topHeight + this._bottomHeight;\n        const scaleH = this.height > h ? 1.0 : this.height / h;\n\n        const scale = Math.min(scaleW, scaleH);\n\n        positions[9] = positions[11] = positions[13] = positions[15] = this._topHeight * scale;\n        positions[17] = positions[19] = positions[21] = positions[23] = this.height - (this._bottomHeight * scale);\n        positions[25] = positions[27] = positions[29] = positions[31] = this.height;\n\n        positions[2] = positions[10] = positions[18] = positions[26] = this._leftWidth * scale;\n        positions[4] = positions[12] = positions[20] = positions[28] = this.width - (this._rightWidth * scale);\n        positions[6] = positions[14] = positions[22] = positions[30] = this.width;\n\n        this.getBuffer('aPosition').update();\n    }\n\n    /** Updates the UVs of the vertices. */\n    public updateUvs()\n    {\n        const uvs = this.uvs;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        const _uvw = 1.0 / this._originalWidth;\n        const _uvh = 1.0 / this._originalHeight;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.getBuffer('aUV').update();\n    }\n}\n\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 17220, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17226, "column": 0}, "map": {"version":3,"file":"NineSliceSpritePipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceSpritePipe.ts"],"sourcesContent":["import { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { NineSliceGeometry } from './NineSliceGeometry';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { Container } from '../container/Container';\nimport type { NineSliceSprite } from './NineSliceSprite';\n\nexport class NineSliceSpritePipe implements RenderPipe<NineSliceSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'nineSliceSprite',\n    } as const;\n\n    private readonly _renderer: Renderer;\n    private readonly _gpuSpriteHash: Record<number, BatchableMesh> = Object.create(null);\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_gpuSpriteHash');\n    }\n\n    public addRenderable(sprite: NineSliceSprite, instructionSet: InstructionSet)\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n    }\n\n    public updateRenderable(sprite: NineSliceSprite)\n    {\n        const gpuSprite = this._gpuSpriteHash[sprite.uid];\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        gpuSprite._batcher.updateElement(gpuSprite);\n    }\n\n    public validateRenderable(sprite: NineSliceSprite): boolean\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        return !gpuSprite._batcher.checkAndUpdateTexture(\n            gpuSprite,\n            sprite._texture\n        );\n    }\n\n    public destroyRenderable(sprite: NineSliceSprite)\n    {\n        const batchableMesh = this._gpuSpriteHash[sprite.uid];\n\n        // this will call reset!\n        BigPool.return(batchableMesh.geometry as PoolItem);\n        BigPool.return(batchableMesh as PoolItem);\n\n        this._gpuSpriteHash[sprite.uid] = null;\n\n        sprite.off('destroyed', this._destroyRenderableBound);\n    }\n\n    private _updateBatchableSprite(sprite: NineSliceSprite, batchableSprite: BatchableMesh)\n    {\n        (batchableSprite.geometry as NineSliceGeometry)\n            .update(sprite);\n\n        // = sprite.bounds;\n        batchableSprite.texture = sprite._texture;\n    }\n\n    private _getGpuSprite(sprite: NineSliceSprite): BatchableMesh\n    {\n        return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n    }\n\n    private _initGPUSprite(sprite: NineSliceSprite): BatchableMesh\n    {\n        const batchableMesh = BigPool.get(BatchableMesh);\n\n        batchableMesh.geometry = BigPool.get(NineSliceGeometry);\n        batchableMesh.renderable = sprite;\n        batchableMesh.transform = sprite.groupTransform;\n        batchableMesh.texture = sprite._texture;\n        batchableMesh.roundPixels = (this._renderer._roundPixels | sprite._roundPixels) as 0 | 1;\n\n        this._gpuSpriteHash[sprite.uid] = batchableMesh;\n\n        // if the sprite has not been updated by the view, we need to update the batchable mesh now.\n        if (!sprite.didViewUpdate)\n        {\n            this._updateBatchableSprite(sprite, batchableMesh);\n        }\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        sprite.on('destroyed', this._destroyRenderableBound);\n\n        return batchableMesh;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuSpriteHash)\n        {\n            const batchableMesh = this._gpuSpriteHash[i];\n\n            batchableMesh.geometry.destroy();\n        }\n\n        (this._gpuSpriteHash as null) = null;\n        (this._renderer as null) = null;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 17306, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17312, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-nine-slice/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe';\n\nextensions.add(NineSliceSpritePipe);\n"],"names":[],"mappings":";;;;;;+JAGA,aAAA,CAAW,GAAA,+LAAI,sBAAmB,CAAA","ignoreList":[0]}},
    {"offset": {"line": 17319, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17325, "column": 0}, "map": {"version":3,"file":"getFastGlobalBounds.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/container/bounds/getFastGlobalBounds.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { boundsPool } from './utils/matrixAndBoundsPool';\n\nimport type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Container } from '../Container';\nimport type { Bounds } from './Bounds';\n\n// TODO could we cache local bounds on the render groups?\n\nconst tempMatrix = new Matrix();\n\n/**\n * Does exactly the same as getGlobalBounds, but does instead makes use of transforming AABBs\n * of the various children within the scene graph. This is much faster, but less accurate.\n *\n * the result will never be smaller - only ever slightly larger (in most cases, it will be the same).\n * @param target - The target container to get the bounds from\n * @param bounds - The output bounds object.\n * @returns The bounds.\n */\nexport function getFastGlobalBounds(target: Container, bounds: Bounds): Bounds\n{\n    bounds.clear();\n\n    _getGlobalBoundsRecursive(target, bounds);\n\n    if (!bounds.isValid)\n    {\n        bounds.set(0, 0, 0, 0);\n    }\n\n    const renderGroup = target.renderGroup || target.parentRenderGroup;\n\n    bounds.applyMatrix(renderGroup.worldTransform);\n\n    return bounds;\n}\n\nexport function _getGlobalBoundsRecursive(\n    target: Container,\n    bounds: Bounds,\n)\n{\n    if (target.localDisplayStatus !== 0b111 || !target.measurable)\n    {\n        return;\n    }\n\n    const manageEffects = !!target.effects.length;\n\n    let localBounds = bounds;\n\n    if (target.renderGroup || manageEffects)\n    {\n        localBounds = boundsPool.get().clear();\n    }\n\n    if (target.boundsArea)\n    {\n        bounds.addRect(target.boundsArea, target.worldTransform);\n    }\n    else\n    {\n        if (target.renderPipeId)\n        {\n            const viewBounds = (target as Renderable).bounds;\n\n            localBounds.addFrame(\n                viewBounds.minX,\n                viewBounds.minY,\n                viewBounds.maxX,\n                viewBounds.maxY,\n                target.groupTransform\n            );\n        }\n\n        const children = target.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            _getGlobalBoundsRecursive(children[i], localBounds);\n        }\n    }\n\n    if (manageEffects)\n    {\n        let advanced = false;\n\n        const renderGroup = target.renderGroup || target.parentRenderGroup;\n\n        for (let i = 0; i < target.effects.length; i++)\n        {\n            if (target.effects[i].addBounds)\n            {\n                if (!advanced)\n                {\n                    advanced = true;\n                    localBounds.applyMatrix(renderGroup.worldTransform);\n                }\n\n                target.effects[i].addBounds(localBounds, true);\n            }\n        }\n\n        if (advanced)\n        {\n            localBounds.applyMatrix(renderGroup.worldTransform.copyTo(tempMatrix).invert());\n            bounds.addBounds(localBounds, target.relativeGroupTransform);\n        }\n\n        bounds.addBounds(localBounds);\n        boundsPool.return(localBounds);\n    }\n    else if (target.renderGroup)\n    {\n        bounds.addBounds(localBounds, target.relativeGroupTransform);\n        boundsPool.return(localBounds);\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 17391, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17397, "column": 0}, "map": {"version":3,"file":"getRenderableBounds.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/container/bounds/getRenderableBounds.ts"],"sourcesContent":["import type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Bounds } from './Bounds';\n\nexport function getGlobalRenderableBounds(renderables: Renderable[], bounds: Bounds): Bounds\n{\n    bounds.clear();\n\n    // instead of copying the matrix each time we are assigning it in bounds\n    // this is a performance hack :D\n    // so we need to restore the matrix after we are done\n\n    const tempMatrix = bounds.matrix;\n\n    for (let i = 0; i < renderables.length; i++)\n    {\n        const renderable = renderables[i];\n\n        if (renderable.globalDisplayStatus < 0b111)\n        {\n            continue;\n        }\n\n        bounds.matrix = renderable.worldTransform;\n        bounds.addBounds(renderable.bounds);\n    }\n\n    bounds.matrix = tempMatrix;\n\n    return bounds;\n}\n"],"names":[],"mappings":";;;;AAGgB,SAAA,yBAAA,CAA0B,WAAA,EAA2B,MACrE,EAAA;IACI,MAAA,CAAO,KAAM,EAAA,CAAA;IAMb,MAAM,aAAa,MAAO,CAAA,MAAA,CAAA;IAE1B,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,WAAA,CAAY,MAAA,EAAQ,CACxC,EAAA,CAAA;QACU,MAAA,UAAA,GAAa,WAAA,CAAY,CAAC,CAAA,CAAA;QAE5B,IAAA,UAAA,CAAW,mBAAA,GAAsB,CACrC,EAAA;YACI,SAAA;QAAA,CACJ;QAEA,MAAA,CAAO,MAAA,GAAS,UAAW,CAAA,cAAA,CAAA;QACpB,MAAA,CAAA,SAAA,CAAU,WAAW,MAAM,CAAA,CAAA;IAAA,CACtC;IAEA,MAAA,CAAO,MAAS,GAAA,UAAA,CAAA;IAET,OAAA,MAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 17417, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17423, "column": 0}, "map": {"version":3,"file":"FilterSystem.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/FilterSystem.ts"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions';\nimport { Matrix } from '../maths/matrix/Matrix';\nimport { Point } from '../maths/point/Point';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer, RendererType } from '../rendering/renderers/types';\nimport { Bounds } from '../scene/container/bounds/Bounds';\nimport { getFastGlobalBounds } from '../scene/container/bounds/getFastGlobalBounds';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds';\nimport { warn } from '../utils/logging/warn';\n\nimport type { WebGLRenderer } from '../rendering/renderers/gl/WebGLRenderer';\nimport type { WebGPURenderer } from '../rendering/renderers/gpu/WebGPURenderer';\nimport type { Instruction } from '../rendering/renderers/shared/instructions/Instruction';\nimport type { Renderable } from '../rendering/renderers/shared/Renderable';\nimport type { RenderTarget } from '../rendering/renderers/shared/renderTarget/RenderTarget';\nimport type { RenderSurface } from '../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type { System } from '../rendering/renderers/shared/system/System';\nimport type { Container } from '../scene/container/Container';\nimport type { Sprite } from '../scene/sprite/Sprite';\nimport type { Filter } from './Filter';\nimport type { FilterEffect } from './FilterEffect';\n\ntype FilterAction = 'pushFilter' | 'popFilter';\n\n//\nconst quadGeometry = new Geometry({\n    attributes: {\n        aPosition: {\n            buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            format: 'float32x2',\n            stride: 2 * 4,\n            offset: 0,\n        },\n    },\n    indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3]),\n});\n\n/**\n * The filter pipeline is responsible for applying filters scene items!\n *\n * KNOWN BUGS:\n * 1. Global bounds calculation is incorrect if it is used when flip flopping filters. The maths can be found below\n * eg: filters [noiseFilter, blurFilter] noiseFilter will calculate the global bounds incorrectly.\n *\n * 2. RenderGroups do not work with filters. This is because the renderGroup matrix is not currently taken into account.\n *\n * Implementation notes:\n * 1. Gotcha - nesting filters that require blending will not work correctly. This creates a chicken and egg problem\n * the complexity and performance required to do this is not worth it i feel.. but lets see if others agree!\n *\n * 2. Filters are designed to be changed on the fly, this is means that changing filter information each frame will\n * not trigger an instruction rebuild. If you are constantly turning a filter on and off.. its therefore better to set\n * enabled to true or false on the filter. Or setting an empty array.\n *\n * 3. Need to look at perhaps aliasing when flip flopping filters. Really we should only need to antialias the FIRST\n * Texture we render too. The rest can be non aliased. This might help performance.\n * Currently we flip flop with an antialiased texture if antialiasing is enabled on the filter.\n */\nexport interface FilterInstruction extends Instruction\n{\n    renderPipeId: 'filter',\n    action: FilterAction,\n    container?: Container,\n    renderables?: Renderable[],\n    filterEffect: FilterEffect,\n}\n\nexport interface FilterData\n{\n    skip: boolean;\n    enabledLength?: number;\n    inputTexture: Texture\n    bounds: Bounds,\n    blendRequired: boolean,\n    container: Container,\n    filterEffect: FilterEffect,\n    previousRenderSurface: RenderSurface,\n    backTexture?: Texture,\n}\n\n/**\n * System that manages the filter pipeline\n * @memberof rendering\n */\nexport class FilterSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'filter',\n    } as const;\n\n    public readonly renderer: Renderer;\n\n    private _filterStackIndex = 0;\n    private _filterStack: FilterData[] = [];\n\n    private readonly _filterGlobalUniforms = new UniformGroup({\n        uInputSize: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputPixel: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputClamp: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uGlobalFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputTexture: { value: new Float32Array(4), type: 'vec4<f32>' },\n    });\n\n    private readonly _globalFilterBindGroup: BindGroup = new BindGroup({});\n    private _activeFilterData: FilterData;\n\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n     * @readonly\n     */\n    public get activeBackTexture(): Texture | undefined\n    {\n        return this._activeFilterData?.backTexture;\n    }\n\n    public push(instruction: FilterInstruction)\n    {\n        const renderer = this.renderer;\n\n        const filters = instruction.filterEffect.filters;\n\n        if (!this._filterStack[this._filterStackIndex])\n        {\n            this._filterStack[this._filterStackIndex] = this._getFilterData();\n        }\n\n        // get a filter data from the stack. They can be reused multiple times each frame,\n        // so we don't need to worry about overwriting them in a single pass.\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        this._filterStackIndex++;\n\n        // if there are no filters, we skip the pass\n        if (filters.length === 0)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        const bounds: Bounds = filterData.bounds;\n\n        // this path is used by the blend modes mostly!\n        // they collect all renderables and push them into a list.\n        // this list is then used to calculate the bounds of the filter area\n        if (instruction.renderables)\n        {\n            getGlobalRenderableBounds(instruction.renderables, bounds);\n        }\n        // if a filterArea is provided, we save our selves some measuring and just use that area supplied\n        else if (instruction.filterEffect.filterArea)\n        {\n            bounds.clear();\n\n            // transform the filterArea into global space..\n            bounds.addRect(instruction.filterEffect.filterArea);\n\n            // new for v8, we transform the bounds into the space of the container\n            bounds.applyMatrix(instruction.container.worldTransform);\n        }\n        // classic filter path, we get the bounds of the container and use it by recursively\n        // measuring.\n        else\n        {\n            getFastGlobalBounds(instruction.container, bounds);\n        }\n\n        if (instruction.container)\n        {\n            // When a container is cached as a texture, its filters need to be applied relative to its\n            // cached parent's coordinate space rather than world space. This transform adjustment ensures\n            // filters are applied in the correct coordinate system.\n            const renderGroup = instruction.container.renderGroup || instruction.container.parentRenderGroup;\n            const filterFrameTransform = renderGroup.cacheToLocalTransform;\n\n            if (filterFrameTransform)\n            {\n                bounds.applyMatrix(filterFrameTransform);\n            }\n        }\n\n        // get GLOBAL bounds of the item we are going to apply the filter to\n\n        const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n\n        // next we get the settings for the filter\n        // we need to find the LOWEST resolution for the filter list\n        let resolution = Infinity;\n        // Padding is additive to add padding to our padding\n        let padding = 0;\n        // if this is true for all filter, it should be true, and otherwise false\n        let antialias = true;\n        // true if any filter requires the previous render target\n        let blendRequired = false;\n        // true if any filter in the list is enabled\n        let enabled = false;\n        // false if any filter in the list has false\n        let clipToViewport = true;\n\n        for (let i = 0; i < filters.length; i++)\n        {\n            const filter = filters[i];\n\n            resolution = Math.min(resolution, filter.resolution === 'inherit'\n                ? colorTextureSource._resolution : filter.resolution);\n            padding += filter.padding;\n\n            if (filter.antialias === 'off')\n            {\n                antialias = false;\n            }\n            else if (filter.antialias === 'inherit')\n            {\n                antialias &&= colorTextureSource.antialias;\n            }\n\n            if (!filter.clipToViewport)\n            {\n                clipToViewport = false;\n            }\n\n            const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n\n            if (!isCompatible)\n            {\n                enabled = false;\n                break;\n            }\n\n            if (filter.blendRequired && !((renderer as WebGLRenderer).backBuffer?.useBackBuffer ?? true))\n            {\n                // #if _DEBUG\n                // eslint-disable-next-line max-len\n                warn('Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.');\n                // #endif\n\n                enabled = false;\n                break;\n            }\n\n            enabled = filter.enabled || enabled;\n            blendRequired ||= filter.blendRequired;\n        }\n\n        // if no filters are enabled lets skip!\n        if (!enabled)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // here we constrain the bounds to the viewport we will render too\n        // this should not take into account the x, y offset of the viewport - as this is\n        // handled by the viewport on the gpu.\n        if (clipToViewport)\n        {\n            const viewPort = renderer.renderTarget.rootViewPort;\n\n            const rootResolution = renderer.renderTarget.renderTarget.resolution;\n\n            bounds.fitBounds(0, viewPort.width / rootResolution, 0, viewPort.height / rootResolution);\n        }\n\n        // round the bounds to the nearest pixel\n        bounds\n            .scale(resolution)\n            .ceil()\n            .scale(1 / resolution)\n            .pad(padding | 0);\n\n        // skip if the bounds are negative or zero as this means they are\n        // not visible on the screen\n        if (!bounds.isPositive)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // set all the filter data\n        filterData.skip = false;\n\n        filterData.bounds = bounds;\n        filterData.blendRequired = blendRequired;\n        filterData.container = instruction.container;\n        filterData.filterEffect = instruction.filterEffect;\n\n        filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n\n        // bind...\n        // get a P02 texture from our pool...\n        filterData.inputTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            resolution,\n            antialias,\n        );\n\n        renderer.renderTarget.bind(filterData.inputTexture, true);\n        // set the global uniforms to take into account the bounds offset required\n\n        renderer.globalUniforms.push({\n            offset: bounds,\n        });\n    }\n\n    public pop()\n    {\n        const renderer = this.renderer;\n\n        this._filterStackIndex--;\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        // if we are skipping this filter then we just do nothing :D\n        if (filterData.skip)\n        {\n            return;\n        }\n\n        this._activeFilterData = filterData;\n\n        const inputTexture = filterData.inputTexture;\n\n        const bounds = filterData.bounds;\n\n        let backTexture = Texture.EMPTY;\n\n        renderer.renderTarget.finishRenderPass();\n\n        if (filterData.blendRequired)\n        {\n            // this actually forces the current commandQueue to render everything so far.\n            // if we don't do this, we won't be able to copy pixels for the background\n            const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n\n            const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n\n            backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n        }\n\n        filterData.backTexture = backTexture;\n\n        const filters = filterData.filterEffect.filters;\n\n        // get a BufferResource from the uniformBatch.\n        // this will batch the shader uniform data and give us a buffer resource we can\n        // set on our globalUniform Bind Group\n\n        // update the resources on the bind group...\n        this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n        this._globalFilterBindGroup.setResource(backTexture.source, 3);\n\n        renderer.globalUniforms.pop();\n\n        if (filters.length === 1)\n        {\n            // render a single filter...\n            // this.applyFilter(filters[0], inputTexture, filterData.previousRenderSurface, false);\n            filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n\n            // return the texture to the pool so we can reuse the next frame\n            TexturePool.returnTexture(inputTexture);\n        }\n        else\n        {\n            let flip = filterData.inputTexture;\n\n            // get another texture that we will render the next filter too\n            let flop = TexturePool.getOptimalTexture(\n                bounds.width,\n                bounds.height,\n                flip.source._resolution,\n                false\n            );\n\n            let i = 0;\n\n            // loop and apply the filters, omitting the last one as we will render that to the final target\n            for (i = 0; i < filters.length - 1; ++i)\n            {\n                const filter = filters[i];\n\n                filter.apply(this, flip, flop, true);\n                const t = flip;\n\n                flip = flop;\n                flop = t;\n            }\n\n            filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n\n            // return those textures for later!\n            TexturePool.returnTexture(flip);\n            TexturePool.returnTexture(flop);\n        }\n\n        // if we made a background texture, lets return that also\n        if (filterData.blendRequired)\n        {\n            TexturePool.returnTexture(backTexture);\n        }\n    }\n\n    public getBackTexture(lastRenderSurface: RenderTarget, bounds: Bounds, previousBounds?: Bounds)\n    {\n        const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n\n        const backTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            backgroundResolution,\n            false,\n        );\n\n        let x = bounds.minX;\n        let y = bounds.minY;\n\n        if (previousBounds)\n        {\n            x -= previousBounds.minX;\n            y -= previousBounds.minY;\n        }\n\n        x = Math.floor(x * backgroundResolution);\n        y = Math.floor(y * backgroundResolution);\n\n        const width = Math.ceil(bounds.width * backgroundResolution);\n        const height = Math.ceil(bounds.height * backgroundResolution);\n\n        this.renderer.renderTarget.copyToTexture(\n            lastRenderSurface,\n            backTexture,\n            { x, y },\n            { width, height },\n            { x: 0, y: 0 }\n        );\n\n        return backTexture;\n    }\n\n    public applyFilter(filter: Filter, input: Texture, output: RenderSurface, clear: boolean)\n    {\n        const renderer = this.renderer;\n\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        const bounds = filterData.bounds;\n\n        const offset = Point.shared;\n        const previousRenderSurface = filterData.previousRenderSurface;\n\n        const isFinalTarget = previousRenderSurface === output;\n\n        let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n\n        // to find the previous resolution we need to account for the skipped filters\n        // the following will find the last non skipped filter...\n        let currentIndex = this._filterStackIndex - 1;\n\n        while (currentIndex > 0 && this._filterStack[currentIndex].skip)\n        {\n            --currentIndex;\n        }\n\n        if (currentIndex > 0)\n        {\n            resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n        }\n\n        const filterUniforms = this._filterGlobalUniforms;\n        const uniforms = filterUniforms.uniforms;\n\n        const outputFrame = uniforms.uOutputFrame;\n        const inputSize = uniforms.uInputSize;\n        const inputPixel = uniforms.uInputPixel;\n        const inputClamp = uniforms.uInputClamp;\n        const globalFrame = uniforms.uGlobalFrame;\n        const outputTexture = uniforms.uOutputTexture;\n\n        // are we rendering back to the original surface?\n        if (isFinalTarget)\n        {\n            let lastIndex = this._filterStackIndex;\n\n            // get previous bounds.. we must take into account skipped filters also..\n            while (lastIndex > 0)\n            {\n                lastIndex--;\n                const filterData = this._filterStack[this._filterStackIndex - 1];\n\n                if (!filterData.skip)\n                {\n                    offset.x = filterData.bounds.minX;\n                    offset.y = filterData.bounds.minY;\n\n                    break;\n                }\n            }\n\n            outputFrame[0] = bounds.minX - offset.x;\n            outputFrame[1] = bounds.minY - offset.y;\n        }\n        else\n        {\n            outputFrame[0] = 0;\n            outputFrame[1] = 0;\n        }\n\n        outputFrame[2] = input.frame.width;\n        outputFrame[3] = input.frame.height;\n\n        inputSize[0] = input.source.width;\n        inputSize[1] = input.source.height;\n        inputSize[2] = 1 / inputSize[0];\n        inputSize[3] = 1 / inputSize[1];\n\n        inputPixel[0] = input.source.pixelWidth;\n        inputPixel[1] = input.source.pixelHeight;\n        inputPixel[2] = 1.0 / inputPixel[0];\n        inputPixel[3] = 1.0 / inputPixel[1];\n\n        inputClamp[0] = 0.5 * inputPixel[2];\n        inputClamp[1] = 0.5 * inputPixel[3];\n        inputClamp[2] = (input.frame.width * inputSize[2]) - (0.5 * inputPixel[2]);\n        inputClamp[3] = (input.frame.height * inputSize[3]) - (0.5 * inputPixel[3]);\n\n        const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n\n        globalFrame[0] = offset.x * resolution;\n        globalFrame[1] = offset.y * resolution;\n\n        globalFrame[2] = rootTexture.source.width * resolution;\n        globalFrame[3] = rootTexture.source.height * resolution;\n\n        // set the output texture - this is where we are going to render to\n\n        const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n\n        renderer.renderTarget.bind(output, !!clear);\n\n        if (output instanceof Texture)\n        {\n            outputTexture[0] = output.frame.width;\n            outputTexture[1] = output.frame.height;\n        }\n        else\n        {\n            // this means a renderTarget was passed directly\n            outputTexture[0] = renderTarget.width;\n            outputTexture[1] = renderTarget.height;\n        }\n\n        outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n        filterUniforms.update();\n\n        // TODO - should prolly use a adaptor...\n        if ((renderer as WebGPURenderer).renderPipes.uniformBatch)\n        {\n            const batchUniforms = (renderer as WebGPURenderer).renderPipes.uniformBatch\n                .getUboResource(filterUniforms);\n\n            this._globalFilterBindGroup.setResource(batchUniforms, 0);\n        }\n        else\n        {\n            this._globalFilterBindGroup.setResource(filterUniforms, 0);\n        }\n\n        // now lets update the output texture...\n\n        // set bind group..\n        this._globalFilterBindGroup.setResource(input.source, 1);\n        this._globalFilterBindGroup.setResource(input.source.style, 2);\n\n        filter.groups[0] = this._globalFilterBindGroup;\n\n        renderer.encoder.draw({\n            geometry: quadGeometry,\n            shader: filter,\n            state: filter._state,\n            topology: 'triangle-list'\n        });\n\n        // WebGPU blit's automatically, but WebGL does not!\n        if (renderer.type === RendererType.WEBGL)\n        {\n            renderer.renderTarget.finishRenderPass();\n        }\n    }\n\n    private _getFilterData(): FilterData\n    {\n        return {\n            skip: false,\n            inputTexture: null,\n            bounds: new Bounds(),\n            container: null,\n            filterEffect: null,\n            blendRequired: false,\n            previousRenderSurface: null,\n        };\n    }\n\n    /**\n     * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n     *\n     * Use `outputMatrix * vTextureCoord` in the shader.\n     * @param outputMatrix - The matrix to output to.\n     * @param {Sprite} sprite - The sprite to map to.\n     * @returns The mapped matrix.\n     */\n    public calculateSpriteMatrix(outputMatrix: Matrix, sprite: Sprite): Matrix\n    {\n        const data = this._activeFilterData;\n\n        const mappedMatrix = outputMatrix.set(\n            data.inputTexture._source.width,\n            0, 0,\n            data.inputTexture._source.height,\n            data.bounds.minX, data.bounds.minY\n        );\n\n        const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n\n        const renderGroup = sprite.renderGroup || sprite.parentRenderGroup;\n\n        if (renderGroup && renderGroup.cacheToLocalTransform)\n        {\n            // get the matrix relative to the render group..\n            worldTransform.prepend(renderGroup.cacheToLocalTransform);\n        }\n\n        worldTransform.invert();\n        mappedMatrix.prepend(worldTransform);\n        mappedMatrix.scale(\n            1.0 / sprite.texture.frame.width,\n            1.0 / sprite.texture.frame.height\n        );\n\n        mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n\n        return mappedMatrix;\n    }\n\n    public destroy?: () => void;\n}\n"],"names":["filterData"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 17806, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17812, "column": 0}, "map": {"version":3,"file":"FilterPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/FilterPipe.ts"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions';\n\nimport type { InstructionSet } from '../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../rendering/renderers/types';\nimport type { Container } from '../scene/container/Container';\nimport type { Effect } from '../scene/container/Effect';\nimport type { FilterInstruction } from './FilterSystem';\n\nexport class FilterPipe implements InstructionPipe<FilterInstruction>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'filter',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(filterEffect: Effect, container: Container, instructionSet: InstructionSet): void\n    {\n        const renderPipes = this._renderer.renderPipes;\n\n        renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            canBundle: false,\n            action: 'pushFilter',\n            container,\n            filterEffect,\n        } as FilterInstruction);\n    }\n\n    public pop(_filterEffect: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            action: 'popFilter',\n            canBundle: false,\n        });\n    }\n\n    public execute(instruction: FilterInstruction)\n    {\n        if (instruction.action === 'pushFilter')\n        {\n            this._renderer.filter.push(instruction);\n        }\n        else if (instruction.action === 'popFilter')\n        {\n            this._renderer.filter.pop();\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n"],"names":[],"mappings":";;;;;;AASO,MAAM,UACb,CAAA;IAYI,YAAY,QACZ,CAAA;QACI,IAAA,CAAK,SAAY,GAAA,QAAA,CAAA;IAAA,CACrB;IAEO,IAAA,CAAK,YAAsB,EAAA,SAAA,EAAsB,cACxD,EAAA;QACU,MAAA,WAAA,GAAc,IAAA,CAAK,SAAU,CAAA,WAAA,CAAA;QAEvB,WAAA,CAAA,KAAA,CAAM,KAAA,CAAM,cAAc,CAAA,CAAA;QAEtC,cAAA,CAAe,GAAI,CAAA;YACf,YAAc,EAAA,QAAA;YACd,SAAW,EAAA,KAAA;YACX,MAAQ,EAAA,YAAA;YACR,SAAA;YACA,YAAA;QAAA,CACkB,CAAA,CAAA;IAAA,CAC1B;IAEO,GAAA,CAAI,aAAuB,EAAA,UAAA,EAAuB,cACzD,EAAA;QACI,IAAA,CAAK,SAAU,CAAA,WAAA,CAAY,KAAM,CAAA,KAAA,CAAM,cAAc,CAAA,CAAA;QAErD,cAAA,CAAe,GAAI,CAAA;YACf,YAAc,EAAA,QAAA;YACd,MAAQ,EAAA,WAAA;YACR,SAAW,EAAA,KAAA;QAAA,CACd,CAAA,CAAA;IAAA,CACL;IAEO,QAAQ,WACf,EAAA;QACQ,IAAA,WAAA,CAAY,MAAA,KAAW,YAC3B,EAAA;YACS,IAAA,CAAA,SAAA,CAAU,MAAO,CAAA,IAAA,CAAK,WAAW,CAAA,CAAA;QAAA,CAC1C,MAAA,IACS,WAAY,CAAA,MAAA,KAAW,WAChC,EAAA;YACS,IAAA,CAAA,SAAA,CAAU,MAAA,CAAO,GAAI,EAAA,CAAA;QAAA,CAC9B;IAAA,CACJ;IAEO,OACP,GAAA;QACI,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;IAAA,CACrB;AACJ,CAAA;AA5Da,UAAA,CAEK,SAAY,GAAA;IACtB,IAAM,EAAA;uKACF,gBAAc,CAAA,UAAA;uKACd,gBAAc,CAAA,WAAA;uKACd,gBAAc,CAAA,WAAA;KAClB;IACA,IAAM,EAAA,QAAA;AACV,CAAA","ignoreList":[0]}},
    {"offset": {"line": 17862, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17868, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/init.ts"],"sourcesContent":["import { extensions } from '../extensions/Extensions';\nimport { FilterPipe } from './FilterPipe';\nimport { FilterSystem } from './FilterSystem';\n\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n"],"names":[],"mappings":";;;;;;;;+JAIA,aAAA,CAAW,GAAA,+JAAI,eAAY,CAAA,CAAA;+JAC3B,aAAA,CAAW,GAAA,6JAAI,aAAU,CAAA","ignoreList":[0]}},
    {"offset": {"line": 17878, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17884, "column": 0}, "map": {"version":3,"file":"browserAll.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 17914, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}