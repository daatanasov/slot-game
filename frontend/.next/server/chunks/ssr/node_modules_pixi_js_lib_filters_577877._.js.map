{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"FilterEffect.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/FilterEffect.ts"],"sourcesContent":["import type { Rectangle } from '../maths/shapes/Rectangle';\nimport type { Effect } from '../scene/container/Effect';\nimport type { Filter } from './Filter';\n\n/**\n * A filter effect is an effect that can be applied to a container that involves applying special pixel effects\n * to that container as it is rendered. Used internally when the filters property is modified on a container\n */\nexport class FilterEffect implements Effect\n{\n    /** read only filters array - to modify, set it again! */\n    public filters: readonly Filter[];\n    /**\n     * If specified, rather than calculating the bounds of the container that the filter\n     * will apply to, we use this rect instead. This is a local rect - so will have the containers transform\n     * applied to it\n     */\n    public filterArea?: Rectangle;\n\n    /** the pipe that knows how to handle this effect */\n    public pipe = 'filter';\n    /** the priority of this effect */\n    public priority = 1;\n\n    public destroy(): void\n    {\n        for (let i = 0; i < this.filters.length; i++)\n        {\n            this.filters[i].destroy();\n        }\n\n        this.filters = null;\n        this.filterArea = null;\n    }\n}\n"],"names":[],"mappings":";;;;AAQO,MAAM,YACb,CAAA;IADO,WAAA,EAAA;QAYH,kDAAA,GAAA,IAAA,CAAO,IAAO,GAAA,QAAA,CAAA;QAEd,gCAAA,GAAA,IAAA,CAAO,QAAW,GAAA,CAAA,CAAA;IAAA,CAAA;IAEX,OACP,GAAA;QACI,IAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,IAAK,CAAA,OAAA,CAAQ,MAAA,EAAQ,CACzC,EAAA,CAAA;YACS,IAAA,CAAA,OAAA,CAAQ,CAAC,CAAA,CAAE,OAAQ,EAAA,CAAA;QAAA,CAC5B;QAEA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAA;QACf,IAAA,CAAK,UAAa,GAAA,IAAA,CAAA;IAAA,CACtB;AACJ","ignoreList":[0]}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"file":"generateBlurVertSource.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/defaults/blur/gl/generateBlurVertSource.ts"],"sourcesContent":["const vertTemplate = `\n    in vec2 aPosition;\n\n    uniform float uStrength;\n\n    out vec2 vBlurTexCoords[%size%];\n\n    uniform vec4 uInputSize;\n    uniform vec4 uOutputFrame;\n    uniform vec4 uOutputTexture;\n\n    vec4 filterVertexPosition( void )\n{\n    vec2 position = aPosition * uOutputFrame.zw + uOutputFrame.xy;\n    \n    position.x = position.x * (2.0 / uOutputTexture.x) - 1.0;\n    position.y = position.y * (2.0*uOutputTexture.z / uOutputTexture.y) - uOutputTexture.z;\n\n    return vec4(position, 0.0, 1.0);\n}\n\n    vec2 filterTextureCoord( void )\n    {\n        return aPosition * (uOutputFrame.zw * uInputSize.zw);\n    }\n\n    void main(void)\n    {\n        gl_Position = filterVertexPosition();\n\n        float pixelStrength = uInputSize.%dimension% * uStrength;\n\n        vec2 textureCoord = filterTextureCoord();\n        %blur%\n    }`;\n\nexport function generateBlurVertSource(kernelSize: number, x: boolean): string\n{\n    const halfLength = Math.ceil(kernelSize / 2);\n\n    let vertSource = vertTemplate;\n\n    let blurLoop = '';\n    let template;\n\n    if (x)\n    {\n        template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(%sampleIndex% * pixelStrength, 0.0);';\n    }\n    else\n    {\n        template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(0.0, %sampleIndex% * pixelStrength);';\n    }\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i.toString());\n\n        blur = blur.replace('%sampleIndex%', `${i - (halfLength - 1)}.0`);\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    vertSource = vertSource.replace('%blur%', blurLoop);\n    vertSource = vertSource.replace('%size%', kernelSize.toString());\n    vertSource = vertSource.replace('%dimension%', x ? 'z' : 'w');\n\n    return vertSource;\n}\n"],"names":[],"mappings":";;;;AAAA,MAAM,YAAe,GAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAAA,CAAA,CAAA;AAoCL,SAAA,sBAAA,CAAuB,UAAA,EAAoB,CAC3D,EAAA;IACI,MAAM,UAAa,GAAA,IAAA,CAAK,IAAK,CAAA,UAAA,GAAa,CAAC,CAAA,CAAA;IAE3C,IAAI,UAAa,GAAA,YAAA,CAAA;IAEjB,IAAI,QAAW,GAAA,EAAA,CAAA;IACX,IAAA,QAAA,CAAA;IAEJ,IAAI,CACJ,EAAA;QACe,QAAA,GAAA,qFAAA,CAAA;IAAA,CAGf,MAAA;QACe,QAAA,GAAA,qFAAA,CAAA;IAAA,CACf;IAEA,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,UAAA,EAAY,CAChC,EAAA,CAAA;QACI,IAAI,OAAO,QAAS,CAAA,OAAA,CAAQ,SAAW,EAAA,CAAA,CAAE,QAAA,EAAU,CAAA,CAAA;QAEnD,IAAA,GAAO,KAAK,OAAQ,CAAA,eAAA,EAAiB,GAAG,CAAK,GAAA,CAAA,UAAA,GAAa,CAAA,CAAE,CAAI,EAAA,CAAA,CAAA,CAAA;QAEpD,QAAA,IAAA,IAAA,CAAA;QACA,QAAA,IAAA,IAAA,CAAA;IAAA,CAChB;IAEa,UAAA,GAAA,UAAA,CAAW,OAAQ,CAAA,QAAA,EAAU,QAAQ,CAAA,CAAA;IAClD,UAAA,GAAa,UAAW,CAAA,OAAA,CAAQ,QAAU,EAAA,UAAA,CAAW,QAAA,EAAU,CAAA,CAAA;IAC/D,UAAA,GAAa,UAAW,CAAA,OAAA,CAAQ,aAAe,EAAA,CAAA,GAAI,MAAM,GAAG,CAAA,CAAA;IAErD,OAAA,UAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"file":"const.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/defaults/blur/const.ts"],"sourcesContent":["export interface IGAUSSIAN_VALUES\n{\n    [x: number]: number[];\n}\n\nexport const GAUSSIAN_VALUES: IGAUSSIAN_VALUES = {\n    5: [0.153388, 0.221461, 0.250301],\n    7: [0.071303, 0.131514, 0.189879, 0.214607],\n    9: [0.028532, 0.067234, 0.124009, 0.179044, 0.20236],\n    11: [0.0093, 0.028002, 0.065984, 0.121703, 0.175713, 0.198596],\n    13: [0.002406, 0.009255, 0.027867, 0.065666, 0.121117, 0.174868, 0.197641],\n    15: [0.000489, 0.002403, 0.009246, 0.02784, 0.065602, 0.120999, 0.174697, 0.197448],\n};\n"],"names":[],"mappings":";;;;AAKO,MAAM,eAAoC,GAAA;IAC7C,CAAG,EAAA;QAAC,QAAU;QAAA,QAAA;QAAU,QAAQ;KAAA;IAChC,CAAG,EAAA;QAAC,QAAU;QAAA,QAAA;QAAU;QAAU,QAAQ;KAAA;IAC1C,GAAG;QAAC,QAAA;QAAU,QAAU;QAAA,QAAA;QAAU;QAAU,OAAO;KAAA;IACnD,IAAI;QAAC,KAAA;QAAQ;QAAU,QAAU;QAAA,QAAA;QAAU;QAAU,QAAQ;KAAA;IAC7D,EAAA,EAAI;QAAC,OAAU;QAAA,OAAA;QAAU;QAAU,QAAU;QAAA,QAAA;QAAU;QAAU,QAAQ;KAAA;IACzE,EAAA,EAAI;QAAC,MAAU;QAAA,OAAA;QAAU;QAAU,OAAS;QAAA,QAAA;QAAU,QAAU;QAAA,QAAA;QAAU,QAAQ;KAAA;AACtF","ignoreList":[0]}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"file":"generateBlurFragSource.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/defaults/blur/gl/generateBlurFragSource.ts"],"sourcesContent":["import { GAUSSIAN_VALUES } from '../const';\n\nconst fragTemplate = [\n    'in vec2 vBlurTexCoords[%size%];',\n    'uniform sampler2D uTexture;',\n    'out vec4 finalColor;',\n\n    'void main(void)',\n    '{',\n    '    finalColor = vec4(0.0);',\n    '    %blur%',\n    '}',\n\n].join('\\n');\n\nexport function generateBlurFragSource(kernelSize: number): string\n{\n    const kernel = GAUSSIAN_VALUES[kernelSize];\n    const halfLength = kernel.length;\n\n    let fragSource = fragTemplate;\n\n    let blurLoop = '';\n    const template = 'finalColor += texture(uTexture, vBlurTexCoords[%index%]) * %value%;';\n    let value: number;\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i.toString());\n\n        value = i;\n\n        if (i >= halfLength)\n        {\n            value = kernelSize - i - 1;\n        }\n\n        blur = blur.replace('%value%', kernel[value].toString());\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    fragSource = fragSource.replace('%blur%', blurLoop);\n    fragSource = fragSource.replace('%size%', kernelSize.toString());\n\n    return fragSource;\n}\n"],"names":[],"mappings":";;;;;;AAEA,MAAM,YAAe,GAAA;IACjB,iCAAA;IACA,6BAAA;IACA,sBAAA;IAEA,iBAAA;IACA,GAAA;IACA,6BAAA;IACA,YAAA;IACA,GAAA;CAEJ,CAAE,IAAA,CAAK,IAAI,CAAA,CAAA;AAEJ,SAAS,uBAAuB,UACvC,EAAA;IACU,MAAA,MAAA,8KAAS,kBAAA,CAAgB,UAAU,CAAA,CAAA;IACzC,MAAM,aAAa,MAAO,CAAA,MAAA,CAAA;IAE1B,IAAI,UAAa,GAAA,YAAA,CAAA;IAEjB,IAAI,QAAW,GAAA,EAAA,CAAA;IACf,MAAM,QAAW,GAAA,qEAAA,CAAA;IACb,IAAA,KAAA,CAAA;IAEJ,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,UAAA,EAAY,CAChC,EAAA,CAAA;QACI,IAAI,OAAO,QAAS,CAAA,OAAA,CAAQ,SAAW,EAAA,CAAA,CAAE,QAAA,EAAU,CAAA,CAAA;QAE3C,KAAA,GAAA,CAAA,CAAA;QAER,IAAI,KAAK,UACT,EAAA;YACI,KAAA,GAAQ,aAAa,CAAI,GAAA,CAAA,CAAA;QAAA,CAC7B;QAEA,IAAA,GAAO,KAAK,OAAQ,CAAA,SAAA,EAAW,MAAA,CAAO,KAAK,CAAA,CAAE,QAAA,EAAU,CAAA,CAAA;QAE3C,QAAA,IAAA,IAAA,CAAA;QACA,QAAA,IAAA,IAAA,CAAA;IAAA,CAChB;IAEa,UAAA,GAAA,UAAA,CAAW,OAAQ,CAAA,QAAA,EAAU,QAAQ,CAAA,CAAA;IAClD,UAAA,GAAa,UAAW,CAAA,OAAA,CAAQ,QAAU,EAAA,UAAA,CAAW,QAAA,EAAU,CAAA,CAAA;IAExD,OAAA,UAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"file":"generateBlurGlProgram.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/defaults/blur/gl/generateBlurGlProgram.ts"],"sourcesContent":["import { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram';\nimport { generateBlurFragSource } from './generateBlurFragSource';\nimport { generateBlurVertSource } from './generateBlurVertSource';\n\nexport function generateBlurGlProgram(horizontal: boolean, kernelSize: number)\n{\n    const vertex = generateBlurVertSource(kernelSize, horizontal);\n    const fragment = generateBlurFragSource(kernelSize);\n\n    return GlProgram.from({\n        vertex,\n        fragment,\n        name: `blur-${horizontal ? 'horizontal' : 'vertical'}-pass-filter`\n    });\n}\n"],"names":[],"mappings":";;;;;;;;;;AAIgB,SAAA,qBAAA,CAAsB,UAAA,EAAqB,UAC3D,EAAA;IACU,MAAA,MAAA,yMAAS,yBAAA,AAAuB,EAAA,UAAA,EAAY,UAAU,CAAA,CAAA;IACtD,MAAA,QAAA,yMAAW,yBAAA,EAAuB,UAAU,CAAA,CAAA;IAElD,iMAAO,YAAA,CAAU,IAAK,CAAA;QAClB,MAAA;QACA,QAAA;QACA,IAAM,EAAA,CAAA,KAAA,EAAQ,UAAa,GAAA,YAAA,GAAe,UAAU,CAAA,YAAA,CAAA;IAAA,CACvD,CAAA,CAAA;AACL","ignoreList":[0]}},
    {"offset": {"line": 225, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 231, "column": 0}, "map": {"version":3,"file":"blur-template.wgsl.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 237, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 243, "column": 0}, "map": {"version":3,"file":"generateBlurProgram.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/defaults/blur/gpu/generateBlurProgram.ts"],"sourcesContent":["import { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram';\nimport { GAUSSIAN_VALUES } from '../const';\nimport source from './blur-template.wgsl';\n\nexport function generateBlurProgram(horizontal: boolean, kernelSize: number)\n{\n    const kernel = GAUSSIAN_VALUES[kernelSize];\n    const halfLength = kernel.length;\n\n    const blurStructSource: string[] = [];\n    const blurOutSource: string[] = [];\n    const blurSamplingSource: string[] = [];\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        blurStructSource[i] = `@location(${i}) offset${i}: vec2<f32>,`;\n\n        if (horizontal)\n        {\n            blurOutSource[i] = `filteredCord + vec2(${i - halfLength + 1} * pixelStrength, 0.0),`;\n        }\n        else\n        {\n            blurOutSource[i] = `filteredCord + vec2(0.0, ${i - halfLength + 1} * pixelStrength),`;\n        }\n\n        const kernelIndex = i < halfLength ? i : (kernelSize - i - 1);\n        const kernelValue = kernel[kernelIndex].toString();\n\n        blurSamplingSource[i] = `finalColor += textureSample(uTexture, uSampler, offset${i}) * ${kernelValue};`;\n    }\n\n    const blurStruct = blurStructSource.join('\\n');\n    const blurOut = blurOutSource.join('\\n');\n    const blurSampling = blurSamplingSource.join('\\n');\n\n    const finalSource = source\n        .replace('%blur-struct%', blurStruct)\n        .replace('%blur-vertex-out%', blurOut)\n        .replace('%blur-fragment-in%', blurStruct)\n        .replace('%blur-sampling%', blurSampling)\n        .replace('%dimension%', horizontal ? 'z' : 'w');\n\n    return GpuProgram.from({\n        vertex: {\n            source: finalSource,\n            entryPoint: 'mainVertex',\n        },\n        fragment: {\n            source: finalSource,\n            entryPoint: 'mainFragment',\n        },\n    });\n}\n\n"],"names":[],"mappings":";;;;;;;;;;AAIgB,SAAA,mBAAA,CAAoB,UAAA,EAAqB,UACzD,EAAA;IACU,MAAA,MAAA,8KAAS,kBAAA,CAAgB,UAAU,CAAA,CAAA;IACzC,MAAM,aAAa,MAAO,CAAA,MAAA,CAAA;IAE1B,MAAM,mBAA6B,EAAC,CAAA;IACpC,MAAM,gBAA0B,EAAC,CAAA;IACjC,MAAM,qBAA+B,EAAC,CAAA;IAEtC,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,UAAA,EAAY,CAChC,EAAA,CAAA;QACI,gBAAA,CAAiB,CAAC,CAAA,GAAI,CAAa,UAAA,EAAA,CAAC,CAAA,QAAA,EAAW,CAAC,CAAA,YAAA,CAAA,CAAA;QAEhD,IAAI,UACJ,EAAA;YACI,aAAA,CAAc,CAAC,CAAA,GAAI,CAAuB,oBAAA,EAAA,CAAA,GAAI,aAAa,CAAC,CAAA,uBAAA,CAAA,CAAA;QAAA,CAGhE,MAAA;YACI,aAAA,CAAc,CAAC,CAAA,GAAI,CAA4B,yBAAA,EAAA,CAAA,GAAI,aAAa,CAAC,CAAA,kBAAA,CAAA,CAAA;QAAA,CACrE;QAEA,MAAM,WAAc,GAAA,CAAA,GAAI,UAAa,GAAA,CAAA,GAAK,aAAa,CAAI,GAAA,CAAA,CAAA;QAC3D,MAAM,WAAc,GAAA,MAAA,CAAO,WAAW,CAAA,CAAE,QAAS,EAAA,CAAA;QAEjD,kBAAA,CAAmB,CAAC,CAAA,GAAI,CAAyD,sDAAA,EAAA,CAAC,CAAA,IAAA,EAAO,WAAW,CAAA,CAAA,CAAA,CAAA;IAAA,CACxG;IAEM,MAAA,UAAA,GAAa,gBAAiB,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;IACvC,MAAA,OAAA,GAAU,aAAc,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;IACjC,MAAA,YAAA,GAAe,kBAAmB,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;IAE3C,MAAA,WAAA,wMAAc,UAAA,CACf,OAAQ,CAAA,eAAA,EAAiB,UAAU,CACnC,CAAA,OAAA,CAAQ,mBAAqB,EAAA,OAAO,CACpC,CAAA,OAAA,CAAQ,sBAAsB,UAAU,CAAA,CACxC,OAAA,CAAQ,iBAAmB,EAAA,YAAY,EACvC,OAAQ,CAAA,aAAA,EAAe,UAAa,GAAA,GAAA,GAAM,GAAG,CAAA,CAAA;IAElD,mMAAO,aAAA,CAAW,IAAK,CAAA;QACnB,MAAQ,EAAA;YACJ,MAAQ,EAAA,WAAA;YACR,UAAY,EAAA,YAAA;QAAA,CAChB;QACA,QAAU,EAAA;YACN,MAAQ,EAAA,WAAA;YACR,UAAY,EAAA,cAAA;QAAA,CAChB;IAAA,CACH,CAAA,CAAA;AACL","ignoreList":[0]}},
    {"offset": {"line": 287, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 293, "column": 0}, "map": {"version":3,"file":"Filter.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/Filter.ts"],"sourcesContent":["import { GlProgram } from '../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../rendering/renderers/gpu/shader/GpuProgram';\nimport { Shader } from '../rendering/renderers/shared/shader/Shader';\nimport { State } from '../rendering/renderers/shared/state/State';\n\nimport type { RenderSurface } from '../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type {\n    IShaderWithResources,\n    ShaderFromResources,\n    ShaderWithResources\n} from '../rendering/renderers/shared/shader/Shader';\nimport type { BLEND_MODES } from '../rendering/renderers/shared/state/const';\nimport type { Texture } from '../rendering/renderers/shared/texture/Texture';\nimport type { FilterSystem } from './FilterSystem';\n\n/**\n * Filters provide additional shading and post-processing effects to any display object and its children\n * they are attached to.\n *\n * You attached filters to a display object using its `filters` array property.\n *\n * ```js\n * import { Sprite, BlurFilter, HardMixBlend } from 'pixi.js';\n *\n * const sprite = Sprite.from('myTexture.png');\n *\n * // single filter\n * sprite.filters = new BlurFilter({ strength: 8 });\n *\n * // or multiple filters\n * sprite.filters = [new BlurFilter({ strength: 8 }), new HardMixBlend()];\n * ```\n *\n * Pixi has a number of built-in filters which can be used in your game or application:\n *\n * - {@link filters.AlphaFilter} - Applies alpha to the display object and any of its children.\n * - {@link filters.BlurFilter} - Applies a Gaussian blur to the display object.\n * - {@link filters.BlurFilterPass} - Applies a blur pass to an object.\n * - {@link filters.ColorBurnBlend} - Blend mode to add color burn to display objects.\n * - {@link filters.ColorDodgeBlend} - Blend mode to add color dodge to display objects.\n * - {@link filters.ColorMatrixFilter} - Transform the color channels by matrix multiplication.\n * - {@link filters.DarkenBlend} - Blend mode to darken display objects.\n * - {@link filters.DisplacementFilter} - Applies a displacement map to distort an object.\n * - {@link filters.DivideBlend} - Blend mode to divide display objects.\n * - {@link filters.HardMixBlend} - Blend mode to hard mix display objects.\n * - {@link filters.LinearBurnBlend} - Blend mode to add linear burn to display objects.\n * - {@link filters.LinearDodgeBlend} - Blend mode to add linear dodge to display objects.\n * - {@link filters.LinearLightBlend} - Blend mode to add linear light to display objects.\n * - {@link filters.NoiseFilter} - Applies random noise to an object.\n * - {@link filters.PinLightBlend} - Blend mode to add pin light to display objects.\n * - {@link filters.SubtractBlend} - Blend mode to subtract display objects.\n *\n * <br/>\n * For more available filters, check out the\n *  {@link https://pixijs.io/filters/docs/ pixi-filters} repository.\n *\n * You can also check out the awesome {@link https://pixijs.io/filters/examples/ Filter demo} to see\n * filters in action and combine them!\n * @namespace filters\n */\n\n/**\n * The options to use when creating a new filter.\n * @memberof filters\n */\nexport interface FilterOptions\n{\n    /** optional blend mode used by the filter when rendering (defaults to 'normal') */\n    blendMode?: BLEND_MODES;\n    /**\n     * the resolution the filter should be rendered at. The lower the resolution, the more performant\n     * the filter will be, but the lower the quality of the output. (default 1)\n     * If 'inherit', the resolution of the render target is used.\n     * Consider lowering this for things like blurs filters\n     */\n    resolution?: number | 'inherit';\n    /**\n     * the amount of pixels to pad the container with when applying the filter. For example a blur extends the\n     * container out as it blurs, so padding is applied to ensure that extra detail is rendered as well\n     * without clipping occurring. (default 0)\n     */\n    padding?: number;\n    /**\n     * If true the filter will make use of antialiasing. Although it looks better this can have a performance impact.\n     * If set to 'inherit', the filter will detect the antialiasing of the render target and change this automatically.\n     * Definitely don't set this to true if the render target has antialiasing set to false. As it will antialias,\n     * but you won't see the difference. (default 'off')\n     *\n     * This can be a boolean or [FilterAntialias]{@link filters.FilterAntialias} string.\n     */\n    antialias?: FilterAntialias | boolean;\n    /**\n     * If this is set to true, the filter system will grab a snap shot of the area being rendered\n     * to and pass this into the shader. This is useful for blend modes that need to be aware of the pixels\n     * they are rendering to. Only use if you need that data, otherwise its an extra gpu copy you don't need!\n     * (default false)\n     */\n    blendRequired?: boolean;\n    /**\n     * If this is set to true, the filter system will clip filter texture into viewport\n     * This is useful for filters that applied to whole texture.\n     * (default true)\n     */\n    clipToViewport?: boolean;\n}\n\n/** Filter options mixed with shader resources. A filter needs a shader and some resources to work. */\nexport type FilterWithShader = FilterOptions & IShaderWithResources;\n\n/**\n * The antialiasing mode of the filter. This can be either:\n * - `on` - the filter is always antialiased regardless of the render target settings\n * - `off` - (default) the filter is never antialiased regardless of the render target settings\n * - `inherit` - the filter uses the antialias settings of the render target\n * @memberof filters\n */\nexport type FilterAntialias = 'on' | 'off' | 'inherit';\n\n/**\n * The Filter class is the base for all filter effects used in Pixi.js\n * As it extends a shader, it requires that a glProgram is parsed in to work with WebGL and a gpuProgram for WebGPU.\n * If you don't proved one, then the filter is skipped and just rendered as if it wasn't there for that renderer.\n *\n * A filter can be applied to anything that extends Container in Pixi.js which also includes Sprites, Graphics etc.\n *\n * Its worth noting Performance-wise filters can be pretty expensive if used too much in a single scene.\n * The following happens under the hood when a filter is applied:\n *\n * .1. Break the current batch\n * <br>\n * .2. The target is measured using getGlobalBounds\n * (recursively go through all children and figure out how big the object is)\n * <br>\n * .3. Get the closest Po2 Textures from the texture pool\n * <br>\n * .4. Render the target to that texture\n * <br>\n * .5. Render that texture back to the main frame buffer as a quad using the filters program.\n * <br>\n * <br>\n * Some filters (such as blur) require multiple passes too which can result in an even bigger performance hit. So be careful!\n * Its not generally the complexity of the shader that is the bottle neck,\n * but all the framebuffer / shader switching that has to take place.\n * One filter applied to a container with many objects is MUCH faster than many filter applied to many objects.\n * @class\n * @memberof filters\n */\nexport class Filter extends Shader\n{\n    /**\n     * The default filter settings\n     * @static\n     */\n    public static readonly defaultOptions: FilterOptions = {\n        blendMode: 'normal',\n        resolution: 1,\n        padding: 0,\n        antialias: 'off',\n        blendRequired: false,\n        clipToViewport: true,\n    };\n\n    /**\n     * The padding of the filter. Some filters require extra space to breath such as a blur.\n     * Increasing this will add extra width and height to the bounds of the object that the\n     * filter is applied to.\n     * @default 0\n     */\n    public padding: number;\n\n    /**\n     * should the filter use antialiasing?\n     * @default inherit\n     */\n    public antialias: FilterAntialias;\n\n    /** If enabled is true the filter is applied, if false it will not. */\n    public enabled = true;\n\n    /**\n     * The gpu state the filter requires to render.\n     * @internal\n     * @ignore\n     */\n    public _state = State.for2d();\n\n    /**\n     * The resolution of the filter. Setting this to be lower will lower the quality but\n     * increase the performance of the filter.\n     * @default 1\n     */\n    public resolution: number | 'inherit';\n\n    /**\n     * Whether or not this filter requires the previous render texture for blending.\n     * @default false\n     */\n    public blendRequired: boolean;\n\n    /**\n     * Clip texture into viewport or not\n     * @default true\n     */\n    public clipToViewport: boolean;\n\n    /**\n     * @param options - The optional parameters of this filter.\n     */\n    constructor(options: FilterWithShader)\n    {\n        options = { ...Filter.defaultOptions, ...options };\n\n        super(options as ShaderWithResources);\n\n        this.blendMode = options.blendMode;\n        this.padding = options.padding;\n\n        // check if is boolean\n        if (typeof options.antialias === 'boolean')\n        {\n            this.antialias = options.antialias ? 'on' : 'off';\n        }\n        else\n        {\n            this.antialias = options.antialias;\n        }\n\n        this.resolution = options.resolution;\n        this.blendRequired = options.blendRequired;\n        this.clipToViewport = options.clipToViewport;\n\n        this.addResource('uTexture', 0, 1);\n    }\n\n    /**\n     * Applies the filter\n     * @param filterManager - The renderer to retrieve the filter from\n     * @param input - The input render target.\n     * @param output - The target to output to.\n     * @param clearMode - Should the output be cleared before rendering to it\n     */\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /**\n     * Get the blend mode of the filter.\n     * @default \"normal\"\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this._state.blendMode;\n    }\n\n    /** Sets the blend mode of the filter. */\n    set blendMode(value: BLEND_MODES)\n    {\n        this._state.blendMode = value;\n    }\n\n    /**\n     * A short hand function to create a filter based of a vertex and fragment shader src.\n     * @param options\n     * @returns A shiny new PixiJS filter!\n     */\n    public static from(options: FilterOptions & ShaderFromResources): Filter\n    {\n        const { gpu, gl, ...rest } = options;\n\n        let gpuProgram: GpuProgram;\n        let glProgram: GlProgram;\n\n        if (gpu)\n        {\n            gpuProgram = GpuProgram.from(gpu);\n        }\n\n        if (gl)\n        {\n            glProgram = GlProgram.from(gl);\n        }\n\n        return new Filter({\n            gpuProgram,\n            glProgram,\n            ...rest\n        });\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AAmJO,MAAM,OAAA,GAAN,MAAM,OAAA,oMAAe,SAC5B,CAAA;IAAA;;GAAA,GA4DI,YAAY,OACZ,CAAA;QACI,OAAA,GAAU;YAAE,GAAG,OAAO,CAAA,cAAA;YAAgB,GAAG,OAAQ;QAAA,CAAA,CAAA;QAEjD,KAAA,CAAM,OAA8B,CAAA,CAAA;QAnCxC,oEAAA,GAAA,IAAA,CAAO,OAAU,GAAA,IAAA,CAAA;QAOjB;;;;KAAA,GAAO,IAAA,CAAA,MAAA,GAAS,iMAAA,CAAM,KAAM,EAAA,CAAA;QA8BxB,IAAA,CAAK,SAAA,GAAY,OAAQ,CAAA,SAAA,CAAA;QACzB,IAAA,CAAK,OAAA,GAAU,OAAQ,CAAA,OAAA,CAAA;QAGnB,IAAA,OAAO,OAAQ,CAAA,SAAA,KAAc,SACjC,EAAA;YACS,IAAA,CAAA,SAAA,GAAY,OAAQ,CAAA,SAAA,GAAY,IAAO,GAAA,KAAA,CAAA;QAAA,CAGhD,MAAA;YACI,IAAA,CAAK,SAAA,GAAY,OAAQ,CAAA,SAAA,CAAA;QAAA,CAC7B;QAEA,IAAA,CAAK,UAAA,GAAa,OAAQ,CAAA,UAAA,CAAA;QAC1B,IAAA,CAAK,aAAA,GAAgB,OAAQ,CAAA,aAAA,CAAA;QAC7B,IAAA,CAAK,cAAA,GAAiB,OAAQ,CAAA,cAAA,CAAA;QAEzB,IAAA,CAAA,WAAA,CAAY,UAAY,EAAA,CAAA,EAAG,CAAC,CAAA,CAAA;IAAA,CACrC;IAAA;;;;;;GAAA,GASO,KACH,CAAA,aAAA,EACA,KACA,EAAA,MAAA,EACA,SAEJ,EAAA;QACI,aAAA,CAAc,WAAY,CAAA,IAAA,EAAM,KAAO,EAAA,MAAA,EAAQ,SAAS,CAAA,CAAA;IAAA,CAC5D;IAAA;;;GAAA,GAMA,IAAI,SACJ,GAAA;QACI,OAAO,IAAA,CAAK,MAAO,CAAA,SAAA,CAAA;IAAA,CACvB;IAAA,uCAAA,GAGA,IAAI,UAAU,KACd,EAAA;QACI,IAAA,CAAK,MAAA,CAAO,SAAY,GAAA,KAAA,CAAA;IAAA,CAC5B;IAAA;;;;GAAA,GAOA,OAAc,KAAK,OACnB,EAAA;QACI,MAAM,EAAE,GAAA,EAAK,EAAI,EAAA,GAAG,MAAS,GAAA,OAAA,CAAA;QAEzB,IAAA,UAAA,CAAA;QACA,IAAA,SAAA,CAAA;QAEJ,IAAI,GACJ,EAAA;YACiB,UAAA,+LAAA,aAAA,CAAW,IAAA,CAAK,GAAG,CAAA,CAAA;QAAA,CACpC;QAEA,IAAI,EACJ,EAAA;YACgB,SAAA,6LAAA,YAAA,CAAU,IAAA,CAAK,EAAE,CAAA,CAAA;QAAA,CACjC;QAEA,OAAO,IAAI,OAAO,CAAA;YACd,UAAA;YACA,SAAA;YACA,GAAG,IAAA;QAAA,CACN,CAAA,CAAA;IAAA,CACL;AACJ,CAAA,CAAA;AAAA;;;CAAA,GAnJa,OAAA,CAMc,cAAgC,GAAA;IACnD,SAAW,EAAA,QAAA;IACX,UAAY,EAAA,CAAA;IACZ,OAAS,EAAA,CAAA;IACT,SAAW,EAAA,KAAA;IACX,aAAe,EAAA,KAAA;IACf,cAAgB,EAAA,IAAA;AACpB,CAAA,CAAA;AAbG,IAAM,MAAN,GAAA","ignoreList":[0]}},
    {"offset": {"line": 385, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 391, "column": 0}, "map": {"version":3,"file":"BlurFilterPass.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/defaults/blur/BlurFilterPass.ts"],"sourcesContent":["import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { RendererType } from '../../../rendering/renderers/types';\nimport { Filter } from '../../Filter';\nimport { generateBlurGlProgram } from './gl/generateBlurGlProgram';\nimport { generateBlurProgram } from './gpu/generateBlurProgram';\n\nimport type { RenderSurface } from '../../../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { FilterSystem } from '../../FilterSystem';\nimport type { BlurFilterOptions } from './BlurFilter';\n\n/**\n * Options for BlurFilterPass\n * @memberof filters\n */\nexport interface BlurFilterPassOptions extends BlurFilterOptions\n{\n    /** Do pass along the x-axis (`true`) or y-axis (`false`). */\n    horizontal: boolean;\n}\n\n/**\n * The BlurFilterPass applies a horizontal or vertical Gaussian blur to an object.\n * @memberof filters\n */\nexport class BlurFilterPass extends Filter\n{\n    /** Default blur filter pass options */\n    public static defaultOptions: Partial<BlurFilterPassOptions> = {\n        /** The strength of the blur filter. */\n        strength: 8,\n        /** The quality of the blur filter. */\n        quality: 4,\n        /** The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15. */\n        kernelSize: 5,\n    };\n\n    /** Do pass along the x-axis (`true`) or y-axis (`false`). */\n    public horizontal: boolean;\n    /** The number of passes to run the filter. */\n    public passes!: number;\n    /** The strength of the blur filter. */\n    public strength!: number;\n\n    private _quality: number;\n    private readonly _uniforms: any;\n\n    /**\n     * @param options\n     * @param options.horizontal - Do pass along the x-axis (`true`) or y-axis (`false`).\n     * @param options.strength - The strength of the blur filter.\n     * @param options.quality - The quality of the blur filter.\n     * @param options.kernelSize - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(options: BlurFilterPassOptions)\n    {\n        options = { ...BlurFilterPass.defaultOptions, ...options };\n\n        const glProgram = generateBlurGlProgram(options.horizontal, options.kernelSize);\n        const gpuProgram = generateBlurProgram(options.horizontal, options.kernelSize);\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                blurUniforms: {\n                    uStrength: { value: 0, type: 'f32' },\n                }\n            },\n            ...options\n        });\n\n        this.horizontal = options.horizontal;\n\n        this._quality = 0;\n\n        this.quality = options.quality;\n\n        this.blur = options.strength;\n\n        this._uniforms = this.resources.blurUniforms.uniforms;\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - How to clear\n     */\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        this._uniforms.uStrength = this.strength / this.passes;\n\n        if (this.passes === 1)\n        {\n            filterManager.applyFilter(this, input, output, clearMode);\n        }\n        else\n        {\n            const tempTexture = TexturePool.getSameSizeTexture(input);\n\n            let flip = input;\n            let flop = tempTexture;\n\n            this._state.blend = false;\n\n            const shouldClear = filterManager.renderer.type === RendererType.WEBGPU;\n\n            for (let i = 0; i < this.passes - 1; i++)\n            {\n                filterManager.applyFilter(this, flip, flop, i === 0 ? true : shouldClear);\n\n                const temp = flop;\n\n                flop = flip;\n                flip = temp;\n            }\n\n            this._state.blend = true;\n            filterManager.applyFilter(this, flip, output, clearMode);\n            TexturePool.returnTexture(tempTexture);\n        }\n    }\n\n    /**\n     * Sets the strength of both the blur.\n     * @default 16\n     */\n    get blur(): number\n    {\n        return this.strength;\n    }\n\n    set blur(value: number)\n    {\n        this.padding = 1 + (Math.abs(value) * 2);\n        this.strength = value;\n    }\n\n    /**\n     * Sets the quality of the blur by modifying the number of passes. More passes means higher\n     * quality blurring but the lower the performance.\n     * @default 4\n     */\n    get quality(): number\n    {\n        return this._quality;\n    }\n\n    set quality(value: number)\n    {\n        this._quality = value;\n        this.passes = value;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 495, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 501, "column": 0}, "map": {"version":3,"file":"BlurFilter.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/defaults/blur/BlurFilter.ts"],"sourcesContent":["import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { RendererType } from '../../../rendering/renderers/types';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\nimport { Filter } from '../../Filter';\nimport { BlurFilterPass } from './BlurFilterPass';\n\nimport type { RenderSurface } from '../../../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { FilterOptions } from '../../Filter';\nimport type { FilterSystem } from '../../FilterSystem';\n\n/**\n * Options for BlurFilter\n * @memberof filters\n */\nexport interface BlurFilterOptions extends FilterOptions\n{\n    /**\n     * The strength of the blur filter.\n     * @default 8\n     */\n    strength?: number;\n    /**\n     * The horizontal strength of the blur.\n     * @default 8\n     */\n    strengthX?: number;\n    /**\n     * The vertical strength of the blur.\n     * @default 8\n     */\n    strengthY?: number;\n    /**\n     * The quality of the blur filter.\n     * @default 4\n     */\n    quality?: number;\n    /**\n     * The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     * @default 5\n     */\n    kernelSize?: number;\n}\n\n/**\n * The BlurFilter applies a Gaussian blur to an object.\n *\n * The strength of the blur can be set for the x-axis and y-axis separately.\n * @memberof filters\n */\nexport class BlurFilter extends Filter\n{\n    /** Default blur filter options */\n    public static defaultOptions: Partial<BlurFilterOptions> = {\n        /** The strength of the blur filter. */\n        strength: 8,\n        /** The quality of the blur filter. */\n        quality: 4,\n        /** The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15. */\n        kernelSize: 5,\n    };\n\n    /** The horizontal blur filter */\n    public blurXFilter: BlurFilterPass;\n    /** The vertical blur filter */\n    public blurYFilter: BlurFilterPass;\n\n    private _repeatEdgePixels = false;\n\n    /**\n     * @param {filters.BlurFilterOptions} options - The options of the blur filter.\n     */\n    constructor(options?: BlurFilterOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(strength?: number, quality?: number, resolution?: number | null, kernelSize?: number);\n    constructor(...args: [BlurFilterOptions?] | [number?, number?, number?, number?])\n    {\n        let options = args[0] ?? {};\n\n        // if options is a number)\n        if (typeof options === 'number')\n        {\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'BlurFilter constructor params are now options object. See params: { strength, quality, resolution, kernelSize }');\n            // #endif\n\n            options = { strength: options };\n\n            if (args[1] !== undefined)options.quality = args[1];\n            if (args[2] !== undefined)options.resolution = args[2] || 'inherit';\n            if (args[3] !== undefined)options.kernelSize = args[3];\n        }\n\n        options = { ...BlurFilterPass.defaultOptions, ...options };\n\n        const { strength, strengthX, strengthY, quality, ...rest } = options;\n\n        super({\n            ...rest,\n            compatibleRenderers: RendererType.BOTH,\n            resources: {}\n        });\n\n        this.blurXFilter = new BlurFilterPass({ horizontal: true, ...options });\n        this.blurYFilter = new BlurFilterPass({ horizontal: false, ...options });\n\n        this.quality = quality;\n        this.strengthX = strengthX ?? strength;\n        this.strengthY = strengthY ?? strength;\n        this.repeatEdgePixels = false;\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - How to clear\n     */\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        const xStrength = Math.abs(this.blurXFilter.strength);\n        const yStrength = Math.abs(this.blurYFilter.strength);\n\n        if (xStrength && yStrength)\n        {\n            const tempTexture = TexturePool.getSameSizeTexture(input);\n\n            this.blurXFilter.blendMode = 'normal';\n            this.blurXFilter.apply(filterManager, input, tempTexture, true);\n            this.blurYFilter.blendMode = this.blendMode;\n            this.blurYFilter.apply(filterManager, tempTexture, output, clearMode);\n\n            TexturePool.returnTexture(tempTexture);\n        }\n        else if (yStrength)\n        {\n            this.blurYFilter.blendMode = this.blendMode;\n            this.blurYFilter.apply(filterManager, input, output, clearMode);\n        }\n        else\n        {\n            this.blurXFilter.blendMode = this.blendMode;\n            this.blurXFilter.apply(filterManager, input, output, clearMode);\n        }\n    }\n\n    protected updatePadding(): void\n    {\n        if (this._repeatEdgePixels)\n        {\n            this.padding = 0;\n        }\n        else\n        {\n            this.padding = Math.max(Math.abs(this.blurXFilter.blur), Math.abs(this.blurYFilter.blur)) * 2;\n        }\n    }\n\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     * @default 8\n     */\n    get strength(): number\n    {\n        if (this.strengthX !== this.strengthY)\n        {\n            throw new Error('BlurFilter\\'s strengthX and strengthY are different');\n        }\n\n        return this.strengthX;\n    }\n\n    set strength(value: number)\n    {\n        this.blurXFilter.blur = this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the number of passes for blur. More passes means higher quality bluring.\n     * @default 1\n     */\n    get quality(): number\n    {\n        return this.blurXFilter.quality;\n    }\n\n    set quality(value: number)\n    {\n        this.blurXFilter.quality = this.blurYFilter.quality = value;\n    }\n\n    /**\n     * Sets the strength of horizontal blur\n     * @default 8\n     */\n    get strengthX(): number\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set strengthX(value: number)\n    {\n        this.blurXFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the strength of the vertical blur\n     * @default 8\n     */\n    get strengthY(): number\n    {\n        return this.blurYFilter.blur;\n    }\n\n    set strengthY(value: number)\n    {\n        this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     * @default 2\n     * @deprecated since 8.3.0\n     * @see BlurFilter.strength\n     */\n    get blur(): number\n    {\n        // #if _DEBUG\n        deprecation('8.3.0', 'BlurFilter.blur is deprecated, please use BlurFilter.strength instead.');\n        // #endif\n\n        return this.strength;\n    }\n\n    set blur(value: number)\n    {\n        // #if _DEBUG\n        deprecation('8.3.0', 'BlurFilter.blur is deprecated, please use BlurFilter.strength instead.');\n        // #endif\n        this.strength = value;\n    }\n\n    /**\n     * Sets the strength of the blurX property\n     * @default 2\n     * @deprecated since 8.3.0\n     * @see BlurFilter.strengthX\n     */\n    get blurX(): number\n    {\n        // #if _DEBUG\n        deprecation('8.3.0', 'BlurFilter.blurX is deprecated, please use BlurFilter.strengthX instead.');\n        // #endif\n\n        return this.strengthX;\n    }\n\n    set blurX(value: number)\n    {\n        // #if _DEBUG\n        deprecation('8.3.0', 'BlurFilter.blurX is deprecated, please use BlurFilter.strengthX instead.');\n        // #endif\n        this.strengthX = value;\n    }\n\n    /**\n     * Sets the strength of the blurY property\n     * @default 2\n     * @deprecated since 8.3.0\n     * @see BlurFilter.strengthY\n     */\n    get blurY(): number\n    {\n        // #if _DEBUG\n        deprecation('8.3.0', 'BlurFilter.blurY is deprecated, please use BlurFilter.strengthY instead.');\n        // #endif\n\n        return this.strengthY;\n    }\n\n    set blurY(value: number)\n    {\n        // #if _DEBUG\n        deprecation('8.3.0', 'BlurFilter.blurY is deprecated, please use BlurFilter.strengthY instead.');\n        // #endif\n        this.strengthY = value;\n    }\n\n    /**\n     * If set to true the edge of the target will be clamped\n     * @default false\n     */\n    get repeatEdgePixels(): boolean\n    {\n        return this._repeatEdgePixels;\n    }\n\n    set repeatEdgePixels(value: boolean)\n    {\n        this._repeatEdgePixels = value;\n        this.updatePadding();\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 681, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 687, "column": 0}, "map": {"version":3,"file":"alpha.wgsl.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 693, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 699, "column": 0}, "map": {"version":3,"file":"defaultFilter.vert.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 705, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 711, "column": 0}, "map": {"version":3,"file":"alpha.frag.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 717, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 723, "column": 0}, "map": {"version":3,"file":"AlphaFilter.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/defaults/alpha/AlphaFilter.ts"],"sourcesContent":["import { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { Filter } from '../../Filter';\nimport vertex from '../defaultFilter.vert';\nimport fragment from './alpha.frag';\nimport source from './alpha.wgsl';\n\nimport type { FilterOptions } from '../../Filter';\n\n/**\n * Options for AlphaFilter\n * @memberof filters\n */\nexport interface AlphaFilterOptions extends FilterOptions\n{\n    /**\n     * Amount of alpha from 0 to 1, where 0 is transparent\n     * @default 1\n     */\n    alpha: number;\n}\n\n/**\n * Simplest filter - applies alpha.\n *\n * Use this instead of Container's alpha property to avoid visual layering of individual elements.\n * AlphaFilter applies alpha evenly across the entire display object and any opaque elements it contains.\n * If elements are not opaque, they will blend with each other anyway.\n *\n * Very handy if you want to use common features of all filters:\n *\n * 1. Assign a blendMode to this filter, blend all elements inside display object with background.\n *\n * 2. To use clipping in display coordinates, assign a filterArea to the same container that has this filter.\n * @memberof filters\n */\nexport class AlphaFilter extends Filter\n{\n    /** Default filter options */\n    public static readonly defaultOptions: AlphaFilterOptions = {\n        /** Amount of alpha from 0 to 1, where 0 is transparent */\n        alpha: 1,\n    };\n\n    constructor(options?: AlphaFilterOptions)\n    {\n        options = { ...AlphaFilter.defaultOptions, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'alpha-filter'\n        });\n\n        const { alpha, ...rest } = options;\n\n        const alphaUniforms = new UniformGroup({\n            uAlpha: { value: alpha, type: 'f32' },\n        });\n\n        super({\n            ...rest,\n            gpuProgram,\n            glProgram,\n            resources: {\n                alphaUniforms\n            },\n        });\n    }\n\n    /**\n     * Coefficient for alpha multiplication\n     * @default 1\n     */\n    get alpha(): number { return this.resources.alphaUniforms.uniforms.uAlpha; }\n    set alpha(value: number) { this.resources.alphaUniforms.uniforms.uAlpha = value; }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAqCO,MAAM,YAAA,GAAN,MAAM,YAAA,iKAAoB,SACjC,CAAA;IAOI,YAAY,OACZ,CAAA;QACI,OAAA,GAAU;YAAE,GAAG,YAAY,CAAA,cAAA;YAAgB,GAAG,OAAQ;QAAA,CAAA,CAAA;QAEhD,MAAA,UAAA,+LAAa,aAAA,CAAW,IAAK,CAAA;YAC/B,MAAQ,EAAA;4MACJ,UAAA;gBACA,UAAY,EAAA,YAAA;YAAA,CAChB;YACA,QAAU,EAAA;gBACN,sMAAA;gBACA,UAAY,EAAA,cAAA;YAAA,CAChB;QAAA,CACH,CAAA,CAAA;QAEK,MAAA,SAAA,6LAAY,YAAA,CAAU,IAAK,CAAA;oBAC7B,6LAAA;0MACA,UAAA;YACA,IAAM,EAAA,cAAA;QAAA,CACT,CAAA,CAAA;QAED,MAAM,EAAE,KAAA,EAAO,GAAG,IAAA,EAAS,GAAA,OAAA,CAAA;QAErB,MAAA,aAAA,GAAgB,IAAI,gNAAa,CAAA;YACnC,MAAQ,EAAA;gBAAE,KAAO,EAAA,KAAA;gBAAO,MAAM,KAAM;YAAA,CAAA;QAAA,CACvC,CAAA,CAAA;QAEK,KAAA,CAAA;YACF,GAAG,IAAA;YACH,UAAA;YACA,SAAA;YACA,SAAW,EAAA;gBACP,aAAA;YAAA,CACJ;QAAA,CACH,CAAA,CAAA;IAAA,CACL;IAAA;;;GAAA,GAMA,IAAI,KAAgB,GAAA;QAAS,OAAA,IAAA,CAAK,SAAU,CAAA,aAAA,CAAc,QAAS,CAAA,MAAA,CAAA;IAAA,CAAQ;IAC3E,IAAI,MAAM,KAAe,EAAA;QAAO,IAAA,CAAA,SAAA,CAAU,aAAc,CAAA,QAAA,CAAS,MAAS,GAAA,KAAA,CAAA;IAAA,CAAO;AACrF,CAAA,CAAA;AAAA,2BAAA,GAnDa,YAAA,CAGc,cAAqC,GAAA;IAAA,wDAAA,GAExD,KAAO,EAAA,CAAA;AACX,CAAA,CAAA;AANG,IAAM,WAAN,GAAA","ignoreList":[0]}},
    {"offset": {"line": 794, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 800, "column": 0}, "map": {"version":3,"file":"mask.wgsl.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 806, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 812, "column": 0}, "map": {"version":3,"file":"mask.vert.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 818, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 824, "column": 0}, "map": {"version":3,"file":"mask.frag.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 830, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 836, "column": 0}, "map": {"version":3,"file":"MaskFilter.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/mask/MaskFilter.ts"],"sourcesContent":["import { Matrix } from '../../maths/matrix/Matrix';\nimport { GlProgram } from '../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../rendering/renderers/gpu/shader/GpuProgram';\nimport { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup';\nimport { TextureMatrix } from '../../rendering/renderers/shared/texture/TextureMatrix';\nimport { Filter } from '../Filter';\nimport fragment from './mask.frag';\nimport vertex from './mask.vert';\nimport source from './mask.wgsl';\n\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { Sprite } from '../../scene/sprite/Sprite';\nimport type { FilterOptions } from '../Filter';\nimport type { FilterSystem } from '../FilterSystem';\n\nexport interface MaskFilterOptions extends FilterOptions\n{\n    sprite: Sprite,\n    inverse?: boolean;\n    scale?: number | { x: number, y: number },\n}\n\nexport class MaskFilter extends Filter\n{\n    public sprite: Sprite;\n    private readonly _textureMatrix: TextureMatrix;\n\n    constructor(options: MaskFilterOptions)\n    {\n        const { sprite, ...rest } = options;\n\n        const textureMatrix = new TextureMatrix(sprite.texture);\n\n        const filterUniforms = new UniformGroup({\n            uFilterMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uMaskClamp: { value: textureMatrix.uClampFrame, type: 'vec4<f32>' },\n            uAlpha: { value: 1, type: 'f32' },\n            uInverse: { value: options.inverse ? 1 : 0, type: 'f32' },\n        });\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'mask-filter',\n        });\n\n        super({\n            ...rest,\n            gpuProgram,\n            glProgram,\n            resources: {\n                filterUniforms,\n                uMaskTexture: sprite.texture.source,\n            },\n        });\n\n        this.sprite = sprite;\n\n        this._textureMatrix = textureMatrix;\n    }\n\n    set inverse(value: boolean)\n    {\n        this.resources.filterUniforms.uniforms.uInverse = value ? 1 : 0;\n    }\n\n    get inverse(): boolean\n    {\n        return this.resources.filterUniforms.uniforms.uInverse === 1;\n    }\n\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: Texture,\n        clearMode: boolean\n    ): void\n    {\n        // will trigger an update if the texture changed..\n        this._textureMatrix.texture = this.sprite.texture;\n\n        filterManager.calculateSpriteMatrix(\n            this.resources.filterUniforms.uniforms.uFilterMatrix as Matrix,\n            this.sprite\n        ).prepend(this._textureMatrix.mapCoord);\n\n        this.resources.uMaskTexture = this.sprite.texture.source;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBO,MAAM,2KAAmB,SAChC,CAAA;IAII,YAAY,OACZ,CAAA;QACI,MAAM,EAAE,MAAA,EAAQ,GAAG,IAAA,EAAS,GAAA,OAAA,CAAA;QAE5B,MAAM,aAAgB,GAAA,uMAAI,gBAAc,CAAA,MAAA,CAAO,OAAO,CAAA,CAAA;QAEhD,MAAA,cAAA,GAAiB,qMAAI,eAAa,CAAA;YACpC,eAAe;gBAAE,KAAA,EAAO,oKAAI,SAAO,EAAA;gBAAG,MAAM,aAAc;YAAA,CAAA;YAC1D,YAAY;gBAAE,KAAA,EAAO,aAAc,CAAA,WAAA;gBAAa,MAAM,WAAY;YAAA,CAAA;YAClE,MAAQ,EAAA;gBAAE,KAAO,EAAA,CAAA;gBAAG,MAAM,KAAM;YAAA,CAAA;YAChC,QAAA,EAAU;gBAAE,KAAO,EAAA,OAAA,CAAQ,OAAA,GAAU,CAAI,GAAA,CAAA;gBAAG,MAAM,KAAM;YAAA,CAAA;QAAA,CAC3D,CAAA,CAAA;QAEK,MAAA,UAAA,GAAa,yMAAA,CAAW,IAAK,CAAA;YAC/B,MAAQ,EAAA;8LACJ,UAAA;gBACA,UAAY,EAAA,YAAA;YAAA,CAChB;YACA,QAAU,EAAA;gBACN,wLAAA;gBACA,UAAY,EAAA,cAAA;YAAA,CAChB;QAAA,CACH,CAAA,CAAA;QAEK,MAAA,SAAA,6LAAY,YAAA,CAAU,IAAK,CAAA;YAC7B,wLAAA;4LACA,UAAA;YACA,IAAM,EAAA,aAAA;QAAA,CACT,CAAA,CAAA;QAEK,KAAA,CAAA;YACF,GAAG,IAAA;YACH,UAAA;YACA,SAAA;YACA,SAAW,EAAA;gBACP,cAAA;gBACA,YAAA,EAAc,OAAO,OAAQ,CAAA,MAAA;YAAA,CACjC;QAAA,CACH,CAAA,CAAA;QAED,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;QAEd,IAAA,CAAK,cAAiB,GAAA,aAAA,CAAA;IAAA,CAC1B;IAEA,IAAI,QAAQ,KACZ,EAAA;QACI,IAAA,CAAK,SAAU,CAAA,cAAA,CAAe,QAAS,CAAA,QAAA,GAAW,QAAQ,CAAI,GAAA,CAAA,CAAA;IAAA,CAClE;IAEA,IAAI,OACJ,GAAA;QACI,OAAO,IAAK,CAAA,SAAA,CAAU,cAAe,CAAA,QAAA,CAAS,QAAa,KAAA,CAAA,CAAA;IAAA,CAC/D;IAEO,KACH,CAAA,aAAA,EACA,KACA,EAAA,MAAA,EACA,SAEJ,EAAA;QAES,IAAA,CAAA,cAAA,CAAe,OAAU,GAAA,IAAA,CAAK,MAAO,CAAA,OAAA,CAAA;QAE5B,aAAA,CAAA,qBAAA,CACV,IAAA,CAAK,SAAU,CAAA,cAAA,CAAe,QAAS,CAAA,aAAA,EACvC,IAAK,CAAA,MAAA,EACP,OAAA,CAAQ,IAAK,CAAA,cAAA,CAAe,QAAQ,CAAA,CAAA;QAEtC,IAAA,CAAK,SAAU,CAAA,YAAA,GAAe,IAAK,CAAA,MAAA,CAAO,OAAQ,CAAA,MAAA,CAAA;QAElD,aAAA,CAAc,WAAY,CAAA,IAAA,EAAM,KAAO,EAAA,MAAA,EAAQ,SAAS,CAAA,CAAA;IAAA,CAC5D;AACJ","ignoreList":[0]}},
    {"offset": {"line": 922, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 928, "column": 0}, "map": {"version":3,"file":"blend-template.wgsl.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 934, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 940, "column": 0}, "map": {"version":3,"file":"blend-template.frag.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 946, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 952, "column": 0}, "map": {"version":3,"file":"blend-template.vert.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 958, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 964, "column": 0}, "map": {"version":3,"file":"BlendModeFilter.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/blend-modes/BlendModeFilter.ts"],"sourcesContent":["import { GlProgram } from '../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../rendering/renderers/gpu/shader/GpuProgram';\nimport { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { Filter } from '../Filter';\nimport blendTemplateFrag from './blend-template.frag';\nimport blendTemplateVert from './blend-template.vert';\nimport blendTemplate from './blend-template.wgsl';\n\nexport interface BlendModeFilterOptions\n{\n    source?: string;\n    gpu?: {\n        functions?: string;\n        main?: string;\n    }\n    gl?: {\n        functions?: string;\n        main?: string;\n    }\n}\n\nexport class BlendModeFilter extends Filter\n{\n    constructor(options: BlendModeFilterOptions)\n    {\n        const gpuOptions = options.gpu;\n\n        const gpuSource = compileBlendModeShader({ source: blendTemplate, ...gpuOptions });\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: gpuSource,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source: gpuSource,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glOptions = options.gl;\n\n        const glSource = compileBlendModeShader({ source: blendTemplateFrag, ...glOptions });\n\n        const glProgram = GlProgram.from({\n            vertex: blendTemplateVert,\n            fragment: glSource\n        });\n\n        const uniformGroup = new UniformGroup({\n            uBlend: {\n                value: 1,\n                type: 'f32'\n            }\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            blendRequired: true,\n            resources: {\n                blendUniforms: uniformGroup,\n                uBackTexture: Texture.EMPTY\n            }\n        });\n    }\n}\n\nfunction compileBlendModeShader(options: {source: string, functions?: string, main?: string}): string\n{\n    const { source, functions, main } = options;\n\n    return source.replace('{FUNCTIONS}', functions).replace('{MAIN}', main);\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAsBO,MAAM,gLAAwB,SACrC,CAAA;IACI,YAAY,OACZ,CAAA;QACI,MAAM,aAAa,OAAQ,CAAA,GAAA,CAAA;QAE3B,MAAM,YAAY,sBAAuB,CAAA;YAAE,qMAAQ,UAAe;YAAA,GAAG,UAAA;QAAA,CAAY,CAAA,CAAA;QAE3E,MAAA,UAAA,+LAAa,aAAA,CAAW,IAAK,CAAA;YAC/B,MAAQ,EAAA;gBACJ,MAAQ,EAAA,SAAA;gBACR,UAAY,EAAA,YAAA;YAAA,CAChB;YACA,QAAU,EAAA;gBACN,MAAQ,EAAA,SAAA;gBACR,UAAY,EAAA,cAAA;YAAA,CAChB;QAAA,CACH,CAAA,CAAA;QAED,MAAM,YAAY,OAAQ,CAAA,EAAA,CAAA;QAE1B,MAAM,WAAW,sBAAuB,CAAA;YAAE,qMAAQ,UAAmB;YAAA,GAAG,SAAA;QAAA,CAAW,CAAA,CAAA;QAE7E,MAAA,SAAA,6LAAY,YAAA,CAAU,IAAK,CAAA;YAC7B,MAAQ,EAAA,uMAAA;YACR,QAAU,EAAA,QAAA;QAAA,CACb,CAAA,CAAA;QAEK,MAAA,YAAA,GAAe,qMAAI,eAAa,CAAA;YAClC,MAAQ,EAAA;gBACJ,KAAO,EAAA,CAAA;gBACP,IAAM,EAAA,KAAA;YAAA,CACV;QAAA,CACH,CAAA,CAAA;QAEK,KAAA,CAAA;YACF,UAAA;YACA,SAAA;YACA,aAAe,EAAA,IAAA;YACf,SAAW,EAAA;gBACP,aAAe,EAAA,YAAA;gBACf,2MAAc,UAAQ,CAAA,KAAA;YAAA,CAC1B;QAAA,CACH,CAAA,CAAA;IAAA,CACL;AACJ,CAAA;AAEA,SAAS,uBAAuB,OAChC,EAAA;IACI,MAAM,EAAE,MAAA,EAAQ,SAAW,EAAA,IAAA,EAAS,GAAA,OAAA,CAAA;IAEpC,OAAO,OAAO,OAAQ,CAAA,aAAA,EAAe,SAAS,CAAE,CAAA,OAAA,CAAQ,UAAU,IAAI,CAAA,CAAA;AAC1E","ignoreList":[0]}},
    {"offset": {"line": 1033, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1039, "column": 0}, "map": {"version":3,"file":"GLhls.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/blend-modes/hls/GLhls.ts"],"sourcesContent":["/** A helper object containing the hsl shader code for both glsl */\nexport const hslgl = `\n\tfloat getLuminosity(vec3 c) {\n\t\treturn 0.3 * c.r + 0.59 * c.g + 0.11 * c.b;\n\t}\n\n\tvec3 setLuminosity(vec3 c, float lum) {\n\t\tfloat modLum = lum - getLuminosity(c);\n\t\tvec3 color = c.rgb + vec3(modLum);\n\n\t\t// clip back into legal range\n\t\tmodLum = getLuminosity(color);\n\t\tvec3 modLumVec = vec3(modLum);\n\n\t\tfloat cMin = min(color.r, min(color.g, color.b));\n\t\tfloat cMax = max(color.r, max(color.g, color.b));\n\n\t\tif(cMin < 0.0) {\n\t\t\tcolor = mix(modLumVec, color, modLum / (modLum - cMin));\n\t\t}\n\n\t\tif(cMax > 1.0) {\n\t\t\tcolor = mix(modLumVec, color, (1.0 - modLum) / (cMax - modLum));\n\t\t}\n\n\t\treturn color;\n\t}\n\n\tfloat getSaturation(vec3 c) {\n\t\treturn max(c.r, max(c.g, c.b)) - min(c.r, min(c.g, c.b));\n\t}\n\n\tvec3 setSaturationMinMidMax(vec3 cSorted, float s) {\n\t\tvec3 colorSorted = cSorted;\n\n\t\tif(colorSorted.z > colorSorted.x) {\n\t\t\tcolorSorted.y = (((colorSorted.y - colorSorted.x) * s) / (colorSorted.z - colorSorted.x));\n\t\t\tcolorSorted.z = s;\n\t\t}\n\t\telse {\n\t\t\tcolorSorted.y = 0.0;\n\t\t\tcolorSorted.z = 0.0;\n\t\t}\n\n\t\tcolorSorted.x = 0.0;\n\n\t\treturn colorSorted;\n\t}\n\n\tvec3 setSaturation(vec3 c, float s) {\n\t\tvec3 color = c;\n\n\t\tif(color.r <= color.g && color.r <= color.b) {\n\t\t\tif(color.g <= color.b) {\n\t\t\t\tcolor = setSaturationMinMidMax(color.rgb, s).rgb;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcolor = setSaturationMinMidMax(color.rbg, s).rbg;\n\t\t\t}\n\t\t}\n\t\telse if(color.g <= color.r && color.g <= color.b) {\n\t\t\tif(color.r <= color.b) {\n\t\t\t\tcolor = setSaturationMinMidMax(color.grb, s).grb;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcolor = setSaturationMinMidMax(color.gbr, s).gbr;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Using bgr for both fixes part of hue\n\t\t\tif(color.r <= color.g) {\n\t\t\t\tcolor = setSaturationMinMidMax(color.brg, s).brg;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcolor = setSaturationMinMidMax(color.bgr, s).bgr;\n\t\t\t}\n\t\t}\n\n\t\treturn color;\n\t}\n    `;\n"],"names":[],"mappings":";;;;AACO,MAAM,KAAQ,GAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,CAAA","ignoreList":[0]}},
    {"offset": {"line": 1125, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1131, "column": 0}, "map": {"version":3,"file":"GPUhls.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/blend-modes/hls/GPUhls.ts"],"sourcesContent":["/** A helper object containing the hsl shader code for wgsl */\nexport const hslgpu = `\n\tfn getLuminosity(c: vec3<f32>) -> f32\n\t{\n\t\treturn 0.3*c.r + 0.59*c.g + 0.11*c.b;\n\t}\n\n\tfn setLuminosity(c: vec3<f32>, lum: f32) -> vec3<f32>\n\t{\n\t\tvar modLum: f32 = lum - getLuminosity(c);\n\t\tvar color: vec3<f32> = c.rgb + modLum;\n\n\t\t// clip back into legal range\n\t\tmodLum = getLuminosity(color);\n\t\tlet modLumVec = vec3<f32>(modLum);\n\n\t\tlet cMin: f32 = min(color.r, min(color.g, color.b));\n\t\tlet cMax: f32 = max(color.r, max(color.g, color.b));\n\n\t\tif(cMin < 0.0)\n\t\t{\n\t\t\tcolor = mix(modLumVec, color, modLum / (modLum - cMin));\n\t\t}\n\n\t\tif(cMax > 1.0)\n\t\t{\n\t\t\tcolor = mix(modLumVec, color, (1 - modLum) / (cMax - modLum));\n\t\t}\n\n\t\treturn color;\n\t}\n\n\tfn getSaturation(c: vec3<f32>) -> f32\n\t{\n\t\treturn max(c.r, max(c.g, c.b)) - min(c.r, min(c.g, c.b));\n\t}\n\n\tfn setSaturationMinMidMax(cSorted: vec3<f32>, s: f32) -> vec3<f32>\n\t{\n\t\tvar colorSorted = cSorted;\n\n\t\tif(colorSorted.z > colorSorted.x)\n\t\t{\n\t\t\tcolorSorted.y = (((colorSorted.y - colorSorted.x) * s) / (colorSorted.z - colorSorted.x));\n\t\t\tcolorSorted.z = s;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcolorSorted.y = 0;\n\t\t\tcolorSorted.z = 0;\n\t\t}\n\n\t\tcolorSorted.x = 0;\n\n\t\treturn colorSorted;\n\t}\n\n\tfn setSaturation(c: vec3<f32>, s: f32) -> vec3<f32>\n\t{\n\t\tvar color = c;\n\n\t\tif (color.r <= color.g && color.r <= color.b)\n\t\t{\n\t\t\tif (color.g <= color.b)\n\t\t\t{\n\t\t\t\tcolor = vec3<f32>(setSaturationMinMidMax(color.rgb, s)).rgb;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcolor = vec3<f32>(setSaturationMinMidMax(color.rbg, s)).rbg;\n\t\t\t}\n\t\t}\n\t\telse if (color.g <= color.r && color.g <= color.b)\n\t\t{\n\t\t\tif (color.r <= color.b)\n\t\t\t{\n\t\t\t\tcolor = vec3<f32>(setSaturationMinMidMax(color.grb, s)).grb;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcolor = vec3<f32>(setSaturationMinMidMax(color.gbr, s)).gbr;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Using bgr for both fixes part of hue\n\t\t\tif (color.r <= color.g)\n\t\t\t{\n\t\t\t\tcolor = vec3<f32>(setSaturationMinMidMax(color.brg, s)).brg;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcolor  = vec3<f32>(setSaturationMinMidMax(color.bgr, s)).bgr;\n\t\t\t}\n\t\t}\n\n\t\treturn color;\n\t}\n\t`;\n"],"names":[],"mappings":";;;;AACO,MAAM,MAAS,GAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAA,CAAA","ignoreList":[0]}},
    {"offset": {"line": 1235, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1241, "column": 0}, "map": {"version":3,"file":"colorMatrixFilter.wgsl.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 1247, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1253, "column": 0}, "map": {"version":3,"file":"colorMatrixFilter.frag.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 1259, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1265, "column": 0}, "map": {"version":3,"file":"ColorMatrixFilter.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/defaults/color-matrix/ColorMatrixFilter.ts"],"sourcesContent":["import { Color } from '../../../color/Color';\nimport { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { Filter } from '../../Filter';\nimport vertex from '../defaultFilter.vert';\nimport fragment from './colorMatrixFilter.frag';\nimport source from './colorMatrixFilter.wgsl';\n\nimport type { ColorSource } from '../../../color/Color';\nimport type { ArrayFixed } from '../../../utils/types';\nimport type { FilterOptions } from '../../Filter';\n\n/**\n * 5x4 matrix for transforming RGBA color and alpha\n * @memberof filters\n */\nexport type ColorMatrix = ArrayFixed<number, 20>;\n\n/**\n * The ColorMatrixFilter class lets you apply a 5x4 matrix transformation on the RGBA\n * color and alpha values of every pixel on your container to produce a result\n * with a new set of RGBA color and alpha values. It's pretty powerful!\n *\n * ```js\n *  let colorMatrix = new filters.ColorMatrixFilter();\n *  container.filters = [colorMatrix];\n *  colorMatrix.contrast(2);\n * ```\n * @author Clément Chenebault <clement@goodboydigital.com>\n * @memberof filters\n */\nexport class ColorMatrixFilter extends Filter\n{\n    constructor(options: FilterOptions = {})\n    {\n        const colorMatrixUniforms = new UniformGroup({\n            uColorMatrix: {\n                value: [\n                    1, 0, 0, 0, 0,\n                    0, 1, 0, 0, 0,\n                    0, 0, 1, 0, 0,\n                    0, 0, 0, 1, 0,\n                ],\n                type: 'f32',\n                size: 20,\n            },\n            uAlpha: {\n                value: 1,\n                type: 'f32'\n            }\n        });\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'color-matrix-filter'\n        });\n\n        super({\n            ...options,\n            gpuProgram,\n            glProgram,\n            resources: {\n                colorMatrixUniforms\n            },\n        });\n\n        this.alpha = 1;\n    }\n\n    /**\n     * Transforms current matrix and set the new one\n     * @param {number[]} matrix - 5x4 matrix\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    private _loadMatrix(matrix: ColorMatrix, multiply = false): void\n    {\n        let newMatrix = matrix;\n\n        if (multiply)\n        {\n            this._multiply(newMatrix, this.matrix, matrix);\n            newMatrix = this._colorMatrix(newMatrix) as any;\n        }\n\n        // set the new matrix\n\n        this.resources.colorMatrixUniforms.uniforms.uColorMatrix = newMatrix;\n        this.resources.colorMatrixUniforms.update();\n    }\n\n    /**\n     * Multiplies two mat5's\n     * @private\n     * @param out - 5x4 matrix the receiving matrix\n     * @param a - 5x4 matrix the first operand\n     * @param b - 5x4 matrix the second operand\n     * @returns {number[]} 5x4 matrix\n     */\n    private _multiply(out: ColorMatrix, a: ColorMatrix, b: ColorMatrix): ColorMatrix\n    {\n        // Red Channel\n        out[0] = (a[0] * b[0]) + (a[1] * b[5]) + (a[2] * b[10]) + (a[3] * b[15]);\n        out[1] = (a[0] * b[1]) + (a[1] * b[6]) + (a[2] * b[11]) + (a[3] * b[16]);\n        out[2] = (a[0] * b[2]) + (a[1] * b[7]) + (a[2] * b[12]) + (a[3] * b[17]);\n        out[3] = (a[0] * b[3]) + (a[1] * b[8]) + (a[2] * b[13]) + (a[3] * b[18]);\n        out[4] = (a[0] * b[4]) + (a[1] * b[9]) + (a[2] * b[14]) + (a[3] * b[19]) + a[4];\n\n        // Green Channel\n        out[5] = (a[5] * b[0]) + (a[6] * b[5]) + (a[7] * b[10]) + (a[8] * b[15]);\n        out[6] = (a[5] * b[1]) + (a[6] * b[6]) + (a[7] * b[11]) + (a[8] * b[16]);\n        out[7] = (a[5] * b[2]) + (a[6] * b[7]) + (a[7] * b[12]) + (a[8] * b[17]);\n        out[8] = (a[5] * b[3]) + (a[6] * b[8]) + (a[7] * b[13]) + (a[8] * b[18]);\n        out[9] = (a[5] * b[4]) + (a[6] * b[9]) + (a[7] * b[14]) + (a[8] * b[19]) + a[9];\n\n        // Blue Channel\n        out[10] = (a[10] * b[0]) + (a[11] * b[5]) + (a[12] * b[10]) + (a[13] * b[15]);\n        out[11] = (a[10] * b[1]) + (a[11] * b[6]) + (a[12] * b[11]) + (a[13] * b[16]);\n        out[12] = (a[10] * b[2]) + (a[11] * b[7]) + (a[12] * b[12]) + (a[13] * b[17]);\n        out[13] = (a[10] * b[3]) + (a[11] * b[8]) + (a[12] * b[13]) + (a[13] * b[18]);\n        out[14] = (a[10] * b[4]) + (a[11] * b[9]) + (a[12] * b[14]) + (a[13] * b[19]) + a[14];\n\n        // Alpha Channel\n        out[15] = (a[15] * b[0]) + (a[16] * b[5]) + (a[17] * b[10]) + (a[18] * b[15]);\n        out[16] = (a[15] * b[1]) + (a[16] * b[6]) + (a[17] * b[11]) + (a[18] * b[16]);\n        out[17] = (a[15] * b[2]) + (a[16] * b[7]) + (a[17] * b[12]) + (a[18] * b[17]);\n        out[18] = (a[15] * b[3]) + (a[16] * b[8]) + (a[17] * b[13]) + (a[18] * b[18]);\n        out[19] = (a[15] * b[4]) + (a[16] * b[9]) + (a[17] * b[14]) + (a[18] * b[19]) + a[19];\n\n        return out;\n    }\n\n    /**\n     * Create a Float32 Array and normalize the offset component to 0-1\n     * @param {number[]} matrix - 5x4 matrix\n     * @returns {number[]} 5x4 matrix with all values between 0-1\n     */\n    private _colorMatrix(matrix: ColorMatrix): ColorMatrix\n    {\n        // Create a Float32 Array and normalize the offset component to 0-1\n        const m = new Float32Array(matrix);\n\n        m[4] /= 255;\n        m[9] /= 255;\n        m[14] /= 255;\n        m[19] /= 255;\n\n        return m as any;\n    }\n\n    /**\n     * Adjusts brightness\n     * @param b - value of the brightness (0-1, where 0 is black)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public brightness(b: number, multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            b, 0, 0, 0, 0,\n            0, b, 0, 0, 0,\n            0, 0, b, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Sets each channel on the diagonal of the color matrix.\n     * This can be used to achieve a tinting effect on Containers similar to the tint field of some\n     * display objects like Sprite, Text, Graphics, and Mesh.\n     * @param color - Color of the tint. This is a hex value.\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public tint(color: ColorSource, multiply?: boolean): void\n    {\n        const [r, g, b] = Color.shared.setValue(color).toArray();\n        const matrix: ColorMatrix = [\n            r, 0, 0, 0, 0,\n            0, g, 0, 0, 0,\n            0, 0, b, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Set the matrices in grey scales\n     * @param scale - value of the grey (0-1, where 0 is black)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public greyscale(scale: number, multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            scale, scale, scale, 0, 0,\n            scale, scale, scale, 0, 0,\n            scale, scale, scale, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * for our american friends!\n     * @param scale\n     * @param multiply\n     */\n    public grayscale(scale: number, multiply: boolean): void\n    {\n        this.greyscale(scale, multiply);\n    }\n\n    /**\n     * Set the black and white matrice.\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public blackAndWhite(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            0.3, 0.6, 0.1, 0, 0,\n            0.3, 0.6, 0.1, 0, 0,\n            0.3, 0.6, 0.1, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Set the hue property of the color\n     * @param rotation - in degrees\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public hue(rotation: number, multiply: boolean): void\n    {\n        rotation = (rotation || 0) / 180 * Math.PI;\n\n        const cosR = Math.cos(rotation);\n        const sinR = Math.sin(rotation);\n        const sqrt = Math.sqrt;\n\n        /* a good approximation for hue rotation\n         This matrix is far better than the versions with magic luminance constants\n         formerly used here, but also used in the starling framework (flash) and known from this\n         old part of the internet: quasimondo.com/archives/000565.php\n\n         This new matrix is based on rgb cube rotation in space. Look here for a more descriptive\n         implementation as a shader not a general matrix:\n         https://github.com/evanw/glfx.js/blob/58841c23919bd59787effc0333a4897b43835412/src/filters/adjust/huesaturation.js\n\n         This is the source for the code:\n         see http://stackoverflow.com/questions/8507885/shift-hue-of-an-rgb-color/8510751#8510751\n         */\n\n        const w = 1 / 3;\n        const sqrW = sqrt(w); // weight is\n\n        const a00 = cosR + ((1.0 - cosR) * w);\n        const a01 = (w * (1.0 - cosR)) - (sqrW * sinR);\n        const a02 = (w * (1.0 - cosR)) + (sqrW * sinR);\n\n        const a10 = (w * (1.0 - cosR)) + (sqrW * sinR);\n        const a11 = cosR + (w * (1.0 - cosR));\n        const a12 = (w * (1.0 - cosR)) - (sqrW * sinR);\n\n        const a20 = (w * (1.0 - cosR)) - (sqrW * sinR);\n        const a21 = (w * (1.0 - cosR)) + (sqrW * sinR);\n        const a22 = cosR + (w * (1.0 - cosR));\n\n        const matrix: ColorMatrix = [\n            a00, a01, a02, 0, 0,\n            a10, a11, a12, 0, 0,\n            a20, a21, a22, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Set the contrast matrix, increase the separation between dark and bright\n     * Increase contrast : shadows darker and highlights brighter\n     * Decrease contrast : bring the shadows up and the highlights down\n     * @param amount - value of the contrast (0-1)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public contrast(amount: number, multiply: boolean): void\n    {\n        const v = (amount || 0) + 1;\n        const o = -0.5 * (v - 1);\n\n        const matrix: ColorMatrix = [\n            v, 0, 0, 0, o,\n            0, v, 0, 0, o,\n            0, 0, v, 0, o,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Set the saturation matrix, increase the separation between colors\n     * Increase saturation : increase contrast, brightness, and sharpness\n     * @param amount - The saturation amount (0-1)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public saturate(amount = 0, multiply?: boolean): void\n    {\n        const x = (amount * 2 / 3) + 1;\n        const y = ((x - 1) * -0.5);\n\n        const matrix: ColorMatrix = [\n            x, y, y, 0, 0,\n            y, x, y, 0, 0,\n            y, y, x, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /** Desaturate image (remove color) Call the saturate function */\n    public desaturate(): void\n    {\n        this.saturate(-1);\n    }\n\n    /**\n     * Negative image (inverse of classic rgb matrix)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public negative(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            -1, 0, 0, 1, 0,\n            0, -1, 0, 1, 0,\n            0, 0, -1, 1, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Sepia image\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public sepia(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            0.393, 0.7689999, 0.18899999, 0, 0,\n            0.349, 0.6859999, 0.16799999, 0, 0,\n            0.272, 0.5339999, 0.13099999, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Color motion picture process invented in 1916 (thanks Dominic Szablewski)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public technicolor(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            1.9125277891456083, -0.8545344976951645, -0.09155508482755585, 0, 11.793603434377337,\n            -0.3087833385928097, 1.7658908555458428, -0.10601743074722245, 0, -70.35205161461398,\n            -0.231103377548616, -0.7501899197440212, 1.847597816108189, 0, 30.950940869491138,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Polaroid filter\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public polaroid(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            1.438, -0.062, -0.062, 0, 0,\n            -0.122, 1.378, -0.122, 0, 0,\n            -0.016, -0.016, 1.483, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Filter who transforms : Red -> Blue and Blue -> Red\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public toBGR(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            0, 0, 1, 0, 0,\n            0, 1, 0, 0, 0,\n            1, 0, 0, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Color reversal film introduced by Eastman Kodak in 1935. (thanks Dominic Szablewski)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public kodachrome(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\n            -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\n            -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Brown delicious browni filter (thanks Dominic Szablewski)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public browni(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            0.5997023498159715, 0.34553243048391263, -0.2708298674538042, 0, 47.43192855600873,\n            -0.037703249837783157, 0.8609577587992641, 0.15059552388459913, 0, -36.96841498319127,\n            0.24113635128153335, -0.07441037908422492, 0.44972182064877153, 0, -7.562075277591283,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Vintage filter (thanks Dominic Szablewski)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public vintage(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            0.6279345635605994, 0.3202183420819367, -0.03965408211312453, 0, 9.651285835294123,\n            0.02578397704808868, 0.6441188644374771, 0.03259127616149294, 0, 7.462829176470591,\n            0.0466055556782719, -0.0851232987247891, 0.5241648018700465, 0, 5.159190588235296,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * We don't know exactly what it does, kind of gradient map, but funny to play with!\n     * @param desaturation - Tone values.\n     * @param toned - Tone values.\n     * @param lightColor - Tone values, example: `0xFFE580`\n     * @param darkColor - Tone values, example: `0xFFE580`\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public colorTone(\n        desaturation: number,\n        toned: number,\n        lightColor: ColorSource,\n        darkColor: ColorSource,\n        multiply: boolean\n    ): void\n    {\n        desaturation ||= 0.2;\n        toned ||= 0.15;\n        lightColor ||= 0xFFE580;\n        darkColor ||= 0x338000;\n\n        const temp = Color.shared;\n        const [lR, lG, lB] = temp.setValue(lightColor).toArray();\n        const [dR, dG, dB] = temp.setValue(darkColor).toArray();\n\n        const matrix: ColorMatrix = [\n            0.3, 0.59, 0.11, 0, 0,\n            lR, lG, lB, desaturation, 0,\n            dR, dG, dB, toned, 0,\n            lR - dR, lG - dG, lB - dB, 0, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Night effect\n     * @param intensity - The intensity of the night effect.\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public night(intensity: number, multiply: boolean): void\n    {\n        intensity ||= 0.1;\n\n        const matrix: ColorMatrix = [\n            intensity * (-2.0), -intensity, 0, 0, 0,\n            -intensity, 0, intensity, 0, 0,\n            0, intensity, intensity * 2.0, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Predator effect\n     *\n     * Erase the current matrix by setting a new independent one\n     * @param amount - how much the predator feels his future victim\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public predator(amount: number, multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            // row 1\n            11.224130630493164 * amount,\n            -4.794486999511719 * amount,\n            -2.8746118545532227 * amount,\n            0 * amount,\n            0.40342438220977783 * amount,\n            // row 2\n            -3.6330697536468506 * amount,\n            9.193157196044922 * amount,\n            -2.951810836791992 * amount,\n            0 * amount,\n            -1.316135048866272 * amount,\n            // row 3\n            -3.2184197902679443 * amount,\n            -4.2375030517578125 * amount,\n            7.476448059082031 * amount,\n            0 * amount,\n            0.8044459223747253 * amount,\n            // row 4\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * LSD effect\n     *\n     * Multiply the current matrix\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public lsd(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            2, -0.4, 0.5, 0, 0,\n            -0.5, 2, -0.4, 0, 0,\n            -0.4, -0.5, 3, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /** Erase the current matrix by setting the default one. */\n    public reset(): void\n    {\n        const matrix: ColorMatrix = [\n            1, 0, 0, 0, 0,\n            0, 1, 0, 0, 0,\n            0, 0, 1, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, false);\n    }\n\n    /**\n     * The matrix of the color matrix filter\n     * @member {number[]}\n     * @default [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0]\n     */\n    get matrix(): ColorMatrix\n    {\n        return this.resources.colorMatrixUniforms.uniforms.uColorMatrix;\n    }\n\n    set matrix(value: ColorMatrix)\n    {\n        this.resources.colorMatrixUniforms.uniforms.uColorMatrix = value;\n    }\n\n    /**\n     * The opacity value to use when mixing the original and resultant colors.\n     *\n     * When the value is 0, the original color is used without modification.\n     * When the value is 1, the result color is used.\n     * When in the range (0, 1) the color is interpolated between the original and result by this amount.\n     * @default 1\n     */\n    get alpha(): number\n    {\n        return this.resources.colorMatrixUniforms.uniforms.uAlpha;\n    }\n\n    set alpha(value: number)\n    {\n        this.resources.colorMatrixUniforms.uniforms.uAlpha = value;\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAgCO,MAAM,iLAA0B,UACvC,CAAA;IACI,WAAA,CAAY,OAAyB,GAAA,CAAA,CACrC,CAAA;QACU,MAAA,mBAAA,GAAsB,qMAAI,eAAa,CAAA;YACzC,YAAc,EAAA;gBACV,KAAO,EAAA;oBACH,CAAA;oBAAG,CAAA;oBAAG,CAAA;oBAAG,CAAA;oBAAG,CAAA;oBACZ,CAAA;oBAAG,CAAA;oBAAG,CAAA;oBAAG,CAAA;oBAAG,CAAA;oBACZ,CAAA;oBAAG,CAAA;oBAAG,CAAA;oBAAG,CAAA;oBAAG,CAAA;oBACZ,CAAA;oBAAG,CAAA;oBAAG,CAAA;oBAAG,CAAA;oBAAG,CAAA;iBAChB;gBACA,IAAM,EAAA,KAAA;gBACN,IAAM,EAAA,EAAA;YAAA,CACV;YACA,MAAQ,EAAA;gBACJ,KAAO,EAAA,CAAA;gBACP,IAAM,EAAA,KAAA;YAAA,CACV;QAAA,CACH,CAAA,CAAA;QAEK,MAAA,UAAA,+LAAa,aAAA,CAAW,IAAK,CAAA;YAC/B,MAAQ,EAAA;kOACJ,UAAA;gBACA,UAAY,EAAA,YAAA;YAAA,CAChB;YACA,QAAU,EAAA;kOACN,UAAA;gBACA,UAAY,EAAA,cAAA;YAAA,CAChB;QAAA,CACH,CAAA,CAAA;QAEK,MAAA,SAAA,6LAAY,YAAA,CAAU,IAAK,CAAA;uMAC7B,UAAA;gOACA,UAAA;YACA,IAAM,EAAA,qBAAA;QAAA,CACT,CAAA,CAAA;QAEK,KAAA,CAAA;YACF,GAAG,OAAA;YACH,UAAA;YACA,SAAA;YACA,SAAW,EAAA;gBACP,mBAAA;YAAA,CACJ;QAAA,CACH,CAAA,CAAA;QAED,IAAA,CAAK,KAAQ,GAAA,CAAA,CAAA;IAAA,CACjB;IAAA;;;;;GAAA,GAQQ,WAAA,CAAY,MAAqB,EAAA,QAAA,GAAW,KACpD,EAAA;QACI,IAAI,SAAY,GAAA,MAAA,CAAA;QAEhB,IAAI,QACJ,EAAA;YACI,IAAA,CAAK,SAAU,CAAA,SAAA,EAAW,IAAK,CAAA,MAAA,EAAQ,MAAM,CAAA,CAAA;YACjC,SAAA,GAAA,IAAA,CAAK,YAAA,CAAa,SAAS,CAAA,CAAA;QAAA,CAC3C;QAIK,IAAA,CAAA,SAAA,CAAU,mBAAoB,CAAA,QAAA,CAAS,YAAe,GAAA,SAAA,CAAA;QACtD,IAAA,CAAA,SAAA,CAAU,mBAAA,CAAoB,MAAO,EAAA,CAAA;IAAA,CAC9C;IAAA;;;;;;;GAAA,GAUQ,SAAA,CAAU,GAAkB,EAAA,CAAA,EAAgB,CACpD,EAAA;QAEQ,GAAA,CAAA,CAAC,CAAK,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAA,CAAE,CAAC,CAAA,GAAM,CAAE,CAAA,CAAC,CAAI,GAAA,CAAA,CAAE,CAAC,CAAM,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAE,CAAA,EAAE,CAAA,GAAM,CAAE,CAAA,CAAC,CAAI,GAAA,CAAA,CAAE,EAAE,CAAA,CAAA;QAClE,GAAA,CAAA,CAAC,CAAK,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAA,CAAE,CAAC,CAAA,GAAM,CAAE,CAAA,CAAC,CAAI,GAAA,CAAA,CAAE,CAAC,CAAM,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAE,CAAA,EAAE,CAAA,GAAM,CAAE,CAAA,CAAC,CAAI,GAAA,CAAA,CAAE,EAAE,CAAA,CAAA;QAClE,GAAA,CAAA,CAAC,CAAK,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAA,CAAE,CAAC,CAAA,GAAM,CAAE,CAAA,CAAC,CAAI,GAAA,CAAA,CAAE,CAAC,CAAM,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAE,CAAA,EAAE,CAAA,GAAM,CAAE,CAAA,CAAC,CAAI,GAAA,CAAA,CAAE,EAAE,CAAA,CAAA;QAClE,GAAA,CAAA,CAAC,CAAK,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAA,CAAE,CAAC,CAAA,GAAM,CAAE,CAAA,CAAC,CAAI,GAAA,CAAA,CAAE,CAAC,CAAM,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAE,CAAA,EAAE,CAAA,GAAM,CAAE,CAAA,CAAC,CAAI,GAAA,CAAA,CAAE,EAAE,CAAA,CAAA;QAClE,GAAA,CAAA,CAAC,CAAK,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAE,CAAA,CAAC,CAAM,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAE,CAAA,CAAC,CAAM,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAE,CAAA,EAAE,CAAM,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAE,CAAA,EAAE,CAAK,GAAA,CAAA,CAAE,CAAC,CAAA,CAAA;QAG1E,GAAA,CAAA,CAAC,CAAK,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAA,CAAE,CAAC,CAAA,GAAM,CAAE,CAAA,CAAC,CAAI,GAAA,CAAA,CAAE,CAAC,CAAM,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAE,CAAA,EAAE,CAAA,GAAM,CAAE,CAAA,CAAC,CAAI,GAAA,CAAA,CAAE,EAAE,CAAA,CAAA;QAClE,GAAA,CAAA,CAAC,CAAK,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAA,CAAE,CAAC,CAAA,GAAM,CAAE,CAAA,CAAC,CAAI,GAAA,CAAA,CAAE,CAAC,CAAM,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAE,CAAA,EAAE,CAAA,GAAM,CAAE,CAAA,CAAC,CAAI,GAAA,CAAA,CAAE,EAAE,CAAA,CAAA;QAClE,GAAA,CAAA,CAAC,CAAK,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAA,CAAE,CAAC,CAAA,GAAM,CAAE,CAAA,CAAC,CAAI,GAAA,CAAA,CAAE,CAAC,CAAM,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAE,CAAA,EAAE,CAAA,GAAM,CAAE,CAAA,CAAC,CAAI,GAAA,CAAA,CAAE,EAAE,CAAA,CAAA;QAClE,GAAA,CAAA,CAAC,CAAK,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAA,CAAE,CAAC,CAAA,GAAM,CAAE,CAAA,CAAC,CAAI,GAAA,CAAA,CAAE,CAAC,CAAM,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAE,CAAA,EAAE,CAAA,GAAM,CAAE,CAAA,CAAC,CAAI,GAAA,CAAA,CAAE,EAAE,CAAA,CAAA;QAClE,GAAA,CAAA,CAAC,CAAK,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAE,CAAA,CAAC,CAAM,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAE,CAAA,CAAC,CAAM,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAE,CAAA,EAAE,CAAM,GAAA,CAAA,CAAE,CAAC,CAAA,GAAI,CAAE,CAAA,EAAE,CAAK,GAAA,CAAA,CAAE,CAAC,CAAA,CAAA;QAG1E,GAAA,CAAA,EAAE,CAAK,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAA,CAAE,CAAC,CAAA,GAAM,CAAE,CAAA,EAAE,CAAI,GAAA,CAAA,CAAE,CAAC,CAAM,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAE,CAAA,EAAE,CAAA,GAAM,CAAE,CAAA,EAAE,CAAI,GAAA,CAAA,CAAE,EAAE,CAAA,CAAA;QACvE,GAAA,CAAA,EAAE,CAAK,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAA,CAAE,CAAC,CAAA,GAAM,CAAE,CAAA,EAAE,CAAI,GAAA,CAAA,CAAE,CAAC,CAAM,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAE,CAAA,EAAE,CAAA,GAAM,CAAE,CAAA,EAAE,CAAI,GAAA,CAAA,CAAE,EAAE,CAAA,CAAA;QACvE,GAAA,CAAA,EAAE,CAAK,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAA,CAAE,CAAC,CAAA,GAAM,CAAE,CAAA,EAAE,CAAI,GAAA,CAAA,CAAE,CAAC,CAAM,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAE,CAAA,EAAE,CAAA,GAAM,CAAE,CAAA,EAAE,CAAI,GAAA,CAAA,CAAE,EAAE,CAAA,CAAA;QACvE,GAAA,CAAA,EAAE,CAAK,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAA,CAAE,CAAC,CAAA,GAAM,CAAE,CAAA,EAAE,CAAI,GAAA,CAAA,CAAE,CAAC,CAAM,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAE,CAAA,EAAE,CAAA,GAAM,CAAE,CAAA,EAAE,CAAI,GAAA,CAAA,CAAE,EAAE,CAAA,CAAA;QACvE,GAAA,CAAA,EAAE,CAAK,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAE,CAAA,CAAC,CAAM,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAE,CAAA,CAAC,CAAM,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAE,CAAA,EAAE,CAAM,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAE,CAAA,EAAE,CAAK,GAAA,CAAA,CAAE,EAAE,CAAA,CAAA;QAGhF,GAAA,CAAA,EAAE,CAAK,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAA,CAAE,CAAC,CAAA,GAAM,CAAE,CAAA,EAAE,CAAI,GAAA,CAAA,CAAE,CAAC,CAAM,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAE,CAAA,EAAE,CAAA,GAAM,CAAE,CAAA,EAAE,CAAI,GAAA,CAAA,CAAE,EAAE,CAAA,CAAA;QACvE,GAAA,CAAA,EAAE,CAAK,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAA,CAAE,CAAC,CAAA,GAAM,CAAE,CAAA,EAAE,CAAI,GAAA,CAAA,CAAE,CAAC,CAAM,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAE,CAAA,EAAE,CAAA,GAAM,CAAE,CAAA,EAAE,CAAI,GAAA,CAAA,CAAE,EAAE,CAAA,CAAA;QACvE,GAAA,CAAA,EAAE,CAAK,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAA,CAAE,CAAC,CAAA,GAAM,CAAE,CAAA,EAAE,CAAI,GAAA,CAAA,CAAE,CAAC,CAAM,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAE,CAAA,EAAE,CAAA,GAAM,CAAE,CAAA,EAAE,CAAI,GAAA,CAAA,CAAE,EAAE,CAAA,CAAA;QACvE,GAAA,CAAA,EAAE,CAAK,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAA,CAAE,CAAC,CAAA,GAAM,CAAE,CAAA,EAAE,CAAI,GAAA,CAAA,CAAE,CAAC,CAAM,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAE,CAAA,EAAE,CAAA,GAAM,CAAE,CAAA,EAAE,CAAI,GAAA,CAAA,CAAE,EAAE,CAAA,CAAA;QACvE,GAAA,CAAA,EAAE,CAAK,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAE,CAAA,CAAC,CAAM,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAE,CAAA,CAAC,CAAM,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAE,CAAA,EAAE,CAAM,GAAA,CAAA,CAAE,EAAE,CAAA,GAAI,CAAE,CAAA,EAAE,CAAK,GAAA,CAAA,CAAE,EAAE,CAAA,CAAA;QAE7E,OAAA,GAAA,CAAA;IAAA,CACX;IAAA;;;;GAAA,GAOQ,aAAa,MACrB,EAAA;QAEU,MAAA,CAAA,GAAI,IAAI,YAAA,CAAa,MAAM,CAAA,CAAA;QAEjC,CAAA,CAAE,CAAC,CAAK,IAAA,GAAA,CAAA;QACR,CAAA,CAAE,CAAC,CAAK,IAAA,GAAA,CAAA;QACR,CAAA,CAAE,EAAE,CAAK,IAAA,GAAA,CAAA;QACT,CAAA,CAAE,EAAE,CAAK,IAAA,GAAA,CAAA;QAEF,OAAA,CAAA,CAAA;IAAA,CACX;IAAA;;;;;GAAA,GAQO,UAAA,CAAW,CAAA,EAAW,QAC7B,EAAA;QACI,MAAM,MAAsB,GAAA;YACxB,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YACZ,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YACZ,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YACZ,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;SAChB,CAAA;QAEK,IAAA,CAAA,WAAA,CAAY,QAAQ,QAAQ,CAAA,CAAA;IAAA,CACrC;IAAA;;;;;;;GAAA,GAUO,IAAA,CAAK,KAAA,EAAoB,QAChC,EAAA;QACU,MAAA,CAAC,CAAG,EAAA,CAAA,EAAG,CAAC,CAAA,GAAI,6JAAA,CAAM,MAAO,CAAA,QAAA,CAAS,KAAK,CAAA,CAAE,OAAQ,EAAA,CAAA;QACvD,MAAM,MAAsB,GAAA;YACxB,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YACZ,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YACZ,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YACZ,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;SAChB,CAAA;QAEK,IAAA,CAAA,WAAA,CAAY,QAAQ,QAAQ,CAAA,CAAA;IAAA,CACrC;IAAA;;;;;GAAA,GAQO,SAAA,CAAU,KAAA,EAAe,QAChC,EAAA;QACI,MAAM,MAAsB,GAAA;YACxB,KAAA;YAAO,KAAA;YAAO,KAAA;YAAO,CAAA;YAAG,CAAA;YACxB,KAAA;YAAO,KAAA;YAAO,KAAA;YAAO,CAAA;YAAG,CAAA;YACxB,KAAA;YAAO,KAAA;YAAO,KAAA;YAAO,CAAA;YAAG,CAAA;YACxB,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;SAChB,CAAA;QAEK,IAAA,CAAA,WAAA,CAAY,QAAQ,QAAQ,CAAA,CAAA;IAAA,CACrC;IAAA;;;;GAAA,GAOO,SAAA,CAAU,KAAA,EAAe,QAChC,EAAA;QACS,IAAA,CAAA,SAAA,CAAU,OAAO,QAAQ,CAAA,CAAA;IAAA,CAClC;IAAA;;;;GAAA,GAOO,cAAc,QACrB,EAAA;QACI,MAAM,MAAsB,GAAA;YACxB,GAAA;YAAK,GAAA;YAAK,GAAA;YAAK,CAAA;YAAG,CAAA;YAClB,GAAA;YAAK,GAAA;YAAK,GAAA;YAAK,CAAA;YAAG,CAAA;YAClB,GAAA;YAAK,GAAA;YAAK,GAAA;YAAK,CAAA;YAAG,CAAA;YAClB,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;SAChB,CAAA;QAEK,IAAA,CAAA,WAAA,CAAY,QAAQ,QAAQ,CAAA,CAAA;IAAA,CACrC;IAAA;;;;;GAAA,GAQO,GAAA,CAAI,QAAA,EAAkB,QAC7B,EAAA;QACgB,QAAA,GAAA,CAAA,QAAA,IAAY,CAAK,IAAA,GAAA,GAAM,IAAK,CAAA,EAAA,CAAA;QAElC,MAAA,IAAA,GAAO,IAAK,CAAA,GAAA,CAAI,QAAQ,CAAA,CAAA;QACxB,MAAA,IAAA,GAAO,IAAK,CAAA,GAAA,CAAI,QAAQ,CAAA,CAAA;QAC9B,MAAM,OAAO,IAAK,CAAA,IAAA,CAAA;QAelB,MAAM,IAAI,CAAI,GAAA,CAAA,CAAA;QACR,MAAA,IAAA,GAAO,KAAK,CAAC,CAAA,CAAA;QAEb,MAAA,GAAA,GAAM,IAAS,GAAA,CAAA,CAAA,GAAM,IAAQ,IAAA,CAAA,CAAA;QACnC,MAAM,GAAO,GAAA,CAAA,GAAA,CAAK,CAAM,GAAA,IAAA,CAAA,GAAU,IAAO,GAAA,IAAA,CAAA;QACzC,MAAM,GAAO,GAAA,CAAA,GAAA,CAAK,CAAM,GAAA,IAAA,CAAA,GAAU,IAAO,GAAA,IAAA,CAAA;QAEzC,MAAM,GAAO,GAAA,CAAA,GAAA,CAAK,CAAM,GAAA,IAAA,CAAA,GAAU,IAAO,GAAA,IAAA,CAAA;QACnC,MAAA,GAAA,GAAM,IAAQ,GAAA,CAAA,GAAA,CAAK,CAAM,GAAA,IAAA,CAAA,CAAA;QAC/B,MAAM,GAAO,GAAA,CAAA,GAAA,CAAK,CAAM,GAAA,IAAA,CAAA,GAAU,IAAO,GAAA,IAAA,CAAA;QAEzC,MAAM,GAAO,GAAA,CAAA,GAAA,CAAK,CAAM,GAAA,IAAA,CAAA,GAAU,IAAO,GAAA,IAAA,CAAA;QACzC,MAAM,GAAO,GAAA,CAAA,GAAA,CAAK,CAAM,GAAA,IAAA,CAAA,GAAU,IAAO,GAAA,IAAA,CAAA;QACnC,MAAA,GAAA,GAAM,IAAQ,GAAA,CAAA,GAAA,CAAK,CAAM,GAAA,IAAA,CAAA,CAAA;QAE/B,MAAM,MAAsB,GAAA;YACxB,GAAA;YAAK,GAAA;YAAK,GAAA;YAAK,CAAA;YAAG,CAAA;YAClB,GAAA;YAAK,GAAA;YAAK,GAAA;YAAK,CAAA;YAAG,CAAA;YAClB,GAAA;YAAK,GAAA;YAAK,GAAA;YAAK,CAAA;YAAG,CAAA;YAClB,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;SAChB,CAAA;QAEK,IAAA,CAAA,WAAA,CAAY,QAAQ,QAAQ,CAAA,CAAA;IAAA,CACrC;IAAA;;;;;;;GAAA,GAUO,QAAA,CAAS,MAAA,EAAgB,QAChC,EAAA;QACU,MAAA,CAAA,GAAA,CAAK,UAAU,CAAK,IAAA,CAAA,CAAA;QACpB,MAAA,CAAA,GAAI,CAAA,MAAA,CAAQ,CAAI,GAAA,CAAA,CAAA,CAAA;QAEtB,MAAM,MAAsB,GAAA;YACxB,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YACZ,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YACZ,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YACZ,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;SAChB,CAAA;QAEK,IAAA,CAAA,WAAA,CAAY,QAAQ,QAAQ,CAAA,CAAA;IAAA,CACrC;IAAA;;;;;;GAAA,GASO,QAAA,CAAS,MAAS,GAAA,CAAA,EAAG,QAC5B,EAAA;QACU,MAAA,CAAA,GAAK,MAAS,GAAA,CAAA,GAAI,CAAK,GAAA,CAAA,CAAA;QACvB,MAAA,CAAA,GAAA,CAAM,IAAI,CAAK,IAAA,CAAA,GAAA,CAAA;QAErB,MAAM,MAAsB,GAAA;YACxB,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YACZ,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YACZ,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YACZ,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;SAChB,CAAA;QAEK,IAAA,CAAA,WAAA,CAAY,QAAQ,QAAQ,CAAA,CAAA;IAAA,CACrC;IAAA,+DAAA,GAGO,UACP,GAAA;QACI,IAAA,CAAK,QAAA,CAAS,CAAE,CAAA,CAAA,CAAA;IAAA,CACpB;IAAA;;;;GAAA,GAOO,SAAS,QAChB,EAAA;QACI,MAAM,MAAsB,GAAA;YACxB,CAAA,CAAA;YAAI,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YACb,CAAA;YAAG,CAAA,CAAA;YAAI,CAAA;YAAG,CAAA;YAAG,CAAA;YACb,CAAA;YAAG,CAAA;YAAG,CAAA,CAAA;YAAI,CAAA;YAAG,CAAA;YACb,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;SAChB,CAAA;QAEK,IAAA,CAAA,WAAA,CAAY,QAAQ,QAAQ,CAAA,CAAA;IAAA,CACrC;IAAA;;;;GAAA,GAOO,MAAM,QACb,EAAA;QACI,MAAM,MAAsB,GAAA;YACxB,KAAA;YAAO,SAAA;YAAW,UAAA;YAAY,CAAA;YAAG,CAAA;YACjC,KAAA;YAAO,SAAA;YAAW,UAAA;YAAY,CAAA;YAAG,CAAA;YACjC,KAAA;YAAO,SAAA;YAAW,UAAA;YAAY,CAAA;YAAG,CAAA;YACjC,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;SAChB,CAAA;QAEK,IAAA,CAAA,WAAA,CAAY,QAAQ,QAAQ,CAAA,CAAA;IAAA,CACrC;IAAA;;;;GAAA,GAOO,YAAY,QACnB,EAAA;QACI,MAAM,MAAsB,GAAA;YACxB,kBAAA;YAAoB,CAAA,kBAAA;YAAqB,CAAA,mBAAA;YAAsB,CAAA;YAAG,kBAAA;YAClE,CAAA,kBAAA;YAAqB,kBAAA;YAAoB,CAAA,mBAAA;YAAsB,CAAA;YAAG,CAAA,iBAAA;YAClE,CAAA,iBAAA;YAAoB,CAAA,kBAAA;YAAqB,iBAAA;YAAmB,CAAA;YAAG,kBAAA;YAC/D,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;SAChB,CAAA;QAEK,IAAA,CAAA,WAAA,CAAY,QAAQ,QAAQ,CAAA,CAAA;IAAA,CACrC;IAAA;;;;GAAA,GAOO,SAAS,QAChB,EAAA;QACI,MAAM,MAAsB,GAAA;YACxB,KAAA;YAAO,CAAA,KAAA;YAAQ,CAAA,KAAA;YAAQ,CAAA;YAAG,CAAA;YAC1B,CAAA,KAAA;YAAQ,KAAA;YAAO,CAAA,KAAA;YAAQ,CAAA;YAAG,CAAA;YAC1B,CAAA,KAAA;YAAQ,CAAA,KAAA;YAAQ,KAAA;YAAO,CAAA;YAAG,CAAA;YAC1B,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;SAChB,CAAA;QAEK,IAAA,CAAA,WAAA,CAAY,QAAQ,QAAQ,CAAA,CAAA;IAAA,CACrC;IAAA;;;;GAAA,GAOO,MAAM,QACb,EAAA;QACI,MAAM,MAAsB,GAAA;YACxB,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YACZ,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YACZ,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YACZ,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;SAChB,CAAA;QAEK,IAAA,CAAA,WAAA,CAAY,QAAQ,QAAQ,CAAA,CAAA;IAAA,CACrC;IAAA;;;;GAAA,GAOO,WAAW,QAClB,EAAA;QACI,MAAM,MAAsB,GAAA;YACxB,kBAAA;YAAoB,CAAA,kBAAA;YAAqB,CAAA,mBAAA;YAAsB,CAAA;YAAG,iBAAA;YAClE,CAAA,mBAAA;YAAsB,kBAAA;YAAoB,CAAA,mBAAA;YAAsB,CAAA;YAAG,kBAAA;YACnE,CAAA,mBAAA;YAAsB,CAAA,kBAAA;YAAqB,kBAAA;YAAoB,CAAA;YAAG,iBAAA;YAClE,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;SAChB,CAAA;QAEK,IAAA,CAAA,WAAA,CAAY,QAAQ,QAAQ,CAAA,CAAA;IAAA,CACrC;IAAA;;;;GAAA,GAOO,OAAO,QACd,EAAA;QACI,MAAM,MAAsB,GAAA;YACxB,kBAAA;YAAoB,mBAAA;YAAqB,CAAA,kBAAA;YAAqB,CAAA;YAAG,iBAAA;YACjE,CAAA,oBAAA;YAAuB,kBAAA;YAAoB,mBAAA;YAAqB,CAAA;YAAG,CAAA,iBAAA;YACnE,mBAAA;YAAqB,CAAA,mBAAA;YAAsB,mBAAA;YAAqB,CAAA;YAAG,CAAA,iBAAA;YACnE,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;SAChB,CAAA;QAEK,IAAA,CAAA,WAAA,CAAY,QAAQ,QAAQ,CAAA,CAAA;IAAA,CACrC;IAAA;;;;GAAA,GAOO,QAAQ,QACf,EAAA;QACI,MAAM,MAAsB,GAAA;YACxB,kBAAA;YAAoB,kBAAA;YAAoB,CAAA,mBAAA;YAAsB,CAAA;YAAG,iBAAA;YACjE,mBAAA;YAAqB,kBAAA;YAAoB,mBAAA;YAAqB,CAAA;YAAG,iBAAA;YACjE,kBAAA;YAAoB,CAAA,kBAAA;YAAqB,kBAAA;YAAoB,CAAA;YAAG,iBAAA;YAChE,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;SAChB,CAAA;QAEK,IAAA,CAAA,WAAA,CAAY,QAAQ,QAAQ,CAAA,CAAA;IAAA,CACrC;IAAA;;;;;;;;GAAA,GAWO,SACH,CAAA,YAAA,EACA,KACA,EAAA,UAAA,EACA,SAAA,EACA,QAEJ,EAAA;QACqB,YAAA,IAAA,CAAA,YAAA,GAAA,GAAA,CAAA,CAAA;QACP,KAAA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,CAAA;QACK,UAAA,IAAA,CAAA,UAAA,GAAA,QAAA,CAAA,CAAA;QACD,SAAA,IAAA,CAAA,SAAA,GAAA,OAAA,CAAA,CAAA;QAEd,MAAM,OAAO,6JAAM,CAAA,MAAA,CAAA;QACb,MAAA,CAAC,IAAI,EAAI,EAAA,EAAE,CAAA,GAAI,IAAK,CAAA,QAAA,CAAS,UAAU,CAAA,CAAE,OAAQ,EAAA,CAAA;QACjD,MAAA,CAAC,IAAI,EAAI,EAAA,EAAE,CAAA,GAAI,IAAK,CAAA,QAAA,CAAS,SAAS,CAAA,CAAE,OAAQ,EAAA,CAAA;QAEtD,MAAM,MAAsB,GAAA;YACxB,GAAA;YAAK,IAAA;YAAM,IAAA;YAAM,CAAA;YAAG,CAAA;YACpB,EAAA;YAAI,EAAA;YAAI,EAAA;YAAI,YAAA;YAAc,CAAA;YAC1B,EAAA;YAAI,EAAA;YAAI,EAAA;YAAI,KAAA;YAAO,CAAA;YACnB,EAAK,GAAA,EAAA;YAAI,EAAK,GAAA,EAAA;YAAI,EAAK,GAAA,EAAA;YAAI,CAAA;YAAG,CAAA;SAClC,CAAA;QAEK,IAAA,CAAA,WAAA,CAAY,QAAQ,QAAQ,CAAA,CAAA;IAAA,CACrC;IAAA;;;;;GAAA,GAQO,KAAA,CAAM,SAAA,EAAmB,QAChC,EAAA;QACkB,SAAA,IAAA,CAAA,SAAA,GAAA,GAAA,CAAA,CAAA;QAEd,MAAM,MAAsB,GAAA;YACxB,SAAa,GAAA,CAAA,CAAA;YAAO,CAAC,SAAA;YAAW,CAAA;YAAG,CAAA;YAAG,CAAA;YACtC,CAAC,SAAA;YAAW,CAAA;YAAG,SAAA;YAAW,CAAA;YAAG,CAAA;YAC7B,CAAA;YAAG,SAAA;YAAW,SAAY,GAAA,CAAA;YAAK,CAAA;YAAG,CAAA;YAClC,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;SAChB,CAAA;QAEK,IAAA,CAAA,WAAA,CAAY,QAAQ,QAAQ,CAAA,CAAA;IAAA,CACrC;IAAA;;;;;;;GAAA,GAUO,QAAA,CAAS,MAAA,EAAgB,QAChC,EAAA;QACI,MAAM,MAAsB,GAAA;YAAA,QAAA;YAExB,kBAAqB,GAAA,MAAA;YACrB,CAAqB,iBAAA,GAAA,MAAA;YACrB,CAAsB,kBAAA,GAAA,MAAA;YACtB,CAAI,GAAA,MAAA;YACJ,mBAAsB,GAAA,MAAA;YAAA,QAAA;YAEtB,CAAsB,kBAAA,GAAA,MAAA;YACtB,iBAAoB,GAAA,MAAA;YACpB,CAAqB,iBAAA,GAAA,MAAA;YACrB,CAAI,GAAA,MAAA;YACJ,CAAqB,iBAAA,GAAA,MAAA;YAAA,QAAA;YAErB,CAAsB,kBAAA,GAAA,MAAA;YACtB,CAAsB,kBAAA,GAAA,MAAA;YACtB,iBAAoB,GAAA,MAAA;YACpB,CAAI,GAAA,MAAA;YACJ,kBAAqB,GAAA,MAAA;YAAA,QAAA;YAErB,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;SAChB,CAAA;QAEK,IAAA,CAAA,WAAA,CAAY,QAAQ,QAAQ,CAAA,CAAA;IAAA,CACrC;IAAA;;;;;;GAAA,GASO,IAAI,QACX,EAAA;QACI,MAAM,MAAsB,GAAA;YACxB,CAAA;YAAG,CAAA,GAAA;YAAM,GAAA;YAAK,CAAA;YAAG,CAAA;YACjB,CAAA,GAAA;YAAM,CAAA;YAAG,CAAA,GAAA;YAAM,CAAA;YAAG,CAAA;YAClB,CAAA,GAAA;YAAM,CAAA,GAAA;YAAM,CAAA;YAAG,CAAA;YAAG,CAAA;YAClB,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;SAChB,CAAA;QAEK,IAAA,CAAA,WAAA,CAAY,QAAQ,QAAQ,CAAA,CAAA;IAAA,CACrC;IAAA,yDAAA,GAGO,KACP,GAAA;QACI,MAAM,MAAsB,GAAA;YACxB,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YACZ,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YACZ,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YACZ,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;YAAG,CAAA;SAChB,CAAA;QAEK,IAAA,CAAA,WAAA,CAAY,QAAQ,KAAK,CAAA,CAAA;IAAA,CAClC;IAAA;;;;GAAA,GAOA,IAAI,MACJ,GAAA;QACW,OAAA,IAAA,CAAK,SAAU,CAAA,mBAAA,CAAoB,QAAS,CAAA,YAAA,CAAA;IAAA,CACvD;IAEA,IAAI,OAAO,KACX,EAAA;QACS,IAAA,CAAA,SAAA,CAAU,mBAAoB,CAAA,QAAA,CAAS,YAAe,GAAA,KAAA,CAAA;IAAA,CAC/D;IAAA;;;;;;;GAAA,GAUA,IAAI,KACJ,GAAA;QACW,OAAA,IAAA,CAAK,SAAU,CAAA,mBAAA,CAAoB,QAAS,CAAA,MAAA,CAAA;IAAA,CACvD;IAEA,IAAI,MAAM,KACV,EAAA;QACS,IAAA,CAAA,SAAA,CAAU,mBAAoB,CAAA,QAAA,CAAS,MAAS,GAAA,KAAA,CAAA;IAAA,CACzD;AACJ","ignoreList":[0]}},
    {"offset": {"line": 2065, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2071, "column": 0}, "map": {"version":3,"file":"displacement.vert.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 2077, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2083, "column": 0}, "map": {"version":3,"file":"displacement.frag.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 2089, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2095, "column": 0}, "map": {"version":3,"file":"displacement.wgsl.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 2101, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2107, "column": 0}, "map": {"version":3,"file":"DisplacementFilter.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/defaults/displacement/DisplacementFilter.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { Point } from '../../../maths/point/Point';\nimport { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { Sprite } from '../../../scene/sprite/Sprite';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\nimport { Filter } from '../../Filter';\nimport fragment from './displacement.frag';\nimport vertex from './displacement.vert';\nimport source from './displacement.wgsl';\n\nimport type { PointData } from '../../../maths/point/PointData';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { FilterOptions } from '../../Filter';\nimport type { FilterSystem } from '../../FilterSystem';\n\n/**\n * Options for DisplacementFilter\n * @memberof filters\n */\nexport interface DisplacementFilterOptions extends FilterOptions\n{\n    /** The texture used for the displacement map. */\n    sprite: Sprite,\n    /** The scale of the displacement. */\n    scale?: number | PointData,\n}\n\n/**\n * A Noise effect filter.\n *\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\n * @memberof filters\n * @author Vico @vicocotea\n */\nexport class DisplacementFilter extends Filter\n{\n    private readonly _sprite: Sprite;\n\n    /**\n     * **Note:** Our docs parser struggles to properly understand the constructor signature.\n     * This is the correct signature.\n     * ```ts\n     * new DisplacementFilter(options?: DisplacementFilterOptions);\n     * ```\n     * @param options - The options for the filter.\n     * @param options.sprite - The texture used for the displacement map.\n     * @param options.scale - The scale of the displacement.\n     */\n    constructor(options: Sprite | DisplacementFilterOptions);\n    constructor(sprite: Sprite, scale?: number | PointData);\n    constructor(...args: [Sprite | DisplacementFilterOptions] | [Sprite, (number | PointData)?])\n    {\n        let options = args[0];\n\n        if (options instanceof Sprite)\n        {\n            // #if _DEBUG\n            if (args[1])\n            {\n                deprecation(v8_0_0, 'DisplacementFilter now uses options object instead of params. {sprite, scale}');\n            }\n            // #endif\n\n            options = { sprite: options, scale: args[1] };\n        }\n\n        const { sprite, scale: scaleOption, ...rest } = options;\n\n        let scale = scaleOption ?? 20;\n\n        // check if is a number or a point\n        if (typeof scale === 'number')\n        {\n            scale = new Point(scale, scale);\n        }\n\n        const filterUniforms = new UniformGroup({\n            uFilterMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uScale: { value: scale, type: 'vec2<f32>' },\n            uRotation: { value: new Float32Array([0, 0, 0, 0]), type: 'mat2x2<f32>' },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'displacement-filter'\n        });\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const textureSource = sprite.texture.source;\n\n        super({\n            ...rest,\n            gpuProgram,\n            glProgram,\n            resources: {\n                filterUniforms,\n                uMapTexture: textureSource,\n                uMapSampler: textureSource.style,\n            },\n        });\n\n        this._sprite = options.sprite;\n        this._sprite.renderable = false;\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - clearMode.\n     */\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: Texture,\n        clearMode: boolean\n    ): void\n    {\n        const uniforms = this.resources.filterUniforms.uniforms;\n\n        filterManager.calculateSpriteMatrix(\n            uniforms.uFilterMatrix,\n            this._sprite\n        );\n\n        // Extract rotation from world transform\n        const wt = this._sprite.worldTransform;\n        const lenX = Math.sqrt((wt.a * wt.a) + (wt.b * wt.b));\n        const lenY = Math.sqrt((wt.c * wt.c) + (wt.d * wt.d));\n\n        if (lenX !== 0 && lenY !== 0)\n        {\n            uniforms.uRotation[0] = wt.a / lenX;\n            uniforms.uRotation[1] = wt.b / lenX;\n            uniforms.uRotation[2] = wt.c / lenY;\n            uniforms.uRotation[3] = wt.d / lenY;\n        }\n\n        this.resources.uMapTexture = this._sprite.texture.source;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /** scaleX, scaleY for displacements */\n    get scale(): Point\n    {\n        return this.resources.filterUniforms.uniforms.uScale as Point;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2225, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2231, "column": 0}, "map": {"version":3,"file":"FilterPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/FilterPipe.ts"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions';\n\nimport type { InstructionSet } from '../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../rendering/renderers/types';\nimport type { Container } from '../scene/container/Container';\nimport type { Effect } from '../scene/container/Effect';\nimport type { FilterInstruction } from './FilterSystem';\n\nexport class FilterPipe implements InstructionPipe<FilterInstruction>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'filter',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(filterEffect: Effect, container: Container, instructionSet: InstructionSet): void\n    {\n        const renderPipes = this._renderer.renderPipes;\n\n        renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            canBundle: false,\n            action: 'pushFilter',\n            container,\n            filterEffect,\n        } as FilterInstruction);\n    }\n\n    public pop(_filterEffect: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            action: 'popFilter',\n            canBundle: false,\n        });\n    }\n\n    public execute(instruction: FilterInstruction)\n    {\n        if (instruction.action === 'pushFilter')\n        {\n            this._renderer.filter.push(instruction);\n        }\n        else if (instruction.action === 'popFilter')\n        {\n            this._renderer.filter.pop();\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n"],"names":[],"mappings":";;;;;;AASO,MAAM,UACb,CAAA;IAYI,YAAY,QACZ,CAAA;QACI,IAAA,CAAK,SAAY,GAAA,QAAA,CAAA;IAAA,CACrB;IAEO,IAAA,CAAK,YAAsB,EAAA,SAAA,EAAsB,cACxD,EAAA;QACU,MAAA,WAAA,GAAc,IAAA,CAAK,SAAU,CAAA,WAAA,CAAA;QAEvB,WAAA,CAAA,KAAA,CAAM,KAAA,CAAM,cAAc,CAAA,CAAA;QAEtC,cAAA,CAAe,GAAI,CAAA;YACf,YAAc,EAAA,QAAA;YACd,SAAW,EAAA,KAAA;YACX,MAAQ,EAAA,YAAA;YACR,SAAA;YACA,YAAA;QAAA,CACkB,CAAA,CAAA;IAAA,CAC1B;IAEO,GAAA,CAAI,aAAuB,EAAA,UAAA,EAAuB,cACzD,EAAA;QACI,IAAA,CAAK,SAAU,CAAA,WAAA,CAAY,KAAM,CAAA,KAAA,CAAM,cAAc,CAAA,CAAA;QAErD,cAAA,CAAe,GAAI,CAAA;YACf,YAAc,EAAA,QAAA;YACd,MAAQ,EAAA,WAAA;YACR,SAAW,EAAA,KAAA;QAAA,CACd,CAAA,CAAA;IAAA,CACL;IAEO,QAAQ,WACf,EAAA;QACQ,IAAA,WAAA,CAAY,MAAA,KAAW,YAC3B,EAAA;YACS,IAAA,CAAA,SAAA,CAAU,MAAO,CAAA,IAAA,CAAK,WAAW,CAAA,CAAA;QAAA,CAC1C,MAAA,IACS,WAAY,CAAA,MAAA,KAAW,WAChC,EAAA;YACS,IAAA,CAAA,SAAA,CAAU,MAAA,CAAO,GAAI,EAAA,CAAA;QAAA,CAC9B;IAAA,CACJ;IAEO,OACP,GAAA;QACI,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;IAAA,CACrB;AACJ,CAAA;AA5Da,UAAA,CAEK,SAAY,GAAA;IACtB,IAAM,EAAA;uKACF,gBAAc,CAAA,UAAA;uKACd,gBAAc,CAAA,WAAA;uKACd,gBAAc,CAAA,WAAA;KAClB;IACA,IAAM,EAAA,QAAA;AACV,CAAA","ignoreList":[0]}},
    {"offset": {"line": 2281, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2287, "column": 0}, "map": {"version":3,"file":"FilterSystem.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/FilterSystem.ts"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions';\nimport { Matrix } from '../maths/matrix/Matrix';\nimport { Point } from '../maths/point/Point';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer, RendererType } from '../rendering/renderers/types';\nimport { Bounds } from '../scene/container/bounds/Bounds';\nimport { getFastGlobalBounds } from '../scene/container/bounds/getFastGlobalBounds';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds';\nimport { warn } from '../utils/logging/warn';\n\nimport type { WebGLRenderer } from '../rendering/renderers/gl/WebGLRenderer';\nimport type { WebGPURenderer } from '../rendering/renderers/gpu/WebGPURenderer';\nimport type { Instruction } from '../rendering/renderers/shared/instructions/Instruction';\nimport type { Renderable } from '../rendering/renderers/shared/Renderable';\nimport type { RenderTarget } from '../rendering/renderers/shared/renderTarget/RenderTarget';\nimport type { RenderSurface } from '../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type { System } from '../rendering/renderers/shared/system/System';\nimport type { Container } from '../scene/container/Container';\nimport type { Sprite } from '../scene/sprite/Sprite';\nimport type { Filter } from './Filter';\nimport type { FilterEffect } from './FilterEffect';\n\ntype FilterAction = 'pushFilter' | 'popFilter';\n\n//\nconst quadGeometry = new Geometry({\n    attributes: {\n        aPosition: {\n            buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            format: 'float32x2',\n            stride: 2 * 4,\n            offset: 0,\n        },\n    },\n    indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3]),\n});\n\n/**\n * The filter pipeline is responsible for applying filters scene items!\n *\n * KNOWN BUGS:\n * 1. Global bounds calculation is incorrect if it is used when flip flopping filters. The maths can be found below\n * eg: filters [noiseFilter, blurFilter] noiseFilter will calculate the global bounds incorrectly.\n *\n * 2. RenderGroups do not work with filters. This is because the renderGroup matrix is not currently taken into account.\n *\n * Implementation notes:\n * 1. Gotcha - nesting filters that require blending will not work correctly. This creates a chicken and egg problem\n * the complexity and performance required to do this is not worth it i feel.. but lets see if others agree!\n *\n * 2. Filters are designed to be changed on the fly, this is means that changing filter information each frame will\n * not trigger an instruction rebuild. If you are constantly turning a filter on and off.. its therefore better to set\n * enabled to true or false on the filter. Or setting an empty array.\n *\n * 3. Need to look at perhaps aliasing when flip flopping filters. Really we should only need to antialias the FIRST\n * Texture we render too. The rest can be non aliased. This might help performance.\n * Currently we flip flop with an antialiased texture if antialiasing is enabled on the filter.\n */\nexport interface FilterInstruction extends Instruction\n{\n    renderPipeId: 'filter',\n    action: FilterAction,\n    container?: Container,\n    renderables?: Renderable[],\n    filterEffect: FilterEffect,\n}\n\nexport interface FilterData\n{\n    skip: boolean;\n    enabledLength?: number;\n    inputTexture: Texture\n    bounds: Bounds,\n    blendRequired: boolean,\n    container: Container,\n    filterEffect: FilterEffect,\n    previousRenderSurface: RenderSurface,\n    backTexture?: Texture,\n}\n\n/**\n * System that manages the filter pipeline\n * @memberof rendering\n */\nexport class FilterSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'filter',\n    } as const;\n\n    public readonly renderer: Renderer;\n\n    private _filterStackIndex = 0;\n    private _filterStack: FilterData[] = [];\n\n    private readonly _filterGlobalUniforms = new UniformGroup({\n        uInputSize: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputPixel: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputClamp: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uGlobalFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputTexture: { value: new Float32Array(4), type: 'vec4<f32>' },\n    });\n\n    private readonly _globalFilterBindGroup: BindGroup = new BindGroup({});\n    private _activeFilterData: FilterData;\n\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n     * @readonly\n     */\n    public get activeBackTexture(): Texture | undefined\n    {\n        return this._activeFilterData?.backTexture;\n    }\n\n    public push(instruction: FilterInstruction)\n    {\n        const renderer = this.renderer;\n\n        const filters = instruction.filterEffect.filters;\n\n        if (!this._filterStack[this._filterStackIndex])\n        {\n            this._filterStack[this._filterStackIndex] = this._getFilterData();\n        }\n\n        // get a filter data from the stack. They can be reused multiple times each frame,\n        // so we don't need to worry about overwriting them in a single pass.\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        this._filterStackIndex++;\n\n        // if there are no filters, we skip the pass\n        if (filters.length === 0)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        const bounds: Bounds = filterData.bounds;\n\n        // this path is used by the blend modes mostly!\n        // they collect all renderables and push them into a list.\n        // this list is then used to calculate the bounds of the filter area\n        if (instruction.renderables)\n        {\n            getGlobalRenderableBounds(instruction.renderables, bounds);\n        }\n        // if a filterArea is provided, we save our selves some measuring and just use that area supplied\n        else if (instruction.filterEffect.filterArea)\n        {\n            bounds.clear();\n\n            // transform the filterArea into global space..\n            bounds.addRect(instruction.filterEffect.filterArea);\n\n            // new for v8, we transform the bounds into the space of the container\n            bounds.applyMatrix(instruction.container.worldTransform);\n        }\n        // classic filter path, we get the bounds of the container and use it by recursively\n        // measuring.\n        else\n        {\n            getFastGlobalBounds(instruction.container, bounds);\n        }\n\n        if (instruction.container)\n        {\n            // When a container is cached as a texture, its filters need to be applied relative to its\n            // cached parent's coordinate space rather than world space. This transform adjustment ensures\n            // filters are applied in the correct coordinate system.\n            const renderGroup = instruction.container.renderGroup || instruction.container.parentRenderGroup;\n            const filterFrameTransform = renderGroup.cacheToLocalTransform;\n\n            if (filterFrameTransform)\n            {\n                bounds.applyMatrix(filterFrameTransform);\n            }\n        }\n\n        // get GLOBAL bounds of the item we are going to apply the filter to\n\n        const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n\n        // next we get the settings for the filter\n        // we need to find the LOWEST resolution for the filter list\n        let resolution = Infinity;\n        // Padding is additive to add padding to our padding\n        let padding = 0;\n        // if this is true for all filter, it should be true, and otherwise false\n        let antialias = true;\n        // true if any filter requires the previous render target\n        let blendRequired = false;\n        // true if any filter in the list is enabled\n        let enabled = false;\n        // false if any filter in the list has false\n        let clipToViewport = true;\n\n        for (let i = 0; i < filters.length; i++)\n        {\n            const filter = filters[i];\n\n            resolution = Math.min(resolution, filter.resolution === 'inherit'\n                ? colorTextureSource._resolution : filter.resolution);\n            padding += filter.padding;\n\n            if (filter.antialias === 'off')\n            {\n                antialias = false;\n            }\n            else if (filter.antialias === 'inherit')\n            {\n                antialias &&= colorTextureSource.antialias;\n            }\n\n            if (!filter.clipToViewport)\n            {\n                clipToViewport = false;\n            }\n\n            const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n\n            if (!isCompatible)\n            {\n                enabled = false;\n                break;\n            }\n\n            if (filter.blendRequired && !((renderer as WebGLRenderer).backBuffer?.useBackBuffer ?? true))\n            {\n                // #if _DEBUG\n                // eslint-disable-next-line max-len\n                warn('Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.');\n                // #endif\n\n                enabled = false;\n                break;\n            }\n\n            enabled = filter.enabled || enabled;\n            blendRequired ||= filter.blendRequired;\n        }\n\n        // if no filters are enabled lets skip!\n        if (!enabled)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // here we constrain the bounds to the viewport we will render too\n        // this should not take into account the x, y offset of the viewport - as this is\n        // handled by the viewport on the gpu.\n        if (clipToViewport)\n        {\n            const viewPort = renderer.renderTarget.rootViewPort;\n\n            const rootResolution = renderer.renderTarget.renderTarget.resolution;\n\n            bounds.fitBounds(0, viewPort.width / rootResolution, 0, viewPort.height / rootResolution);\n        }\n\n        // round the bounds to the nearest pixel\n        bounds\n            .scale(resolution)\n            .ceil()\n            .scale(1 / resolution)\n            .pad(padding | 0);\n\n        // skip if the bounds are negative or zero as this means they are\n        // not visible on the screen\n        if (!bounds.isPositive)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // set all the filter data\n        filterData.skip = false;\n\n        filterData.bounds = bounds;\n        filterData.blendRequired = blendRequired;\n        filterData.container = instruction.container;\n        filterData.filterEffect = instruction.filterEffect;\n\n        filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n\n        // bind...\n        // get a P02 texture from our pool...\n        filterData.inputTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            resolution,\n            antialias,\n        );\n\n        renderer.renderTarget.bind(filterData.inputTexture, true);\n        // set the global uniforms to take into account the bounds offset required\n\n        renderer.globalUniforms.push({\n            offset: bounds,\n        });\n    }\n\n    public pop()\n    {\n        const renderer = this.renderer;\n\n        this._filterStackIndex--;\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        // if we are skipping this filter then we just do nothing :D\n        if (filterData.skip)\n        {\n            return;\n        }\n\n        this._activeFilterData = filterData;\n\n        const inputTexture = filterData.inputTexture;\n\n        const bounds = filterData.bounds;\n\n        let backTexture = Texture.EMPTY;\n\n        renderer.renderTarget.finishRenderPass();\n\n        if (filterData.blendRequired)\n        {\n            // this actually forces the current commandQueue to render everything so far.\n            // if we don't do this, we won't be able to copy pixels for the background\n            const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n\n            const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n\n            backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n        }\n\n        filterData.backTexture = backTexture;\n\n        const filters = filterData.filterEffect.filters;\n\n        // get a BufferResource from the uniformBatch.\n        // this will batch the shader uniform data and give us a buffer resource we can\n        // set on our globalUniform Bind Group\n\n        // update the resources on the bind group...\n        this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n        this._globalFilterBindGroup.setResource(backTexture.source, 3);\n\n        renderer.globalUniforms.pop();\n\n        if (filters.length === 1)\n        {\n            // render a single filter...\n            // this.applyFilter(filters[0], inputTexture, filterData.previousRenderSurface, false);\n            filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n\n            // return the texture to the pool so we can reuse the next frame\n            TexturePool.returnTexture(inputTexture);\n        }\n        else\n        {\n            let flip = filterData.inputTexture;\n\n            // get another texture that we will render the next filter too\n            let flop = TexturePool.getOptimalTexture(\n                bounds.width,\n                bounds.height,\n                flip.source._resolution,\n                false\n            );\n\n            let i = 0;\n\n            // loop and apply the filters, omitting the last one as we will render that to the final target\n            for (i = 0; i < filters.length - 1; ++i)\n            {\n                const filter = filters[i];\n\n                filter.apply(this, flip, flop, true);\n                const t = flip;\n\n                flip = flop;\n                flop = t;\n            }\n\n            filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n\n            // return those textures for later!\n            TexturePool.returnTexture(flip);\n            TexturePool.returnTexture(flop);\n        }\n\n        // if we made a background texture, lets return that also\n        if (filterData.blendRequired)\n        {\n            TexturePool.returnTexture(backTexture);\n        }\n    }\n\n    public getBackTexture(lastRenderSurface: RenderTarget, bounds: Bounds, previousBounds?: Bounds)\n    {\n        const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n\n        const backTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            backgroundResolution,\n            false,\n        );\n\n        let x = bounds.minX;\n        let y = bounds.minY;\n\n        if (previousBounds)\n        {\n            x -= previousBounds.minX;\n            y -= previousBounds.minY;\n        }\n\n        x = Math.floor(x * backgroundResolution);\n        y = Math.floor(y * backgroundResolution);\n\n        const width = Math.ceil(bounds.width * backgroundResolution);\n        const height = Math.ceil(bounds.height * backgroundResolution);\n\n        this.renderer.renderTarget.copyToTexture(\n            lastRenderSurface,\n            backTexture,\n            { x, y },\n            { width, height },\n            { x: 0, y: 0 }\n        );\n\n        return backTexture;\n    }\n\n    public applyFilter(filter: Filter, input: Texture, output: RenderSurface, clear: boolean)\n    {\n        const renderer = this.renderer;\n\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        const bounds = filterData.bounds;\n\n        const offset = Point.shared;\n        const previousRenderSurface = filterData.previousRenderSurface;\n\n        const isFinalTarget = previousRenderSurface === output;\n\n        let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n\n        // to find the previous resolution we need to account for the skipped filters\n        // the following will find the last non skipped filter...\n        let currentIndex = this._filterStackIndex - 1;\n\n        while (currentIndex > 0 && this._filterStack[currentIndex].skip)\n        {\n            --currentIndex;\n        }\n\n        if (currentIndex > 0)\n        {\n            resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n        }\n\n        const filterUniforms = this._filterGlobalUniforms;\n        const uniforms = filterUniforms.uniforms;\n\n        const outputFrame = uniforms.uOutputFrame;\n        const inputSize = uniforms.uInputSize;\n        const inputPixel = uniforms.uInputPixel;\n        const inputClamp = uniforms.uInputClamp;\n        const globalFrame = uniforms.uGlobalFrame;\n        const outputTexture = uniforms.uOutputTexture;\n\n        // are we rendering back to the original surface?\n        if (isFinalTarget)\n        {\n            let lastIndex = this._filterStackIndex;\n\n            // get previous bounds.. we must take into account skipped filters also..\n            while (lastIndex > 0)\n            {\n                lastIndex--;\n                const filterData = this._filterStack[this._filterStackIndex - 1];\n\n                if (!filterData.skip)\n                {\n                    offset.x = filterData.bounds.minX;\n                    offset.y = filterData.bounds.minY;\n\n                    break;\n                }\n            }\n\n            outputFrame[0] = bounds.minX - offset.x;\n            outputFrame[1] = bounds.minY - offset.y;\n        }\n        else\n        {\n            outputFrame[0] = 0;\n            outputFrame[1] = 0;\n        }\n\n        outputFrame[2] = input.frame.width;\n        outputFrame[3] = input.frame.height;\n\n        inputSize[0] = input.source.width;\n        inputSize[1] = input.source.height;\n        inputSize[2] = 1 / inputSize[0];\n        inputSize[3] = 1 / inputSize[1];\n\n        inputPixel[0] = input.source.pixelWidth;\n        inputPixel[1] = input.source.pixelHeight;\n        inputPixel[2] = 1.0 / inputPixel[0];\n        inputPixel[3] = 1.0 / inputPixel[1];\n\n        inputClamp[0] = 0.5 * inputPixel[2];\n        inputClamp[1] = 0.5 * inputPixel[3];\n        inputClamp[2] = (input.frame.width * inputSize[2]) - (0.5 * inputPixel[2]);\n        inputClamp[3] = (input.frame.height * inputSize[3]) - (0.5 * inputPixel[3]);\n\n        const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n\n        globalFrame[0] = offset.x * resolution;\n        globalFrame[1] = offset.y * resolution;\n\n        globalFrame[2] = rootTexture.source.width * resolution;\n        globalFrame[3] = rootTexture.source.height * resolution;\n\n        // set the output texture - this is where we are going to render to\n\n        const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n\n        renderer.renderTarget.bind(output, !!clear);\n\n        if (output instanceof Texture)\n        {\n            outputTexture[0] = output.frame.width;\n            outputTexture[1] = output.frame.height;\n        }\n        else\n        {\n            // this means a renderTarget was passed directly\n            outputTexture[0] = renderTarget.width;\n            outputTexture[1] = renderTarget.height;\n        }\n\n        outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n        filterUniforms.update();\n\n        // TODO - should prolly use a adaptor...\n        if ((renderer as WebGPURenderer).renderPipes.uniformBatch)\n        {\n            const batchUniforms = (renderer as WebGPURenderer).renderPipes.uniformBatch\n                .getUboResource(filterUniforms);\n\n            this._globalFilterBindGroup.setResource(batchUniforms, 0);\n        }\n        else\n        {\n            this._globalFilterBindGroup.setResource(filterUniforms, 0);\n        }\n\n        // now lets update the output texture...\n\n        // set bind group..\n        this._globalFilterBindGroup.setResource(input.source, 1);\n        this._globalFilterBindGroup.setResource(input.source.style, 2);\n\n        filter.groups[0] = this._globalFilterBindGroup;\n\n        renderer.encoder.draw({\n            geometry: quadGeometry,\n            shader: filter,\n            state: filter._state,\n            topology: 'triangle-list'\n        });\n\n        // WebGPU blit's automatically, but WebGL does not!\n        if (renderer.type === RendererType.WEBGL)\n        {\n            renderer.renderTarget.finishRenderPass();\n        }\n    }\n\n    private _getFilterData(): FilterData\n    {\n        return {\n            skip: false,\n            inputTexture: null,\n            bounds: new Bounds(),\n            container: null,\n            filterEffect: null,\n            blendRequired: false,\n            previousRenderSurface: null,\n        };\n    }\n\n    /**\n     * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n     *\n     * Use `outputMatrix * vTextureCoord` in the shader.\n     * @param outputMatrix - The matrix to output to.\n     * @param {Sprite} sprite - The sprite to map to.\n     * @returns The mapped matrix.\n     */\n    public calculateSpriteMatrix(outputMatrix: Matrix, sprite: Sprite): Matrix\n    {\n        const data = this._activeFilterData;\n\n        const mappedMatrix = outputMatrix.set(\n            data.inputTexture._source.width,\n            0, 0,\n            data.inputTexture._source.height,\n            data.bounds.minX, data.bounds.minY\n        );\n\n        const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n\n        const renderGroup = sprite.renderGroup || sprite.parentRenderGroup;\n\n        if (renderGroup && renderGroup.cacheToLocalTransform)\n        {\n            // get the matrix relative to the render group..\n            worldTransform.prepend(renderGroup.cacheToLocalTransform);\n        }\n\n        worldTransform.invert();\n        mappedMatrix.prepend(worldTransform);\n        mappedMatrix.scale(\n            1.0 / sprite.texture.frame.width,\n            1.0 / sprite.texture.frame.height\n        );\n\n        mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n\n        return mappedMatrix;\n    }\n\n    public destroy?: () => void;\n}\n"],"names":["filterData"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2670, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2676, "column": 0}, "map": {"version":3,"file":"noise.wgsl.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 2682, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2688, "column": 0}, "map": {"version":3,"file":"noise.frag.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 2694, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2700, "column": 0}, "map": {"version":3,"file":"NoiseFilter.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/defaults/noise/NoiseFilter.ts"],"sourcesContent":["import { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { Filter } from '../../Filter';\nimport vertex from '../defaultFilter.vert';\nimport fragment from './noise.frag';\nimport source from './noise.wgsl';\n\nimport type { FilterOptions } from '../../Filter';\n\n/**\n * Options for NoiseFilter\n * @memberof filters\n */\nexport interface NoiseFilterOptions extends FilterOptions\n{\n    /** The amount of noise to apply, this value should be in the range (0, 1]. */\n    noise?: number;\n    /** A seed value to apply to the random noise generation. `Math.random()` is a good value to use. */\n    seed?: number;\n}\n\n/**\n * A Noise effect filter.\n *\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\n * @memberof filters\n * @author Vico @vicocotea\n */\nexport class NoiseFilter extends Filter\n{\n    public static readonly defaultOptions: NoiseFilterOptions = {\n        noise: 0.5,\n    };\n\n    /**\n     * @param options - The options of the noise filter.\n     */\n    constructor(options: NoiseFilterOptions = {})\n    {\n        options = { ...NoiseFilter.defaultOptions, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'noise-filter'\n        });\n\n        const { noise, seed, ...rest } = options;\n\n        super({\n            ...rest,\n            gpuProgram,\n            glProgram,\n            resources: {\n                noiseUniforms: new UniformGroup({\n                    uNoise: { value: 1, type: 'f32' },\n                    uSeed: { value: 1, type: 'f32' },\n                })\n            },\n        });\n\n        this.noise = noise;\n        this.seed = seed ?? Math.random();\n    }\n\n    /**\n     * The amount of noise to apply, this value should be in the range (0, 1].\n     * @default 0.5\n     */\n    get noise(): number\n    {\n        return this.resources.noiseUniforms.uniforms.uNoise;\n    }\n\n    set noise(value: number)\n    {\n        this.resources.noiseUniforms.uniforms.uNoise = value;\n    }\n\n    /** A seed value to apply to the random noise generation. `Math.random()` is a good value to use. */\n    get seed(): number\n    {\n        return this.resources.noiseUniforms.uniforms.uSeed;\n    }\n\n    set seed(value: number)\n    {\n        this.resources.noiseUniforms.uniforms.uSeed = value;\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AA6BO,MAAM,YAAA,GAAN,MAAM,YAAA,iKAAoB,SACjC,CAAA;IAAA;;GAAA,GAQI,WAAA,CAAY,OAA8B,GAAA,CAAA,CAC1C,CAAA;QACI,OAAA,GAAU;YAAE,GAAG,YAAY,CAAA,cAAA;YAAgB,GAAG,OAAQ;QAAA,CAAA,CAAA;QAEhD,MAAA,UAAA,GAAa,yMAAA,CAAW,IAAK,CAAA;YAC/B,MAAQ,EAAA;4MACJ,UAAA;gBACA,UAAY,EAAA,YAAA;YAAA,CAChB;YACA,QAAU,EAAA;4MACN,UAAA;gBACA,UAAY,EAAA,cAAA;YAAA,CAChB;QAAA,CACH,CAAA,CAAA;QAEK,MAAA,SAAA,GAAY,sMAAA,CAAU,IAAK,CAAA;uMAC7B,UAAA;0MACA,UAAA;YACA,IAAM,EAAA,cAAA;QAAA,CACT,CAAA,CAAA;QAED,MAAM,EAAE,KAAA,EAAO,IAAM,EAAA,GAAG,MAAS,GAAA,OAAA,CAAA;QAE3B,KAAA,CAAA;YACF,GAAG,IAAA;YACH,UAAA;YACA,SAAA;YACA,SAAW,EAAA;gBACP,aAAA,EAAe,qMAAI,eAAa,CAAA;oBAC5B,MAAQ,EAAA;wBAAE,KAAO,EAAA,CAAA;wBAAG,MAAM,KAAM;oBAAA,CAAA;oBAChC,KAAO,EAAA;wBAAE,KAAO,EAAA,CAAA;wBAAG,MAAM,KAAM;oBAAA,CAAA;gBAAA,CAClC,CAAA;YAAA,CACL;QAAA,CACH,CAAA,CAAA;QAED,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;QACR,IAAA,CAAA,IAAA,GAAO,IAAQ,IAAA,IAAA,CAAK,MAAO,EAAA,CAAA;IAAA,CACpC;IAAA;;;GAAA,GAMA,IAAI,KACJ,GAAA;QACW,OAAA,IAAA,CAAK,SAAU,CAAA,aAAA,CAAc,QAAS,CAAA,MAAA,CAAA;IAAA,CACjD;IAEA,IAAI,MAAM,KACV,EAAA;QACS,IAAA,CAAA,SAAA,CAAU,aAAc,CAAA,QAAA,CAAS,MAAS,GAAA,KAAA,CAAA;IAAA,CACnD;IAAA,kGAAA,GAGA,IAAI,IACJ,GAAA;QACW,OAAA,IAAA,CAAK,SAAU,CAAA,aAAA,CAAc,QAAS,CAAA,KAAA,CAAA;IAAA,CACjD;IAEA,IAAI,KAAK,KACT,EAAA;QACS,IAAA,CAAA,SAAA,CAAU,aAAc,CAAA,QAAA,CAAS,KAAQ,GAAA,KAAA,CAAA;IAAA,CAClD;AACJ,CAAA,CAAA;AAxEa,YAAA,CAEc,cAAqC,GAAA;IACxD,KAAO,EAAA,GAAA;AACX,CAAA,CAAA;AAJG,IAAM,WAAN,GAAA","ignoreList":[0]}},
    {"offset": {"line": 2784, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2790, "column": 0}, "map": {"version":3,"file":"hsl.wgsl.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 2796, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}