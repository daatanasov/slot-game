{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/slot-game/frontend/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,sMAAM,UAAU,CAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,yDACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,sMAAM,UAAU,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,sMAAM,UAAU,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,6CAA6C;QAC1D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,sMAAM,UAAU,CAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,sMAAM,UAAU,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,sMAAM,UAAU,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG"}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/slot-game/frontend/src/app/custom-hooks/useSocket.ts"],"sourcesContent":["'use client'\r\nimport { useState, useEffect } from 'react'\r\nimport io, { Socket } from 'socket.io-client'\r\n\r\ninterface GameState {\r\n    balance: number\r\n    minBet: number\r\n    maxBet: number\r\n}\r\n\r\ninterface SpinResult {\r\n    success: boolean\r\n    reels?: string[]\r\n    isWin?: boolean\r\n    winnings: number\r\n    message?: string\r\n    grid: string[][]\r\n    winningRows: number[]\r\n    balance: number\r\n}\r\n\r\nexport const useSocket = (userId: string) => {\r\n    const [socket, setSocket] = useState<Socket | null>(null)\r\n    const [gameState, setGameState] = useState<GameState | null>(null)\r\n    const [spinResult, setSpinResult] = useState<SpinResult>()\r\n    const [isConnected, setIsConnected] = useState(false)\r\n\r\n    useEffect(() => {\r\n        // Create socket connection\r\n        const newSocket = io('http://localhost:8080', {\r\n            query: { userId },\r\n        })\r\n\r\n        // Connection event handlers\r\n        newSocket.on('connect', () => {\r\n            setIsConnected(true)\r\n            console.log('Connected to WebSocket server')\r\n\r\n            // Join the slot game\r\n            newSocket.emit('join-slot-game', { userId })\r\n        })\r\n\r\n        newSocket.on('disconnect', () => {\r\n            setIsConnected(false)\r\n            console.log('Disconnected from WebSocket server')\r\n        })\r\n\r\n        // Game-specific event listeners\r\n        newSocket.on('game-joined', (response) => {\r\n            if (response.success) {\r\n                setGameState(response.gameState)\r\n            } else {\r\n                console.error('Failed to join game:', response.message)\r\n            }\r\n        })\r\n\r\n        newSocket.on('spin-result', (result) => {\r\n            setSpinResult(result)\r\n        })\r\n\r\n        // Set the socket state\r\n        setSocket(newSocket)\r\n\r\n        // Cleanup on component unmount\r\n        return () => {\r\n            newSocket.disconnect()\r\n        }\r\n    }, [userId])\r\n\r\n    const spin = (betAmount: number, balance: number, spinCount: number) => {\r\n        if (socket && isConnected) {\r\n            socket.emit('spin', betAmount, balance, spinCount)\r\n        }\r\n    }\r\n\r\n    return {\r\n        socket,\r\n        gameState,\r\n        spinResult,\r\n        isConnected,\r\n        spin,\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;AACA;AACA;AAAA;AAFA;;;AAqBO,MAAM,YAAY,CAAC;IACtB,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IACpD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAoB;IAC7D,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD;IAC3C,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE/C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,2BAA2B;QAC3B,MAAM,YAAY,CAAA,GAAA,wLAAA,CAAA,UAAE,AAAD,EAAE,yBAAyB;YAC1C,OAAO;gBAAE;YAAO;QACpB;QAEA,4BAA4B;QAC5B,UAAU,EAAE,CAAC,WAAW;YACpB,eAAe;YACf,QAAQ,GAAG,CAAC;YAEZ,qBAAqB;YACrB,UAAU,IAAI,CAAC,kBAAkB;gBAAE;YAAO;QAC9C;QAEA,UAAU,EAAE,CAAC,cAAc;YACvB,eAAe;YACf,QAAQ,GAAG,CAAC;QAChB;QAEA,gCAAgC;QAChC,UAAU,EAAE,CAAC,eAAe,CAAC;YACzB,IAAI,SAAS,OAAO,EAAE;gBAClB,aAAa,SAAS,SAAS;YACnC,OAAO;gBACH,QAAQ,KAAK,CAAC,wBAAwB,SAAS,OAAO;YAC1D;QACJ;QAEA,UAAU,EAAE,CAAC,eAAe,CAAC;YACzB,cAAc;QAClB;QAEA,uBAAuB;QACvB,UAAU;QAEV,+BAA+B;QAC/B,OAAO;YACH,UAAU,UAAU;QACxB;IACJ,GAAG;QAAC;KAAO;IAEX,MAAM,OAAO,CAAC,WAAmB,SAAiB;QAC9C,IAAI,UAAU,aAAa;YACvB,OAAO,IAAI,CAAC,QAAQ,WAAW,SAAS;QAC5C;IACJ;IAEA,OAAO;QACH;QACA;QACA;QACA;QACA;IACJ;AACJ"}},
    {"offset": {"line": 275, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 281, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/slot-game/frontend/src/app/components/WinOverlay.tsx"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport { Trophy, Star, Coins } from 'lucide-react'\r\n\r\ninterface WinOverlayProps {\r\n    isVisible: boolean\r\n    winAmount: number\r\n    onClose: () => void\r\n}\r\n\r\nconst WinOverlay: React.FC<WinOverlayProps> = ({\r\n    isVisible,\r\n    winAmount,\r\n    onClose,\r\n}) => {\r\n    useEffect(() => {\r\n        let timeoutId: NodeJS.Timeout\r\n        if (isVisible) {\r\n            timeoutId = setTimeout(onClose, 5000) // Auto-close after 5 seconds\r\n        }\r\n        return () => {\r\n            if (timeoutId) clearTimeout(timeoutId)\r\n        }\r\n    }, [isVisible, onClose])\r\n\r\n    if (!isVisible) return null\r\n\r\n    return (\r\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\r\n            <div className=\"overlay-animation bg-gradient-to-br from-yellow-400 to-orange-500 p-8 rounded-2xl shadow-2xl text-center relative overflow-hidden\">\r\n                {/* Floating Stars */}\r\n                <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\r\n                    {[...Array(20)].map((_, i) => (\r\n                        <div\r\n                            key={i}\r\n                            className=\"floating-star text-yellow-200 opacity-50\"\r\n                        >\r\n                            <Star size={20} fill=\"currentColor\" />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                {/* Content */}\r\n                <div className=\"relative z-10 flex flex-col items-center space-y-4\">\r\n                    <div className=\"trophy-animation\">\r\n                        <Trophy\r\n                            size={80}\r\n                            className=\"text-white\"\r\n                            fill=\"currentColor\"\r\n                        />\r\n                    </div>\r\n\r\n                    <h2 className=\"text-3xl font-bold text-white mb-2\">\r\n                        Congratulations!\r\n                    </h2>\r\n\r\n                    <div className=\"flex items-center space-x-2 bg-white bg-opacity-20 px-6 py-3 rounded-xl\">\r\n                        <Coins size={32} className=\"text-yellow-200\" />\r\n                        <span className=\"text-2xl font-bold text-white\">\r\n                            +${winAmount.toFixed(2)}\r\n                        </span>\r\n                    </div>\r\n\r\n                    <button\r\n                        onClick={onClose}\r\n                        className=\"mt-4 bg-white text-orange-500 px-6 py-2 rounded-full hover:bg-opacity-90 transition\"\r\n                    >\r\n                        Continue\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WinOverlay\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;AAAA;;;;AAQA,MAAM,aAAwC,CAAC,EAC3C,SAAS,EACT,SAAS,EACT,OAAO,EACV;IACG,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,IAAI;QACJ,IAAI,WAAW;YACX,YAAY,WAAW,SAAS,MAAM,6BAA6B;;QACvE;QACA,OAAO;YACH,IAAI,WAAW,aAAa;QAChC;IACJ,GAAG;QAAC;QAAW;KAAQ;IAEvB,IAAI,CAAC,WAAW,OAAO;IAEvB,qBACI,8OAAC;QAAI,WAAU;kBACX,cAAA,8OAAC;YAAI,WAAU;;8BAEX,8OAAC;oBAAI,WAAU;8BACV;2BAAI,MAAM;qBAAI,CAAC,GAAG,CAAC,CAAC,GAAG,kBACpB,8OAAC;4BAEG,WAAU;sCAEV,cAAA,8OAAC,kMAAA,CAAA,OAAI;gCAAC,MAAM;gCAAI,MAAK;;;;;;2BAHhB;;;;;;;;;;8BASjB,8OAAC;oBAAI,WAAU;;sCACX,8OAAC;4BAAI,WAAU;sCACX,cAAA,8OAAC,sMAAA,CAAA,SAAM;gCACH,MAAM;gCACN,WAAU;gCACV,MAAK;;;;;;;;;;;sCAIb,8OAAC;4BAAG,WAAU;sCAAqC;;;;;;sCAInD,8OAAC;4BAAI,WAAU;;8CACX,8OAAC,oMAAA,CAAA,QAAK;oCAAC,MAAM;oCAAI,WAAU;;;;;;8CAC3B,8OAAC;oCAAK,WAAU;;wCAAgC;wCACzC,UAAU,OAAO,CAAC;;;;;;;;;;;;;sCAI7B,8OAAC;4BACG,SAAS;4BACT,WAAU;sCACb;;;;;;;;;;;;;;;;;;;;;;;AAOrB;uCAEe"}},
    {"offset": {"line": 419, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 425, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/slot-game/frontend/src/app/components/ReelsRenderer3.tsx"],"sourcesContent":["import React, { useRef, useCallback, useEffect, useState } from 'react'\r\nimport {\r\n    Application,\r\n    Assets,\r\n    Container,\r\n    Sprite,\r\n    Texture,\r\n    BlurFilter,\r\n} from 'pixi.js'\r\nimport * as PIXI from 'pixi.js'\r\n\r\ninterface ReelsRendererProps {\r\n    grid?: string[][]\r\n    winningRows?: number[]\r\n    spinning?: boolean\r\n    onSpinComplete?: () => void\r\n}\r\n\r\nconst ReelsRenderer3: React.FC<ReelsRendererProps> = ({\r\n    grid = [\r\n        ['', '', '', '', ''],\r\n        ['', '', '', '', ''],\r\n        ['', '', '', '', ''],\r\n    ],\r\n    winningRows = [],\r\n    spinning = false,\r\n    onSpinComplete,\r\n}) => {\r\n    const canvasRef = useRef<HTMLCanvasElement | null>(null)\r\n    const [app, setApp] = useState<Application | null>(null)\r\n    const [reels, setReels] = useState<any[]>([])\r\n\r\n    // Sprite mapping based on your existing SlotIcon component\r\n    const spriteMap: Record<string, { x: number; y: number }> = {\r\n        j: { x: 0, y: -8 },\r\n        a: { x: -160, y: -8 },\r\n        d: { x: -320, y: -8 },\r\n        k: { x: 0, y: -165 },\r\n        w: { x: -160, y: -165 },\r\n        q: { x: -320, y: -165 },\r\n        empty: { x: 0, y: -100 },\r\n    }\r\n\r\n    const REEL_WIDTH = 160\r\n    const SYMBOL_SIZE = 160\r\n    const NUM_REELS = 5\r\n    const NUM_ROWS = 3\r\n\r\n    const initPixi = useCallback(async () => {\r\n        const canvas = canvasRef.current\r\n        if (!canvas) return null\r\n\r\n        // Create PIXI application\r\n        const pixiApp = new Application()\r\n        await pixiApp.init({\r\n            width: REEL_WIDTH * NUM_REELS,\r\n            height: SYMBOL_SIZE * NUM_ROWS,\r\n            background: 'transparent',\r\n            canvas,\r\n        })\r\n\r\n        // Load sprite sheet\r\n        const spriteTexture = await Assets.load('/images/sprites-reels.webp')\r\n\r\n        // Create reel container\r\n        const reelContainer = new Container()\r\n        pixiApp.stage.addChild(reelContainer)\r\n\r\n        // Build reels\r\n        const reelsArray = []\r\n        for (let i = 0; i < NUM_REELS; i++) {\r\n            const rc = new Container()\r\n            rc.x = i * REEL_WIDTH\r\n            reelContainer.addChild(rc)\r\n\r\n            const reel = {\r\n                container: rc,\r\n                symbols: [] as Sprite[],\r\n                position: 0,\r\n                previousPosition: 0,\r\n                blur: new BlurFilter(),\r\n            }\r\n\r\n            reel.blur.blurX = 0\r\n            reel.blur.blurY = 0\r\n            rc.filters = [reel.blur]\r\n\r\n            // Create symbols for this reel\r\n            for (let j = 0; j < NUM_ROWS + 1; j++) {\r\n                const symbolKey = grid[j % NUM_ROWS][i] || 'empty'\r\n                const { x, y } = spriteMap[symbolKey]\r\n\r\n                const frame = new PIXI.Rectangle(\r\n                    -x,\r\n                    -y,\r\n                    SYMBOL_SIZE,\r\n                    SYMBOL_SIZE\r\n                )\r\n                const symbol = new Sprite(new Texture(spriteTexture))\r\n\r\n                symbol.width = SYMBOL_SIZE\r\n                symbol.height = SYMBOL_SIZE\r\n                symbol.y = j * SYMBOL_SIZE\r\n                reel.symbols.push(symbol)\r\n                rc.addChild(symbol)\r\n            }\r\n\r\n            reelsArray.push(reel)\r\n        }\r\n\r\n        setApp(pixiApp)\r\n        setReels(reelsArray)\r\n\r\n        return pixiApp\r\n    }, [grid])\r\n\r\n    // Spin animation\r\n    const startSpin = useCallback(() => {\r\n        if (!app || reels.length === 0) return\r\n\r\n        reels.forEach((reel, i) => {\r\n            const target = reel.position + 10 + i * 5\r\n            const time = 2500 + i * 600\r\n\r\n            // Simple animation logic\r\n            const startTime = Date.now()\r\n            const animate = () => {\r\n                const now = Date.now()\r\n                const phase = Math.min(1, (now - startTime) / time)\r\n\r\n                // Update reel position\r\n                reel.position += 0.5 * (1 - phase)\r\n\r\n                // Blur effect\r\n                reel.blur.blurY = (reel.position - reel.previousPosition) * 8\r\n                reel.previousPosition = reel.position\r\n\r\n                // Update symbol positions\r\n                reel.symbols.forEach((s: Sprite, j: number) => {\r\n                    s.y =\r\n                        ((reel.position + j) % reel.symbols.length) *\r\n                            SYMBOL_SIZE -\r\n                        SYMBOL_SIZE\r\n                })\r\n\r\n                if (phase < 1) {\r\n                    requestAnimationFrame(animate)\r\n                } else {\r\n                    // Spin complete\r\n                    onSpinComplete?.()\r\n                }\r\n            }\r\n\r\n            requestAnimationFrame(animate)\r\n        })\r\n    }, [app, reels, onSpinComplete])\r\n\r\n    // Initialize Pixi and handle spinning\r\n    useEffect(() => {\r\n        let pixiApp: Application | null = null\r\n\r\n        // Initialize PIXI app\r\n        initPixi().then((initializedApp) => {\r\n            pixiApp = initializedApp\r\n        })\r\n\r\n        // Cleanup function\r\n        return () => {\r\n            if (pixiApp) {\r\n                pixiApp.stop()\r\n                pixiApp.destroy(true, { children: true })\r\n            }\r\n        }\r\n    }, [initPixi])\r\n\r\n    // Trigger spin when spinning prop changes\r\n    useEffect(() => {\r\n        if (spinning) {\r\n            startSpin()\r\n        }\r\n    }, [spinning, startSpin])\r\n\r\n    return <canvas ref={canvasRef} />\r\n}\r\n\r\nexport default ReelsRenderer3\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 628, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 634, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/slot-game/frontend/src/app/pages/games/SlotGame.tsx"],"sourcesContent":["'use client'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Card, CardContent } from '@/components/ui/card'\r\nimport { Button } from '@/components/ui/button'\r\nimport { useSocket } from '../../custom-hooks/useSocket'\r\nimport WinOverlay from '@/app/components/WinOverlay'\r\n\r\nimport ReelsRenderer from '@/app/components/ReelsRenderer'\r\n\r\nconst SlotGame = () => {\r\n    const userId = 'user_123'\r\n    const { gameState, spinResult, isConnected, spin } = useSocket(userId)\r\n    const [grid, setGrid] = useState<string[][]>([\r\n        ['', '', '', '', ''],\r\n        ['', '', '', '', ''],\r\n        ['', '', '', '', ''],\r\n    ])\r\n    const [spinning, setSpinning] = useState<boolean>(false)\r\n    const [balance, setBalance] = useState<number>(1000)\r\n    const [betAmount, setBetAmount] = useState<number>(10)\r\n    const [lastWinnings, setLastWinnings] = useState<number>(0)\r\n    const [winning, setWinning] = useState<number>(0)\r\n    const [winningRows, setWinningRows] = useState<number[]>([])\r\n    const [showWinOverlay, setShowWinOverlay] = useState<boolean>(false)\r\n    const [spinCount, setSpinCount] = useState(0)\r\n\r\n    useEffect(() => {\r\n        if (spinResult && spinResult.grid != grid) {\r\n            setGrid(spinResult.grid)\r\n            setWinning(spinResult.winnings)\r\n            setWinningRows(spinResult.winningRows)\r\n            setBalance(spinResult.balance)\r\n            setLastWinnings(spinResult.winnings)\r\n            if (spinResult.winnings > 0) {\r\n                setShowWinOverlay(true)\r\n            }\r\n        }\r\n    }, [spinResult])\r\n\r\n    const handleSpin = () => {\r\n        setSpinCount((prevCount) => prevCount + 1)\r\n        if (isConnected && gameState) {\r\n            if (betAmount < gameState.minBet || betAmount > gameState.maxBet) {\r\n                alert(\r\n                    `Bet must be between ${gameState.minBet} and ${gameState.maxBet}`\r\n                )\r\n                return\r\n            }\r\n            setSpinning(true)\r\n            spin(betAmount, balance, spinCount)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <WinOverlay\r\n                isVisible={showWinOverlay}\r\n                winAmount={lastWinnings}\r\n                onClose={() => setShowWinOverlay(false)}\r\n            />\r\n\r\n            <div className=\"min-h-screen bg-gradient-to-br from-[#1a1a2e] via-[#16213e] to-[#0f3460] flex items-center justify-center p-4\">\r\n                <Card className=\"w-full max-w-4xl bg-[#0f3460] border-4 border-[#e94560] shadow-2xl background-wrapper bg-top bg-cover bg-no-repeat rounded-lg\">\r\n                    <CardContent className=\"p-4 sm:p-6\">\r\n                        <ReelsRenderer\r\n                            grid={grid}\r\n                            winningRows={winningRows}\r\n                            spinning={spinning}\r\n                            onSpinComplete={() => setSpinning(false)}\r\n                        />\r\n\r\n                        <div className=\"mt-4 flex flex-col sm:flex-row justify-between items-center space-y-4 sm:space-y-0\">\r\n                            <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4 items-center w-full sm:w-auto\">\r\n                                <Button\r\n                                    variant=\"destructive\"\r\n                                    className=\"bg-[#e94560] hover:bg-[#ff6b81] text-white font-bold py-2 sm:py-3 px-4 sm:px-6 rounded-lg w-full sm:w-auto\"\r\n                                    onClick={handleSpin}\r\n                                    disabled={spinning}\r\n                                >\r\n                                    SPIN\r\n                                </Button>\r\n                                {/* Rest of your betting controls */}\r\n                            </div>\r\n                        </div>\r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SlotGame\r\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;AACA;AAEA;AAPA;;;;;;;;AASA,MAAM,WAAW;IACb,MAAM,SAAS;IACf,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,0IAAA,CAAA,YAAS,AAAD,EAAE;IAC/D,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAc;QACzC;YAAC;YAAI;YAAI;YAAI;YAAI;SAAG;QACpB;YAAC;YAAI;YAAI;YAAI;YAAI;SAAG;QACpB;YAAC;YAAI;YAAI;YAAI;YAAI;SAAG;KACvB;IACD,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IAClD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IAC/C,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IACnD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IACzD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IAC/C,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IAC3D,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IAC9D,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,IAAI,cAAc,WAAW,IAAI,IAAI,MAAM;YACvC,QAAQ,WAAW,IAAI;YACvB,WAAW,WAAW,QAAQ;YAC9B,eAAe,WAAW,WAAW;YACrC,WAAW,WAAW,OAAO;YAC7B,gBAAgB,WAAW,QAAQ;YACnC,IAAI,WAAW,QAAQ,GAAG,GAAG;gBACzB,kBAAkB;YACtB;QACJ;IACJ,GAAG;QAAC;KAAW;IAEf,MAAM,aAAa;QACf,aAAa,CAAC,YAAc,YAAY;QACxC,IAAI,eAAe,WAAW;YAC1B,IAAI,YAAY,UAAU,MAAM,IAAI,YAAY,UAAU,MAAM,EAAE;gBAC9D,MACI,CAAC,oBAAoB,EAAE,UAAU,MAAM,CAAC,KAAK,EAAE,UAAU,MAAM,EAAE;gBAErE;YACJ;YACA,YAAY;YACZ,KAAK,WAAW,SAAS;QAC7B;IACJ;IAEA,qBACI;;0BACI,8OAAC,uIAAA,CAAA,UAAU;gBACP,WAAW;gBACX,WAAW;gBACX,SAAS,IAAM,kBAAkB;;;;;;0BAGrC,8OAAC;gBAAI,WAAU;0BACX,cAAA,8OAAC,gIAAA,CAAA,OAAI;oBAAC,WAAU;8BACZ,cAAA,8OAAC,gIAAA,CAAA,cAAW;wBAAC,WAAU;;0CACnB,8OAAC,0IAAA,CAAA,UAAa;gCACV,MAAM;gCACN,aAAa;gCACb,UAAU;gCACV,gBAAgB,IAAM,YAAY;;;;;;0CAGtC,8OAAC;gCAAI,WAAU;0CACX,cAAA,8OAAC;oCAAI,WAAU;8CACX,cAAA,8OAAC,kIAAA,CAAA,SAAM;wCACH,SAAQ;wCACR,WAAU;wCACV,SAAS;wCACT,UAAU;kDACb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWjC;uCAEe"}},
    {"offset": {"line": 784, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}