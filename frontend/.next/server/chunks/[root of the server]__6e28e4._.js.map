{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/slot-game/frontend/src/app/api/auth/signup/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\r\nimport bcrypt from 'bcrypt'\r\n\r\ntype User = {\r\n    id: number\r\n    username: string\r\n    password: string // Hashed password\r\n    balance: number\r\n    email: string\r\n}\r\n\r\n// Mock database\r\nlet mockDatabase: User[] = []\r\n\r\nexport async function POST(req: Request) {\r\n    const { email, password } = await req.json()\r\n\r\n    // Check if email is already in use\r\n    if (mockDatabase.find((u) => u.email === email)) {\r\n        return NextResponse.json(\r\n            { error: 'Email already in use' },\r\n            { status: 400 }\r\n        )\r\n    }\r\n\r\n    // Generate hashed password\r\n    const hashedPassword = await bcrypt.hash(password, 10)\r\n\r\n    // Create the new user object\r\n    const newUser: User = {\r\n        id: mockDatabase.length + 1, // Auto-increment ID\r\n        username: email.split('@')[0], // Use part of the email as the username\r\n        password: hashedPassword, // Hashed password\r\n        balance: 0, // Default balance\r\n        email, // Email from the request\r\n    }\r\n\r\n    // Add the new user to the database\r\n    mockDatabase.push(newUser)\r\n\r\n    return NextResponse.json({ message: 'Signup successful' })\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAUA,gBAAgB;AAChB,IAAI,eAAuB,EAAE;AAEtB,eAAe,KAAK,GAAY;IACnC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;IAE1C,mCAAmC;IACnC,IAAI,aAAa,IAAI,CAAC,CAAC,IAAM,EAAE,KAAK,KAAK,QAAQ;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,OAAO;QAAuB,GAChC;YAAE,QAAQ;QAAI;IAEtB;IAEA,2BAA2B;IAC3B,MAAM,iBAAiB,MAAM,+FAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;IAEnD,6BAA6B;IAC7B,MAAM,UAAgB;QAClB,IAAI,aAAa,MAAM,GAAG;QAC1B,UAAU,MAAM,KAAK,CAAC,IAAI,CAAC,EAAE;QAC7B,UAAU;QACV,SAAS;QACT;IACJ;IAEA,mCAAmC;IACnC,aAAa,IAAI,CAAC;IAElB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;IAAoB;AAC5D"}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}