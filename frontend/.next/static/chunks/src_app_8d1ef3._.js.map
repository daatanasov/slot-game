{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/slot-game/frontend/src/app/pages/games/EditedSlotGame.tsx"],"sourcesContent":["'use client'\r\n\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Card, CardContent } from '@/components/ui/card'\r\nimport { Button } from '@/components/ui/button'\r\nimport { useSocket } from '../../custom-hooks/useSocket'\r\n\r\nconst SlotGame = () => {\r\n    const userId = 'user_123'\r\n    const { gameState, spinResult, isConnected, spin } = useSocket(userId)\r\n\r\n    const [grid, setGrid] = useState<string[][]>([\r\n        ['', '', '', '', ''],\r\n        ['', '', '', '', ''],\r\n        ['', '', '', '', ''],\r\n    ])\r\n    const [spinning, setSpinning] = useState<boolean>(false)\r\n    const [balance, setBalance] = useState<number>(1000)\r\n    const [betAmount, setBetAmount] = useState<number>(10)\r\n    const [lastWinnings, setLastWinnings] = useState<number>(0)\r\n    const [activeColumns, setActiveColumns] = useState<number>(-1)\r\n    const [spinningGridData, setSpinningGridData] = useState<string[][]>([])\r\n\r\n    const symbolOptions = ['🍒', '🍇', '🍊', '💎', '🍀', '🍋']\r\n\r\n    // Helper to generate a grid of random symbols\r\n    const generateRandomGrid = () => {\r\n        return Array.from({ length: 3 }, () =>\r\n            Array.from(\r\n                { length: 5 },\r\n                () =>\r\n                    symbolOptions[\r\n                        Math.floor(Math.random() * symbolOptions.length)\r\n                    ]\r\n            )\r\n        )\r\n    }\r\n\r\n    // Start spinning animation\r\n    useEffect(() => {\r\n        console.log(spinning)\r\n        if (spinResult) {\r\n            console.log(spinResult)\r\n            if (spinning) {\r\n                setSpinningGridData(generateRandomGrid()) // Initialize spinning grid\r\n                let column = 0\r\n                console.log(spinning)\r\n                console.log('salam')\r\n                const interval = setInterval(() => {\r\n                    if (column < grid[0].length) {\r\n                        setActiveColumns(column)\r\n                        column++\r\n                    } else {\r\n                        clearInterval(interval)\r\n                        setSpinning(false)\r\n                        setGrid(spinResult.grid) // Final grid from server\r\n                    }\r\n                }, 500) // 500ms delay between column stops\r\n            }\r\n        }\r\n    }, [spinning])\r\n\r\n    const renderSymbol = (symbol: string) => {\r\n        const symbolMap: { [key: string]: string } = {\r\n            '🍒': '🍒',\r\n            '🍋': '🍋',\r\n            '🍇': '🍇',\r\n            '🍊': '🍊',\r\n            '💎': '💎',\r\n            '🍀': '🍀',\r\n            '': '❓',\r\n        }\r\n        return symbolMap[symbol]\r\n    }\r\n\r\n    const handleSpin = () => {\r\n        if (isConnected && gameState) {\r\n            if (betAmount < gameState.minBet || betAmount > gameState.maxBet) {\r\n                alert(\r\n                    `Bet must be between ${gameState.minBet} and ${gameState.maxBet}`\r\n                )\r\n                return\r\n            }\r\n            setSpinning(true)\r\n            spin(betAmount)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"min-h-screen bg-gradient-to-br from-[#1a1a2e] via-[#16213e] to-[#0f3460] flex items-center justify-center p-4\">\r\n            <Card className=\"w-full max-w-4xl bg-[#0f3460] border-4 border-[#e94560] shadow-2xl\">\r\n                <CardContent className=\"p-6\">\r\n                    <div className=\"grid grid-cols-5 gap-4 mb-6\">\r\n                        {spinning\r\n                            ? spinningGridData.map((row, rowIndex) =>\r\n                                  row.map((symbol, colIndex) => (\r\n                                      <div\r\n                                          key={`${rowIndex}-${colIndex}`}\r\n                                          className={`bg-[#1a1a2e] border-2 border-[#e94560] rounded-lg h-24 flex items-center justify-center text-white text-4xl font-bold ${\r\n                                              colIndex <= activeColumns\r\n                                                  ? 'opacity-100'\r\n                                                  : 'opacity-50'\r\n                                          }`}\r\n                                      >\r\n                                          {renderSymbol(symbol)}\r\n                                      </div>\r\n                                  ))\r\n                              )\r\n                            : grid.map((row, rowIndex) =>\r\n                                  row.map((cell, colIndex) => (\r\n                                      <div\r\n                                          key={`${rowIndex}-${colIndex}`}\r\n                                          className=\"bg-[#1a1a2e] border-2 border-[#e94560] rounded-lg h-24 flex items-center justify-center text-white text-4xl font-bold\"\r\n                                      >\r\n                                          {renderSymbol(cell)}\r\n                                      </div>\r\n                                  ))\r\n                              )}\r\n                    </div>\r\n\r\n                    <div className=\"flex justify-between items-center\">\r\n                        <div className=\"flex space-x-4 items-center\">\r\n                            <Button\r\n                                variant=\"destructive\"\r\n                                className=\"bg-[#e94560] hover:bg-[#ff6b81] text-white font-bold py-3 px-6 rounded-lg\"\r\n                                onClick={handleSpin}\r\n                                disabled={spinning}\r\n                            >\r\n                                SPIN\r\n                            </Button>\r\n                            <div className=\"flex items-center space-x-2\">\r\n                                <span className=\"text-white\">Bet:</span>\r\n                                <input\r\n                                    type=\"number\"\r\n                                    value={betAmount}\r\n                                    onChange={(e) =>\r\n                                        setBetAmount(Number(e.target.value))\r\n                                    }\r\n                                    min=\"1\"\r\n                                    max={balance}\r\n                                    className=\"w-20 p-2 rounded bg-[#1a1a2e] text-white\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"text-white text-xl flex items-center space-x-4\">\r\n                            <div>\r\n                                <span>Balance: </span>\r\n                                <span className=\"font-bold text-[#e94560]\">\r\n                                    ${balance.toFixed(2)}\r\n                                </span>\r\n                            </div>\r\n                            <div>\r\n                                <span>Last Winnings: </span>\r\n                                <span className=\"font-bold text-green-500\">\r\n                                    ${lastWinnings.toFixed(2)}\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SlotGame\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 302, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}