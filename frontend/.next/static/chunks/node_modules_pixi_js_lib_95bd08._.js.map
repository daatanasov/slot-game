{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"ResizePlugin.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/app/ResizePlugin.ts"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\nimport type { Renderer } from '../rendering/renderers/types';\n\ntype ResizeableRenderer = Pick<Renderer, 'resize'>;\n\n/**\n * Application options for the {@link app.ResizePlugin}.\n * @memberof app\n * @property {Window|HTMLElement} [resizeTo=window] - Element to automatically resize the renderer to.\n */\nexport interface ResizePluginOptions\n{\n    /**\n     * Element to automatically resize the renderer to.\n     * @memberof app.ApplicationOptions\n     */\n    resizeTo?: Window | HTMLElement;\n}\n\n/**\n * Middleware for Application's resize functionality.\n *\n * Adds the following methods to {@link app.Application}:\n * * {@link app.Application#resizeTo}\n * * {@link app.Application#resize}\n * * {@link app.Application#queueResize}\n * * {@link app.Application#cancelResize}\n * @example\n * import { extensions, ResizePlugin } from 'pixi.js';\n *\n * extensions.add(ResizePlugin);\n * @memberof app\n */\nexport class ResizePlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static resizeTo: Window | HTMLElement;\n    public static resize: () => void;\n    public static renderer: ResizeableRenderer;\n    public static queueResize: () => void;\n    public static render: () => void;\n    private static _resizeId: number;\n    private static _resizeTo: Window | HTMLElement;\n    private static _cancelResize: () => void;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options: ResizePluginOptions): void\n    {\n        Object.defineProperty(this, 'resizeTo',\n            /**\n             * The HTML element or window to automatically resize the\n             * renderer's view element to match width and height.\n             * @member {Window|HTMLElement}\n             * @name resizeTo\n             * @memberof app.Application#\n             */\n            {\n                set(dom: Window | HTMLElement)\n                {\n                    globalThis.removeEventListener('resize', this.queueResize);\n                    this._resizeTo = dom;\n                    if (dom)\n                    {\n                        globalThis.addEventListener('resize', this.queueResize);\n                        this.resize();\n                    }\n                },\n                get()\n                {\n                    return this._resizeTo;\n                },\n            });\n\n        /**\n         * Resize is throttled, so it's safe to call this multiple times per frame and it'll\n         * only be called once.\n         * @memberof app.Application#\n         * @method queueResize\n         * @private\n         */\n        this.queueResize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            this._cancelResize();\n\n            // // Throttle resize events per raf\n            this._resizeId = requestAnimationFrame(() => this.resize());\n        };\n\n        /**\n         * Cancel the resize queue.\n         * @memberof app.Application#\n         * @method cancelResize\n         * @private\n         */\n        this._cancelResize = (): void =>\n        {\n            if (this._resizeId)\n            {\n                cancelAnimationFrame(this._resizeId);\n                this._resizeId = null;\n            }\n        };\n\n        /**\n         * Execute an immediate resize on the renderer, this is not\n         * throttled and can be expensive to call many times in a row.\n         * Will resize only if `resizeTo` property is set.\n         * @memberof app.Application#\n         * @method resize\n         */\n        this.resize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            // clear queue resize\n            this._cancelResize();\n\n            let width: number;\n            let height: number;\n\n            // Resize to the window\n            if (this._resizeTo === globalThis.window)\n            {\n                width = globalThis.innerWidth;\n                height = globalThis.innerHeight;\n            }\n            // Resize to other HTML entities\n            else\n            {\n                const { clientWidth, clientHeight } = this._resizeTo as HTMLElement;\n\n                width = clientWidth;\n                height = clientHeight;\n            }\n\n            this.renderer.resize(width, height);\n            this.render();\n        };\n\n        // On resize\n        this._resizeId = null;\n        this._resizeTo = null;\n        this.resizeTo = options.resizeTo || null;\n    }\n\n    /**\n     * Clean up the ticker, scoped to application\n     * @static\n     * @private\n     */\n    public static destroy(): void\n    {\n        globalThis.removeEventListener('resize', this.queueResize);\n        this._cancelResize();\n        this._cancelResize = null;\n        this.queueResize = null;\n        this.resizeTo = null;\n        this.resize = null;\n    }\n}\n"],"names":[],"mappings":";;;;;;AAmCO,MAAM,YACb,CAAA;IAAA;;;;;GAAA,GAmBI,OAAc,KAAK,OACnB,EAAA;QACW,MAAA,CAAA,cAAA,CAAe,IAAA,EAAM,UAAA,EAAA;;;;;;OAAA,GAQxB;YACI,KAAI,GACJ,EAAA;gBACe,UAAA,CAAA,mBAAA,CAAoB,QAAU,EAAA,IAAA,CAAK,WAAW,CAAA,CAAA;gBACzD,IAAA,CAAK,SAAY,GAAA,GAAA,CAAA;gBACjB,IAAI,GACJ,EAAA;oBACe,UAAA,CAAA,gBAAA,CAAiB,QAAU,EAAA,IAAA,CAAK,WAAW,CAAA,CAAA;oBACtD,IAAA,CAAK,MAAO,EAAA,CAAA;gBAAA,CAChB;YAAA,CACJ;YACA,GACA,GAAA;gBACI,OAAO,IAAK,CAAA,SAAA,CAAA;YAAA,CAChB;QAAA,CACJ;QASJ,IAAA,CAAK,WAAA,GAAc,MACnB;YACQ,IAAA,CAAC,IAAA,CAAK,SACV,EAAA;gBACI,OAAA;YAAA,CACJ;YAEA,IAAA,CAAK,aAAc,EAAA,CAAA;YAGnB,IAAA,CAAK,SAAY,GAAA,qBAAA,CAAsB,IAAM,IAAA,CAAK,MAAA,EAAQ,CAAA,CAAA;QAAA,CAC9D,CAAA;QAQA,IAAA,CAAK,aAAA,GAAgB,MACrB;YACI,IAAI,IAAA,CAAK,SACT,EAAA;gBACI,oBAAA,CAAqB,IAAA,CAAK,SAAS,CAAA,CAAA;gBACnC,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;YAAA,CACrB;QAAA,CACJ,CAAA;QASA,IAAA,CAAK,MAAA,GAAS,MACd;YACQ,IAAA,CAAC,IAAA,CAAK,SACV,EAAA;gBACI,OAAA;YAAA,CACJ;YAGA,IAAA,CAAK,aAAc,EAAA,CAAA;YAEf,IAAA,KAAA,CAAA;YACA,IAAA,MAAA,CAAA;YAGA,IAAA,IAAA,CAAK,SAAc,KAAA,UAAA,CAAW,MAClC,EAAA;gBACI,KAAA,GAAQ,UAAW,CAAA,UAAA,CAAA;gBACnB,MAAA,GAAS,UAAW,CAAA,WAAA,CAAA;YAAA,CAIxB,MAAA;gBACI,MAAM,EAAE,WAAA,EAAa,YAAa,EAAA,GAAI,IAAK,CAAA,SAAA,CAAA;gBAEnC,KAAA,GAAA,WAAA,CAAA;gBACC,MAAA,GAAA,YAAA,CAAA;YAAA,CACb;YAEK,IAAA,CAAA,QAAA,CAAS,MAAO,CAAA,KAAA,EAAO,MAAM,CAAA,CAAA;YAClC,IAAA,CAAK,MAAO,EAAA,CAAA;QAAA,CAChB,CAAA;QAGA,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;QACjB,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;QACZ,IAAA,CAAA,QAAA,GAAW,QAAQ,QAAY,IAAA,IAAA,CAAA;IAAA,CACxC;IAAA;;;;GAAA,GAOA,OAAc,OACd,GAAA;QACe,UAAA,CAAA,mBAAA,CAAoB,QAAU,EAAA,IAAA,CAAK,WAAW,CAAA,CAAA;QACzD,IAAA,CAAK,aAAc,EAAA,CAAA;QACnB,IAAA,CAAK,aAAgB,GAAA,IAAA,CAAA;QACrB,IAAA,CAAK,WAAc,GAAA,IAAA,CAAA;QACnB,IAAA,CAAK,QAAW,GAAA,IAAA,CAAA;QAChB,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;IAAA,CAClB;AACJ,CAAA;AAAA,YAAA,GA7Ia,YAAA,CAGK,SAAA,qKAA+B,gBAAc,CAAA,WAAA","ignoreList":[0]}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"file":"TickerPlugin.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/app/TickerPlugin.ts"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions';\nimport { UPDATE_PRIORITY } from '../ticker/const';\nimport { Ticker } from '../ticker/Ticker';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\n\n/**\n * Application options for the {@link app.TickerPlugin}.\n * @memberof app\n * @property {boolean} [autoStart=true] - Automatically starts the rendering after the construction.\n * **Note**: Setting this parameter to `false` does NOT stop the shared ticker even if you set\n * `options.sharedTicker` to `true` in case that it is already started. Stop it by your own.\n * @property {boolean} [sharedTicker=false] - Set`true` to use `Ticker.shared`, `false` to create new ticker.\n * If set to `false`, you cannot register a handler to occur before anything that runs on the shared ticker.\n * The system ticker will always run before both the shared ticker and the app ticker.\n */\nexport interface TickerPluginOptions\n{\n    /**\n     * Automatically starts the rendering after the construction.\n     *  **Note**: Setting this parameter to `false` does NOT stop the shared ticker even if you set\n     *  `options.sharedTicker` to `true` in case that it is already started. Stop it by your own.\n     * @memberof app.ApplicationOptions\n     * @default true\n     */\n    autoStart?: boolean;\n    /**\n     * Set`true` to use `Ticker.shared`, `false` to create new ticker.\n     *  If set to `false`, you cannot register a handler to occur before anything that runs on the shared ticker.\n     *  The system ticker will always run before both the shared ticker and the app ticker.\n     * @memberof app.ApplicationOptions\n     * @default false\n     */\n    sharedTicker?: boolean;\n}\n\n/**\n * Middleware for Application's {@link ticker.Ticker} functionality.\n *\n * Adds the following methods to {@link app.Application}:\n * * {@link app.Application#start}\n * * {@link app.Application#stop}\n * * {@link app.Application#ticker}\n * @example\n * import { extensions, TickerPlugin } from 'pixi.js';\n *\n * extensions.add(TickerPlugin);\n * @memberof app\n */\nexport class TickerPlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static start: () => void;\n    public static stop: () => void;\n    private static _ticker: Ticker;\n    public static ticker: Ticker;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options?: PixiMixins.ApplicationOptions): void\n    {\n        // Set default\n        options = Object.assign({\n            autoStart: true,\n            sharedTicker: false,\n        }, options);\n\n        // Create ticker setter\n        Object.defineProperty(this, 'ticker',\n            {\n                set(ticker)\n                {\n                    if (this._ticker)\n                    {\n                        this._ticker.remove(this.render, this);\n                    }\n                    this._ticker = ticker;\n                    if (ticker)\n                    {\n                        ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n                    }\n                },\n                get()\n                {\n                    return this._ticker;\n                },\n            });\n\n        /**\n         * Convenience method for stopping the render.\n         * @method\n         * @memberof app.Application\n         * @instance\n         */\n        this.stop = (): void =>\n        {\n            this._ticker.stop();\n        };\n\n        /**\n         * Convenience method for starting the render.\n         * @method\n         * @memberof app.Application\n         * @instance\n         */\n        this.start = (): void =>\n        {\n            this._ticker.start();\n        };\n\n        /**\n         * Internal reference to the ticker.\n         * @type {Ticker}\n         * @name _ticker\n         * @memberof app.Application#\n         * @private\n         */\n        this._ticker = null;\n\n        /**\n         * Ticker for doing render updates.\n         * @type {ticker.Ticker}\n         * @name ticker\n         * @memberof app.Application#\n         * @default Ticker.shared\n         */\n        this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n\n        // Start the rendering\n        if (options.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Clean up the ticker, scoped to application.\n     * @static\n     * @private\n     */\n    public static destroy(): void\n    {\n        if (this._ticker)\n        {\n            const oldTicker = this._ticker;\n\n            this.ticker = null;\n            oldTicker.destroy();\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;AAiDO,MAAM,YACb,CAAA;IAAA;;;;;GAAA,GAeI,OAAc,KAAK,OACnB,EAAA;QAEI,OAAA,GAAU,OAAO,MAAO,CAAA;YACpB,SAAW,EAAA,IAAA;YACX,YAAc,EAAA,KAAA;QAAA,GACf,OAAO,CAAA,CAAA;QAGH,MAAA,CAAA,cAAA,CAAe,IAAA,EAAM,QAAA,EACxB;YACI,KAAI,MACJ,EAAA;gBACI,IAAI,IAAA,CAAK,OACT,EAAA;oBACI,IAAA,CAAK,OAAQ,CAAA,MAAA,CAAO,IAAK,CAAA,MAAA,EAAQ,IAAI,CAAA,CAAA;gBAAA,CACzC;gBACA,IAAA,CAAK,OAAU,GAAA,MAAA,CAAA;gBACf,IAAI,MACJ,EAAA;oBACI,MAAA,CAAO,GAAI,CAAA,IAAA,CAAK,MAAQ,EAAA,IAAA,2JAAM,kBAAA,CAAgB,GAAG,CAAA,CAAA;gBAAA,CACrD;YAAA,CACJ;YACA,GACA,GAAA;gBACI,OAAO,IAAK,CAAA,OAAA,CAAA;YAAA,CAChB;QAAA,CACJ;QAQJ,IAAA,CAAK,IAAA,GAAO,MACZ;YACI,IAAA,CAAK,OAAA,CAAQ,IAAK,EAAA,CAAA;QAAA,CACtB,CAAA;QAQA,IAAA,CAAK,KAAA,GAAQ,MACb;YACI,IAAA,CAAK,OAAA,CAAQ,KAAM,EAAA,CAAA;QAAA,CACvB,CAAA;QASA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAA;QASf,IAAA,CAAK,MAAA,GAAS,OAAQ,CAAA,YAAA,4JAAe,UAAO,CAAA,MAAA,GAAS,8JAAI,SAAO,EAAA,CAAA;QAGhE,IAAI,QAAQ,SACZ,EAAA;YACI,IAAA,CAAK,KAAM,EAAA,CAAA;QAAA,CACf;IAAA,CACJ;IAAA;;;;GAAA,GAOA,OAAc,OACd,GAAA;QACI,IAAI,IAAA,CAAK,OACT,EAAA;YACI,MAAM,YAAY,IAAK,CAAA,OAAA,CAAA;YAEvB,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;YACd,SAAA,CAAU,OAAQ,EAAA,CAAA;QAAA,CACtB;IAAA,CACJ;AACJ,CAAA;AAAA,YAAA,GA3Ga,YAAA,CAGK,SAAA,qKAA+B,gBAAc,CAAA,WAAA","ignoreList":[0]}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/app/init.ts"],"sourcesContent":["import { extensions } from '../extensions/Extensions';\nimport { ResizePlugin } from './ResizePlugin';\nimport { TickerPlugin } from './TickerPlugin';\n\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n"],"names":[],"mappings":";;;;;;;;kKAIA,aAAA,CAAW,GAAA,8JAAI,eAAY,CAAA,CAAA;kKAC3B,aAAA,CAAW,GAAA,8JAAI,eAAY,CAAA","ignoreList":[0]}},
    {"offset": {"line": 174, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"file":"colorToUniform.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/gpu/colorToUniform.ts"],"sourcesContent":["export function colorToUniform(rgb: number, alpha: number, out: Float32Array, offset: number)\n{\n    // TODO replace with Color..\n    out[offset++] = ((rgb >> 16) & 0xFF) / 255;\n    out[offset++] = ((rgb >> 8) & 0xFF) / 255;\n    out[offset++] = (rgb & 0xFF) / 255;\n    out[offset++] = alpha;\n}\n\nexport function color32BitToUniform(abgr: number, out: Float32Array, offset: number)\n{\n    const alpha = ((abgr >> 24) & 0xFF) / 255;\n\n    out[offset++] = ((abgr & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 8) & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 16) & 0xFF) / 255) * alpha;\n    out[offset++] = alpha;\n}\n"],"names":[],"mappings":";;;;;AAAO,SAAS,cAAe,CAAA,GAAA,EAAa,KAAe,EAAA,GAAA,EAAmB,MAC9E,EAAA;IAEI,GAAA,CAAI,MAAQ,EAAA,CAAA,GAAA,CAAM,GAAO,IAAA,EAAA,GAAM,GAAQ,IAAA,GAAA,CAAA;IACvC,GAAA,CAAI,MAAQ,EAAA,CAAA,GAAA,CAAM,GAAO,IAAA,CAAA,GAAK,GAAQ,IAAA,GAAA,CAAA;IAClC,GAAA,CAAA,MAAA,EAAQ,CAAK,GAAA,CAAA,GAAA,GAAM,GAAQ,IAAA,GAAA,CAAA;IAC/B,GAAA,CAAI,QAAQ,CAAI,GAAA,KAAA,CAAA;AACpB,CAAA;AAEgB,SAAA,mBAAA,CAAoB,IAAc,EAAA,GAAA,EAAmB,MACrE,EAAA;IACU,MAAA,KAAA,GAAA,CAAU,IAAQ,IAAA,EAAA,GAAM,GAAQ,IAAA,GAAA,CAAA;IAEtC,GAAA,CAAI,MAAQ,EAAA,CAAA,GAAA,CAAM,IAAO,GAAA,GAAA,IAAQ,GAAO,GAAA,KAAA,CAAA;IACxC,GAAA,CAAI,MAAQ,EAAA,CAAA,GAAA,CAAO,IAAQ,IAAA,CAAA,GAAK,GAAA,IAAQ,GAAO,GAAA,KAAA,CAAA;IAC/C,GAAA,CAAI,MAAQ,EAAA,CAAA,GAAA,CAAO,IAAQ,IAAA,EAAA,GAAM,GAAA,IAAQ,GAAO,GAAA,KAAA,CAAA;IAChD,GAAA,CAAI,QAAQ,CAAI,GAAA,KAAA,CAAA;AACpB","ignoreList":[0]}},
    {"offset": {"line": 200, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 206, "column": 0}, "map": {"version":3,"file":"GraphicsPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/shared/GraphicsPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../../rendering/renderers/shared/state/State';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { color32BitToUniform } from '../gpu/colorToUniform';\nimport { BatchableGraphics } from './BatchableGraphics';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { BatchPipe, RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { RenderableGCSystem } from '../../../rendering/renderers/shared/texture/RenderableGCSystem';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Container } from '../../container/Container';\nimport type { Graphics } from './Graphics';\nimport type { GpuGraphicsContext, GraphicsContextSystem } from './GraphicsContextSystem';\n\nexport interface GraphicsAdaptor\n{\n    shader: Shader;\n    init(): void;\n    execute(graphicsPipe: GraphicsPipe, renderable: Graphics): void;\n    destroy(): void;\n}\nexport interface GraphicsSystem\n{\n    graphicsContext: GraphicsContextSystem;\n    renderableGC: RenderableGCSystem;\n    renderPipes: {\n        batch: BatchPipe\n    }\n    _roundPixels: 0 | 1;\n}\n\nexport class GraphicsPipe implements RenderPipe<Graphics>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'graphics',\n    } as const;\n\n    public renderer: GraphicsSystem;\n    public state: State = State.for2d();\n\n    // batchable graphics list, used to render batches\n    private _graphicsBatchesHash: Record<number, BatchableGraphics[]> = Object.create(null);\n    private _adaptor: GraphicsAdaptor;\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: GraphicsSystem, adaptor: GraphicsAdaptor)\n    {\n        this.renderer = renderer;\n\n        this._adaptor = adaptor;\n        this._adaptor.init();\n\n        this.renderer.renderableGC.addManagedHash(this, '_graphicsBatchesHash');\n    }\n\n    public validateRenderable(graphics: Graphics): boolean\n    {\n        // assume context is dirty..\n\n        const context = graphics.context;\n\n        const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n\n        if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable)\n        {\n            // TODO what if they are the same size??\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(graphics: Graphics, instructionSet: InstructionSet)\n    {\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n\n        // need to get batches here.. as we need to know if we can batch or not..\n        // this also overrides the current batches..\n\n        if (graphics.didViewUpdate)\n        {\n            this._rebuild(graphics);\n        }\n\n        if (gpuContext.isBatchable)\n        {\n            this._addToBatcher(graphics, instructionSet);\n        }\n        else\n        {\n            this.renderer.renderPipes.batch.break(instructionSet);\n            instructionSet.add(graphics);\n        }\n    }\n\n    public updateRenderable(graphics: Graphics)\n    {\n        const batches = this._graphicsBatchesHash[graphics.uid];\n\n        if (batches)\n        {\n            for (let i = 0; i < batches.length; i++)\n            {\n                const batch = batches[i];\n\n                batch._batcher.updateElement(batch);\n            }\n        }\n    }\n\n    public destroyRenderable(graphics: Graphics)\n    {\n        if (this._graphicsBatchesHash[graphics.uid])\n        {\n            this._removeBatchForRenderable(graphics.uid);\n        }\n\n        graphics.off('destroyed', this._destroyRenderableBound);\n    }\n\n    public execute(graphics: Graphics)\n    {\n        if (!graphics.isRenderable) return;\n\n        const renderer = this.renderer;\n        const context = graphics.context;\n        const contextSystem = renderer.graphicsContext;\n\n        // early out if there is no actual visual stuff...\n        if (!contextSystem.getGpuContext(context).batches.length)\n        { return; }\n\n        const shader = context.customShader || this._adaptor.shader;\n\n        this.state.blendMode = graphics.groupBlendMode;\n\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = graphics.groupTransform;\n        localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n\n        color32BitToUniform(\n            graphics.groupColorAlpha,\n            localUniforms.uColor,\n            0,\n        );\n\n        this._adaptor.execute(this, graphics);\n    }\n\n    private _rebuild(graphics: Graphics)\n    {\n        const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n\n        // TODO POOL the old batches!\n\n        if (wasBatched)\n        {\n            this._removeBatchForRenderable(graphics.uid);\n        }\n\n        if (gpuContext.isBatchable)\n        {\n            this._initBatchesForRenderable(graphics);\n        }\n\n        graphics.batched = gpuContext.isBatchable;\n    }\n\n    private _addToBatcher(graphics: Graphics, instructionSet: InstructionSet)\n    {\n        const batchPipe = this.renderer.renderPipes.batch;\n\n        const batches = this._getBatchesForRenderable(graphics);\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            const batch = batches[i];\n\n            batchPipe.addToBatch(batch, instructionSet);\n        }\n    }\n\n    private _getBatchesForRenderable(graphics: Graphics): BatchableGraphics[]\n    {\n        return this._graphicsBatchesHash[graphics.uid] || this._initBatchesForRenderable(graphics);\n    }\n\n    private _initBatchesForRenderable(graphics: Graphics): BatchableGraphics[]\n    {\n        const context = graphics.context;\n\n        const gpuContext: GpuGraphicsContext = this.renderer.graphicsContext.getGpuContext(context);\n\n        const roundPixels = (this.renderer._roundPixels | graphics._roundPixels) as 0 | 1;\n\n        const batches = gpuContext.batches.map((batch) =>\n        {\n            const batchClone = BigPool.get(BatchableGraphics);\n\n            batch.copyTo(batchClone);\n\n            batchClone.renderable = graphics;\n\n            batchClone.roundPixels = roundPixels;\n\n            return batchClone;\n        });\n\n        if (this._graphicsBatchesHash[graphics.uid] === undefined)\n        {\n            // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n            graphics.on('destroyed', this._destroyRenderableBound);\n        }\n\n        this._graphicsBatchesHash[graphics.uid] = batches;\n\n        return batches;\n    }\n\n    private _removeBatchForRenderable(graphicsUid: number)\n    {\n        this._graphicsBatchesHash[graphicsUid].forEach((batch) =>\n        {\n            BigPool.return(batch as PoolItem);\n        });\n\n        this._graphicsBatchesHash[graphicsUid] = null;\n    }\n\n    public destroy()\n    {\n        this.renderer = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n        this.state = null;\n\n        for (const i in this._graphicsBatchesHash)\n        {\n            this._removeBatchForRenderable(i as unknown as number);\n        }\n\n        this._graphicsBatchesHash = null;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 349, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem';\nimport { GraphicsPipe } from './shared/GraphicsPipe';\n\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n"],"names":[],"mappings":";;;;;;;;kKAIA,aAAA,CAAW,GAAA,sLAAI,eAAY,CAAA,CAAA;kKAC3B,aAAA,CAAW,GAAA,+LAAI,wBAAqB,CAAA","ignoreList":[0]}},
    {"offset": {"line": 365, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 371, "column": 0}, "map": {"version":3,"file":"BatchableMesh.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/mesh/shared/BatchableMesh.ts"],"sourcesContent":["import type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableMeshElement } from '../../../rendering/batcher/shared/DefaultBatcher';\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { ViewContainer } from '../../view/ViewContainer';\nimport type { MeshGeometry } from './MeshGeometry';\n\n/**\n * A batchable mesh object.\n * @ignore\n */\nexport class BatchableMesh implements DefaultBatchableMeshElement\n{\n    public batcherName = 'default';\n\n    public _topology: Topology;\n\n    public readonly packAsQuad = false;\n    public location: number;\n\n    public renderable: ViewContainer;\n\n    public indexOffset = 0;\n    public attributeOffset = 0;\n\n    public texture: Texture;\n    public geometry: MeshGeometry;\n    public transform: Matrix;\n    public roundPixels: 0 | 1 = 0;\n\n    public _attributeStart: number;\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n    public _indexStart: number;\n    public _textureId: number;\n\n    private _transformedUvs: Float32Array;\n    private _uvUpdateId: number = -1;\n    private _textureMatrixUpdateId: number = -1;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n\n    get topology() { return this._topology || this.geometry.topology; }\n    set topology(value: Topology) { this._topology = value; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.geometry = null;\n        this._uvUpdateId = -1;\n        this._textureMatrixUpdateId = -1;\n    }\n\n    get uvs()\n    {\n        const geometry = this.geometry;\n\n        const uvBuffer = geometry.getBuffer('aUV');\n\n        const uvs = uvBuffer.data;\n\n        let transformedUvs = uvs;\n        const textureMatrix = this.texture.textureMatrix;\n\n        if (!textureMatrix.isSimple)\n        {\n            transformedUvs = this._transformedUvs;\n\n            if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID)\n            {\n                if (!transformedUvs || transformedUvs.length < uvs.length)\n                {\n                    transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n                }\n\n                this._textureMatrixUpdateId = textureMatrix._updateID;\n                this._uvUpdateId = uvBuffer._updateID;\n\n                textureMatrix.multiplyUvs(uvs as Float32Array, transformedUvs);\n            }\n        }\n\n        return transformedUvs as Float32Array;\n    }\n\n    get positions()\n    {\n        return this.geometry.positions;\n    }\n\n    get indices()\n    {\n        return this.geometry.indices;\n    }\n\n    get color()\n    {\n        return this.renderable.groupColorAlpha;\n    }\n\n    get groupTransform()\n    {\n        return this.renderable.groupTransform;\n    }\n\n    get attributeSize()\n    {\n        return this.geometry.positions.length / 2;\n    }\n\n    get indexSize()\n    {\n        return this.geometry.indices.length;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 445, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 451, "column": 0}, "map": {"version":3,"file":"MeshPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/mesh/shared/MeshPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform';\nimport { BatchableMesh } from './BatchableMesh';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type {\n    InstructionPipe,\n    RenderPipe\n} from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Container } from '../../container/Container';\nimport type { Mesh } from './Mesh';\n\n// TODO Record mode is a P2, will get back to this as it's not a priority\n// const recordMode = true;\n\ninterface MeshData\n{\n    batched: boolean;\n    indexSize: number;\n    vertexSize: number;\n}\n\nexport interface MeshAdaptor\n{\n    init(): void;\n    execute(meshPipe: MeshPipe, mesh: Mesh): void;\n    destroy(): void;\n}\n\nexport class MeshPipe implements RenderPipe<Mesh>, InstructionPipe<Mesh>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'mesh',\n    } as const;\n\n    public localUniforms = new UniformGroup({\n        uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n        uRound: { value: 0, type: 'f32' },\n    });\n\n    public localUniformsBindGroup = new BindGroup({\n        0: this.localUniforms,\n    });\n\n    public renderer: Renderer;\n\n    private _meshDataHash: Record<number, MeshData> = Object.create(null);\n    private _gpuBatchableMeshHash: Record<number, BatchableMesh> = Object.create(null);\n    private _adaptor: MeshAdaptor;\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer, adaptor: MeshAdaptor)\n    {\n        this.renderer = renderer;\n        this._adaptor = adaptor;\n\n        this._adaptor.init();\n\n        renderer.renderableGC.addManagedHash(this, '_gpuBatchableMeshHash');\n        renderer.renderableGC.addManagedHash(this, '_meshDataHash');\n    }\n\n    public validateRenderable(mesh: Mesh): boolean\n    {\n        const meshData = this._getMeshData(mesh);\n\n        const wasBatched = meshData.batched;\n\n        const isBatched = mesh.batched;\n\n        meshData.batched = isBatched;\n\n        if (wasBatched !== isBatched)\n        {\n            return true;\n        }\n        else if (isBatched)\n        {\n            const geometry = mesh._geometry;\n\n            // no need to break the batch if it's the same size\n            if (geometry.indices.length !== meshData.indexSize\n                    || geometry.positions.length !== meshData.vertexSize)\n            {\n                meshData.indexSize = geometry.indices.length;\n                meshData.vertexSize = geometry.positions.length;\n\n                return true;\n            }\n\n            const batchableMesh = this._getBatchableMesh(mesh);\n\n            return !batchableMesh._batcher.checkAndUpdateTexture(\n                batchableMesh,\n                mesh.texture\n            );\n        }\n\n        return false;\n    }\n\n    public addRenderable(mesh: Mesh, instructionSet: InstructionSet)\n    {\n        const batcher = this.renderer.renderPipes.batch;\n\n        const { batched } = this._getMeshData(mesh);\n\n        if (batched)\n        {\n            const gpuBatchableMesh = this._getBatchableMesh(mesh);\n\n            gpuBatchableMesh.texture = mesh._texture;\n            gpuBatchableMesh.geometry = mesh._geometry;\n\n            batcher.addToBatch(gpuBatchableMesh, instructionSet);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            instructionSet.add(mesh);\n        }\n    }\n\n    public updateRenderable(mesh: Mesh)\n    {\n        if (mesh.batched)\n        {\n            const gpuBatchableMesh = this._gpuBatchableMeshHash[mesh.uid];\n\n            gpuBatchableMesh.texture = mesh._texture;\n            gpuBatchableMesh.geometry = mesh._geometry;\n\n            gpuBatchableMesh._batcher.updateElement(gpuBatchableMesh);\n        }\n    }\n\n    public destroyRenderable(mesh: Mesh)\n    {\n        this._meshDataHash[mesh.uid] = null;\n\n        const gpuMesh = this._gpuBatchableMeshHash[mesh.uid];\n\n        if (gpuMesh)\n        {\n            BigPool.return(gpuMesh as PoolItem);\n            this._gpuBatchableMeshHash[mesh.uid] = null;\n        }\n\n        mesh.off('destroyed', this._destroyRenderableBound);\n    }\n\n    public execute(mesh: Mesh)\n    {\n        if (!mesh.isRenderable) return;\n\n        mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n\n        const localUniforms = this.localUniforms;\n\n        localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n        localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n        localUniforms.update();\n\n        color32BitToUniform(\n            mesh.groupColorAlpha,\n            localUniforms.uniforms.uColor,\n            0\n        );\n\n        this._adaptor.execute(this, mesh);\n    }\n\n    private _getMeshData(mesh: Mesh): MeshData\n    {\n        return this._meshDataHash[mesh.uid] || this._initMeshData(mesh);\n    }\n\n    private _initMeshData(mesh: Mesh): MeshData\n    {\n        this._meshDataHash[mesh.uid] = {\n            batched: mesh.batched,\n            indexSize: mesh._geometry.indices?.length,\n            vertexSize: mesh._geometry.positions?.length,\n        };\n\n        mesh.on('destroyed', this._destroyRenderableBound);\n\n        return this._meshDataHash[mesh.uid];\n    }\n\n    private _getBatchableMesh(mesh: Mesh): BatchableMesh\n    {\n        return this._gpuBatchableMeshHash[mesh.uid] || this._initBatchableMesh(mesh);\n    }\n\n    private _initBatchableMesh(mesh: Mesh): BatchableMesh\n    {\n        // TODO - make this batchable graphics??\n        const gpuMesh: BatchableMesh = BigPool.get(BatchableMesh);\n\n        gpuMesh.renderable = mesh;\n        gpuMesh.texture = mesh._texture;\n        gpuMesh.transform = mesh.groupTransform;\n        gpuMesh.roundPixels = (this.renderer._roundPixels | mesh._roundPixels) as 0 | 1;\n\n        this._gpuBatchableMeshHash[mesh.uid] = gpuMesh;\n\n        return gpuMesh;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuBatchableMeshHash)\n        {\n            if (this._gpuBatchableMeshHash[i])\n            {\n                BigPool.return(this._gpuBatchableMeshHash[i] as PoolItem);\n            }\n        }\n\n        this._gpuBatchableMeshHash = null;\n        this._meshDataHash = null;\n\n        this.localUniforms = null;\n        this.localUniformsBindGroup = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n\n        this.renderer = null;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 612, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 618, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/mesh/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { MeshPipe } from './shared/MeshPipe';\n\nextensions.add(MeshPipe);\n"],"names":[],"mappings":";;;;;;kKAGA,aAAA,CAAW,GAAA,8KAAI,WAAQ,CAAA","ignoreList":[0]}},
    {"offset": {"line": 625, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 631, "column": 0}, "map": {"version":3,"file":"GlParticleContainerAdaptor.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/gl/GlParticleContainerAdaptor.ts"],"sourcesContent":["import type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\nimport type { ParticleContainer } from '../shared/ParticleContainer';\nimport type { ParticleContainerAdaptor, ParticleContainerPipe } from '../shared/ParticleContainerPipe';\n\nexport class GlParticleContainerAdaptor implements ParticleContainerAdaptor\n{\n    public execute(particleContainerPipe: ParticleContainerPipe, container: ParticleContainer)\n    {\n        const state = particleContainerPipe.state;\n        const renderer = particleContainerPipe.renderer as WebGLRenderer;\n        const shader = container.shader || particleContainerPipe.defaultShader;\n\n        shader.resources.uTexture = container.texture._source;\n        shader.resources.uniforms = particleContainerPipe.localUniforms;\n\n        const gl = renderer.gl;\n\n        const buffer = particleContainerPipe.getBuffers(container);\n\n        // now lets upload and render the buffers..\n        renderer.shader.bind(shader);\n        renderer.state.set(state);\n        renderer.geometry.bind(buffer.geometry, shader.glProgram);\n\n        const byteSize = buffer.geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n        const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n\n        gl.drawElements(gl.TRIANGLES, container.particleChildren.length * 6, glType, 0);\n    }\n}\n"],"names":[],"mappings":";;;;AAIO,MAAM,0BACb,CAAA;IACW,OAAA,CAAQ,qBAAA,EAA8C,SAC7D,EAAA;QACI,MAAM,QAAQ,qBAAsB,CAAA,KAAA,CAAA;QACpC,MAAM,WAAW,qBAAsB,CAAA,QAAA,CAAA;QACjC,MAAA,MAAA,GAAS,SAAU,CAAA,MAAA,IAAU,qBAAsB,CAAA,aAAA,CAAA;QAElD,MAAA,CAAA,SAAA,CAAU,QAAW,GAAA,SAAA,CAAU,OAAQ,CAAA,OAAA,CAAA;QACvC,MAAA,CAAA,SAAA,CAAU,QAAA,GAAW,qBAAsB,CAAA,aAAA,CAAA;QAElD,MAAM,KAAK,QAAS,CAAA,EAAA,CAAA;QAEd,MAAA,MAAA,GAAS,qBAAsB,CAAA,UAAA,CAAW,SAAS,CAAA,CAAA;QAGhD,QAAA,CAAA,MAAA,CAAO,IAAA,CAAK,MAAM,CAAA,CAAA;QAClB,QAAA,CAAA,KAAA,CAAM,GAAA,CAAI,KAAK,CAAA,CAAA;QACxB,QAAA,CAAS,QAAS,CAAA,IAAA,CAAK,MAAO,CAAA,QAAA,EAAU,OAAO,SAAS,CAAA,CAAA;QAExD,MAAM,QAAW,GAAA,MAAA,CAAO,QAAS,CAAA,WAAA,CAAY,IAAK,CAAA,iBAAA,CAAA;QAClD,MAAM,MAAS,GAAA,QAAA,KAAa,CAAI,GAAA,EAAA,CAAG,cAAA,GAAiB,EAAG,CAAA,YAAA,CAAA;QAEpD,EAAA,CAAA,YAAA,CAAa,GAAG,SAAW,EAAA,SAAA,CAAU,gBAAA,CAAiB,MAAS,GAAA,CAAA,EAAG,QAAQ,CAAC,CAAA,CAAA;IAAA,CAClF;AACJ","ignoreList":[0]}},
    {"offset": {"line": 654, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 660, "column": 0}, "map": {"version":3,"file":"particles.vert.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 666, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 672, "column": 0}, "map": {"version":3,"file":"particles.frag.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 678, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 684, "column": 0}, "map": {"version":3,"file":"particles.wgsl.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 690, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 696, "column": 0}, "map": {"version":3,"file":"ParticleShader.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/shared/shader/ParticleShader.ts"],"sourcesContent":["import { Color } from '../../../../color/Color';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram';\nimport { Shader } from '../../../../rendering/renderers/shared/shader/Shader';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { TextureStyle } from '../../../../rendering/renderers/shared/texture/TextureStyle';\nimport fragment from './particles.frag';\nimport vertex from './particles.vert';\nimport wgsl from './particles.wgsl';\n\nexport class ParticleShader extends Shader\n{\n    constructor()\n    {\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment\n        });\n\n        const gpuProgram = GpuProgram.from({\n            fragment: {\n                source: wgsl,\n                entryPoint: 'mainFragment'\n            },\n            vertex: {\n                source: wgsl,\n                entryPoint: 'mainVertex'\n            }\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                // this will be replaced with the texture from the particle container\n                uTexture: Texture.WHITE.source,\n                // this will be replaced with the texture style from the particle container\n                uSampler: new TextureStyle({}),\n                // this will be replaced with the local uniforms from the particle container\n                uniforms: {\n                    uTranslationMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Color(0xFFFFFF), type: 'vec4<f32>' },\n                    uRound: { value: 1, type: 'f32' },\n                    uResolution: { value: [0, 0], type: 'vec2<f32>' },\n                }\n            }\n        });\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAWO,MAAM,qNAAuB,SACpC,CAAA;IACI,WACA,EAAA;QACU,MAAA,SAAA,gMAAY,YAAA,CAAU,IAAK,CAAA;qOAC7B,UAAA;uOACA,UAAA;QAAA,CACH,CAAA,CAAA;QAEK,MAAA,UAAA,iMAAa,cAAA,CAAW,IAAK,CAAA;YAC/B,QAAU,EAAA;gBACN,MAAQ,mNAAA,UAAA;gBACR,UAAY,EAAA,cAAA;YAAA,CAChB;YACA,MAAQ,EAAA;gBACJ,MAAQ,mNAAA,UAAA;gBACR,UAAY,EAAA,YAAA;YAAA,CAChB;QAAA,CACH,CAAA,CAAA;QAEK,KAAA,CAAA;YACF,SAAA;YACA,UAAA;YACA,SAAW,EAAA;gBAAA,qEAAA;gBAEP,QAAA,EAAU,0MAAA,CAAQ,KAAM,CAAA,MAAA;gBAAA,2EAAA;gBAExB,QAAU,EAAA,yMAAI,eAAa,CAAA,CAAA,CAAE,CAAA;gBAAA,4EAAA;gBAE7B,QAAU,EAAA;oBACN,oBAAoB;wBAAE,KAAA,EAAO,uKAAI,SAAO,EAAA;wBAAG,MAAM,aAAc;oBAAA,CAAA;oBAC/D,MAAA,EAAQ;wBAAE,KAAO,EAAA,4JAAI,QAAA,CAAM,QAAQ,CAAA;wBAAG,MAAM,WAAY;oBAAA,CAAA;oBACxD,MAAQ,EAAA;wBAAE,KAAO,EAAA,CAAA;wBAAG,MAAM,KAAM;oBAAA,CAAA;oBAChC,WAAA,EAAa;wBAAE,KAAO,EAAA;4BAAC;4BAAG,CAAC;yBAAA;wBAAG,MAAM,WAAY;oBAAA,CAAA;gBAAA,CACpD;YAAA,CACJ;QAAA,CACH,CAAA,CAAA;IAAA,CACL;AACJ","ignoreList":[0]}},
    {"offset": {"line": 772, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 778, "column": 0}, "map": {"version":3,"file":"createIndicesForQuads.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/shared/utils/createIndicesForQuads.ts"],"sourcesContent":["/**\n * Generic Mask Stack data structure\n * @function createIndicesForQuads\n * @param {number} size - Number of quads\n * @param {Uint16Array|Uint32Array} [outBuffer] - Buffer for output, length has to be `6 * size`\n * @returns {Uint16Array|Uint32Array} - Resulting index buffer\n */\nexport function createIndicesForQuads(\n    size: number,\n    outBuffer: Uint16Array | Uint32Array | null = null\n): Uint16Array | Uint32Array\n{\n    // the total number of indices in our array, there are 6 points per quad.\n    const totalIndices = size * 6;\n\n    // Check if we need to use Uint32Array\n    if (totalIndices > 65535)\n    {\n        outBuffer ||= new Uint32Array(totalIndices); // Use Uint32Array if needed\n    }\n    else\n    {\n        outBuffer ||= new Uint16Array(totalIndices);\n    }\n\n    if (outBuffer.length !== totalIndices)\n    {\n        throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n    }\n\n    // fill the indices with the quads to draw\n    for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4)\n    {\n        outBuffer[i + 0] = j + 0;\n        outBuffer[i + 1] = j + 1;\n        outBuffer[i + 2] = j + 2;\n        outBuffer[i + 3] = j + 0;\n        outBuffer[i + 4] = j + 2;\n        outBuffer[i + 5] = j + 3;\n    }\n\n    return outBuffer;\n}\n"],"names":[],"mappings":";;;;AAOgB,SAAA,qBAAA,CACZ,IACA,EAAA,SAAA,GAA8C,IAElD,EAAA;IAEI,MAAM,eAAe,IAAO,GAAA,CAAA,CAAA;IAG5B,IAAI,eAAe,KACnB,EAAA;QACkB,SAAA,IAAA,CAAA,SAAA,GAAA,IAAI,YAAY,YAAY,CAAA,CAAA,CAAA;IAAA,CAG9C,MAAA;QACkB,SAAA,IAAA,CAAA,SAAA,GAAA,IAAI,YAAY,YAAY,CAAA,CAAA,CAAA;IAAA,CAC9C;IAEI,IAAA,SAAA,CAAU,MAAA,KAAW,YACzB,EAAA;QACI,MAAM,IAAI,KAAM,CAAA,CAAA,oCAAA,EAAuC,UAAU,MAAM,CAAA,cAAA,EAAiB,YAAY,CAAE,CAAA,CAAA,CAAA;IAAA,CAC1G;IAGS,IAAA,IAAA,CAAA,GAAI,GAAG,CAAI,GAAA,CAAA,EAAG,IAAI,YAAc,EAAA,CAAA,IAAK,CAAG,EAAA,CAAA,IAAK,CACtD,CAAA;QACc,SAAA,CAAA,CAAA,GAAI,CAAC,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA;QACb,SAAA,CAAA,CAAA,GAAI,CAAC,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA;QACb,SAAA,CAAA,CAAA,GAAI,CAAC,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA;QACb,SAAA,CAAA,CAAA,GAAI,CAAC,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA;QACb,SAAA,CAAA,CAAA,GAAI,CAAC,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA;QACb,SAAA,CAAA,CAAA,GAAI,CAAC,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA;IAAA,CAC3B;IAEO,OAAA,SAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 804, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 810, "column": 0}, "map": {"version":3,"file":"generateParticleUpdateFunction.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/shared/utils/generateParticleUpdateFunction.ts"],"sourcesContent":["import {\n    getAttributeInfoFromFormat\n} from '../../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat';\n\nimport type { IParticle } from '../Particle';\nimport type { ParticleRendererProperty } from '../particleData';\n\n// TODO rename to update function\nexport type ParticleUpdateFunction = (ps: IParticle[], f32v: Float32Array, u32v: Uint32Array) => void;\n\nexport function generateParticleUpdateFunction(properties: Record<string, ParticleRendererProperty>)\n{\n    return {\n        dynamicUpdate: generateUpdateFunction(properties, true),\n        staticUpdate: generateUpdateFunction(properties, false),\n    };\n}\n\nfunction generateUpdateFunction(\n    properties: Record<string, ParticleRendererProperty>,\n    dynamic: boolean\n): ParticleUpdateFunction\n{\n    const funcFragments: string[] = [];\n\n    funcFragments.push(`\n      \n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            `);\n\n    let offset = 0;\n\n    for (const i in properties)\n    {\n        const property = properties[i];\n\n        if (dynamic !== property.dynamic) continue;\n\n        funcFragments.push(`offset = index + ${offset}`);\n\n        funcFragments.push(property.code);\n\n        const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n        offset += attributeInfo.stride / 4;\n    }\n\n    funcFragments.push(`\n            index += stride * 4;\n        }\n    `);\n\n    // add to the front..\n    funcFragments.unshift(`\n        var stride = ${offset};\n    `);\n\n    const functionSource = funcFragments.join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function('ps', 'f32v', 'u32v', functionSource) as ParticleUpdateFunction;\n}\n"],"names":[],"mappings":";;;;;;AAUO,SAAS,+BAA+B,UAC/C,EAAA;IACW,OAAA;QACH,aAAA,EAAe,sBAAuB,CAAA,UAAA,EAAY,IAAI,CAAA;QACtD,YAAA,EAAc,sBAAuB,CAAA,UAAA,EAAY,KAAK,CAAA;IAAA,CAC1D,CAAA;AACJ,CAAA;AAEA,SAAS,sBAAA,CACL,UAAA,EACA,OAEJ,EAAA;IACI,MAAM,gBAA0B,EAAC,CAAA;IAEjC,aAAA,CAAc,IAAK,CAAA,CAAA;;;;;;;;YAQV,CAAA,CAAA,CAAA;IAET,IAAI,MAAS,GAAA,CAAA,CAAA;IAEb,IAAA,MAAW,KAAK,UAChB,CAAA;QACU,MAAA,QAAA,GAAW,UAAA,CAAW,CAAC,CAAA,CAAA;QAE7B,IAAI,YAAY,QAAS,CAAA,OAAA,EAAS,SAAA;QAEpB,aAAA,CAAA,IAAA,CAAK,CAAoB,iBAAA,EAAA,MAAM,CAAE,CAAA,CAAA,CAAA;QAEjC,aAAA,CAAA,IAAA,CAAK,SAAS,IAAI,CAAA,CAAA;QAE1B,MAAA,aAAA,oOAAgB,6BAAA,AAA2B,EAAA,QAAA,CAAS,MAAM,CAAA,CAAA;QAEhE,MAAA,IAAU,cAAc,MAAS,GAAA,CAAA,CAAA;IAAA,CACrC;IAEA,aAAA,CAAc,IAAK,CAAA,CAAA;;;IAGlB,CAAA,CAAA,CAAA;IAGD,aAAA,CAAc,OAAQ,CAAA,CAAA;qBAAA,EACH,MAAM,CAAA;IACxB,CAAA,CAAA,CAAA;IAEK,MAAA,cAAA,GAAiB,aAAc,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;IAG9C,OAAO,IAAI,QAAA,CAAS,IAAM,EAAA,MAAA,EAAQ,QAAQ,cAAc,CAAA,CAAA;AAC5D","ignoreList":[0]}},
    {"offset": {"line": 854, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 860, "column": 0}, "map": {"version":3,"file":"ParticleBuffer.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/shared/ParticleBuffer.ts"],"sourcesContent":["import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport { getAttributeInfoFromFormat } from '../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer';\nimport { createIndicesForQuads } from './utils/createIndicesForQuads';\nimport { generateParticleUpdateFunction } from './utils/generateParticleUpdateFunction';\n\nimport type { IndexBufferArray } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport type { IParticle } from './Particle';\nimport type { ParticleRendererProperty } from './particleData';\nimport type { ParticleUpdateFunction } from './utils/generateParticleUpdateFunction';\n\n/**\n * Options for creating a ParticleBuffer.\n * @property {number} size - The size of the particle buffer.\n * @property {Record<string, ParticleRendererProperty>} properties - A record of attributes that the particle container uses.\n */\nexport interface ParticleBufferOptions\n{\n    size: number;\n    properties: Record<string, ParticleRendererProperty>;\n}\n\n/**\n * The ParticleBuffer holds the buffers and geometry for a particle container.\n * It also contains the upload functions for the static and dynamic properties.\n * @internal\n */\nexport class ParticleBuffer\n{\n    /** The buffer containing static attribute data for all elements in the batch. */\n    public staticAttributeBuffer: ViewableBuffer;\n    /** The buffer containing dynamic attribute data for all elements in the batch. */\n    public dynamicAttributeBuffer: ViewableBuffer;\n\n    private readonly _staticBuffer: Buffer;\n    private readonly _dynamicBuffer: Buffer;\n\n    /** The buffer containing index data for all elements in the batch. */\n    public indexBuffer: IndexBufferArray;\n\n    private readonly _dynamicStride: number;\n    private readonly _staticStride: number;\n\n    /** The geometry of the particle buffer. */\n    public readonly geometry: Geometry;\n\n    private _size = 0;\n    private readonly _dynamicUpload: ParticleUpdateFunction;\n    private readonly _staticUpload: ParticleUpdateFunction;\n    private readonly _generateParticleUpdateCache: Record<string, {\n        dynamicUpdate: ParticleUpdateFunction;\n        staticUpdate: ParticleUpdateFunction;\n    }> = {};\n\n    constructor(options: ParticleBufferOptions)\n    {\n        // size in sprites!\n        const size = this._size = options.size ?? 1000;\n\n        // TODO add the option to specify what is dynamic!\n        const properties = options.properties;\n\n        // in bytes!\n        let staticVertexSize = 0;\n        let dynamicVertexSize = 0;\n\n        for (const i in properties)\n        {\n            const property = properties[i];\n            const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n            if (property.dynamic)\n            {\n                // dynamic.\n                dynamicVertexSize += attributeInfo.stride;\n            }\n            else\n            {\n                // static.\n                staticVertexSize += attributeInfo.stride;\n            }\n        }\n\n        this._dynamicStride = dynamicVertexSize / 4;\n        this._staticStride = staticVertexSize / 4;\n\n        this.staticAttributeBuffer = new ViewableBuffer(size * 4 * staticVertexSize);\n        this.dynamicAttributeBuffer = new ViewableBuffer(size * 4 * dynamicVertexSize);\n\n        this.indexBuffer = createIndicesForQuads(size);\n\n        // build geometry..\n\n        const geometry = new Geometry();\n\n        let dynamicOffset = 0;\n        let staticOffset = 0;\n\n        this._staticBuffer = new Buffer({\n            data: new Float32Array(1),\n            label: 'static-particle-buffer',\n            shrinkToFit: false,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n        });\n\n        this._dynamicBuffer = new Buffer({\n            data: new Float32Array(1),\n            label: 'dynamic-particle-buffer',\n            shrinkToFit: false,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n        });\n\n        for (const i in properties)\n        {\n            const property = properties[i];\n            const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n            if (property.dynamic)\n            {\n                geometry.addAttribute(property.attributeName, {\n                    buffer: this._dynamicBuffer,\n                    stride: this._dynamicStride * 4,\n                    offset: dynamicOffset * 4,\n                    format: property.format,\n                });\n                dynamicOffset += attributeInfo.size;\n            }\n            else\n            {\n                geometry.addAttribute(property.attributeName, {\n                    buffer: this._staticBuffer,\n                    stride: this._staticStride * 4,\n                    offset: staticOffset * 4,\n                    format: property.format,\n                });\n                staticOffset += attributeInfo.size;\n            }\n        }\n\n        geometry.addIndex(this.indexBuffer);\n\n        const uploadFunction = this.getParticleUpdate(properties);\n\n        this._dynamicUpload = uploadFunction.dynamicUpdate;\n        this._staticUpload = uploadFunction.staticUpdate;\n\n        this.geometry = geometry;\n    }\n\n    public getParticleUpdate(properties: Record<string, ParticleRendererProperty>)\n    {\n        const key = getParticleSyncKey(properties);\n\n        if (this._generateParticleUpdateCache[key])\n        {\n            return this._generateParticleUpdateCache[key];\n        }\n\n        this._generateParticleUpdateCache[key] = this.generateParticleUpdate(properties);\n\n        return this._generateParticleUpdateCache[key];\n    }\n\n    public generateParticleUpdate(properties: Record<string, ParticleRendererProperty>)\n    {\n        return generateParticleUpdateFunction(properties);\n    }\n\n    public update(particles: IParticle[], uploadStatic: boolean)\n    {\n        // first resize the buffers if needed!\n        // TODO resize!\n        if (particles.length > this._size)\n        {\n            uploadStatic = true;\n\n            this._size = Math.max(particles.length, (this._size * 1.5) | 0);\n\n            this.staticAttributeBuffer = new ViewableBuffer(this._size * this._staticStride * 4 * 4);\n            this.dynamicAttributeBuffer = new ViewableBuffer(this._size * this._dynamicStride * 4 * 4);\n            this.indexBuffer = createIndicesForQuads(this._size);\n\n            this.geometry.indexBuffer.setDataWithSize(\n                this.indexBuffer, this.indexBuffer.byteLength, true);\n        }\n\n        const dynamicAttributeBuffer = this.dynamicAttributeBuffer;\n\n        this._dynamicUpload(particles, dynamicAttributeBuffer.float32View, dynamicAttributeBuffer.uint32View);\n\n        this._dynamicBuffer.setDataWithSize(\n            this.dynamicAttributeBuffer.float32View, particles.length * this._dynamicStride * 4, true);\n\n        if (uploadStatic)\n        {\n            const staticAttributeBuffer = this.staticAttributeBuffer;\n\n            this._staticUpload(particles, staticAttributeBuffer.float32View, staticAttributeBuffer.uint32View);\n\n            this._staticBuffer.setDataWithSize(\n                staticAttributeBuffer.float32View, particles.length * this._staticStride * 4, true);\n        }\n    }\n\n    public destroy()\n    {\n        this._staticBuffer.destroy();\n        this._dynamicBuffer.destroy();\n        this.geometry.destroy();\n    }\n}\n\nfunction getParticleSyncKey(properties: Record<string, ParticleRendererProperty>)\n{\n    const keyGen: string[] = [];\n\n    for (const key in properties)\n    {\n        const property = properties[key];\n\n        keyGen.push(key, property.code, property.dynamic ? 'd' : 's');\n    }\n\n    return keyGen.join('_');\n}\n\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 987, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 993, "column": 0}, "map": {"version":3,"file":"ParticleContainerPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/shared/ParticleContainerPipe.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { State } from '../../../rendering/renderers/shared/state/State';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform';\nimport { ParticleBuffer } from './ParticleBuffer';\nimport { ParticleShader } from './shader/ParticleShader';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Container } from '../../container/Container';\nimport type { ParticleContainer } from './ParticleContainer';\n\nexport interface ParticleContainerAdaptor\n{\n    execute(particleContainerPop: ParticleContainerPipe, container: ParticleContainer): void;\n}\n\n/**\n * Renderer for Particles that is designer for speed over feature set.\n * @memberof scene\n */\nexport class ParticleContainerPipe implements RenderPipe<ParticleContainer>\n{\n    /** The default shader that is used if a sprite doesn't have a more specific one. */\n    public defaultShader: Shader;\n\n    public adaptor: ParticleContainerAdaptor;\n    public readonly state = State.for2d();\n    public readonly renderer: Renderer;\n\n    private _gpuBufferHash: Record<number, ParticleBuffer> = Object.create(null);\n    // eslint-disable-next-line max-len\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as unknown as (renderable: Container) => void;\n\n    public readonly localUniforms = new UniformGroup({\n        uTranslationMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        uColor: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uRound: { value: 1, type: 'f32' },\n        uResolution: { value: [0, 0], type: 'vec2<f32>' },\n    });\n\n    /**\n     * @param renderer - The renderer this sprite batch works for.\n     * @param adaptor\n     */\n    constructor(renderer: Renderer, adaptor: ParticleContainerAdaptor)\n    {\n        this.renderer = renderer;\n\n        this.adaptor = adaptor;\n\n        this.defaultShader = new ParticleShader();\n\n        this.state = State.for2d();\n    }\n\n    public validateRenderable(_renderable: ParticleContainer): boolean\n    {\n        // always fine :D\n        return false;\n    }\n\n    public addRenderable(renderable: ParticleContainer, instructionSet: InstructionSet)\n    {\n        this.renderer.renderPipes.batch.break(instructionSet);\n        instructionSet.add(renderable);\n    }\n\n    public getBuffers(renderable: ParticleContainer): ParticleBuffer\n    {\n        return this._gpuBufferHash[renderable.uid] || this._initBuffer(renderable);\n    }\n\n    private _initBuffer(renderable: ParticleContainer): ParticleBuffer\n    {\n        this._gpuBufferHash[renderable.uid] = new ParticleBuffer({\n            size: renderable.particleChildren.length,\n            properties: renderable._properties,\n        });\n\n        renderable.on('destroyed', this._destroyRenderableBound);\n\n        return this._gpuBufferHash[renderable.uid];\n    }\n\n    public updateRenderable(_renderable: ParticleContainer)\n    {\n        // nothing to be done here!\n\n    }\n\n    public destroyRenderable(renderable: ParticleContainer)\n    {\n        const buffer = this._gpuBufferHash[renderable.uid];\n\n        buffer.destroy();\n\n        this._gpuBufferHash[renderable.uid] = null;\n\n        renderable.off('destroyed', this._destroyRenderableBound);\n    }\n\n    public execute(container: ParticleContainer): void\n    {\n        const children = container.particleChildren;\n\n        if (children.length === 0)\n        {\n            return;\n        }\n\n        const renderer = this.renderer;\n        const buffer = this.getBuffers(container);\n\n        container.texture ||= children[0].texture;\n\n        const state = this.state;\n\n        buffer.update(children, container._childrenDirty);\n        container._childrenDirty = false;\n\n        state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n\n        const uniforms = this.localUniforms.uniforms;\n\n        const transformationMatrix = uniforms.uTranslationMatrix;\n\n        container.worldTransform.copyTo(transformationMatrix);\n\n        transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n\n        uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n        uniforms.uRound = renderer._roundPixels | container._roundPixels;\n\n        color32BitToUniform(\n            container.groupColorAlpha,\n            uniforms.uColor,\n            0\n        );\n\n        this.adaptor.execute(this, container);\n    }\n\n    /** Destroys the ParticleRenderer. */\n    public destroy(): void\n    {\n        if (this.defaultShader)\n        {\n            this.defaultShader.destroy();\n            this.defaultShader = null;\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1101, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1107, "column": 0}, "map": {"version":3,"file":"GlParticleContainerPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/shared/GlParticleContainerPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { GlParticleContainerAdaptor } from '../gl/GlParticleContainerAdaptor';\nimport { ParticleContainerPipe } from './ParticleContainerPipe';\n\nimport type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\n\nexport class GlParticleContainerPipe extends ParticleContainerPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n        ],\n        name: 'particle',\n    } as const;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        super(renderer, new GlParticleContainerAdaptor());\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;AAMO,MAAM,2OAAgC,wBAC7C,CAAA;IASI,YAAY,QACZ,CAAA;QACU,KAAA,CAAA,QAAA,EAAU,IAAI,yOAAA,EAA4B,CAAA,CAAA;IAAA,CACpD;AACJ,CAAA;AAAA,YAAA,GAda,uBAAA,CAGK,SAAY,GAAA;IACtB,IAAM,EAAA;0KACF,gBAAc,CAAA,UAAA;KAClB;IACA,IAAM,EAAA,UAAA;AACV,CAAA","ignoreList":[0]}},
    {"offset": {"line": 1130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1136, "column": 0}, "map": {"version":3,"file":"GpuParticleContainerAdaptor.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/gpu/GpuParticleContainerAdaptor.ts"],"sourcesContent":["import type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\nimport type { ParticleContainer } from '../shared/ParticleContainer';\nimport type { ParticleContainerAdaptor, ParticleContainerPipe } from '../shared/ParticleContainerPipe';\n\nexport class GpuParticleContainerAdaptor implements ParticleContainerAdaptor\n{\n    public execute(particleContainerPipe: ParticleContainerPipe, container: ParticleContainer)\n    {\n        const renderer = particleContainerPipe.renderer as WebGPURenderer;\n\n        const shader = container.shader || particleContainerPipe.defaultShader;\n\n        shader.groups[0] = renderer.renderPipes.uniformBatch.getUniformBindGroup(particleContainerPipe.localUniforms, true);\n\n        shader.groups[1] = renderer.texture.getTextureBindGroup(container.texture);\n\n        const state = particleContainerPipe.state;\n\n        const buffer = particleContainerPipe.getBuffers(container);\n\n        renderer.encoder.draw({\n            geometry: buffer.geometry,\n            shader: container.shader || particleContainerPipe.defaultShader,\n            state,\n            size: container.particleChildren.length * 6,\n        });\n    }\n}\n"],"names":[],"mappings":";;;;AAIO,MAAM,2BACb,CAAA;IACW,OAAA,CAAQ,qBAAA,EAA8C,SAC7D,EAAA;QACI,MAAM,WAAW,qBAAsB,CAAA,QAAA,CAAA;QAEjC,MAAA,MAAA,GAAS,SAAU,CAAA,MAAA,IAAU,qBAAsB,CAAA,aAAA,CAAA;QAElD,MAAA,CAAA,MAAA,CAAO,CAAC,CAAI,GAAA,QAAA,CAAS,WAAA,CAAY,YAAa,CAAA,mBAAA,CAAoB,qBAAsB,CAAA,aAAA,EAAe,IAAI,CAAA,CAAA;QAElH,MAAA,CAAO,MAAA,CAAO,CAAC,CAAA,GAAI,SAAS,OAAQ,CAAA,mBAAA,CAAoB,UAAU,OAAO,CAAA,CAAA;QAEzE,MAAM,QAAQ,qBAAsB,CAAA,KAAA,CAAA;QAE9B,MAAA,MAAA,GAAS,qBAAsB,CAAA,UAAA,CAAW,SAAS,CAAA,CAAA;QAEzD,QAAA,CAAS,OAAA,CAAQ,IAAK,CAAA;YAClB,UAAU,MAAO,CAAA,QAAA;YACjB,MAAA,EAAQ,SAAU,CAAA,MAAA,IAAU,qBAAsB,CAAA,aAAA;YAClD,KAAA;YACA,IAAA,EAAM,SAAU,CAAA,gBAAA,CAAiB,MAAS,GAAA,CAAA;QAAA,CAC7C,CAAA,CAAA;IAAA,CACL;AACJ","ignoreList":[0]}},
    {"offset": {"line": 1158, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1164, "column": 0}, "map": {"version":3,"file":"GpuParticleContainerPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/shared/GpuParticleContainerPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { GpuParticleContainerAdaptor } from '../gpu/GpuParticleContainerAdaptor';\nimport { ParticleContainerPipe } from './ParticleContainerPipe';\n\nimport type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\n\nexport class GpuParticleContainerPipe extends ParticleContainerPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipes,\n        ],\n        name: 'particle',\n    } as const;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        super(renderer, new GpuParticleContainerAdaptor());\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;AAMO,MAAM,4OAAiC,wBAC9C,CAAA;IASI,YAAY,QACZ,CAAA;QACU,KAAA,CAAA,QAAA,EAAU,IAAI,4OAAA,EAA6B,CAAA,CAAA;IAAA,CACrD;AACJ,CAAA;AAAA,YAAA,GAda,wBAAA,CAGK,SAAY,GAAA;IACtB,IAAM,EAAA;0KACF,gBAAc,CAAA,WAAA;KAClB;IACA,IAAM,EAAA,UAAA;AACV,CAAA","ignoreList":[0]}},
    {"offset": {"line": 1187, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1193, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { GlParticleContainerPipe } from './shared/GlParticleContainerPipe';\nimport { GpuParticleContainerPipe } from './shared/GpuParticleContainerPipe';\n\n// NOTE: this is the first occurrence of needing both gl and gpu pipes in the same file\n// This could cause some issues with tree shaking in the future.\n// Right now these two files do not import anything specific for a renderer, so is not an issue for now.\nextensions.add(GlParticleContainerPipe);\nextensions.add(GpuParticleContainerPipe);\n"],"names":[],"mappings":";;;;;;;;kKAOA,aAAA,CAAW,GAAA,8MAAI,0BAAuB,CAAA,CAAA;kKACtC,aAAA,CAAW,GAAA,+MAAI,2BAAwB,CAAA","ignoreList":[0]}},
    {"offset": {"line": 1203, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1209, "column": 0}, "map": {"version":3,"file":"getPo2TextureFromSource.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/utils/getPo2TextureFromSource.ts"],"sourcesContent":["import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { Bounds } from '../../container/bounds/Bounds';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\n\nconst tempBounds = new Bounds();\n\n/**\n * Takes an image and creates a texture from it, using a power of 2 texture from the texture pool.\n * Remember to return the texture when you don't need it any more!\n * @param image - The image to create a texture from\n * @param width - the frame width of the texture\n * @param height - the frame height of the texture\n * @param resolution - The resolution of the texture\n * @returns - The texture\n */\nexport function getPo2TextureFromSource(\n    image: HTMLImageElement | HTMLCanvasElement | ICanvas,\n    width: number,\n    height: number,\n    resolution: number\n): Texture\n{\n    const bounds = tempBounds;\n\n    bounds.minX = 0;\n    bounds.minY = 0;\n\n    bounds.maxX = (image.width / resolution) | 0;\n    bounds.maxY = (image.height / resolution) | 0;\n\n    const texture = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        resolution,\n        false\n    );\n\n    texture.source.uploadMethodId = 'image';\n    texture.source.resource = image;\n    texture.source.alphaMode = 'premultiply-alpha-on-upload';\n\n    texture.frame.width = width / resolution;\n    texture.frame.height = height / resolution;\n\n    // We want to update the resource on the GPU,\n    // but we do not want to resize the texture.\n    // calling `texture.source.update` will fit the resource to the texture\n    // causing a resize of the texture on the GPU.\n    // which is not what we want!\n    texture.source.emit('update', texture.source);\n\n    texture.updateUvs();\n\n    return texture;\n}\n"],"names":[],"mappings":";;;;;;;;AAMA,MAAM,UAAA,GAAa,oLAAI,SAAO,EAAA,CAAA;AAWvB,SAAS,uBACZ,CAAA,KAAA,EACA,KACA,EAAA,MAAA,EACA,UAEJ,EAAA;IACI,MAAM,MAAS,GAAA,UAAA,CAAA;IAEf,MAAA,CAAO,IAAO,GAAA,CAAA,CAAA;IACd,MAAA,CAAO,IAAO,GAAA,CAAA,CAAA;IAEP,MAAA,CAAA,IAAA,GAAQ,KAAM,CAAA,KAAA,GAAQ,UAAc,GAAA,CAAA,CAAA;IACpC,MAAA,CAAA,IAAA,GAAQ,KAAM,CAAA,MAAA,GAAS,UAAc,GAAA,CAAA,CAAA;IAE5C,MAAM,8MAAU,cAAY,CAAA,iBAAA,CACxB,MAAO,CAAA,KAAA,EACP,MAAO,CAAA,MAAA,EACP,UAAA,EACA,KAAA;IAGJ,OAAA,CAAQ,MAAA,CAAO,cAAiB,GAAA,OAAA,CAAA;IAChC,OAAA,CAAQ,MAAA,CAAO,QAAW,GAAA,KAAA,CAAA;IAC1B,OAAA,CAAQ,MAAA,CAAO,SAAY,GAAA,6BAAA,CAAA;IAEnB,OAAA,CAAA,KAAA,CAAM,KAAA,GAAQ,KAAQ,GAAA,UAAA,CAAA;IACtB,OAAA,CAAA,KAAA,CAAM,MAAA,GAAS,MAAS,GAAA,UAAA,CAAA;IAOhC,OAAA,CAAQ,MAAO,CAAA,IAAA,CAAK,QAAU,EAAA,OAAA,CAAQ,MAAM,CAAA,CAAA;IAE5C,OAAA,CAAQ,SAAU,EAAA,CAAA;IAEX,OAAA,OAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 1236, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1242, "column": 0}, "map": {"version":3,"file":"getCanvasBoundingBox.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/utils/canvas/getCanvasBoundingBox.ts"],"sourcesContent":["import { Rectangle } from '../../maths/shapes/Rectangle';\n\nimport type { ICanvas } from '../../environment/canvas/ICanvas';\n\nfunction checkRow(data: Uint8ClampedArray, width: number, y: number)\n{\n    for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4)\n    {\n        if (data[index + 3] !== 0) return false;\n    }\n\n    return true;\n}\n\nfunction checkColumn(data: Uint8ClampedArray, width: number, x: number, top: number, bottom: number)\n{\n    const stride = 4 * width;\n\n    for (let y = top, index = (top * stride) + (4 * x); y <= bottom; ++y, index += stride)\n    {\n        if (data[index + 3] !== 0) return false;\n    }\n\n    return true;\n}\n\n/**\n * Measuring the bounds of a canvas' visible (non-transparent) pixels.\n * @param canvas - The canvas to measure.\n * @param resolution - The resolution of the canvas.\n * @returns The bounding box of the canvas' visible pixels.\n * @since 7.1.0\n * @memberof utils\n */\nexport function getCanvasBoundingBox(canvas: ICanvas, resolution = 1): Rectangle\n{\n    // https://gist.github.com/timdown/021d9c8f2aabc7092df564996f5afbbf\n\n    const { width, height } = canvas;\n\n    const context = canvas.getContext('2d', {\n        willReadFrequently: true,\n    });\n\n    if (context === null)\n    {\n        throw new TypeError('Failed to get canvas 2D context');\n    }\n\n    const imageData = context.getImageData(0, 0, width, height);\n    const data = imageData.data;\n\n    let left = 0;\n    let top = 0;\n    let right = width - 1;\n    let bottom = height - 1;\n\n    while (top < height && checkRow(data, width, top)) ++top;\n    if (top === height) return Rectangle.EMPTY;\n    while (checkRow(data, width, bottom)) --bottom;\n    while (checkColumn(data, width, left, top, bottom)) ++left;\n    while (checkColumn(data, width, right, top, bottom)) --right;\n\n    ++right;\n    ++bottom;\n\n    return new Rectangle(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n}\n"],"names":[],"mappings":";;;;;;AAIA,SAAS,QAAA,CAAS,IAAyB,EAAA,KAAA,EAAe,CAC1D,EAAA;IACa,IAAA,IAAA,CAAA,GAAI,CAAG,EAAA,KAAA,GAAQ,CAAI,GAAA,CAAA,GAAI,KAAO,EAAA,CAAA,GAAI,KAAO,EAAA,EAAE,CAAG,EAAA,KAAA,IAAS,CAChE,CAAA;QACQ,IAAA,IAAA,CAAK,KAAQ,GAAA,CAAC,CAAM,KAAA,CAAA,EAAU,OAAA,KAAA,CAAA;IAAA,CACtC;IAEO,OAAA,IAAA,CAAA;AACX,CAAA;AAEA,SAAS,WAAY,CAAA,IAAA,EAAyB,KAAe,EAAA,CAAA,EAAW,GAAA,EAAa,MACrF,EAAA;IACI,MAAM,SAAS,CAAI,GAAA,KAAA,CAAA;IAEnB,IAAA,IAAS,CAAI,GAAA,GAAA,EAAK,KAAS,GAAA,GAAA,GAAM,MAAW,GAAA,CAAA,GAAI,CAAI,EAAA,CAAA,IAAK,MAAQ,EAAA,EAAE,CAAG,EAAA,KAAA,IAAS,MAC/E,CAAA;QACQ,IAAA,IAAA,CAAK,KAAQ,GAAA,CAAC,CAAM,KAAA,CAAA,EAAU,OAAA,KAAA,CAAA;IAAA,CACtC;IAEO,OAAA,IAAA,CAAA;AACX,CAAA;AAUgB,SAAA,oBAAA,CAAqB,MAAiB,EAAA,UAAA,GAAa,CACnE,EAAA;IAGU,MAAA,EAAE,KAAO,EAAA,MAAA,EAAW,GAAA,MAAA,CAAA;IAEpB,MAAA,OAAA,GAAU,MAAO,CAAA,UAAA,CAAW,IAAM,EAAA;QACpC,kBAAoB,EAAA,IAAA;IAAA,CACvB,CAAA,CAAA;IAED,IAAI,YAAY,IAChB,EAAA;QACU,MAAA,IAAI,UAAU,iCAAiC,CAAA,CAAA;IAAA,CACzD;IAEA,MAAM,YAAY,OAAQ,CAAA,YAAA,CAAa,CAAG,EAAA,CAAA,EAAG,OAAO,MAAM,CAAA,CAAA;IAC1D,MAAM,OAAO,SAAU,CAAA,IAAA,CAAA;IAEvB,IAAI,IAAO,GAAA,CAAA,CAAA;IACX,IAAI,GAAM,GAAA,CAAA,CAAA;IACV,IAAI,QAAQ,KAAQ,GAAA,CAAA,CAAA;IACpB,IAAI,SAAS,MAAS,GAAA,CAAA,CAAA;IAEtB,MAAO,GAAM,GAAA,MAAA,IAAU,QAAS,CAAA,IAAA,EAAM,OAAO,GAAG,CAAA,CAAK,EAAA,GAAA,CAAA;IACrD,IAAI,GAAQ,KAAA,MAAA,EAAQ,6KAAO,YAAU,CAAA,KAAA,CAAA;IAC9B,MAAA,QAAA,CAAS,IAAM,EAAA,KAAA,EAAO,MAAM,CAAA,CAAK,EAAA,MAAA,CAAA;IACxC,MAAO,WAAY,CAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,KAAK,MAAM,CAAA,CAAK,EAAA,IAAA,CAAA;IACtD,MAAO,WAAY,CAAA,IAAA,EAAM,KAAO,EAAA,KAAA,EAAO,KAAK,MAAM,CAAA,CAAK,EAAA,KAAA,CAAA;IAErD,EAAA,KAAA,CAAA;IACA,EAAA,MAAA,CAAA;IAEK,OAAA,0KAAI,YAAU,CAAA,IAAA,GAAO,UAAY,EAAA,GAAA,GAAM,UAAa,EAAA,CAAA,KAAA,GAAQ,IAAQ,IAAA,UAAA,EAAA,CAAa,MAAS,GAAA,GAAA,IAAO,UAAU,CAAA,CAAA;AACtH","ignoreList":[0]}},
    {"offset": {"line": 1286, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1292, "column": 0}, "map": {"version":3,"file":"CanvasTextSystem.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/canvas/CanvasTextSystem.ts"],"sourcesContent":["import { Color } from '../../../color/Color';\nimport { ExtensionType } from '../../../extensions/Extensions';\nimport { nextPow2 } from '../../../maths/misc/pow2';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox';\nimport { deprecation } from '../../../utils/logging/deprecation';\nimport { TextStyle } from '../TextStyle';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource';\nimport { CanvasTextMetrics } from './CanvasTextMetrics';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { System } from '../../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { TextOptions } from '../AbstractText';\nimport type { Text } from '../Text';\n\ninterface CanvasAndContext\n{\n    canvas: ICanvas;\n    context: ICanvasRenderingContext2D;\n}\n\n/**\n * System plugin to the renderer to manage canvas text.\n * @memberof rendering\n */\nexport class CanvasTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'canvasText',\n    } as const;\n\n    private _activeTextures: Record<string, {\n        canvasAndContext: CanvasAndContext,\n        texture: Texture,\n        usageCount: number,\n    }> = {};\n\n    private readonly _renderer: Renderer;\n\n    constructor(_renderer: Renderer)\n    {\n        this._renderer = _renderer;\n    }\n\n    public getTextureSize(text: string, resolution: number, style: TextStyle): { width: number, height: number }\n    {\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);\n\n        let width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        let height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        width = Math.ceil((width) - 1e-6);\n        height = Math.ceil((height) - 1e-6);\n        width = nextPow2(width);\n        height = nextPow2(height);\n\n        return { width, height };\n    }\n\n    /**\n     * This is a function that will create a texture from a text string, style and resolution.\n     * Useful if you want to make a texture of your text and use if for various other pixi things!\n     * @param options - The options of the text that will be used to generate the texture.\n     * @param options.text - the text to render\n     * @param options.style - the style of the text\n     * @param options.resolution - the resolution of the texture\n     * @returns the newly created texture\n     */\n    /** @deprecated since 8.0.0 */\n    public getTexture(text: string, resolution: number, style: TextStyle, textKey: string): Texture;\n    public getTexture(options: TextOptions): Texture;\n    public getTexture(options: TextOptions | string, resolution?: number, style?: TextStyle, _textKey?: string): Texture\n    {\n        if (typeof options === 'string')\n        {\n            // #if _DEBUG\n            deprecation('8.0.0', 'CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments');\n            // #endif\n\n            options = {\n                text: options,\n                style,\n                resolution,\n            };\n        }\n\n        if (!(options.style instanceof TextStyle))\n        {\n            options.style = new TextStyle(options.style);\n        }\n\n        const { texture, canvasAndContext } = this.createTextureAndCanvas(\n            options as {text: string, style: TextStyle, resolution?: number}\n        );\n\n        this._renderer.texture.initSource(texture._source);\n\n        CanvasPool.returnCanvasAndContext(canvasAndContext);\n\n        return texture;\n    }\n\n    public createTextureAndCanvas(options: {text: string, style: TextStyle, resolution?: number})\n    {\n        const { text, style } = options;\n\n        const resolution = options.resolution ?? this._renderer.resolution;\n\n        // create a canvas with the word hello on it\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);\n\n        const width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        const height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n\n        // create a texture from the canvas\n        const { canvas } = canvasAndContext;\n\n        this.renderTextToCanvas(text, style, resolution, canvasAndContext);\n\n        const texture = getPo2TextureFromSource(canvas, width, height, resolution);\n\n        if (style.trim)\n        {\n            const trimmed = getCanvasBoundingBox(canvas, resolution);\n\n            texture.frame.copyFrom(trimmed);\n\n            texture.updateUvs();\n        }\n\n        return { texture, canvasAndContext };\n    }\n\n    public getManagedTexture(text: Text)\n    {\n        text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n        const textKey = text._getKey();\n\n        if (this._activeTextures[textKey])\n        {\n            this._increaseReferenceCount(textKey);\n\n            return this._activeTextures[textKey].texture;\n        }\n\n        const { texture, canvasAndContext } = this.createTextureAndCanvas(text);\n\n        this._activeTextures[textKey] = {\n            canvasAndContext,\n            texture,\n            usageCount: 1,\n        };\n\n        return texture;\n    }\n\n    private _increaseReferenceCount(textKey: string)\n    {\n        this._activeTextures[textKey].usageCount++;\n    }\n\n    public decreaseReferenceCount(textKey: string)\n    {\n        const activeTexture = this._activeTextures[textKey];\n\n        activeTexture.usageCount--;\n\n        if (activeTexture.usageCount === 0)\n        {\n            CanvasPool.returnCanvasAndContext(activeTexture.canvasAndContext);\n            TexturePool.returnTexture(activeTexture.texture);\n\n            const source = activeTexture.texture.source;\n\n            source.resource = null;\n            source.uploadMethodId = 'unknown';\n            source.alphaMode = 'no-premultiply-alpha';\n\n            this._activeTextures[textKey] = null;\n        }\n    }\n\n    public getReferenceCount(textKey: string)\n    {\n        return this._activeTextures[textKey].usageCount;\n    }\n\n    /**\n     * Renders text to its canvas, and updates its texture.\n     *\n     * By default this is used internally to ensure the texture is correct before rendering,\n     * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n     * and then shared across multiple Sprites.\n     * @param text\n     * @param style\n     * @param resolution\n     * @param canvasAndContext\n     */\n    public renderTextToCanvas(text: string, style: TextStyle, resolution: number, canvasAndContext: CanvasAndContext): void\n    {\n        const { canvas, context } = canvasAndContext;\n\n        const font = fontStringFromTextStyle(style);\n\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);// , canvas);\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        const height = canvas.height;\n\n        context.resetTransform();\n        context.scale(resolution, resolution);\n        context.textBaseline = style.textBaseline;\n\n        // set stroke styles..\n\n        if (style._stroke?.width)\n        {\n            const strokeStyle = style._stroke;\n\n            context.lineWidth = strokeStyle.width;\n\n            context.miterLimit = strokeStyle.miterLimit;\n            context.lineJoin = strokeStyle.join;\n            context.lineCap = strokeStyle.cap;\n        }\n\n        // return;\n        context.font = font;\n\n        let linePositionX: number;\n        let linePositionY: number;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            // we only want the drop shadow, so put text way off-screen\n            const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + (style.padding * 2)) : 0;\n            const dsOffsetShadow = dsOffsetText * resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const shadowOptions = style.dropShadow;\n\n                const dropShadowColor = shadowOptions.color;\n                const dropShadowAlpha = shadowOptions.alpha;\n\n                context.shadowColor = Color.shared\n                    .setValue(dropShadowColor)\n                    .setAlpha(dropShadowAlpha)\n                    .toRgbaString();\n\n                const dropShadowBlur = shadowOptions.blur * resolution;\n                const dropShadowDistance = shadowOptions.distance * resolution;\n\n                context.shadowBlur = dropShadowBlur;\n                context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(shadowOptions.angle) * dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context) : null;\n\n                if (style._stroke?.width)\n                {\n                    context.strokeStyle = getCanvasFillStyle(style._stroke, context);\n                }\n\n                context.shadowColor = 'black';\n            }\n\n            let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n\n            if (lineHeight - fontProperties.fontSize < 0)\n            {\n                linePositionYShift = 0;\n            }\n\n            const strokeWidth = style._stroke?.width ?? 0;\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = strokeWidth / 2;\n                linePositionY = ((strokeWidth / 2) + (i * lineHeight)) + fontProperties.ascent + linePositionYShift;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style._stroke?.width)\n                {\n                    this._drawLetterSpacing(\n                        lines[i],\n                        style,\n                        canvasAndContext,\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style._fill !== undefined)\n                {\n                    this._drawLetterSpacing(\n                        lines[i],\n                        style,\n                        canvasAndContext,\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     * @param text - The text to draw\n     * @param style\n     * @param canvasAndContext\n     * @param x - Horizontal position to draw the text\n     * @param y - Vertical position to draw the text\n     * @param isStroke - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     */\n    private _drawLetterSpacing(\n        text: string,\n        style: TextStyle,\n        canvasAndContext: CanvasAndContext,\n        x: number, y: number,\n        isStroke = false\n    ): void\n    {\n        const { context } = canvasAndContext;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        let useExperimentalLetterSpacing = false;\n\n        if (CanvasTextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (CanvasTextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        if (letterSpacing === 0 || useExperimentalLetterSpacing)\n        {\n            if (isStroke)\n            {\n                context.strokeText(text, x, y);\n            }\n            else\n            {\n                context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n        let previousWidth = context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                context.fillText(currentChar, currentPosition, y);\n            }\n            let textStr = '';\n\n            for (let j = i + 1; j < stringArray.length; ++j)\n            {\n                textStr += stringArray[j];\n            }\n            currentWidth = context.measureText(textStr).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    public destroy(): void\n    {\n        this._activeTextures = null;\n    }\n}\n"],"names":["i"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1553, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1559, "column": 0}, "map": {"version":3,"file":"BatchableSprite.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite/BatchableSprite.ts"],"sourcesContent":["import type { Matrix } from '../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableQuadElement } from '../../rendering/batcher/shared/DefaultBatcher';\nimport type { Topology } from '../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { BoundsData } from '../container/bounds/Bounds';\nimport type { Container } from '../container/Container';\n\n/**\n * A batchable sprite object.\n * @ignore\n */\nexport class BatchableSprite implements DefaultBatchableQuadElement\n{\n    public batcherName = 'default';\n    public topology: Topology = 'triangle-list';\n\n    // batch specific..\n    public readonly attributeSize = 4;\n    public readonly indexSize = 6;\n    public readonly packAsQuad = true;\n\n    public transform: Matrix;\n\n    public renderable: Container;\n    public texture: Texture;\n    public bounds: BoundsData;\n\n    public roundPixels: 0 | 1 = 0;\n\n    public _indexStart: number;\n    public _textureId: number;\n    public _attributeStart = 0; // location in the buffer\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n    get color() { return this.renderable.groupColorAlpha; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.bounds = null;\n    }\n}\n"],"names":[],"mappings":";;;;AAYO,MAAM,eACb,CAAA;IADO,WAAA,EAAA;QAEH,IAAA,CAAO,WAAc,GAAA,SAAA,CAAA;QACrB,IAAA,CAAO,QAAqB,GAAA,eAAA,CAAA;QAG5B,mBAAA;QAAA,IAAA,CAAgB,aAAgB,GAAA,CAAA,CAAA;QAChC,IAAA,CAAgB,SAAY,GAAA,CAAA,CAAA;QAC5B,IAAA,CAAgB,UAAa,GAAA,IAAA,CAAA;QAQ7B,IAAA,CAAO,WAAqB,GAAA,CAAA,CAAA;QAI5B,IAAA,CAAO,eAAkB,GAAA,CAAA,CAAA;QACzB,yBAAA;QAAA,IAAA,CAAO,QAAoB,GAAA,IAAA,CAAA;QAC3B,IAAA,CAAO,MAAgB,GAAA,IAAA,CAAA;IAAA,CAAA;IAEvB,IAAI,SAAY,GAAA;QAAE,OAAO,IAAA,CAAK,UAAW,CAAA,cAAA,CAAA;IAAA,CAAgB;IACzD,IAAI,KAAQ,GAAA;QAAE,OAAO,IAAA,CAAK,UAAW,CAAA,eAAA,CAAA;IAAA,CAAiB;IAE/C,KACP,GAAA;QACI,IAAA,CAAK,UAAa,GAAA,IAAA,CAAA;QAClB,IAAA,CAAK,OAAU,GAAA,IAAA,CAAA;QACf,IAAA,CAAK,QAAW,GAAA,IAAA,CAAA;QAChB,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QACd,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;IAAA,CAClB;AACJ","ignoreList":[0]}},
    {"offset": {"line": 1593, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1599, "column": 0}, "map": {"version":3,"file":"CanvasTextPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/canvas/CanvasTextPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { updateQuadBounds } from '../../../utils/data/updateQuadBounds';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../../sprite/BatchableSprite';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Container } from '../../container/Container';\nimport type { Text } from '../Text';\n\nexport class CanvasTextPipe implements RenderPipe<Text>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'text',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _gpuText: Record<number, {\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n    }> = Object.create(null);\n\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.runners.resolutionChange.add(this);\n        this._renderer.renderableGC.addManagedHash(this, '_gpuText');\n    }\n\n    public resolutionChange()\n    {\n        for (const i in this._gpuText)\n        {\n            const gpuText = this._gpuText[i];\n\n            if (!gpuText) continue;\n\n            const text = gpuText.batchableSprite.renderable as Text;\n\n            if (text._autoResolution)\n            {\n                text._resolution = this._renderer.resolution;\n                text.onViewUpdate();\n            }\n        }\n    }\n\n    public validateRenderable(text: Text): boolean\n    {\n        const gpuText = this._getGpuText(text);\n\n        const newKey = text._getKey();\n\n        if (gpuText.currentKey !== newKey)\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(text: Text, instructionSet: InstructionSet)\n    {\n        const gpuText = this._getGpuText(text);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (text._didTextUpdate)\n        {\n            this._updateText(text);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n    }\n\n    public updateRenderable(text: Text)\n    {\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (text._didTextUpdate)\n        {\n            this._updateText(text);\n        }\n\n        batchableSprite._batcher.updateElement(batchableSprite);\n    }\n\n    public destroyRenderable(text: Text)\n    {\n        text.off('destroyed', this._destroyRenderableBound);\n\n        this._destroyRenderableById(text.uid);\n    }\n\n    private _destroyRenderableById(textUid: number)\n    {\n        const gpuText = this._gpuText[textUid];\n\n        this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this._gpuText[textUid] = null;\n    }\n\n    private _updateText(text: Text)\n    {\n        const newKey = text._getKey();\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this._updateGpuText(text);\n        }\n\n        text._didTextUpdate = false;\n\n        const padding = text._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, text._anchor, batchableSprite.texture, padding);\n    }\n\n    private _updateGpuText(text: Text)\n    {\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.texture)\n        {\n            this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n        }\n\n        gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n        gpuText.currentKey = text._getKey();\n        batchableSprite.texture = gpuText.texture;\n    }\n\n    private _getGpuText(text: Text)\n    {\n        return this._gpuText[text.uid] || this.initGpuText(text);\n    }\n\n    public initGpuText(text: Text)\n    {\n        const gpuTextData: CanvasTextPipe['_gpuText'][number] = {\n            texture: null,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n        };\n\n        gpuTextData.batchableSprite.renderable = text;\n        gpuTextData.batchableSprite.transform = text.groupTransform;\n        gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        gpuTextData.batchableSprite.roundPixels = (this._renderer._roundPixels | text._roundPixels) as 0 | 1;\n\n        this._gpuText[text.uid] = gpuTextData;\n\n        text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n        this._updateText(text);\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        text.on('destroyed', this._destroyRenderableBound);\n\n        return gpuTextData;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuText)\n        {\n            this._destroyRenderableById(i as unknown as number);\n        }\n\n        this._gpuText = null;\n        this._renderer = null;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1727, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1733, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem';\n\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n"],"names":[],"mappings":";;;;;;;;kKAIA,aAAA,CAAW,GAAA,sLAAI,mBAAgB,CAAA,CAAA;kKAC/B,aAAA,CAAW,GAAA,oLAAI,iBAAc,CAAA","ignoreList":[0]}},
    {"offset": {"line": 1743, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1749, "column": 0}, "map": {"version":3,"file":"localUniformMSDFBit.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/sdfShader/shader-bits/localUniformMSDFBit.ts"],"sourcesContent":["// TODO eventually we should not use this bit, but instead use the localUniformBit\n// have the MSDF bit be merged in with the localUniformBit\n\nexport const localUniformMSDFBit = {\n    name: 'local-uniform-msdf-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `,\n        main: /* wgsl */` \n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        `\n\n    }\n};\n\nexport const localUniformMSDFBitGl = {\n    name: 'local-uniform-msdf-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform float uDistance;\n         `,\n        main: /* glsl */` \n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        `\n\n    }\n};\n"],"names":[],"mappings":";;;;;AAGO,MAAM,mBAAsB,GAAA;IAC/B,IAAM,EAAA,wBAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;;;;;QAAA,CAAA;QAUlB,IAAA,EAAA,QAAA,GAAgB,CAAA;;;QAAA,CAAA;QAIhB,GAAA,EAAA,QAAA,GAAe,CAAA;;;;;QAAA,CAAA;IAAA,CAMnB;IACA,QAAU,EAAA;QACN,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;;;;SAAA,CAAA;QASlB,IAAA,EAAA,QAAA,GAAgB,CAAA;;QAAA,CAAA;IAAA,CAIpB;AACJ,EAAA;AAEO,MAAM,qBAAwB,GAAA;IACjC,IAAM,EAAA,wBAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;QAAA,CAAA;QAKlB,IAAA,EAAA,QAAA,GAAgB,CAAA;;;QAAA,CAAA;QAIhB,GAAA,EAAA,QAAA,GAAe,CAAA;;;;;QAAA,CAAA;IAAA,CAMnB;IACA,QAAU,EAAA;QACN,MAAA,EAAA,QAAA,GAAkB,CAAA;;SAAA,CAAA;QAGlB,IAAA,EAAA,QAAA,GAAgB,CAAA;;QAAA,CAAA;IAAA,CAIpB;AACJ","ignoreList":[0]}},
    {"offset": {"line": 1823, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1829, "column": 0}, "map": {"version":3,"file":"mSDFBit.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/sdfShader/shader-bits/mSDFBit.ts"],"sourcesContent":["export const mSDFBit = {\n    name: 'msdf-bit',\n    fragment: {\n        header: /* wgsl */`\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n             \n            }\n        `,\n    }\n\n};\n\nexport const mSDFBitGl = {\n    name: 'msdf-bit',\n    fragment: {\n        header: /* glsl */`\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);  \n              \n                return coverage;\n            }\n        `,\n    }\n\n};\n"],"names":[],"mappings":";;;;;AAAO,MAAM,OAAU,GAAA;IACnB,IAAM,EAAA,UAAA;IACN,QAAU,EAAA;QACN,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;QAAA,CAAA;IAAA,CA4BtB;AAEJ,EAAA;AAEO,MAAM,SAAY,GAAA;IACrB,IAAM,EAAA,UAAA;IACN,QAAU,EAAA;QACN,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;QAAA,CAAA;IAAA,CA4BtB;AAEJ","ignoreList":[0]}},
    {"offset": {"line": 1902, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1908, "column": 0}, "map": {"version":3,"file":"SdfShader.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/sdfShader/SdfShader.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit';\nimport {\n    generateTextureBatchBit,\n    generateTextureBatchBitGl\n} from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\nexport class SdfShader extends Shader\n{\n    constructor()\n    {\n        const uniforms = new UniformGroup({\n            uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n            uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uDistance: { value: 4, type: 'f32' },\n            uRound: { value: 0, type: 'f32' },\n        });\n\n        const maxTextures = getMaxTexturesPerBatch();\n\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBit,\n                generateTextureBatchBit(maxTextures),\n                localUniformMSDFBit,\n                mSDFBit,\n                roundPixelsBit\n            ]\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(maxTextures),\n                localUniformMSDFBitGl,\n                mSDFBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: uniforms,\n                batchSamplers: getBatchSamplersUniformGroup(maxTextures),\n            }\n        });\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAI,UAAA,CAAA;AACJ,IAAI,SAAA,CAAA;AAEG,MAAM,gNAAkB,SAC/B,CAAA;IACI,WACA,EAAA;QACU,MAAA,QAAA,GAAW,uMAAI,gBAAa,CAAA;YAC9B,MAAQ,EAAA;gBAAE,KAAO,EAAA,IAAI,YAAa,CAAA;oBAAC,CAAG;oBAAA,CAAA;oBAAG,CAAG;oBAAA,CAAC;iBAAC,CAAA;gBAAG,MAAM,WAAY;YAAA,CAAA;YACnE,kBAAkB;gBAAE,KAAA,EAAO,uKAAI,SAAO,EAAA;gBAAG,MAAM,aAAc;YAAA,CAAA;YAC7D,SAAW,EAAA;gBAAE,KAAO,EAAA,CAAA;gBAAG,MAAM,KAAM;YAAA,CAAA;YACnC,MAAQ,EAAA;gBAAE,KAAO,EAAA,CAAA;gBAAG,MAAM,KAAM;YAAA,CAAA;QAAA,CACnC,CAAA,CAAA;QAED,MAAM,cAAc,oOAAA,AAAuB,EAAA,CAAA;QAE3C,UAAA,IAAA,CAAA,UAAA,0MAAe,8BAAA,AAA4B,EAAA;YACvC,IAAM,EAAA,YAAA;YACN,IAAM,EAAA;mNACF,WAAA;iBACA,+OAAA,EAAwB,WAAW,CAAA;6NACnC,sBAAA;iNACA,UAAA;yNACA,iBAAA;aACJ;QAAA,CACH,CAAA,CAAA,CAAA;QAED,SAAA,IAAA,CAAA,SAAA,IAAc,mOAAA,AAA2B,EAAA;YACrC,IAAM,EAAA,YAAA;YACN,IAAM,EAAA;mNACF,aAAA;sOACA,4BAAA,EAA0B,WAAW,CAAA;gBACrC,qOAAA;iNACA,YAAA;yNACA,mBAAA;aACJ;QAAA,CACH,CAAA,CAAA,CAAA;QAEK,KAAA,CAAA;YACF,SAAA;YACA,UAAA;YACA,SAAW,EAAA;gBACP,aAAe,EAAA,QAAA;gBACf,aAAA,sNAAe,+BAAA,EAA6B,WAAW,CAAA;YAAA,CAC3D;QAAA,CACH,CAAA,CAAA;IAAA,CACL;AACJ","ignoreList":[0]}},
    {"offset": {"line": 1994, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2000, "column": 0}, "map": {"version":3,"file":"BitmapTextPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-bitmap/BitmapTextPipe.ts"],"sourcesContent":["import { Cache } from '../../assets/cache/Cache';\nimport { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { Graphics } from '../graphics/shared/Graphics';\nimport { SdfShader } from '../text/sdfShader/SdfShader';\nimport { BitmapFontManager } from './BitmapFontManager';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../rendering/renderers/shared/Renderable';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { Container } from '../container/Container';\nimport type { BitmapText } from './BitmapText';\n\nexport class BitmapTextPipe implements RenderPipe<BitmapText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'bitmapText',\n    } as const;\n\n    private _renderer: Renderer;\n    private _gpuBitmapText: Record<number, Graphics> = {};\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_gpuBitmapText');\n    }\n\n    public validateRenderable(bitmapText: BitmapText): boolean\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        if (bitmapText._didTextUpdate)\n        {\n            bitmapText._didTextUpdate = false;\n\n            this._updateContext(bitmapText, graphicsRenderable);\n        }\n\n        return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n\n        // TODO - need to shift all the verts in the graphicsData to the new anchor\n\n        // update the anchor...\n    }\n\n    public addRenderable(bitmapText: BitmapText, instructionSet: InstructionSet)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        if (bitmapText._didTextUpdate)\n        {\n            bitmapText._didTextUpdate = false;\n\n            this._updateContext(bitmapText, graphicsRenderable);\n        }\n\n        this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    public destroyRenderable(bitmapText: BitmapText)\n    {\n        bitmapText.off('destroyed', this._destroyRenderableBound);\n\n        this._destroyRenderableByUid(bitmapText.uid);\n    }\n\n    private _destroyRenderableByUid(renderableUid: number)\n    {\n        const context = this._gpuBitmapText[renderableUid].context;\n\n        if (context.customShader)\n        {\n            BigPool.return(context.customShader as PoolItem);\n\n            context.customShader = null;\n        }\n\n        BigPool.return(this._gpuBitmapText[renderableUid] as PoolItem);\n        this._gpuBitmapText[renderableUid] = null;\n    }\n\n    public updateRenderable(bitmapText: BitmapText)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    private _updateContext(bitmapText: BitmapText, proxyGraphics: Graphics)\n    {\n        const { context } = proxyGraphics;\n\n        const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n\n        context.clear();\n\n        if (bitmapFont.distanceField.type !== 'none')\n        {\n            if (!context.customShader)\n            {\n                context.customShader = BigPool.get(SdfShader);\n            }\n        }\n\n        const chars = Array.from(bitmapText.text);\n        const style = bitmapText._style;\n\n        let currentY = bitmapFont.baseLineOffset;\n\n        // measure our text...\n        const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont, true);\n\n        let index = 0;\n\n        const padding = style.padding;\n        const scale = bitmapTextLayout.scale;\n\n        let tx = bitmapTextLayout.width;\n        let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n\n        if (style._stroke)\n        {\n            tx += style._stroke.width / scale;\n            ty += style._stroke.width / scale;\n        }\n\n        context\n            .translate((-bitmapText._anchor._x * tx) - padding, (-bitmapText._anchor._y * ty) - padding)\n            .scale(scale, scale);\n\n        const tint = bitmapFont.applyFillAsTint ? style._fill.color : 0xFFFFFF;\n\n        for (let i = 0; i < bitmapTextLayout.lines.length; i++)\n        {\n            const line = bitmapTextLayout.lines[i];\n\n            for (let j = 0; j < line.charPositions.length; j++)\n            {\n                const char = chars[index++];\n\n                const charData = bitmapFont.chars[char];\n\n                if (charData?.texture)\n                {\n                    context.texture(\n                        charData.texture,\n                        tint ? tint : 'black',\n                        Math.round(line.charPositions[j] + charData.xOffset),\n                        Math.round(currentY + charData.yOffset),\n                    );\n                }\n            }\n\n            currentY += bitmapFont.lineHeight;\n        }\n    }\n\n    private _getGpuBitmapText(bitmapText: BitmapText)\n    {\n        return this._gpuBitmapText[bitmapText.uid] || this.initGpuText(bitmapText);\n    }\n\n    public initGpuText(bitmapText: BitmapText)\n    {\n        // TODO we could keep a bunch of contexts around and reuse one that has the same style!\n        const proxyRenderable = BigPool.get(Graphics);\n\n        this._gpuBitmapText[bitmapText.uid] = proxyRenderable;\n\n        this._updateContext(bitmapText, proxyRenderable);\n\n        bitmapText.on('destroyed', this._destroyRenderableBound);\n\n        return this._gpuBitmapText[bitmapText.uid];\n    }\n\n    private _updateDistanceField(bitmapText: BitmapText)\n    {\n        const context = this._getGpuBitmapText(bitmapText).context;\n\n        const fontFamily = bitmapText._style.fontFamily as string;\n        const dynamicFont = Cache.get(`${fontFamily as string}-bitmap`);\n\n        // Inject the shader code with the correct value\n        const { a, b, c, d } = bitmapText.groupTransform;\n\n        const dx = Math.sqrt((a * a) + (b * b));\n        const dy = Math.sqrt((c * c) + (d * d));\n        const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n\n        const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n\n        const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n\n        context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n    }\n\n    public destroy()\n    {\n        for (const uid in this._gpuBitmapText)\n        {\n            this._destroyRenderableByUid(uid as unknown as number);\n        }\n\n        this._gpuBitmapText = null;\n\n        this._renderer = null;\n    }\n}\n\nfunction syncWithProxy(container: Renderable, proxy: Renderable)\n{\n    proxy.groupTransform = container.groupTransform;\n    proxy.groupColorAlpha = container.groupColorAlpha;\n    proxy.groupColor = container.groupColor;\n    proxy.groupBlendMode = container.groupBlendMode;\n    proxy.globalDisplayStatus = container.globalDisplayStatus;\n    proxy.groupTransform = container.groupTransform;\n    proxy.localDisplayStatus = container.localDisplayStatus;\n    proxy.groupAlpha = container.groupAlpha;\n    proxy._roundPixels = container._roundPixels;\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2153, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2159, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-bitmap/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { BitmapTextPipe } from './BitmapTextPipe';\n\nextensions.add(BitmapTextPipe);\n"],"names":[],"mappings":";;;;;;kKAGA,aAAA,CAAW,GAAA,oLAAI,iBAAc,CAAA","ignoreList":[0]}},
    {"offset": {"line": 2166, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2172, "column": 0}, "map": {"version":3,"file":"HTMLTextRenderData.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/HTMLTextRenderData.ts"],"sourcesContent":["import type { CanvasAndContext } from '../../rendering/renderers/shared/texture/CanvasPool';\n\nexport const nssvg = 'http://www.w3.org/2000/svg';\nexport const nsxhtml = 'http://www.w3.org/1999/xhtml';\n\nexport class HTMLTextRenderData\n{\n    public svgRoot = document.createElementNS(nssvg, 'svg');\n    public foreignObject = document.createElementNS(nssvg, 'foreignObject');\n    public domElement = document.createElementNS(nsxhtml, 'div');\n    public styleElement = document.createElementNS(nsxhtml, 'style');\n    public image = new Image();\n    public canvasAndContext?: CanvasAndContext;\n\n    constructor()\n    {\n        const { foreignObject, svgRoot, styleElement, domElement } = this;\n        // Arbitrary max size\n\n        foreignObject.setAttribute('width', '10000');\n        foreignObject.setAttribute('height', '10000');\n        foreignObject.style.overflow = 'hidden';\n\n        svgRoot.appendChild(foreignObject);\n\n        foreignObject.appendChild(styleElement);\n        foreignObject.appendChild(domElement);\n    }\n}\n"],"names":[],"mappings":";;;;;;AAEO,MAAM,KAAQ,GAAA,6BAAA;AACd,MAAM,OAAU,GAAA,+BAAA;AAEhB,MAAM,kBACb,CAAA;IAQI,WACA,EAAA;QARA,IAAA,CAAO,OAAU,GAAA,QAAA,CAAS,eAAgB,CAAA,KAAA,EAAO,KAAK,CAAA,CAAA;QACtD,IAAA,CAAO,aAAgB,GAAA,QAAA,CAAS,eAAgB,CAAA,KAAA,EAAO,eAAe,CAAA,CAAA;QACtE,IAAA,CAAO,UAAa,GAAA,QAAA,CAAS,eAAgB,CAAA,OAAA,EAAS,KAAK,CAAA,CAAA;QAC3D,IAAA,CAAO,YAAe,GAAA,QAAA,CAAS,eAAgB,CAAA,OAAA,EAAS,OAAO,CAAA,CAAA;QACxD,IAAA,CAAA,KAAA,GAAQ,IAAI,KAAM,EAAA,CAAA;QAKrB,MAAM,EAAE,aAAA,EAAe,OAAS,EAAA,YAAA,EAAc,UAAA,EAAe,GAAA,IAAA,CAAA;QAG/C,aAAA,CAAA,YAAA,CAAa,SAAS,OAAO,CAAA,CAAA;QAC7B,aAAA,CAAA,YAAA,CAAa,UAAU,OAAO,CAAA,CAAA;QAC5C,aAAA,CAAc,KAAA,CAAM,QAAW,GAAA,QAAA,CAAA;QAE/B,OAAA,CAAQ,WAAA,CAAY,aAAa,CAAA,CAAA;QAEjC,aAAA,CAAc,WAAA,CAAY,YAAY,CAAA,CAAA;QACtC,aAAA,CAAc,WAAA,CAAY,UAAU,CAAA,CAAA;IAAA,CACxC;AACJ","ignoreList":[0]}},
    {"offset": {"line": 2198, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2204, "column": 0}, "map": {"version":3,"file":"extractFontFamilies.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/utils/extractFontFamilies.ts"],"sourcesContent":["import type { HTMLTextStyle } from '../HTMLTextStyle';\n\n/**\n * Extracts font families from text. It will extract font families from the style, tagStyles and any font families\n * embedded in the text. It should also strip out duplicates as it goes.\n * @param  text - The text to extract font families from\n * @param style - The style to extract font families from\n * @returns {string[]} - The font families as an array of strings\n */\nexport function extractFontFamilies(text: string, style: HTMLTextStyle): string[]\n{\n    const fontFamily = style.fontFamily;\n    const fontFamilies: string[] = [];\n    const dedupe: Record<string, boolean> = {};\n\n    // first ensure fonts are loaded inline..\n    // find any font..\n    const regex = /font-family:([^;\"\\s]+)/g;\n\n    const matches = text.match(regex);\n\n    function addFontFamily(fontFamily: string)\n    {\n        if (!dedupe[fontFamily])\n        {\n            fontFamilies.push(fontFamily);\n\n            dedupe[fontFamily] = true;\n        }\n    }\n\n    if (Array.isArray(fontFamily))\n    {\n        for (let i = 0; i < fontFamily.length; i++)\n        {\n            addFontFamily(fontFamily[i]);\n        }\n    }\n    else\n    {\n        addFontFamily(fontFamily);\n    }\n\n    if (matches)\n    {\n        matches.forEach((match) =>\n        {\n            const fontFamily = match.split(':')[1].trim();\n\n            addFontFamily(fontFamily);\n        });\n    }\n\n    for (const i in style.tagStyles)\n    {\n        const fontFamily = style.tagStyles[i].fontFamily;\n\n        addFontFamily(fontFamily as string);\n    }\n\n    return fontFamilies;\n}\n"],"names":["fontFamily"],"mappings":";;;;AASgB,SAAA,mBAAA,CAAoB,IAAA,EAAc,KAClD,EAAA;IACI,MAAM,aAAa,KAAM,CAAA,UAAA,CAAA;IACzB,MAAM,eAAyB,EAAC,CAAA;IAChC,MAAM,SAAkC,CAAA,CAAC,CAAA;IAIzC,MAAM,KAAQ,GAAA,yBAAA,CAAA;IAER,MAAA,OAAA,GAAU,IAAK,CAAA,KAAA,CAAM,KAAK,CAAA,CAAA;IAEhC,SAAS,cAAcA,WACvB,EAAA;QACQ,IAAA,CAAC,MAAOA,CAAAA,WAAU,CACtB,EAAA;YACI,YAAA,CAAa,IAAA,CAAKA,WAAU,CAAA,CAAA;YAE5B,MAAA,CAAOA,WAAU,CAAI,GAAA,IAAA,CAAA;QAAA,CACzB;IAAA,CACJ;IAEI,IAAA,KAAA,CAAM,OAAQ,CAAA,UAAU,CAC5B,EAAA;QACI,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,UAAA,CAAW,MAAA,EAAQ,CACvC,EAAA,CAAA;YACkB,aAAA,CAAA,UAAA,CAAW,CAAC,CAAC,CAAA,CAAA;QAAA,CAC/B;IAAA,CAGJ,MAAA;QACI,aAAA,CAAc,UAAU,CAAA,CAAA;IAAA,CAC5B;IAEA,IAAI,OACJ,EAAA;QACY,OAAA,CAAA,OAAA,CAAQ,CAAC,KACjB,KAAA;YACI,MAAMA,cAAa,KAAM,CAAA,KAAA,CAAM,GAAG,CAAE,CAAA,CAAC,CAAA,CAAE,IAAK,EAAA,CAAA;YAE5C,aAAA,CAAcA,WAAU,CAAA,CAAA;QAAA,CAC3B,CAAA,CAAA;IAAA,CACL;IAEW,IAAA,MAAA,CAAA,IAAK,MAAM,SACtB,CAAA;QACI,MAAMA,WAAa,GAAA,KAAA,CAAM,SAAU,CAAA,CAAC,CAAE,CAAA,UAAA,CAAA;QAEtC,aAAA,CAAcA,WAAoB,CAAA,CAAA;IAAA,CACtC;IAEO,OAAA,YAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 2241, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2247, "column": 0}, "map": {"version":3,"file":"loadFontAsBase64.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/utils/loadFontAsBase64.ts"],"sourcesContent":["import { DOMAdapter } from '../../../environment/adapter';\n\n/**\n * Resolves a font url to a base64 string\n * @param url - The url to load the font from\n * @returns - The font as a base64 string\n */\nexport async function loadFontAsBase64(url: string): Promise<string>\n{\n    const response = await DOMAdapter.get().fetch(url);\n\n    const blob = await response.blob();\n\n    const reader = new FileReader();\n\n    const dataSrc: string = await new Promise((resolve, reject) =>\n    {\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n    });\n\n    return dataSrc;\n}\n"],"names":[],"mappings":";;;;;;AAOA,eAAsB,iBAAiB,GACvC,EAAA;IACI,MAAM,WAAW,sKAAM,aAAA,CAAW,GAAI,EAAA,CAAE,KAAA,CAAM,GAAG,CAAA,CAAA;IAE3C,MAAA,IAAA,GAAO,MAAM,QAAA,CAAS,IAAK,EAAA,CAAA;IAE3B,MAAA,MAAA,GAAS,IAAI,UAAW,EAAA,CAAA;IAE9B,MAAM,UAAkB,MAAM,IAAI,OAAQ,CAAA,CAAC,SAAS,MACpD,KAAA;QACI,MAAA,CAAO,SAAY,GAAA,IAAM,OAAQ,CAAA,MAAA,CAAO,MAAgB,CAAA,CAAA;QACxD,MAAA,CAAO,OAAU,GAAA,MAAA,CAAA;QACjB,MAAA,CAAO,aAAA,CAAc,IAAI,CAAA,CAAA;IAAA,CAC5B,CAAA,CAAA;IAEM,OAAA,OAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 2266, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2272, "column": 0}, "map": {"version":3,"file":"loadFontCSS.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/utils/loadFontCSS.ts"],"sourcesContent":["import { loadFontAsBase64 } from './loadFontAsBase64';\n\nexport interface FontCSSStyleOptions\n{\n    fontFamily: string | string[]\n    fontWeight: string\n    fontStyle: string\n}\n\n/**\n * This will take a font url and a style and return a css string that can be injected into a style tag\n * This will contain inlined base64 font and the font family information\n * @param style - the style to generate the css for\n * @param url - The url to load the font from\n * @returns - The css string\n */\nexport async function loadFontCSS(style: FontCSSStyleOptions, url: string): Promise<string>\n{\n    const dataSrc = await loadFontAsBase64(url);\n\n    return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        src: url('${dataSrc}');\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n    }`;\n}\n"],"names":[],"mappings":";;;;;;AAgBsB,eAAA,WAAA,CAAY,KAAA,EAA4B,GAC9D,EAAA;IACU,MAAA,OAAA,GAAU,sMAAM,mBAAA,EAAiB,GAAG,CAAA,CAAA;IAEnC,OAAA,CAAA;sBAAA,EACa,MAAM,UAAU,CAAA;kBAAA,EACpB,OAAO,CAAA;qBAAA,EACJ,MAAM,UAAU,CAAA;oBAAA,EACjB,MAAM,SAAS,CAAA;KAAA,CAAA,CAAA;AAErC","ignoreList":[0]}},
    {"offset": {"line": 2289, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2295, "column": 0}, "map": {"version":3,"file":"getFontCss.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/utils/getFontCss.ts"],"sourcesContent":["import { Cache } from '../../../assets/cache/Cache';\nimport { loadFontCSS } from './loadFontCSS';\n\nimport type { FontCSSStyleOptions } from './loadFontCSS';\n\nexport const FontStylePromiseCache = new Map<string, Promise<string>>();\n\n/**\n * takes the font families and returns a css string that can be injected into a style tag\n * It will contain the font families and the font urls encoded as base64\n * @param fontFamilies - The font families to load\n * @param style - The FontCSSStyleOptions to load the font with (used for the first font family)\n * @param defaultOptions - The default options to load the font with (used for the rest of the font families)\n * @param defaultOptions.fontWeight - The default font weight\n * @param defaultOptions.fontStyle - The default font style\n * @returns - The css string\n */\nexport async function getFontCss(\n    fontFamilies: string[],\n    style: FontCSSStyleOptions,\n    defaultOptions: {fontWeight: string, fontStyle: string}\n)\n{\n    const fontPromises = fontFamilies\n        .filter((fontFamily) => Cache.has(`${fontFamily}-and-url`))\n        .map((fontFamily, i) =>\n        {\n            if (!FontStylePromiseCache.has(fontFamily))\n            {\n                const { url } = Cache.get(`${fontFamily}-and-url`);\n\n                if (i === 0)\n                {\n                    FontStylePromiseCache.set(fontFamily, loadFontCSS({\n                        fontWeight: style.fontWeight,\n                        fontStyle: style.fontStyle,\n                        fontFamily,\n                    }, url));\n                }\n\n                else\n                {\n                    FontStylePromiseCache.set(fontFamily, loadFontCSS({\n                        fontWeight: defaultOptions.fontWeight,\n                        fontStyle: defaultOptions.fontStyle,\n                        fontFamily,\n                    }, url));\n                }\n            }\n\n            return FontStylePromiseCache.get(fontFamily);\n        });\n\n    return (await Promise.all(fontPromises)).join('\\n');\n}\n"],"names":[],"mappings":";;;;;;;;;AAKa,MAAA,qBAAA,GAAA,aAAA,GAAA,IAA4B,GAA6B,GAAA;AAYhD,eAAA,UAAA,CAClB,YACA,EAAA,KAAA,EACA,cAEJ,EAAA;IACI,MAAM,YAAe,GAAA,YAAA,CAChB,MAAO,CAAA,CAAC,aAAe,0KAAM,CAAA,GAAA,CAAI,CAAG,EAAA,UAAU,CAAA,QAAA,CAAU,CAAC,CAAA,CACzD,GAAI,CAAA,CAAC,YAAY,CAClB,KAAA;QACI,IAAI,CAAC,qBAAA,CAAsB,GAAI,CAAA,UAAU,CACzC,EAAA;YACI,MAAM,EAAE,GAAI,EAAA,qKAAI,QAAA,CAAM,GAAI,CAAA,CAAA,EAAG,UAAU,CAAU,QAAA,CAAA,CAAA,CAAA;YAEjD,IAAI,MAAM,CACV,EAAA;gBAC0B,qBAAA,CAAA,GAAA,CAAI,uMAAY,cAAA,AAAY,EAAA;oBAC9C,YAAY,KAAM,CAAA,UAAA;oBAClB,WAAW,KAAM,CAAA,SAAA;oBACjB,UAAA;gBAAA,CACJ,EAAG,GAAG,CAAC,CAAA,CAAA;YAAA,CAIX,MAAA;gBAC0B,qBAAA,CAAA,GAAA,CAAI,uMAAY,cAAA,AAAY,EAAA;oBAC9C,YAAY,cAAe,CAAA,UAAA;oBAC3B,WAAW,cAAe,CAAA,SAAA;oBAC1B,UAAA;gBAAA,CACJ,EAAG,GAAG,CAAC,CAAA,CAAA;YAAA,CACX;QAAA,CACJ;QAEO,OAAA,qBAAA,CAAsB,GAAA,CAAI,UAAU,CAAA,CAAA;IAAA,CAC9C,CAAA,CAAA;IAEL,OAAA,CAAQ,MAAM,OAAQ,CAAA,GAAA,CAAI,YAAY,CAAA,EAAG,IAAA,CAAK,IAAI,CAAA,CAAA;AACtD","ignoreList":[0]}},
    {"offset": {"line": 2329, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2335, "column": 0}, "map": {"version":3,"file":"textStyleToCSS.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/utils/textStyleToCSS.ts"],"sourcesContent":["import { Color } from '../../../color/Color';\n\nimport type { ConvertedStrokeStyle } from '../../graphics/shared/FillTypes';\nimport type { TextStyle } from '../../text/TextStyle';\nimport type { HTMLTextStyle, HTMLTextStyleOptions } from '../HTMLTextStyle';\n\n/**\n * Internally converts all of the style properties into CSS equivalents.\n * @param style\n * @returns The CSS style string, for setting `style` property of root HTMLElement.\n */\nexport function textStyleToCSS(style: HTMLTextStyle): string\n{\n    const stroke = style._stroke;\n    const fill = style._fill;\n\n    const cssStyleString = [\n        `color: ${Color.shared.setValue(fill.color).toHex()}`,\n        `font-size: ${(style.fontSize as number)}px`,\n        `font-family: ${style.fontFamily}`,\n        `font-weight: ${style.fontWeight}`,\n        `font-style: ${style.fontStyle}`,\n        `font-variant: ${style.fontVariant}`,\n        `letter-spacing: ${style.letterSpacing}px`,\n        `text-align: ${style.align}`,\n        `padding: ${style.padding}px`,\n        `white-space: ${(style.whiteSpace === 'pre' && style.wordWrap) ? 'pre-wrap' : style.whiteSpace}`,\n        ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n        ...style.wordWrap ? [\n            `word-wrap: ${style.breakWords ? 'break-all' : 'break-word'}`,\n            `max-width: ${style.wordWrapWidth}px`\n        ] : [],\n        ...stroke ? [strokeToCSS(stroke)] : [],\n        ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n        ...style.cssOverrides,\n    ].join(';');\n\n    const cssStyles = [`div { ${cssStyleString} }`];\n\n    tagStyleToCSS(style.tagStyles, cssStyles);\n\n    return cssStyles.join(' ');\n}\n\nfunction dropShadowToCSS(dropShadowStyle: TextStyle['dropShadow']): string\n{\n    const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n    const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n    const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n\n    const position = `${x}px ${y}px`;\n\n    if (dropShadowStyle.blur > 0)\n    {\n        return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n    }\n\n    return `text-shadow: ${position} ${color}`;\n}\n\nfunction strokeToCSS(stroke: ConvertedStrokeStyle): string\n{\n    return [\n        `-webkit-text-stroke-width: ${stroke.width}px`,\n        `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n        `text-stroke-width: ${stroke.width}px`,\n        `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n        'paint-order: stroke',\n    ].join(';');\n}\n\n/** Converts the tag styles into CSS. */\nconst templates = {\n    fontSize: `font-size: {{VALUE}}px`,\n    fontFamily: `font-family: {{VALUE}}`,\n    fontWeight: `font-weight: {{VALUE}}`,\n    fontStyle: `font-style: {{VALUE}}`,\n    fontVariant: `font-variant: {{VALUE}}`,\n    letterSpacing: `letter-spacing: {{VALUE}}px`,\n    align: `text-align: {{VALUE}}`,\n    padding: `padding: {{VALUE}}px`,\n    whiteSpace: `white-space: {{VALUE}}`,\n    lineHeight: `line-height: {{VALUE}}px`,\n    wordWrapWidth: `max-width: {{VALUE}}px`,\n};\n\n/** Converts the tag styles into CSS if modifications are required */\nconst transform = {\n    fill: (value: string) => `color: ${Color.shared.setValue(value).toHex()}`,\n    breakWords: (value: string) => `word-wrap: ${value ? 'break-all' : 'break-word'}`,\n    stroke: strokeToCSS,\n    dropShadow: dropShadowToCSS\n};\n\nfunction tagStyleToCSS(tagStyles: Record<string, HTMLTextStyleOptions>, out: string[])\n{\n    for (const i in tagStyles)\n    {\n        const tagStyle = tagStyles[i];\n        const cssTagStyle = [];\n\n        for (const j in tagStyle)\n        {\n            if (transform[j as keyof typeof transform])\n            {\n                cssTagStyle.push(transform[j as keyof typeof transform](tagStyle[j as keyof HTMLTextStyleOptions] as any));\n            }\n            else if (templates[j as keyof typeof templates])\n            {\n                // eslint-disable-next-line max-len\n                cssTagStyle.push(templates[j as keyof typeof templates].replace('{{VALUE}}', tagStyle[j as keyof HTMLTextStyleOptions] as any));\n            }\n        }\n\n        out.push(`${i} { ${cssTagStyle.join(';')} }`);\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2430, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2436, "column": 0}, "map": {"version":3,"file":"HTMLTextStyle.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/HTMLTextStyle.ts"],"sourcesContent":["/* eslint-disable accessor-pairs */\nimport { warn } from '../../utils/logging/warn';\nimport { TextStyle } from '../text/TextStyle';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey';\nimport { textStyleToCSS } from './utils/textStyleToCSS';\n\nimport type { FillInput, StrokeInput } from '../graphics/shared/FillTypes';\nimport type { TextStyleOptions } from '../text/TextStyle';\n\n/**\n * Options for HTML text style, extends {@link TextStyle}.\n * @memberof text\n * @extends text.TextStyleOptions\n * @property {string[]} [cssOverrides] - CSS style(s) to add.\n * @property {Record<string, text.HTMLTextStyleOptions>} [tagStyles] - Tag styles.\n */\nexport interface HTMLTextStyleOptions extends Omit<TextStyleOptions, 'leading' | 'textBaseline' | 'trim' >\n{\n    cssOverrides?: string[];\n    tagStyles?: Record<string, HTMLTextStyleOptions>;\n}\n\n/**\n * A TextStyle object rendered by the HTMLTextSystem.\n * @memberof text\n */\nexport class HTMLTextStyle extends TextStyle\n{\n    private _cssOverrides: string[] = [];\n    private _cssStyle: string;\n    /**\n     * List of styles per tag.\n     * @example\n     * new HTMLText({\n     *   text:'<red>Red</red>,<blue>Blue</blue>,<green>Green</green>',\n     *   style:{\n     *       fontFamily: 'DM Sans',\n     *       fill: 'white',\n     *       fontSize:100,\n     *       tagStyles:{\n     *           red:{\n     *               fill:'red',\n     *           },\n     *           blue:{\n     *               fill:'blue',\n     *           },\n     *           green:{\n     *               fill:'green',\n     *           }\n     *       }\n     *   }\n     * );\n     */\n    public tagStyles: Record<string, HTMLTextStyleOptions>;\n\n    constructor(options: HTMLTextStyleOptions = {})\n    {\n        super(options);\n\n        this.cssOverrides ??= options.cssOverrides;\n        this.tagStyles = options.tagStyles ?? {};\n    }\n\n    /** List of style overrides that will be applied to the HTML text. */\n    set cssOverrides(value: string | string[])\n    {\n        this._cssOverrides = value instanceof Array ? value : [value];\n        this.update();\n    }\n\n    get cssOverrides(): string[]\n    {\n        return this._cssOverrides;\n    }\n\n    protected override _generateKey(): string\n    {\n        this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join('-');\n\n        return this._styleKey;\n    }\n\n    public update()\n    {\n        this._cssStyle = null;\n        super.update();\n    }\n\n    /**\n     * Creates a new HTMLTextStyle object with the same values as this one.\n     * @returns New cloned HTMLTextStyle object\n     */\n    public clone(): HTMLTextStyle\n    {\n        return new HTMLTextStyle({\n            align: this.align,\n            breakWords: this.breakWords,\n            dropShadow: this.dropShadow ? { ...this.dropShadow } : null,\n            fill: this._fill,\n            fontFamily: this.fontFamily,\n            fontSize: this.fontSize,\n            fontStyle: this.fontStyle,\n            fontVariant: this.fontVariant,\n            fontWeight: this.fontWeight,\n            letterSpacing: this.letterSpacing,\n            lineHeight: this.lineHeight,\n            padding: this.padding,\n            stroke: this._stroke,\n            whiteSpace: this.whiteSpace,\n            wordWrap: this.wordWrap,\n            wordWrapWidth: this.wordWrapWidth,\n            cssOverrides: this.cssOverrides,\n        });\n    }\n\n    get cssStyle(): string\n    {\n        if (!this._cssStyle)\n        {\n            this._cssStyle = textStyleToCSS(this);\n        }\n\n        return this._cssStyle;\n    }\n\n    /**\n     * Add a style override, this can be any CSS property\n     * it will override any built-in style. This is the\n     * property and the value as a string (e.g., `color: red`).\n     * This will override any other internal style.\n     * @param {string} value - CSS style(s) to add.\n     * @example\n     * style.addOverride('background-color: red');\n     */\n    public addOverride(...value: string[]): void\n    {\n        const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n\n        if (toAdd.length > 0)\n        {\n            this.cssOverrides.push(...toAdd);\n            this.update();\n        }\n    }\n\n    /**\n     * Remove any overrides that match the value.\n     * @param {string} value - CSS style to remove.\n     * @example\n     * style.removeOverride('background-color: red');\n     */\n    public removeOverride(...value: string[]): void\n    {\n        const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n\n        if (toRemove.length > 0)\n        {\n            this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n            this.update();\n        }\n    }\n\n    override set fill(value: FillInput)\n    {\n        // if its not a string or a number, then its a texture!\n        if (typeof value !== 'string' && typeof value !== 'number')\n        {\n            // #if _DEBUG\n            warn('[HTMLTextStyle] only color fill is not supported by HTMLText');\n            // #endif\n        }\n\n        super.fill = value;\n    }\n\n    override set stroke(value: StrokeInput)\n    {\n        // if its not a string or a number, then its a texture!\n        if (value && typeof value !== 'string' && typeof value !== 'number')\n        {\n            // #if _DEBUG\n            warn('[HTMLTextStyle] only color stroke is not supported by HTMLText');\n            // #endif\n        }\n\n        super.stroke = value;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2546, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2552, "column": 0}, "map": {"version":3,"file":"measureHtmlText.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/utils/measureHtmlText.ts"],"sourcesContent":["import { HTMLTextRenderData } from '../HTMLTextRenderData';\n\nimport type { Size } from '../../../maths/misc/Size';\nimport type { HTMLTextStyle } from '../HTMLTextStyle';\n\nlet tempHTMLTextRenderData: HTMLTextRenderData;\n\n/**\n * Measures the HTML text without actually generating an image.\n * This is used to calculate the size of the text.\n * @param text - The text to measure\n * @param style - The style to use\n * @param fontStyleCSS - The font css to use\n * @param htmlTextRenderData - The HTMLTextRenderData to write the SVG to\n * @returns - The size of the text\n */\nexport function measureHtmlText(\n    text: string,\n    style: HTMLTextStyle,\n    fontStyleCSS?: string,\n    htmlTextRenderData?: HTMLTextRenderData\n): Size\n{\n    htmlTextRenderData ||= tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData());\n\n    const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n\n    domElement.innerHTML = `<style>${style.cssStyle};</style><div style='padding:0'>${text}</div>`;\n\n    domElement.setAttribute('style', 'transform-origin: top left; display: inline-block');\n\n    if (fontStyleCSS)\n    {\n        styleElement.textContent = fontStyleCSS;\n    }\n\n    // Measure the contents using the shadow DOM\n    document.body.appendChild(svgRoot);\n\n    const contentBounds = domElement.getBoundingClientRect();\n\n    svgRoot.remove();\n\n    // padding is included in the CSS calculation, so we need to remove it here\n    const doublePadding = style.padding * 2;\n\n    return {\n        width: contentBounds.width - doublePadding,\n        height: contentBounds.height - doublePadding,\n    };\n}\n"],"names":[],"mappings":";;;;;;AAKA,IAAI,sBAAA,CAAA;AAWG,SAAS,eACZ,CAAA,IAAA,EACA,KACA,EAAA,YAAA,EACA,kBAEJ,EAAA;IAC2B,kBAAA,IAAA,CAAA,kBAAA,GAAA,sBAAA,IAAA,CAA2B,sBAAyB,GAAA,yLAAI,qBAAmB,EAAA,CAAA,CAAA,CAAA;IAElG,MAAM,EAAE,UAAA,EAAY,YAAc,EAAA,OAAA,EAAY,GAAA,kBAAA,CAAA;IAE9C,UAAA,CAAW,SAAY,GAAA,CAAA,OAAA,EAAU,KAAM,CAAA,QAAQ,CAAA,gCAAA,EAAmC,IAAI,CAAA,MAAA,CAAA,CAAA;IAE3E,UAAA,CAAA,YAAA,CAAa,SAAS,mDAAmD,CAAA,CAAA;IAEpF,IAAI,YACJ,EAAA;QACI,YAAA,CAAa,WAAc,GAAA,YAAA,CAAA;IAAA,CAC/B;IAGS,QAAA,CAAA,IAAA,CAAK,WAAA,CAAY,OAAO,CAAA,CAAA;IAE3B,MAAA,aAAA,GAAgB,WAAW,qBAAsB,EAAA,CAAA;IAEvD,OAAA,CAAQ,MAAO,EAAA,CAAA;IAGT,MAAA,aAAA,GAAgB,MAAM,OAAU,GAAA,CAAA,CAAA;IAE/B,OAAA;QACH,KAAA,EAAO,cAAc,KAAQ,GAAA,aAAA;QAC7B,MAAA,EAAQ,cAAc,MAAS,GAAA,aAAA;IAAA,CACnC,CAAA;AACJ","ignoreList":[0]}},
    {"offset": {"line": 2578, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2584, "column": 0}, "map": {"version":3,"file":"getSVGUrl.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/utils/getSVGUrl.ts"],"sourcesContent":["import type { HTMLTextRenderData } from '../HTMLTextRenderData';\nimport type { HTMLTextStyle } from '../HTMLTextStyle';\n\n/**\n * takes all the data and returns a svg url string can be loaded by an image element\n * @param text - The text to measure\n * @param style - The style to use\n * @param resolution - The resolution to use\n * @param fontCSS - The font css to use\n * @param htmlTextData - The HTMLTextRenderData to write the SVG to\n * @returns - The SVG as a url string\n */\nexport function getSVGUrl(\n    text: string,\n    style: HTMLTextStyle,\n    resolution: number,\n    fontCSS: string,\n    htmlTextData: HTMLTextRenderData\n)\n{\n    const { domElement, styleElement, svgRoot } = htmlTextData;\n\n    domElement.innerHTML = `<style>${style.cssStyle}</style><div style='padding:0;'>${text}</div>`;\n    domElement.setAttribute('style', `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n    styleElement.textContent = fontCSS;\n\n    const { width, height } = htmlTextData.image;\n\n    svgRoot.setAttribute('width', width.toString());\n    svgRoot.setAttribute('height', height.toString());\n\n    return new XMLSerializer().serializeToString(svgRoot);\n}\n"],"names":[],"mappings":";;;;AAYO,SAAS,SACZ,CAAA,IAAA,EACA,KACA,EAAA,UAAA,EACA,OAAA,EACA,YAEJ,EAAA;IACI,MAAM,EAAE,UAAA,EAAY,YAAc,EAAA,OAAA,EAAY,GAAA,YAAA,CAAA;IAE9C,UAAA,CAAW,SAAY,GAAA,CAAA,OAAA,EAAU,KAAM,CAAA,QAAQ,CAAA,gCAAA,EAAmC,IAAI,CAAA,MAAA,CAAA,CAAA;IACtF,UAAA,CAAW,YAAa,CAAA,OAAA,EAAS,CAAoB,iBAAA,EAAA,UAAU,CAAqD,mDAAA,CAAA,CAAA,CAAA;IACpH,YAAA,CAAa,WAAc,GAAA,OAAA,CAAA;IAE3B,MAAM,EAAE,KAAA,EAAO,MAAO,EAAA,GAAI,YAAa,CAAA,KAAA,CAAA;IAEvC,OAAA,CAAQ,YAAa,CAAA,OAAA,EAAS,KAAM,CAAA,QAAA,EAAU,CAAA,CAAA;IAC9C,OAAA,CAAQ,YAAa,CAAA,QAAA,EAAU,MAAO,CAAA,QAAA,EAAU,CAAA,CAAA;IAEhD,OAAO,IAAI,aAAA,EAAgB,CAAA,iBAAA,CAAkB,OAAO,CAAA,CAAA;AACxD","ignoreList":[0]}},
    {"offset": {"line": 2600, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2606, "column": 0}, "map": {"version":3,"file":"loadSVGImage.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/utils/loadSVGImage.ts"],"sourcesContent":["/**\n * This function loads an SVG image into an HTMLImageElement.\n * The image can then be uploaded as texture to the GPU.\n * iOS has a bug where embedded fonts are not available immediately after the image loads,\n * so we wait an arbitrary amount of time before resolving the promise.\n * @param image - The image to load the SVG into\n * @param url - The url to load the SVG from\n * @param delay - Whether to delay the load\n * @returns - A promise that resolves when the image has loaded\n */\nexport function loadSVGImage(image: HTMLImageElement, url: string, delay: boolean)\n{\n    return new Promise<void>(async (resolve) =>\n    {\n        // Safari has a known bug where embedded fonts are not available\n        // immediately after the image loads, to compensate we wait an\n        // arbitrary amount of time\n        // @see https://bugs.webkit.org/show_bug.cgi?id=219770\n        if (delay)\n        {\n            await new Promise<void>((resolve) => setTimeout(resolve, 100));\n        }\n\n        image.onload = () =>\n        {\n            resolve();\n        };\n\n        image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n        image.crossOrigin = 'anonymous';\n    });\n}\n"],"names":["resolve"],"mappings":";;;;AAUgB,SAAA,YAAA,CAAa,KAAyB,EAAA,GAAA,EAAa,KACnE,EAAA;IACW,OAAA,IAAI,OAAc,CAAA,OAAO,OAChC,KAAA;QAKI,IAAI,KACJ,EAAA;YACI,MAAM,IAAI,OAAc,CAAA,CAACA,WAAY,UAAWA,CAAAA,QAAAA,EAAS,GAAG,CAAC,CAAA,CAAA;QAAA,CACjE;QAEA,KAAA,CAAM,MAAA,GAAS,MACf;YACY,OAAA,EAAA,CAAA;QAAA,CACZ,CAAA;QAEA,KAAA,CAAM,GAAM,GAAA,CAAA,gCAAA,EAAmC,kBAAmB,CAAA,GAAG,CAAC,CAAA,CAAA,CAAA;QACtE,KAAA,CAAM,WAAc,GAAA,WAAA,CAAA;IAAA,CACvB,CAAA,CAAA;AACL","ignoreList":[0]}},
    {"offset": {"line": 2624, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2630, "column": 0}, "map": {"version":3,"file":"isSafari.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/utils/browser/isSafari.ts"],"sourcesContent":["import { DOMAdapter } from '../../environment/adapter';\n\nexport function isSafari(): boolean\n{\n    const { userAgent } = DOMAdapter.get().getNavigator();\n\n    return (/^((?!chrome|android).)*safari/i).test(userAgent);\n}\n"],"names":[],"mappings":";;;;;;AAEO,SAAS,QAChB,GAAA;IACI,MAAM,EAAE,SAAU,EAAA,mKAAI,aAAW,CAAA,GAAA,GAAM,YAAa,EAAA,CAAA;IAE5C,OAAA,gCAAA,CAAkC,IAAA,CAAK,SAAS,CAAA,CAAA;AAC5D","ignoreList":[0]}},
    {"offset": {"line": 2642, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2648, "column": 0}, "map": {"version":3,"file":"getTemporaryCanvasFromImage.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/utils/getTemporaryCanvasFromImage.ts"],"sourcesContent":["import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\n\nimport type { CanvasAndContext } from '../../../rendering/renderers/shared/texture/CanvasPool';\n\n/**\n * This function converts an image to a canvas, and returns the canvas.\n * It is used to convert images to canvases to work around a CORS issue where WebGPU cannot\n * upload an SVGImage to a texture.\n *\n * It uses the CanvasPool to get an optimal canvas and context, and then draws the image onto it.\n * Remember to return this canvas is immediately to the CanvasPool for reuse when you are done with it.\n * (eg upload it to the GPU!)\n * @param image - The image to convert to a canvas.\n * @param resolution - The resolution of the canvas.\n */\nexport function getTemporaryCanvasFromImage(image: HTMLImageElement, resolution: number): CanvasAndContext\n{\n    // Get an optimal canvas and context from the CanvasPool, based on the\n    // dimensions of the image and the desired resolution.\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n        image.width,\n        image.height,\n        resolution\n    );\n\n    // Clear the context of the canvas, and draw the image onto it.\n    const { context } = canvasAndContext;\n\n    context.clearRect(0, 0, image.width, image.height);\n    context.drawImage(image, 0, 0);\n\n    // Return the canvas.\n    return canvasAndContext;\n}\n\n"],"names":[],"mappings":";;;;;;AAegB,SAAA,2BAAA,CAA4B,KAAA,EAAyB,UACrE,EAAA;IAGI,MAAM,sNAAmB,aAAW,CAAA,0BAAA,CAChC,KAAM,CAAA,KAAA,EACN,KAAM,CAAA,MAAA,EACN,UAAA;IAIE,MAAA,EAAE,OAAA,EAAY,GAAA,gBAAA,CAAA;IAEpB,OAAA,CAAQ,SAAA,CAAU,CAAG,EAAA,CAAA,EAAG,KAAM,CAAA,KAAA,EAAO,MAAM,MAAM,CAAA,CAAA;IACzC,OAAA,CAAA,SAAA,CAAU,KAAO,EAAA,CAAA,EAAG,CAAC,CAAA,CAAA;IAGtB,OAAA,gBAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 2663, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2669, "column": 0}, "map": {"version":3,"file":"HTMLTextSystem.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/HTMLTextSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../extensions/Extensions';\nimport { type CanvasAndContext, CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { isSafari } from '../../utils/browser/isSafari';\nimport { warn } from '../../utils/logging/warn';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource';\nimport { HTMLTextRenderData } from './HTMLTextRenderData';\nimport { HTMLTextStyle } from './HTMLTextStyle';\nimport { extractFontFamilies } from './utils/extractFontFamilies';\nimport { getFontCss } from './utils/getFontCss';\nimport { getSVGUrl } from './utils/getSVGUrl';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage';\nimport { loadSVGImage } from './utils/loadSVGImage';\nimport { measureHtmlText } from './utils/measureHtmlText';\n\nimport type { System } from '../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { HTMLTextOptions } from './HTMLText';\nimport type { FontCSSStyleOptions } from './utils/loadFontCSS';\n\ninterface HTMLTextTexture\n{\n    texture: Texture,\n    usageCount: number,\n    promise: Promise<Texture>,\n}\n\n/**\n * System plugin to the renderer to manage HTMLText\n * @memberof rendering\n */\nexport class HTMLTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    public static defaultFontOptions: FontCSSStyleOptions = {\n        fontFamily: 'Arial',\n        fontStyle: 'normal',\n        fontWeight: 'normal',\n    };\n\n    private _activeTextures: Record<string, HTMLTextTexture> = {};\n\n    /**\n     * WebGPU has a cors issue when uploading an image that is an SVGImage\n     * To get around this we need to create a canvas draw the image to it and upload that instead.\n     * Bit of a shame.. but no other work around just yet!\n     */\n    private readonly _createCanvas: boolean;\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._createCanvas = renderer.type === RendererType.WEBGPU;\n    }\n\n    public getTexture(options: HTMLTextOptions): Promise<Texture>\n    {\n        return this._buildTexturePromise(\n            options.text as string,\n            options.resolution,\n            options.style as HTMLTextStyle\n        );\n    }\n\n    public getManagedTexture(\n        text: string,\n        resolution: number,\n        style: HTMLTextStyle,\n        textKey: string\n    ): Promise<Texture>\n    {\n        if (this._activeTextures[textKey])\n        {\n            this._increaseReferenceCount(textKey);\n\n            return this._activeTextures[textKey].promise;\n        }\n\n        const promise = this._buildTexturePromise(text, resolution, style)\n            .then((texture) =>\n            {\n                this._activeTextures[textKey].texture = texture;\n\n                return texture;\n            });\n\n        this._activeTextures[textKey] = {\n            texture: null,\n            promise,\n            usageCount: 1,\n        };\n\n        return promise;\n    }\n\n    private async _buildTexturePromise(\n        text: string,\n        resolution: number,\n        style: HTMLTextStyle,\n    )\n    {\n        const htmlTextData = BigPool.get(HTMLTextRenderData);\n        const fontFamilies = extractFontFamilies(text, style);\n        const fontCSS = await getFontCss(\n            fontFamilies,\n            style,\n            HTMLTextStyle.defaultTextStyle as {fontWeight: string, fontStyle: string}\n        );\n        const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n\n        const width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        const height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        const image = htmlTextData.image;\n\n        // this off set will ensure we don't get any UV bleeding!\n        const uvSafeOffset = 2;\n\n        image.width = (width | 0) + uvSafeOffset;\n        image.height = (height | 0) + uvSafeOffset;\n\n        const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n\n        await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n\n        const resource: HTMLImageElement | HTMLCanvasElement = image;\n        let canvasAndContext: CanvasAndContext;\n\n        if (this._createCanvas)\n        {\n            // silly webGPU workaround..\n            canvasAndContext = getTemporaryCanvasFromImage(image, resolution);\n        }\n\n        const texture = getPo2TextureFromSource(canvasAndContext ? canvasAndContext.canvas : resource,\n            image.width - uvSafeOffset,\n            image.height - uvSafeOffset,\n            resolution\n        );\n\n        if (this._createCanvas)\n        {\n            this._renderer.texture.initSource(texture.source);\n            CanvasPool.returnCanvasAndContext(canvasAndContext);\n        }\n\n        BigPool.return(htmlTextData as PoolItem);\n\n        return texture;\n    }\n\n    private _increaseReferenceCount(textKey: string)\n    {\n        this._activeTextures[textKey].usageCount++;\n    }\n\n    public decreaseReferenceCount(textKey: string)\n    {\n        const activeTexture = this._activeTextures[textKey];\n\n        // TODO SHOULD NOT BE NEEDED\n        if (!activeTexture) return;\n\n        activeTexture.usageCount--;\n\n        if (activeTexture.usageCount === 0)\n        {\n            if (activeTexture.texture)\n            {\n                this._cleanUp(activeTexture);\n            }\n            else\n            {\n                // we did not resolve...\n                activeTexture.promise.then((texture) =>\n                {\n                    activeTexture.texture = texture;\n\n                    this._cleanUp(activeTexture);\n                }).catch(() =>\n                {\n                    // #if _DEBUG\n                    warn('HTMLTextSystem: Failed to clean texture');\n                    // #endif\n                });\n            }\n\n            this._activeTextures[textKey] = null;\n        }\n    }\n\n    private _cleanUp(activeTexture: HTMLTextTexture)\n    {\n        TexturePool.returnTexture(activeTexture.texture);\n        activeTexture.texture.source.resource = null;\n        activeTexture.texture.source.uploadMethodId = 'unknown';\n    }\n\n    public getReferenceCount(textKey: string)\n    {\n        return this._activeTextures[textKey].usageCount;\n    }\n\n    public destroy(): void\n    {\n        this._activeTextures = null;\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCO,MAAM,cACb,CAAA;IA2BI,YAAY,QACZ,CAAA;QAXA,IAAA,CAAQ,eAAA,GAAmD,CAAA,CAAC,CAAA;QAYxD,IAAA,CAAK,SAAY,GAAA,QAAA,CAAA;QACZ,IAAA,CAAA,aAAA,GAAgB,QAAS,CAAA,IAAA,8KAAS,eAAa,CAAA,MAAA,CAAA;IAAA,CACxD;IAEO,WAAW,OAClB,EAAA;QACI,OAAO,IAAK,CAAA,oBAAA,CACR,OAAQ,CAAA,IAAA,EACR,OAAQ,CAAA,UAAA,EACR,OAAQ,CAAA,KAAA;IACZ,CACJ;IAEO,iBACH,CAAA,IAAA,EACA,UACA,EAAA,KAAA,EACA,OAEJ,EAAA;QACQ,IAAA,IAAA,CAAK,eAAgB,CAAA,OAAO,CAChC,EAAA;YACI,IAAA,CAAK,uBAAA,CAAwB,OAAO,CAAA,CAAA;YAE7B,OAAA,IAAA,CAAK,eAAgB,CAAA,OAAO,CAAE,CAAA,OAAA,CAAA;QAAA,CACzC;QAEM,MAAA,OAAA,GAAU,IAAA,CAAK,oBAAqB,CAAA,IAAA,EAAM,YAAY,KAAK,CAAA,CAC5D,IAAK,CAAA,CAAC,OACP,KAAA;YACS,IAAA,CAAA,eAAA,CAAgB,OAAO,CAAA,CAAE,OAAU,GAAA,OAAA,CAAA;YAEjC,OAAA,OAAA,CAAA;QAAA,CACV,CAAA,CAAA;QAEA,IAAA,CAAA,eAAA,CAAgB,OAAO,CAAI,GAAA;YAC5B,OAAS,EAAA,IAAA;YACT,OAAA;YACA,UAAY,EAAA,CAAA;QAAA,CAChB,CAAA;QAEO,OAAA,OAAA,CAAA;IAAA,CACX;IAEA,MAAc,oBAAA,CACV,IACA,EAAA,UAAA,EACA,KAEJ,EAAA;QACU,MAAA,YAAA,uKAAe,UAAQ,CAAA,GAAA,sLAAI,qBAAkB,CAAA,CAAA;QAC7C,MAAA,YAAA,OAAe,qNAAA,AAAoB,EAAA,IAAA,EAAM,KAAK,CAAA,CAAA;QACpD,MAAM,UAAU,gMAAM,aAAA,EAClB,YAAA,EACA,KAAA,EACA,gMAAc,CAAA,gBAAA;QAElB,MAAM,QAAW,kMAAA,kBAAA,EAAgB,IAAM,EAAA,KAAA,EAAO,SAAS,YAAY,CAAA,CAAA;QAEnE,MAAM,KAAQ,GAAA,IAAA,CAAK,IAAK,CAAA,IAAA,CAAK,IAAA,CAAM,IAAK,CAAA,GAAA,CAAI,CAAG,EAAA,QAAA,CAAS,KAAK,CAAK,GAAA,KAAA,CAAM,OAAU,GAAA,CAAG,IAAI,UAAU,CAAA,CAAA;QACnG,MAAM,MAAS,GAAA,IAAA,CAAK,IAAK,CAAA,IAAA,CAAK,IAAA,CAAM,IAAK,CAAA,GAAA,CAAI,CAAG,EAAA,QAAA,CAAS,MAAM,CAAK,GAAA,KAAA,CAAM,OAAU,GAAA,CAAG,IAAI,UAAU,CAAA,CAAA;QAErG,MAAM,QAAQ,YAAa,CAAA,KAAA,CAAA;QAG3B,MAAM,YAAe,GAAA,CAAA,CAAA;QAEf,KAAA,CAAA,KAAA,GAAA,CAAS,QAAQ,CAAK,IAAA,YAAA,CAAA;QACtB,KAAA,CAAA,MAAA,GAAA,CAAU,SAAS,CAAK,IAAA,YAAA,CAAA;QAE9B,MAAM,kMAAS,YAAA,AAAU,EAAA,IAAA,EAAM,KAAO,EAAA,UAAA,EAAY,SAAS,YAAY,CAAA,CAAA;QAEvE,kMAAM,eAAA,EAAa,KAAO,EAAA,MAAA,4KAAQ,WAAA,EAAc,KAAA,YAAA,CAAa,MAAA,GAAS,CAAC,CAAA,CAAA;QAEvE,MAAM,QAAiD,GAAA,KAAA,CAAA;QACnD,IAAA,gBAAA,CAAA;QAEJ,IAAI,IAAA,CAAK,aACT,EAAA;YAEuB,gBAAA,8MAAA,8BAAA,EAA4B,OAAO,UAAU,CAAA,CAAA;QAAA,CACpE;QAEA,MAAM,OAAU,kMAAA,0BAAA,EAAwB,gBAAA,GAAmB,iBAAiB,MAAS,GAAA,QAAA,EACjF,MAAM,KAAQ,GAAA,YAAA,EACd,MAAM,MAAS,GAAA,YAAA,EACf,UAAA;QAGJ,IAAI,IAAA,CAAK,aACT,EAAA;YACI,IAAA,CAAK,SAAU,CAAA,OAAA,CAAQ,UAAW,CAAA,OAAA,CAAQ,MAAM,CAAA,CAAA;8MAChD,cAAA,CAAW,sBAAA,CAAuB,gBAAgB,CAAA,CAAA;QAAA,CACtD;4KAEA,UAAA,CAAQ,MAAA,CAAO,YAAwB,CAAA,CAAA;QAEhC,OAAA,OAAA,CAAA;IAAA,CACX;IAEQ,wBAAwB,OAChC,EAAA;QACS,IAAA,CAAA,eAAA,CAAgB,OAAO,CAAE,CAAA,UAAA,EAAA,CAAA;IAAA,CAClC;IAEO,uBAAuB,OAC9B,EAAA;QACU,MAAA,aAAA,GAAgB,IAAK,CAAA,eAAA,CAAgB,OAAO,CAAA,CAAA;QAGlD,IAAI,CAAC,aAAA,EAAe,OAAA;QAEN,aAAA,CAAA,UAAA,EAAA,CAAA;QAEV,IAAA,aAAA,CAAc,UAAA,KAAe,CACjC,EAAA;YACI,IAAI,cAAc,OAClB,EAAA;gBACI,IAAA,CAAK,QAAA,CAAS,aAAa,CAAA,CAAA;YAAA,CAG/B,MAAA;gBAEkB,aAAA,CAAA,OAAA,CAAQ,IAAK,CAAA,CAAC,OAC5B,KAAA;oBACI,aAAA,CAAc,OAAU,GAAA,OAAA,CAAA;oBAExB,IAAA,CAAK,QAAA,CAAS,aAAa,CAAA,CAAA;gBAAA,CAC9B,CAAE,CAAA,KAAA,CAAM,MACT;oBAEI,6KAAA,EAAK,yCAAyC,CAAA,CAAA;gBAAA,CAEjD,CAAA,CAAA;YAAA,CACL;YAEK,IAAA,CAAA,eAAA,CAAgB,OAAO,CAAI,GAAA,IAAA,CAAA;QAAA,CACpC;IAAA,CACJ;IAEQ,SAAS,aACjB,EAAA;4MACgB,cAAA,CAAA,aAAA,CAAc,cAAc,OAAO,CAAA,CAAA;QACjC,aAAA,CAAA,OAAA,CAAQ,MAAA,CAAO,QAAW,GAAA,IAAA,CAAA;QAC1B,aAAA,CAAA,OAAA,CAAQ,MAAA,CAAO,cAAiB,GAAA,SAAA,CAAA;IAAA,CAClD;IAEO,kBAAkB,OACzB,EAAA;QACW,OAAA,IAAA,CAAK,eAAgB,CAAA,OAAO,CAAE,CAAA,UAAA,CAAA;IAAA,CACzC;IAEO,OACP,GAAA;QACI,IAAA,CAAK,eAAkB,GAAA,IAAA,CAAA;IAAA,CAC3B;AACJ,CAAA;AAAA,YAAA,GA1La,cAAA,CAGK,SAAY,GAAA;IACtB,IAAM,EAAA;0KACF,gBAAc,CAAA,WAAA;0KACd,gBAAc,CAAA,YAAA;0KACd,gBAAc,CAAA,YAAA;KAClB;IACA,IAAM,EAAA,UAAA;AACV,CAAA,CAAA;AAVS,cAAA,CAYK,kBAA0C,GAAA;IACpD,UAAY,EAAA,OAAA;IACZ,SAAW,EAAA,QAAA;IACX,UAAY,EAAA,QAAA;AAChB,CAAA","ignoreList":[0]}},
    {"offset": {"line": 2804, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2810, "column": 0}, "map": {"version":3,"file":"HTMLTextPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/HTMLTextPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../extensions/Extensions';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { updateQuadBounds } from '../../utils/data/updateQuadBounds';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../sprite/BatchableSprite';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { Container } from '../container/Container';\nimport type { HTMLText } from './HTMLText';\nimport type { HTMLTextStyle } from './HTMLTextStyle';\n\nexport class HTMLTextPipe implements RenderPipe<HTMLText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _gpuText: Record<number, {\n        textureNeedsUploading: boolean;\n        generatingTexture: boolean;\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n    }> = Object.create(null);\n\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.runners.resolutionChange.add(this);\n        this._renderer.renderableGC.addManagedHash(this, '_gpuText');\n    }\n\n    public resolutionChange()\n    {\n        for (const i in this._gpuText)\n        {\n            const gpuText = this._gpuText[i];\n\n            if (!gpuText) continue;\n\n            const text = gpuText.batchableSprite.renderable as HTMLText;\n\n            if (text._autoResolution)\n            {\n                text._resolution = this._renderer.resolution;\n                text.onViewUpdate();\n            }\n        }\n    }\n\n    public validateRenderable(htmlText: HTMLText): boolean\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const newKey = htmlText._getKey();\n\n        if (gpuText.textureNeedsUploading)\n        {\n            gpuText.textureNeedsUploading = false;\n\n            return true;\n        }\n\n        if (gpuText.currentKey !== newKey)\n        {\n            // TODO - could look into optimising this a tad!\n            // if its a single texture, then we could just swap it?\n            // same for CanvasText..\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(htmlText: HTMLText, instructionSet: InstructionSet)\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateText(htmlText);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n    }\n\n    public updateRenderable(htmlText: HTMLText)\n    {\n        const gpuText = this._getGpuText(htmlText);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateText(htmlText);\n        }\n\n        batchableSprite._batcher.updateElement(batchableSprite);\n    }\n\n    public destroyRenderable(htmlText: HTMLText)\n    {\n        htmlText.off('destroyed', this._destroyRenderableBound);\n        this._destroyRenderableById(htmlText.uid);\n    }\n\n    private _destroyRenderableById(htmlTextUid: number)\n    {\n        const gpuText = this._gpuText[htmlTextUid];\n\n        this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this._gpuText[htmlTextUid] = null;\n    }\n\n    private _updateText(htmlText: HTMLText)\n    {\n        const newKey = htmlText._getKey();\n        const gpuText = this._getGpuText(htmlText);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this._updateGpuText(htmlText).catch((e) =>\n            {\n                console.error(e);\n            });\n        }\n\n        htmlText._didTextUpdate = false;\n\n        const padding = htmlText._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n    }\n\n    private async _updateGpuText(htmlText: HTMLText)\n    {\n        htmlText._didTextUpdate = false;\n\n        const gpuText = this._getGpuText(htmlText);\n\n        if (gpuText.generatingTexture) return;\n\n        const newKey = htmlText._getKey();\n\n        this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n\n        gpuText.generatingTexture = true;\n\n        gpuText.currentKey = newKey;\n\n        const resolution = htmlText.resolution ?? this._renderer.resolution;\n\n        const texture = await this._renderer.htmlText.getManagedTexture(\n            htmlText.text,\n            resolution,\n            htmlText._style as HTMLTextStyle,\n            htmlText._getKey()\n        );\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        batchableSprite.texture = gpuText.texture = texture;\n\n        gpuText.generatingTexture = false;\n\n        gpuText.textureNeedsUploading = true;\n        htmlText.onViewUpdate();\n\n        const padding = htmlText._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n    }\n\n    private _getGpuText(htmlText: HTMLText)\n    {\n        return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n    }\n\n    public initGpuText(htmlText: HTMLText)\n    {\n        const gpuTextData: HTMLTextPipe['_gpuText'][number] = {\n            texture: Texture.EMPTY,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n            textureNeedsUploading: false,\n            generatingTexture: false,\n        };\n\n        const batchableSprite = gpuTextData.batchableSprite;\n\n        batchableSprite.renderable = htmlText;\n        batchableSprite.transform = htmlText.groupTransform;\n        batchableSprite.texture = Texture.EMPTY;\n        batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        batchableSprite.roundPixels = (this._renderer._roundPixels | htmlText._roundPixels) as 0 | 1;\n\n        htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n        this._gpuText[htmlText.uid] = gpuTextData;\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        htmlText.on('destroyed', this._destroyRenderableBound);\n\n        return gpuTextData;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuText)\n        {\n            this._destroyRenderableById(i as unknown as number);\n        }\n\n        this._gpuText = null;\n        this._renderer = null;\n    }\n}\n\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2957, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2963, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { HTMLTextPipe } from './HTMLTextPipe';\nimport { HTMLTextSystem } from './HTMLTextSystem';\n\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n"],"names":[],"mappings":";;;;;;;;kKAIA,aAAA,CAAW,GAAA,kLAAI,iBAAc,CAAA,CAAA;kKAC7B,aAAA,CAAW,GAAA,gLAAI,eAAY,CAAA","ignoreList":[0]}},
    {"offset": {"line": 2973, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2979, "column": 0}, "map": {"version":3,"file":"MeshGeometry.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/mesh/shared/MeshGeometry.ts"],"sourcesContent":["import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\n\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { BatchMode } from '../../graphics/shared/GraphicsContext';\n\n/**\n * Options for the mesh geometry.\n * @memberof scene\n */\nexport interface MeshGeometryOptions\n{\n    /** The positions of the mesh. */\n    positions?: Float32Array;\n    /** The UVs of the mesh. */\n    uvs?: Float32Array;\n    /** The indices of the mesh. */\n    indices?: Uint32Array;\n    /** The topology of the mesh. */\n    topology?: Topology;\n    /** Whether to shrink the buffers to fit the data. */\n    shrinkBuffersToFit?: boolean;\n}\n\n/**\n * A geometry used to batch multiple meshes with the same texture.\n * @memberof scene\n */\nexport class MeshGeometry extends Geometry\n{\n    public static defaultOptions: MeshGeometryOptions = {\n        topology: 'triangle-list',\n        shrinkBuffersToFit: false,\n    };\n\n    public batchMode: BatchMode = 'auto';\n\n    /**\n     * @param {scene.MeshGeometryOptions} options - The options of the mesh geometry.\n     */\n    constructor(options: MeshGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(positions: Float32Array, uvs: Float32Array, indices: Uint32Array);\n    constructor(...args: [MeshGeometryOptions] | [Float32Array, Float32Array, Uint32Array])\n    {\n        let options = args[0] ?? {};\n\n        if (options instanceof Float32Array)\n        {\n            // #if _DEBUG\n            deprecation(v8_0_0, 'use new MeshGeometry({ positions, uvs, indices }) instead');\n            // #endif\n\n            options = {\n                positions: options,\n                uvs: args[1],\n                indices: args[2],\n            };\n        }\n\n        options = { ...MeshGeometry.defaultOptions, ...options };\n\n        const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n        const uvs = options.uvs || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n        const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n\n        const shrinkToFit = options.shrinkBuffersToFit;\n\n        const positionBuffer = new Buffer({\n            data: positions,\n            label: 'attribute-mesh-positions',\n            shrinkToFit,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const uvBuffer = new Buffer({\n            data: uvs,\n            label: 'attribute-mesh-uvs',\n            shrinkToFit,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const indexBuffer = new Buffer({\n            data: indices,\n            label: 'index-mesh-buffer',\n            shrinkToFit,\n            usage: BufferUsage.INDEX | BufferUsage.COPY_DST,\n        });\n\n        super({\n            attributes: {\n                aPosition: {\n                    buffer: positionBuffer,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n                aUV: {\n                    buffer: uvBuffer,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n            },\n            indexBuffer,\n            topology: options.topology,\n        });\n    }\n\n    /** The positions of the mesh. */\n    get positions(): Float32Array\n    {\n        return this.attributes.aPosition.buffer.data as Float32Array;\n    }\n\n    set positions(value: Float32Array)\n    {\n        this.attributes.aPosition.buffer.data = value;\n    }\n\n    /** The UVs of the mesh. */\n    get uvs(): Float32Array\n    {\n        return this.attributes.aUV.buffer.data as Float32Array;\n    }\n\n    set uvs(value: Float32Array)\n    {\n        this.attributes.aUV.buffer.data = value;\n    }\n\n    /** The indices of the mesh. */\n    get indices(): Uint32Array\n    {\n        return this.indexBuffer.data as Uint32Array;\n    }\n\n    set indices(value: Uint32Array)\n    {\n        this.indexBuffer.data = value;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3099, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3105, "column": 0}, "map": {"version":3,"file":"QuadGeometry.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/utils/QuadGeometry.ts"],"sourcesContent":["import { MeshGeometry } from '../../mesh/shared/MeshGeometry';\n\nexport class QuadGeometry extends MeshGeometry\n{\n    constructor()\n    {\n        super({\n            positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            indices: new Uint32Array([0, 1, 2, 0, 2, 3]),\n        });\n    }\n}\n"],"names":[],"mappings":";;;;;;AAEO,MAAM,sMAAqB,eAClC,CAAA;IACI,WACA,EAAA;QACU,KAAA,CAAA;YACF,SAAW,EAAA,IAAI,YAAa,CAAA;gBAAC,CAAG;gBAAA,CAAA;gBAAG,CAAG;gBAAA,CAAA;gBAAG,CAAG;gBAAA,CAAA;gBAAG,CAAG;gBAAA,CAAC;aAAC,CAAA;YACpD,GAAK,EAAA,IAAI,YAAa,CAAA;gBAAC,CAAG;gBAAA,CAAA;gBAAG,CAAG;gBAAA,CAAA;gBAAG,CAAG;gBAAA,CAAA;gBAAG,CAAG;gBAAA,CAAC;aAAC,CAAA;YAC9C,OAAA,EAAS,IAAI,WAAA,CAAY;gBAAC,CAAA;gBAAG;gBAAG,CAAG;gBAAA,CAAA;gBAAG,CAAG;gBAAA,CAAC;aAAC,CAAA;QAAA,CAC9C,CAAA,CAAA;IAAA,CACL;AACJ","ignoreList":[0]}},
    {"offset": {"line": 3147, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3153, "column": 0}, "map": {"version":3,"file":"localUniformBit.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/high-shader/shader-bits/localUniformBit.ts"],"sourcesContent":["export const localUniformBit = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* wgsl */`\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n};\n\n// TODO this works, but i think down the road it will be better to manage groups automatically if there are clashes\nexport const localUniformBitGroup2 = {\n    ...localUniformBit,\n    vertex: {\n        ...localUniformBit.vertex,\n        // replace the group!\n        header: localUniformBit.vertex.header.replace('group(1)', 'group(2)'),\n    }\n};\n\nexport const localUniformBitGl = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* glsl */`\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n};\n"],"names":[],"mappings":";;;;;;AAAO,MAAM,eAAkB,GAAA;IAC3B,IAAM,EAAA,mBAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;;;;;QAAA,CAAA;QAUlB,IAAA,EAAA,QAAA,GAAgB,CAAA;;;QAAA,CAAA;QAIhB,GAAA,EAAA,QAAA,GAAe,CAAA;;;;;QAAA,CAAA;IAAA,CAMnB;AACJ,EAAA;AAGO,MAAM,qBAAwB,GAAA;IACjC,GAAG,eAAA;IACH,MAAQ,EAAA;QACJ,GAAG,eAAgB,CAAA,MAAA;QAAA,qBAAA;QAEnB,QAAQ,eAAgB,CAAA,MAAA,CAAO,MAAO,CAAA,OAAA,CAAQ,YAAY,UAAU,CAAA;IAAA,CACxE;AACJ,EAAA;AAEO,MAAM,iBAAoB,GAAA;IAC7B,IAAM,EAAA,mBAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;QAAA,CAAA;QAMlB,IAAA,EAAA,QAAA,GAAgB,CAAA;;;QAAA,CAAA;QAIhB,GAAA,EAAA,QAAA,GAAe,CAAA;;;;;QAAA,CAAA;IAAA,CAMnB;AACJ","ignoreList":[0]}},
    {"offset": {"line": 3215, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3221, "column": 0}, "map": {"version":3,"file":"tilingBit.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/shader/tilingBit.ts"],"sourcesContent":["export const tilingBit = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    }\n\n};\n\nexport const tilingBitGl = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        `,\n        main: /* glsl */`\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `,\n        main: /* glsl */`\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        `\n    }\n\n};\n"],"names":[],"mappings":";;;;;AAAO,MAAM,SAAY,GAAA;IACrB,IAAM,EAAA,YAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;;;;;;;;QAAA,CAAA;QAalB,IAAA,EAAA,QAAA,GAAgB,CAAA;;;;QAAA,CAAA;IAAA,CAMpB;IACA,QAAU,EAAA;QACN,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;;;;;;;;QAAA,CAAA;QAalB,IAAA,EAAA,QAAA,GAAgB,CAAA;;;;;;;;;;;;;;;QAAA,CAAA;IAAA,CAgBpB;AAEJ,EAAA;AAEO,MAAM,WAAc,GAAA;IACvB,IAAM,EAAA,YAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;QAAA,CAAA;QAKlB,IAAA,EAAA,QAAA,GAAgB,CAAA;;;;QAAA,CAAA;IAAA,CAMpB;IACA,QAAU,EAAA;QACN,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;QAAA,CAAA;QAMlB,IAAA,EAAA,QAAA,GAAgB,CAAA;;;;;;;;;QAAA,CAAA;IAAA,CAUpB;AAEJ","ignoreList":[0]}},
    {"offset": {"line": 3315, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3321, "column": 0}, "map": {"version":3,"file":"TilingSpriteShader.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/shader/TilingSpriteShader.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { tilingBit, tilingBitGl } from './tilingBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\nexport class TilingSpriteShader extends Shader\n{\n    constructor()\n    {\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBit,\n                tilingBit,\n                roundPixelsBit,\n            ],\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBitGl,\n                tilingBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        const tilingUniforms = new UniformGroup({\n            uMapCoord: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: 'vec4<f32>' },\n            uClampOffset: { value: new Float32Array([0, 0]), type: 'vec2<f32>' },\n            uTextureTransform: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: 'vec4<f32>' },\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: new UniformGroup({\n                    uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n                    uRound: { value: 0, type: 'f32' },\n                }),\n                tilingUniforms,\n                uTexture: Texture.EMPTY.source,\n                uSampler: Texture.EMPTY.source.style,\n            }\n        });\n    }\n\n    public updateUniforms(\n        width: number, height: number,\n        matrix: Matrix,\n        anchorX: number, anchorY: number,\n        texture: Texture\n    ): void\n    {\n        const tilingUniforms = this.resources.tilingUniforms;\n\n        const textureWidth = texture.width;\n        const textureHeight = texture.height;\n        const textureMatrix = texture.textureMatrix;\n\n        const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n\n        uTextureTransform.set(\n            matrix.a * textureWidth / width,\n            matrix.b * textureWidth / height,\n            matrix.c * textureHeight / width,\n            matrix.d * textureHeight / height,\n            matrix.tx / width,\n            matrix.ty / height);\n\n        uTextureTransform.invert();\n\n        tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n        tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n        tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n        tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n        tilingUniforms.uniforms.uSizeAnchor[0] = width;\n        tilingUniforms.uniforms.uSizeAnchor[1] = height;\n        tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n        tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n\n        if (texture)\n        {\n            this.resources.uTexture = texture.source;\n            this.resources.uSampler = texture.source.style;\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3449, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3455, "column": 0}, "map": {"version":3,"file":"applyMatrix.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/utils/applyMatrix.ts"],"sourcesContent":["import type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { TypedArray } from '../../../rendering/renderers/shared/buffer/Buffer';\n\nexport function applyMatrix(array: TypedArray, stride: number, offset: number, matrix: Matrix)\n{\n    let index = 0;\n    const size = array.length / (stride || 2);\n\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n\n    offset *= stride;\n\n    while (index < size)\n    {\n        const x = array[offset];\n        const y = array[offset + 1];\n\n        array[offset] = (a * x) + (c * y) + tx;\n        array[offset + 1] = (b * x) + (d * y) + ty;\n\n        offset += stride;\n\n        index++;\n    }\n}\n"],"names":[],"mappings":";;;;AAGO,SAAS,WAAY,CAAA,KAAA,EAAmB,MAAgB,EAAA,MAAA,EAAgB,MAC/E,EAAA;IACI,IAAI,KAAQ,GAAA,CAAA,CAAA;IACN,MAAA,IAAA,GAAO,KAAM,CAAA,MAAA,GAAA,CAAU,MAAU,IAAA,CAAA,CAAA,CAAA;IAEvC,MAAM,IAAI,MAAO,CAAA,CAAA,CAAA;IACjB,MAAM,IAAI,MAAO,CAAA,CAAA,CAAA;IACjB,MAAM,IAAI,MAAO,CAAA,CAAA,CAAA;IACjB,MAAM,IAAI,MAAO,CAAA,CAAA,CAAA;IACjB,MAAM,KAAK,MAAO,CAAA,EAAA,CAAA;IAClB,MAAM,KAAK,MAAO,CAAA,EAAA,CAAA;IAER,MAAA,IAAA,MAAA,CAAA;IAEV,MAAO,QAAQ,IACf,CAAA;QACU,MAAA,CAAA,GAAI,KAAA,CAAM,MAAM,CAAA,CAAA;QAChB,MAAA,CAAA,GAAI,KAAM,CAAA,MAAA,GAAS,CAAC,CAAA,CAAA;QAE1B,KAAA,CAAM,MAAM,CAAA,GAAK,CAAI,GAAA,CAAA,GAAM,IAAI,CAAK,GAAA,EAAA,CAAA;QACpC,KAAA,CAAM,SAAS,CAAC,CAAA,GAAK,CAAI,GAAA,CAAA,GAAM,IAAI,CAAK,GAAA,EAAA,CAAA;QAE9B,MAAA,IAAA,MAAA,CAAA;QAEV,KAAA,EAAA,CAAA;IAAA,CACJ;AACJ","ignoreList":[0]}},
    {"offset": {"line": 3480, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3486, "column": 0}, "map": {"version":3,"file":"setUvs.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/utils/setUvs.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { applyMatrix } from './applyMatrix';\n\nimport type { TilingSprite } from '../TilingSprite';\n\nexport function setUvs(tilingSprite: TilingSprite, uvs: Float32Array)\n{\n    const texture = tilingSprite.texture;\n\n    const width = texture.frame.width;\n    const height = texture.frame.height;\n\n    let anchorX = 0;\n    let anchorY = 0;\n\n    if (tilingSprite.applyAnchorToTexture)\n    {\n        anchorX = tilingSprite.anchor.x;\n        anchorY = tilingSprite.anchor.y;\n    }\n\n    uvs[0] = uvs[6] = -anchorX;\n    uvs[2] = uvs[4] = 1 - anchorX;\n    uvs[1] = uvs[3] = -anchorY;\n    uvs[5] = uvs[7] = 1 - anchorY;\n\n    const textureMatrix = Matrix.shared;\n\n    textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n\n    textureMatrix.tx /= tilingSprite.width;\n    textureMatrix.ty /= tilingSprite.height;\n\n    textureMatrix.invert();\n\n    textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n\n    applyMatrix(uvs, 2, 0, textureMatrix);\n}\n"],"names":[],"mappings":";;;;;;;;AAKgB,SAAA,MAAA,CAAO,YAAA,EAA4B,GACnD,EAAA;IACI,MAAM,UAAU,YAAa,CAAA,OAAA,CAAA;IAEvB,MAAA,KAAA,GAAQ,QAAQ,KAAM,CAAA,KAAA,CAAA;IACtB,MAAA,MAAA,GAAS,QAAQ,KAAM,CAAA,MAAA,CAAA;IAE7B,IAAI,OAAU,GAAA,CAAA,CAAA;IACd,IAAI,OAAU,GAAA,CAAA,CAAA;IAEd,IAAI,aAAa,oBACjB,EAAA;QACI,OAAA,GAAU,aAAa,MAAO,CAAA,CAAA,CAAA;QAC9B,OAAA,GAAU,aAAa,MAAO,CAAA,CAAA,CAAA;IAAA,CAClC;IAEA,GAAA,CAAI,CAAC,CAAA,GAAI,GAAI,CAAA,CAAC,CAAA,GAAI,CAAC,OAAA,CAAA;IACnB,GAAA,CAAI,CAAC,CAAA,GAAI,GAAI,CAAA,CAAC,CAAA,GAAI,CAAI,GAAA,OAAA,CAAA;IACtB,GAAA,CAAI,CAAC,CAAA,GAAI,GAAI,CAAA,CAAC,CAAA,GAAI,CAAC,OAAA,CAAA;IACnB,GAAA,CAAI,CAAC,CAAA,GAAI,GAAI,CAAA,CAAC,CAAA,GAAI,CAAI,GAAA,OAAA,CAAA;IAEtB,MAAM,mLAAgB,SAAO,CAAA,MAAA,CAAA;IAEf,aAAA,CAAA,QAAA,CAAS,YAAa,CAAA,cAAA,CAAe,MAAM,CAAA,CAAA;IAEzD,aAAA,CAAc,EAAA,IAAM,YAAa,CAAA,KAAA,CAAA;IACjC,aAAA,CAAc,EAAA,IAAM,YAAa,CAAA,MAAA,CAAA;IAEjC,aAAA,CAAc,MAAO,EAAA,CAAA;IAErB,aAAA,CAAc,KAAA,CAAM,YAAa,CAAA,KAAA,GAAQ,KAAO,EAAA,YAAA,CAAa,MAAA,GAAS,MAAM,CAAA,CAAA;mMAEhE,cAAA,EAAA,GAAA,EAAK,CAAG,EAAA,CAAA,EAAG,aAAa,CAAA,CAAA;AACxC","ignoreList":[0]}},
    {"offset": {"line": 3518, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3524, "column": 0}, "map": {"version":3,"file":"setPositions.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/utils/setPositions.ts"],"sourcesContent":["import type { TilingSprite } from '../TilingSprite';\n\nexport function setPositions(tilingSprite: TilingSprite, positions: Float32Array)\n{\n    const anchorX = tilingSprite.anchor.x;\n    const anchorY = tilingSprite.anchor.y;\n\n    positions[0] = -anchorX * tilingSprite.width;\n    positions[1] = -anchorY * tilingSprite.height;\n    positions[2] = (1 - anchorX) * tilingSprite.width;\n    positions[3] = -anchorY * tilingSprite.height;\n    positions[4] = (1 - anchorX) * tilingSprite.width;\n    positions[5] = (1 - anchorY) * tilingSprite.height;\n    positions[6] = -anchorX * tilingSprite.width;\n    positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n"],"names":[],"mappings":";;;;AAEgB,SAAA,YAAA,CAAa,YAAA,EAA4B,SACzD,EAAA;IACU,MAAA,OAAA,GAAU,aAAa,MAAO,CAAA,CAAA,CAAA;IAC9B,MAAA,OAAA,GAAU,aAAa,MAAO,CAAA,CAAA,CAAA;IAEpC,SAAA,CAAU,CAAC,CAAA,GAAI,CAAC,OAAA,GAAU,YAAa,CAAA,KAAA,CAAA;IACvC,SAAA,CAAU,CAAC,CAAA,GAAI,CAAC,OAAA,GAAU,YAAa,CAAA,MAAA,CAAA;IACvC,SAAA,CAAU,CAAC,CAAA,GAAA,CAAK,CAAI,GAAA,OAAA,IAAW,YAAa,CAAA,KAAA,CAAA;IAC5C,SAAA,CAAU,CAAC,CAAA,GAAI,CAAC,OAAA,GAAU,YAAa,CAAA,MAAA,CAAA;IACvC,SAAA,CAAU,CAAC,CAAA,GAAA,CAAK,CAAI,GAAA,OAAA,IAAW,YAAa,CAAA,KAAA,CAAA;IAC5C,SAAA,CAAU,CAAC,CAAA,GAAA,CAAK,CAAI,GAAA,OAAA,IAAW,YAAa,CAAA,MAAA,CAAA;IAC5C,SAAA,CAAU,CAAC,CAAA,GAAI,CAAC,OAAA,GAAU,YAAa,CAAA,KAAA,CAAA;IACvC,SAAA,CAAU,CAAC,CAAA,GAAA,CAAK,CAAI,GAAA,OAAA,IAAW,YAAa,CAAA,MAAA,CAAA;AAChD","ignoreList":[0]}},
    {"offset": {"line": 3542, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3548, "column": 0}, "map": {"version":3,"file":"TilingSpritePipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/TilingSpritePipe.ts"],"sourcesContent":["import { ExtensionType } from '../../extensions/Extensions';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { State } from '../../rendering/renderers/shared/state/State';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader';\nimport { QuadGeometry } from './utils/QuadGeometry';\nimport { setPositions } from './utils/setPositions';\nimport { setUvs } from './utils/setUvs';\n\nimport type { WebGLRenderer } from '../../rendering/renderers/gl/WebGLRenderer';\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Container } from '../container/Container';\nimport type { TilingSprite } from './TilingSprite';\n\ninterface RenderableData\n{\n    canBatch: boolean;\n    renderable: TilingSprite\n    batchableMesh?: BatchableMesh;\n    geometry?: MeshGeometry;\n    shader?: TilingSpriteShader;\n}\n\nconst sharedQuad = new QuadGeometry();\n\nexport class TilingSpritePipe implements RenderPipe<TilingSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'tilingSprite',\n    } as const;\n\n    private _renderer: Renderer;\n    private readonly _state: State = State.default2d;\n    private readonly _tilingSpriteDataHash: Record<number, RenderableData> = Object.create(null);\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_tilingSpriteDataHash');\n    }\n\n    public validateRenderable(renderable: TilingSprite): boolean\n    {\n        const tilingSpriteData = this._getTilingSpriteData(renderable);\n\n        const couldBatch = tilingSpriteData.canBatch;\n\n        this._updateCanBatch(renderable);\n\n        const canBatch = tilingSpriteData.canBatch;\n\n        if (canBatch && canBatch === couldBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            return !batchableMesh._batcher.checkAndUpdateTexture(\n                batchableMesh,\n                renderable.texture\n            );\n        }\n\n        return (couldBatch !== canBatch);\n\n        // // TODO - only update if required?\n        // // only texture\n        // // only uvs\n        // // only positions?\n    }\n\n    public addRenderable(tilingSprite: TilingSprite, instructionSet: InstructionSet)\n    {\n        const batcher = this._renderer.renderPipes.batch;\n\n        // init\n        this._updateCanBatch(tilingSprite);\n\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry, canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            tilingSpriteData.batchableMesh ||= new BatchableMesh();\n\n            const batchableMesh = tilingSpriteData.batchableMesh;\n\n            if (tilingSprite.didViewUpdate)\n            {\n                this._updateBatchableMesh(tilingSprite);\n\n                batchableMesh.geometry = geometry;\n                batchableMesh.renderable = tilingSprite;\n                batchableMesh.transform = tilingSprite.groupTransform;\n                batchableMesh.texture = tilingSprite._texture;\n            }\n\n            batchableMesh.roundPixels = (this._renderer._roundPixels | tilingSprite._roundPixels) as 0 | 1;\n\n            batcher.addToBatch(batchableMesh, instructionSet);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            tilingSpriteData.shader ||= new TilingSpriteShader();\n\n            this.updateRenderable(tilingSprite);\n\n            instructionSet.add(tilingSprite);\n        }\n    }\n\n    public execute(tilingSprite: TilingSprite)\n    {\n        const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n\n        shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n\n        // deal with local uniforms...\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n        localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n\n        color32BitToUniform(\n            tilingSprite.groupColorAlpha,\n            localUniforms.uColor,\n            0\n        );\n\n        this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n\n        this._renderer.encoder.draw({\n            geometry: sharedQuad,\n            shader,\n            state: this._state,\n        });\n    }\n\n    public updateRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            if (tilingSprite.didViewUpdate) this._updateBatchableMesh(tilingSprite);\n\n            batchableMesh._batcher.updateElement(batchableMesh);\n        }\n        else if (tilingSprite.didViewUpdate)\n        {\n            const { shader } = tilingSpriteData;\n            // now update uniforms...\n\n            shader.updateUniforms(\n                tilingSprite.width,\n                tilingSprite.height,\n                tilingSprite._tileTransform.matrix,\n                tilingSprite.anchor.x,\n                tilingSprite.anchor.y,\n                tilingSprite.texture,\n            );\n        }\n    }\n\n    public destroyRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        tilingSpriteData.batchableMesh = null;\n\n        tilingSpriteData.shader?.destroy();\n\n        this._tilingSpriteDataHash[tilingSprite.uid] = null;\n\n        tilingSprite.off('destroyed', this._destroyRenderableBound);\n    }\n\n    private _getTilingSpriteData(renderable: TilingSprite): RenderableData\n    {\n        return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n    }\n\n    private _initTilingSpriteData(tilingSprite: TilingSprite): RenderableData\n    {\n        const geometry = new MeshGeometry({\n            indices: sharedQuad.indices,\n            positions: sharedQuad.positions.slice(),\n            uvs: sharedQuad.uvs.slice(),\n        });\n\n        this._tilingSpriteDataHash[tilingSprite.uid] = {\n            canBatch: true,\n            renderable: tilingSprite,\n            geometry,\n        };\n\n        tilingSprite.on('destroyed', this._destroyRenderableBound);\n\n        return this._tilingSpriteDataHash[tilingSprite.uid];\n    }\n\n    private _updateBatchableMesh(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry } = renderableData;\n\n        const style = tilingSprite.texture.source.style;\n\n        if (style.addressMode !== 'repeat')\n        {\n            style.addressMode = 'repeat';\n            style.update();\n        }\n\n        setUvs(tilingSprite, geometry.uvs);\n        setPositions(tilingSprite, geometry.positions);\n    }\n\n    public destroy()\n    {\n        for (const i in this._tilingSpriteDataHash)\n        {\n            this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n        }\n\n        (this._tilingSpriteDataHash as null) = null;\n        this._renderer = null;\n    }\n\n    private _updateCanBatch(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n        const texture = tilingSprite.texture;\n\n        let _nonPowOf2wrapping = true;\n\n        if (this._renderer.type === RendererType.WEBGL)\n        {\n            _nonPowOf2wrapping = (this._renderer as WebGLRenderer).context.supports.nonPowOf2wrapping;\n        }\n\n        renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n\n        return renderableData.canBatch;\n    }\n}\n\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3707, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3713, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { TilingSpritePipe } from './TilingSpritePipe';\n\nextensions.add(TilingSpritePipe);\n"],"names":[],"mappings":";;;;;;kKAGA,aAAA,CAAW,GAAA,wLAAI,mBAAgB,CAAA","ignoreList":[0]}},
    {"offset": {"line": 3720, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3726, "column": 0}, "map": {"version":3,"file":"PlaneGeometry.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/mesh-plane/PlaneGeometry.ts"],"sourcesContent":["import { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\n\nimport type { MeshGeometryOptions } from '../mesh/shared/MeshGeometry';\n\n/**\n * Constructor options used for `PlaneGeometry` instances.\n * ```js\n * const planeGeometry = new PlaneGeometry({\n *    width: 100,\n *    height: 100,\n *    verticesX: 10,\n *    verticesY: 10,\n * });\n * ```\n * @see {@link scene.PlaneGeometry}\n * @memberof scene\n */\nexport interface PlaneGeometryOptions\n{\n    /** Width of plane */\n    width?: number;\n    /** Height of plane */\n    height?: number;\n    /** Number of vertices on x-axis */\n    verticesX?: number;\n    /** Number of vertices on y-axis */\n    verticesY?: number;\n}\n\n/**\n * The PlaneGeometry allows you to draw a 2d plane\n * @memberof scene\n */\nexport class PlaneGeometry extends MeshGeometry\n{\n    public static defaultOptions: PlaneGeometryOptions & MeshGeometryOptions = {\n        width: 100,\n        height: 100,\n        verticesX: 10,\n        verticesY: 10,\n    };\n\n    /** The number of vertices on x-axis */\n    public verticesX: number;\n    /** The number of vertices on y-axis */\n    public verticesY: number;\n    /** The width of plane */\n    public width: number;\n    /** The height of plane */\n    public height: number;\n\n    /**\n     * @param {PlaneGeometryOptions} options - Options to be applied to plane geometry\n     */\n    constructor(options: PlaneGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(width?: number, height?: number, verticesX?: number, verticesY?: number);\n    constructor(...args: [PlaneGeometryOptions?] | [number?, number?, number?, number?])\n    {\n        super({});\n\n        let options = args[0] ?? {};\n\n        if (typeof options === 'number')\n        {\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead');\n            // #endif\n\n            options = {\n                width: options,\n                height: args[1],\n                verticesX: args[2],\n                verticesY: args[3],\n            };\n        }\n\n        this.build(options);\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @param options - Options to be applied to plane geometry\n     */\n    public build(options: PlaneGeometryOptions): void\n    {\n        options = { ...PlaneGeometry.defaultOptions, ...options };\n\n        this.verticesX = this.verticesX ?? options.verticesX;\n        this.verticesY = this.verticesY ?? options.verticesY;\n\n        this.width = this.width ?? options.width;\n        this.height = this.height ?? options.height;\n\n        const total = this.verticesX * this.verticesY;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const verticesX = this.verticesX - 1;\n        const verticesY = this.verticesY - 1;\n\n        const sizeX = (this.width) / verticesX;\n        const sizeY = (this.height) / verticesY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.verticesX);\n            const y = ((i / this.verticesX) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / verticesX, y / verticesY);\n        }\n\n        const totalSub = verticesX * verticesY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % verticesX;\n            const ypos = (i / verticesX) | 0;\n\n            const value = (ypos * this.verticesX) + xpos;\n            const value2 = (ypos * this.verticesX) + xpos + 1;\n            const value3 = ((ypos + 1) * this.verticesX) + xpos;\n            const value4 = ((ypos + 1) * this.verticesX) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint32Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3802, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3808, "column": 0}, "map": {"version":3,"file":"NineSliceGeometry.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceGeometry.ts"],"sourcesContent":["import { PlaneGeometry } from '../mesh-plane/PlaneGeometry';\n\n/**\n * Options for the NineSliceGeometry.\n * @memberof scene\n */\nexport interface NineSliceGeometryOptions\n{\n\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    width?: number\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    height?: number\n    /** The original width of the texture */\n    originalWidth?: number\n    /** The original height of the texture */\n    originalHeight?: number\n    /** The width of the left column. */\n    leftWidth?: number\n    /** The height of the top row. */\n    topHeight?: number\n    /** The width of the right column. */\n    rightWidth?: number\n    /** The height of the bottom row. */\n    bottomHeight?: number\n}\n\n/**\n * The NineSliceGeometry class allows you to create a NineSlicePlane object.\n * @memberof scene\n */\nexport class NineSliceGeometry extends PlaneGeometry\n{\n    /** The default options for the NineSliceGeometry. */\n    public static defaultOptions: NineSliceGeometryOptions = {\n        /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        width: 100,\n        /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        height: 100,\n        /** The width of the left column. */\n        leftWidth: 10,\n        /** The height of the top row. */\n        topHeight: 10,\n        /** The width of the right column. */\n        rightWidth: 10,\n        /** The height of the bottom row. */\n        bottomHeight: 10,\n\n        /** The original width of the texture */\n        originalWidth: 100,\n        /** The original height of the texture */\n        originalHeight: 100,\n    };\n\n    public _leftWidth: number;\n    public _rightWidth: number;\n    public _topHeight: number;\n    public _bottomHeight: number;\n\n    private _originalWidth: number;\n    private _originalHeight: number;\n\n    constructor(options: NineSliceGeometryOptions = {})\n    {\n        options = { ...NineSliceGeometry.defaultOptions, ...options };\n\n        super({\n            width: options.width,\n            height: options.height,\n            verticesX: 4,\n            verticesY: 4,\n        });\n\n        this.update(options);\n    }\n\n    /**\n     * Updates the NineSliceGeometry with the options.\n     * @param options - The options of the NineSliceGeometry.\n     */\n    public update(options: NineSliceGeometryOptions)\n    {\n        this.width = options.width ?? this.width;\n        this.height = options.height ?? this.height;\n        this._originalWidth = options.originalWidth ?? this._originalWidth;\n        this._originalHeight = options.originalHeight ?? this._originalHeight;\n        this._leftWidth = options.leftWidth ?? this._leftWidth;\n        this._rightWidth = options.rightWidth ?? this._rightWidth;\n        this._topHeight = options.topHeight ?? this._topHeight;\n        this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n\n        this.updateUvs();\n        this.updatePositions();\n    }\n\n    /** Updates the positions of the vertices. */\n    public updatePositions()\n    {\n        const positions = this.positions;\n\n        const w = this._leftWidth + this._rightWidth;\n        const scaleW = this.width > w ? 1.0 : this.width / w;\n\n        const h = this._topHeight + this._bottomHeight;\n        const scaleH = this.height > h ? 1.0 : this.height / h;\n\n        const scale = Math.min(scaleW, scaleH);\n\n        positions[9] = positions[11] = positions[13] = positions[15] = this._topHeight * scale;\n        positions[17] = positions[19] = positions[21] = positions[23] = this.height - (this._bottomHeight * scale);\n        positions[25] = positions[27] = positions[29] = positions[31] = this.height;\n\n        positions[2] = positions[10] = positions[18] = positions[26] = this._leftWidth * scale;\n        positions[4] = positions[12] = positions[20] = positions[28] = this.width - (this._rightWidth * scale);\n        positions[6] = positions[14] = positions[22] = positions[30] = this.width;\n\n        this.getBuffer('aPosition').update();\n    }\n\n    /** Updates the UVs of the vertices. */\n    public updateUvs()\n    {\n        const uvs = this.uvs;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        const _uvw = 1.0 / this._originalWidth;\n        const _uvh = 1.0 / this._originalHeight;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.getBuffer('aUV').update();\n    }\n}\n\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3886, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3892, "column": 0}, "map": {"version":3,"file":"NineSliceSpritePipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceSpritePipe.ts"],"sourcesContent":["import { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { NineSliceGeometry } from './NineSliceGeometry';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { Container } from '../container/Container';\nimport type { NineSliceSprite } from './NineSliceSprite';\n\nexport class NineSliceSpritePipe implements RenderPipe<NineSliceSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'nineSliceSprite',\n    } as const;\n\n    private readonly _renderer: Renderer;\n    private readonly _gpuSpriteHash: Record<number, BatchableMesh> = Object.create(null);\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_gpuSpriteHash');\n    }\n\n    public addRenderable(sprite: NineSliceSprite, instructionSet: InstructionSet)\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n    }\n\n    public updateRenderable(sprite: NineSliceSprite)\n    {\n        const gpuSprite = this._gpuSpriteHash[sprite.uid];\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        gpuSprite._batcher.updateElement(gpuSprite);\n    }\n\n    public validateRenderable(sprite: NineSliceSprite): boolean\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        return !gpuSprite._batcher.checkAndUpdateTexture(\n            gpuSprite,\n            sprite._texture\n        );\n    }\n\n    public destroyRenderable(sprite: NineSliceSprite)\n    {\n        const batchableMesh = this._gpuSpriteHash[sprite.uid];\n\n        // this will call reset!\n        BigPool.return(batchableMesh.geometry as PoolItem);\n        BigPool.return(batchableMesh as PoolItem);\n\n        this._gpuSpriteHash[sprite.uid] = null;\n\n        sprite.off('destroyed', this._destroyRenderableBound);\n    }\n\n    private _updateBatchableSprite(sprite: NineSliceSprite, batchableSprite: BatchableMesh)\n    {\n        (batchableSprite.geometry as NineSliceGeometry)\n            .update(sprite);\n\n        // = sprite.bounds;\n        batchableSprite.texture = sprite._texture;\n    }\n\n    private _getGpuSprite(sprite: NineSliceSprite): BatchableMesh\n    {\n        return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n    }\n\n    private _initGPUSprite(sprite: NineSliceSprite): BatchableMesh\n    {\n        const batchableMesh = BigPool.get(BatchableMesh);\n\n        batchableMesh.geometry = BigPool.get(NineSliceGeometry);\n        batchableMesh.renderable = sprite;\n        batchableMesh.transform = sprite.groupTransform;\n        batchableMesh.texture = sprite._texture;\n        batchableMesh.roundPixels = (this._renderer._roundPixels | sprite._roundPixels) as 0 | 1;\n\n        this._gpuSpriteHash[sprite.uid] = batchableMesh;\n\n        // if the sprite has not been updated by the view, we need to update the batchable mesh now.\n        if (!sprite.didViewUpdate)\n        {\n            this._updateBatchableSprite(sprite, batchableMesh);\n        }\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        sprite.on('destroyed', this._destroyRenderableBound);\n\n        return batchableMesh;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuSpriteHash)\n        {\n            const batchableMesh = this._gpuSpriteHash[i];\n\n            batchableMesh.geometry.destroy();\n        }\n\n        (this._gpuSpriteHash as null) = null;\n        (this._renderer as null) = null;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3972, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3978, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-nine-slice/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe';\n\nextensions.add(NineSliceSpritePipe);\n"],"names":[],"mappings":";;;;;;kKAGA,aAAA,CAAW,GAAA,kMAAI,sBAAmB,CAAA","ignoreList":[0]}},
    {"offset": {"line": 3985, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3991, "column": 0}, "map": {"version":3,"file":"getFastGlobalBounds.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/container/bounds/getFastGlobalBounds.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { boundsPool } from './utils/matrixAndBoundsPool';\n\nimport type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Container } from '../Container';\nimport type { Bounds } from './Bounds';\n\n// TODO could we cache local bounds on the render groups?\n\nconst tempMatrix = new Matrix();\n\n/**\n * Does exactly the same as getGlobalBounds, but does instead makes use of transforming AABBs\n * of the various children within the scene graph. This is much faster, but less accurate.\n *\n * the result will never be smaller - only ever slightly larger (in most cases, it will be the same).\n * @param target - The target container to get the bounds from\n * @param bounds - The output bounds object.\n * @returns The bounds.\n */\nexport function getFastGlobalBounds(target: Container, bounds: Bounds): Bounds\n{\n    bounds.clear();\n\n    _getGlobalBoundsRecursive(target, bounds);\n\n    if (!bounds.isValid)\n    {\n        bounds.set(0, 0, 0, 0);\n    }\n\n    const renderGroup = target.renderGroup || target.parentRenderGroup;\n\n    bounds.applyMatrix(renderGroup.worldTransform);\n\n    return bounds;\n}\n\nexport function _getGlobalBoundsRecursive(\n    target: Container,\n    bounds: Bounds,\n)\n{\n    if (target.localDisplayStatus !== 0b111 || !target.measurable)\n    {\n        return;\n    }\n\n    const manageEffects = !!target.effects.length;\n\n    let localBounds = bounds;\n\n    if (target.renderGroup || manageEffects)\n    {\n        localBounds = boundsPool.get().clear();\n    }\n\n    if (target.boundsArea)\n    {\n        bounds.addRect(target.boundsArea, target.worldTransform);\n    }\n    else\n    {\n        if (target.renderPipeId)\n        {\n            const viewBounds = (target as Renderable).bounds;\n\n            localBounds.addFrame(\n                viewBounds.minX,\n                viewBounds.minY,\n                viewBounds.maxX,\n                viewBounds.maxY,\n                target.groupTransform\n            );\n        }\n\n        const children = target.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            _getGlobalBoundsRecursive(children[i], localBounds);\n        }\n    }\n\n    if (manageEffects)\n    {\n        let advanced = false;\n\n        const renderGroup = target.renderGroup || target.parentRenderGroup;\n\n        for (let i = 0; i < target.effects.length; i++)\n        {\n            if (target.effects[i].addBounds)\n            {\n                if (!advanced)\n                {\n                    advanced = true;\n                    localBounds.applyMatrix(renderGroup.worldTransform);\n                }\n\n                target.effects[i].addBounds(localBounds, true);\n            }\n        }\n\n        if (advanced)\n        {\n            localBounds.applyMatrix(renderGroup.worldTransform.copyTo(tempMatrix).invert());\n            bounds.addBounds(localBounds, target.relativeGroupTransform);\n        }\n\n        bounds.addBounds(localBounds);\n        boundsPool.return(localBounds);\n    }\n    else if (target.renderGroup)\n    {\n        bounds.addBounds(localBounds, target.relativeGroupTransform);\n        boundsPool.return(localBounds);\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4057, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4063, "column": 0}, "map": {"version":3,"file":"getRenderableBounds.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/container/bounds/getRenderableBounds.ts"],"sourcesContent":["import type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Bounds } from './Bounds';\n\nexport function getGlobalRenderableBounds(renderables: Renderable[], bounds: Bounds): Bounds\n{\n    bounds.clear();\n\n    // instead of copying the matrix each time we are assigning it in bounds\n    // this is a performance hack :D\n    // so we need to restore the matrix after we are done\n\n    const tempMatrix = bounds.matrix;\n\n    for (let i = 0; i < renderables.length; i++)\n    {\n        const renderable = renderables[i];\n\n        if (renderable.globalDisplayStatus < 0b111)\n        {\n            continue;\n        }\n\n        bounds.matrix = renderable.worldTransform;\n        bounds.addBounds(renderable.bounds);\n    }\n\n    bounds.matrix = tempMatrix;\n\n    return bounds;\n}\n"],"names":[],"mappings":";;;;AAGgB,SAAA,yBAAA,CAA0B,WAAA,EAA2B,MACrE,EAAA;IACI,MAAA,CAAO,KAAM,EAAA,CAAA;IAMb,MAAM,aAAa,MAAO,CAAA,MAAA,CAAA;IAE1B,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,WAAA,CAAY,MAAA,EAAQ,CACxC,EAAA,CAAA;QACU,MAAA,UAAA,GAAa,WAAA,CAAY,CAAC,CAAA,CAAA;QAE5B,IAAA,UAAA,CAAW,mBAAA,GAAsB,CACrC,EAAA;YACI,SAAA;QAAA,CACJ;QAEA,MAAA,CAAO,MAAA,GAAS,UAAW,CAAA,cAAA,CAAA;QACpB,MAAA,CAAA,SAAA,CAAU,WAAW,MAAM,CAAA,CAAA;IAAA,CACtC;IAEA,MAAA,CAAO,MAAS,GAAA,UAAA,CAAA;IAET,OAAA,MAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 4083, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4089, "column": 0}, "map": {"version":3,"file":"FilterSystem.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/FilterSystem.ts"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions';\nimport { Matrix } from '../maths/matrix/Matrix';\nimport { Point } from '../maths/point/Point';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer, RendererType } from '../rendering/renderers/types';\nimport { Bounds } from '../scene/container/bounds/Bounds';\nimport { getFastGlobalBounds } from '../scene/container/bounds/getFastGlobalBounds';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds';\nimport { warn } from '../utils/logging/warn';\n\nimport type { WebGLRenderer } from '../rendering/renderers/gl/WebGLRenderer';\nimport type { WebGPURenderer } from '../rendering/renderers/gpu/WebGPURenderer';\nimport type { Instruction } from '../rendering/renderers/shared/instructions/Instruction';\nimport type { Renderable } from '../rendering/renderers/shared/Renderable';\nimport type { RenderTarget } from '../rendering/renderers/shared/renderTarget/RenderTarget';\nimport type { RenderSurface } from '../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type { System } from '../rendering/renderers/shared/system/System';\nimport type { Container } from '../scene/container/Container';\nimport type { Sprite } from '../scene/sprite/Sprite';\nimport type { Filter } from './Filter';\nimport type { FilterEffect } from './FilterEffect';\n\ntype FilterAction = 'pushFilter' | 'popFilter';\n\n//\nconst quadGeometry = new Geometry({\n    attributes: {\n        aPosition: {\n            buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            format: 'float32x2',\n            stride: 2 * 4,\n            offset: 0,\n        },\n    },\n    indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3]),\n});\n\n/**\n * The filter pipeline is responsible for applying filters scene items!\n *\n * KNOWN BUGS:\n * 1. Global bounds calculation is incorrect if it is used when flip flopping filters. The maths can be found below\n * eg: filters [noiseFilter, blurFilter] noiseFilter will calculate the global bounds incorrectly.\n *\n * 2. RenderGroups do not work with filters. This is because the renderGroup matrix is not currently taken into account.\n *\n * Implementation notes:\n * 1. Gotcha - nesting filters that require blending will not work correctly. This creates a chicken and egg problem\n * the complexity and performance required to do this is not worth it i feel.. but lets see if others agree!\n *\n * 2. Filters are designed to be changed on the fly, this is means that changing filter information each frame will\n * not trigger an instruction rebuild. If you are constantly turning a filter on and off.. its therefore better to set\n * enabled to true or false on the filter. Or setting an empty array.\n *\n * 3. Need to look at perhaps aliasing when flip flopping filters. Really we should only need to antialias the FIRST\n * Texture we render too. The rest can be non aliased. This might help performance.\n * Currently we flip flop with an antialiased texture if antialiasing is enabled on the filter.\n */\nexport interface FilterInstruction extends Instruction\n{\n    renderPipeId: 'filter',\n    action: FilterAction,\n    container?: Container,\n    renderables?: Renderable[],\n    filterEffect: FilterEffect,\n}\n\nexport interface FilterData\n{\n    skip: boolean;\n    enabledLength?: number;\n    inputTexture: Texture\n    bounds: Bounds,\n    blendRequired: boolean,\n    container: Container,\n    filterEffect: FilterEffect,\n    previousRenderSurface: RenderSurface,\n    backTexture?: Texture,\n}\n\n/**\n * System that manages the filter pipeline\n * @memberof rendering\n */\nexport class FilterSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'filter',\n    } as const;\n\n    public readonly renderer: Renderer;\n\n    private _filterStackIndex = 0;\n    private _filterStack: FilterData[] = [];\n\n    private readonly _filterGlobalUniforms = new UniformGroup({\n        uInputSize: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputPixel: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputClamp: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uGlobalFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputTexture: { value: new Float32Array(4), type: 'vec4<f32>' },\n    });\n\n    private readonly _globalFilterBindGroup: BindGroup = new BindGroup({});\n    private _activeFilterData: FilterData;\n\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n     * @readonly\n     */\n    public get activeBackTexture(): Texture | undefined\n    {\n        return this._activeFilterData?.backTexture;\n    }\n\n    public push(instruction: FilterInstruction)\n    {\n        const renderer = this.renderer;\n\n        const filters = instruction.filterEffect.filters;\n\n        if (!this._filterStack[this._filterStackIndex])\n        {\n            this._filterStack[this._filterStackIndex] = this._getFilterData();\n        }\n\n        // get a filter data from the stack. They can be reused multiple times each frame,\n        // so we don't need to worry about overwriting them in a single pass.\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        this._filterStackIndex++;\n\n        // if there are no filters, we skip the pass\n        if (filters.length === 0)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        const bounds: Bounds = filterData.bounds;\n\n        // this path is used by the blend modes mostly!\n        // they collect all renderables and push them into a list.\n        // this list is then used to calculate the bounds of the filter area\n        if (instruction.renderables)\n        {\n            getGlobalRenderableBounds(instruction.renderables, bounds);\n        }\n        // if a filterArea is provided, we save our selves some measuring and just use that area supplied\n        else if (instruction.filterEffect.filterArea)\n        {\n            bounds.clear();\n\n            // transform the filterArea into global space..\n            bounds.addRect(instruction.filterEffect.filterArea);\n\n            // new for v8, we transform the bounds into the space of the container\n            bounds.applyMatrix(instruction.container.worldTransform);\n        }\n        // classic filter path, we get the bounds of the container and use it by recursively\n        // measuring.\n        else\n        {\n            getFastGlobalBounds(instruction.container, bounds);\n        }\n\n        if (instruction.container)\n        {\n            // When a container is cached as a texture, its filters need to be applied relative to its\n            // cached parent's coordinate space rather than world space. This transform adjustment ensures\n            // filters are applied in the correct coordinate system.\n            const renderGroup = instruction.container.renderGroup || instruction.container.parentRenderGroup;\n            const filterFrameTransform = renderGroup.cacheToLocalTransform;\n\n            if (filterFrameTransform)\n            {\n                bounds.applyMatrix(filterFrameTransform);\n            }\n        }\n\n        // get GLOBAL bounds of the item we are going to apply the filter to\n\n        const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n\n        // next we get the settings for the filter\n        // we need to find the LOWEST resolution for the filter list\n        let resolution = Infinity;\n        // Padding is additive to add padding to our padding\n        let padding = 0;\n        // if this is true for all filter, it should be true, and otherwise false\n        let antialias = true;\n        // true if any filter requires the previous render target\n        let blendRequired = false;\n        // true if any filter in the list is enabled\n        let enabled = false;\n        // false if any filter in the list has false\n        let clipToViewport = true;\n\n        for (let i = 0; i < filters.length; i++)\n        {\n            const filter = filters[i];\n\n            resolution = Math.min(resolution, filter.resolution === 'inherit'\n                ? colorTextureSource._resolution : filter.resolution);\n            padding += filter.padding;\n\n            if (filter.antialias === 'off')\n            {\n                antialias = false;\n            }\n            else if (filter.antialias === 'inherit')\n            {\n                antialias &&= colorTextureSource.antialias;\n            }\n\n            if (!filter.clipToViewport)\n            {\n                clipToViewport = false;\n            }\n\n            const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n\n            if (!isCompatible)\n            {\n                enabled = false;\n                break;\n            }\n\n            if (filter.blendRequired && !((renderer as WebGLRenderer).backBuffer?.useBackBuffer ?? true))\n            {\n                // #if _DEBUG\n                // eslint-disable-next-line max-len\n                warn('Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.');\n                // #endif\n\n                enabled = false;\n                break;\n            }\n\n            enabled = filter.enabled || enabled;\n            blendRequired ||= filter.blendRequired;\n        }\n\n        // if no filters are enabled lets skip!\n        if (!enabled)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // here we constrain the bounds to the viewport we will render too\n        // this should not take into account the x, y offset of the viewport - as this is\n        // handled by the viewport on the gpu.\n        if (clipToViewport)\n        {\n            const viewPort = renderer.renderTarget.rootViewPort;\n\n            const rootResolution = renderer.renderTarget.renderTarget.resolution;\n\n            bounds.fitBounds(0, viewPort.width / rootResolution, 0, viewPort.height / rootResolution);\n        }\n\n        // round the bounds to the nearest pixel\n        bounds\n            .scale(resolution)\n            .ceil()\n            .scale(1 / resolution)\n            .pad(padding | 0);\n\n        // skip if the bounds are negative or zero as this means they are\n        // not visible on the screen\n        if (!bounds.isPositive)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // set all the filter data\n        filterData.skip = false;\n\n        filterData.bounds = bounds;\n        filterData.blendRequired = blendRequired;\n        filterData.container = instruction.container;\n        filterData.filterEffect = instruction.filterEffect;\n\n        filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n\n        // bind...\n        // get a P02 texture from our pool...\n        filterData.inputTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            resolution,\n            antialias,\n        );\n\n        renderer.renderTarget.bind(filterData.inputTexture, true);\n        // set the global uniforms to take into account the bounds offset required\n\n        renderer.globalUniforms.push({\n            offset: bounds,\n        });\n    }\n\n    public pop()\n    {\n        const renderer = this.renderer;\n\n        this._filterStackIndex--;\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        // if we are skipping this filter then we just do nothing :D\n        if (filterData.skip)\n        {\n            return;\n        }\n\n        this._activeFilterData = filterData;\n\n        const inputTexture = filterData.inputTexture;\n\n        const bounds = filterData.bounds;\n\n        let backTexture = Texture.EMPTY;\n\n        renderer.renderTarget.finishRenderPass();\n\n        if (filterData.blendRequired)\n        {\n            // this actually forces the current commandQueue to render everything so far.\n            // if we don't do this, we won't be able to copy pixels for the background\n            const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n\n            const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n\n            backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n        }\n\n        filterData.backTexture = backTexture;\n\n        const filters = filterData.filterEffect.filters;\n\n        // get a BufferResource from the uniformBatch.\n        // this will batch the shader uniform data and give us a buffer resource we can\n        // set on our globalUniform Bind Group\n\n        // update the resources on the bind group...\n        this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n        this._globalFilterBindGroup.setResource(backTexture.source, 3);\n\n        renderer.globalUniforms.pop();\n\n        if (filters.length === 1)\n        {\n            // render a single filter...\n            // this.applyFilter(filters[0], inputTexture, filterData.previousRenderSurface, false);\n            filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n\n            // return the texture to the pool so we can reuse the next frame\n            TexturePool.returnTexture(inputTexture);\n        }\n        else\n        {\n            let flip = filterData.inputTexture;\n\n            // get another texture that we will render the next filter too\n            let flop = TexturePool.getOptimalTexture(\n                bounds.width,\n                bounds.height,\n                flip.source._resolution,\n                false\n            );\n\n            let i = 0;\n\n            // loop and apply the filters, omitting the last one as we will render that to the final target\n            for (i = 0; i < filters.length - 1; ++i)\n            {\n                const filter = filters[i];\n\n                filter.apply(this, flip, flop, true);\n                const t = flip;\n\n                flip = flop;\n                flop = t;\n            }\n\n            filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n\n            // return those textures for later!\n            TexturePool.returnTexture(flip);\n            TexturePool.returnTexture(flop);\n        }\n\n        // if we made a background texture, lets return that also\n        if (filterData.blendRequired)\n        {\n            TexturePool.returnTexture(backTexture);\n        }\n    }\n\n    public getBackTexture(lastRenderSurface: RenderTarget, bounds: Bounds, previousBounds?: Bounds)\n    {\n        const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n\n        const backTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            backgroundResolution,\n            false,\n        );\n\n        let x = bounds.minX;\n        let y = bounds.minY;\n\n        if (previousBounds)\n        {\n            x -= previousBounds.minX;\n            y -= previousBounds.minY;\n        }\n\n        x = Math.floor(x * backgroundResolution);\n        y = Math.floor(y * backgroundResolution);\n\n        const width = Math.ceil(bounds.width * backgroundResolution);\n        const height = Math.ceil(bounds.height * backgroundResolution);\n\n        this.renderer.renderTarget.copyToTexture(\n            lastRenderSurface,\n            backTexture,\n            { x, y },\n            { width, height },\n            { x: 0, y: 0 }\n        );\n\n        return backTexture;\n    }\n\n    public applyFilter(filter: Filter, input: Texture, output: RenderSurface, clear: boolean)\n    {\n        const renderer = this.renderer;\n\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        const bounds = filterData.bounds;\n\n        const offset = Point.shared;\n        const previousRenderSurface = filterData.previousRenderSurface;\n\n        const isFinalTarget = previousRenderSurface === output;\n\n        let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n\n        // to find the previous resolution we need to account for the skipped filters\n        // the following will find the last non skipped filter...\n        let currentIndex = this._filterStackIndex - 1;\n\n        while (currentIndex > 0 && this._filterStack[currentIndex].skip)\n        {\n            --currentIndex;\n        }\n\n        if (currentIndex > 0)\n        {\n            resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n        }\n\n        const filterUniforms = this._filterGlobalUniforms;\n        const uniforms = filterUniforms.uniforms;\n\n        const outputFrame = uniforms.uOutputFrame;\n        const inputSize = uniforms.uInputSize;\n        const inputPixel = uniforms.uInputPixel;\n        const inputClamp = uniforms.uInputClamp;\n        const globalFrame = uniforms.uGlobalFrame;\n        const outputTexture = uniforms.uOutputTexture;\n\n        // are we rendering back to the original surface?\n        if (isFinalTarget)\n        {\n            let lastIndex = this._filterStackIndex;\n\n            // get previous bounds.. we must take into account skipped filters also..\n            while (lastIndex > 0)\n            {\n                lastIndex--;\n                const filterData = this._filterStack[this._filterStackIndex - 1];\n\n                if (!filterData.skip)\n                {\n                    offset.x = filterData.bounds.minX;\n                    offset.y = filterData.bounds.minY;\n\n                    break;\n                }\n            }\n\n            outputFrame[0] = bounds.minX - offset.x;\n            outputFrame[1] = bounds.minY - offset.y;\n        }\n        else\n        {\n            outputFrame[0] = 0;\n            outputFrame[1] = 0;\n        }\n\n        outputFrame[2] = input.frame.width;\n        outputFrame[3] = input.frame.height;\n\n        inputSize[0] = input.source.width;\n        inputSize[1] = input.source.height;\n        inputSize[2] = 1 / inputSize[0];\n        inputSize[3] = 1 / inputSize[1];\n\n        inputPixel[0] = input.source.pixelWidth;\n        inputPixel[1] = input.source.pixelHeight;\n        inputPixel[2] = 1.0 / inputPixel[0];\n        inputPixel[3] = 1.0 / inputPixel[1];\n\n        inputClamp[0] = 0.5 * inputPixel[2];\n        inputClamp[1] = 0.5 * inputPixel[3];\n        inputClamp[2] = (input.frame.width * inputSize[2]) - (0.5 * inputPixel[2]);\n        inputClamp[3] = (input.frame.height * inputSize[3]) - (0.5 * inputPixel[3]);\n\n        const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n\n        globalFrame[0] = offset.x * resolution;\n        globalFrame[1] = offset.y * resolution;\n\n        globalFrame[2] = rootTexture.source.width * resolution;\n        globalFrame[3] = rootTexture.source.height * resolution;\n\n        // set the output texture - this is where we are going to render to\n\n        const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n\n        renderer.renderTarget.bind(output, !!clear);\n\n        if (output instanceof Texture)\n        {\n            outputTexture[0] = output.frame.width;\n            outputTexture[1] = output.frame.height;\n        }\n        else\n        {\n            // this means a renderTarget was passed directly\n            outputTexture[0] = renderTarget.width;\n            outputTexture[1] = renderTarget.height;\n        }\n\n        outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n        filterUniforms.update();\n\n        // TODO - should prolly use a adaptor...\n        if ((renderer as WebGPURenderer).renderPipes.uniformBatch)\n        {\n            const batchUniforms = (renderer as WebGPURenderer).renderPipes.uniformBatch\n                .getUboResource(filterUniforms);\n\n            this._globalFilterBindGroup.setResource(batchUniforms, 0);\n        }\n        else\n        {\n            this._globalFilterBindGroup.setResource(filterUniforms, 0);\n        }\n\n        // now lets update the output texture...\n\n        // set bind group..\n        this._globalFilterBindGroup.setResource(input.source, 1);\n        this._globalFilterBindGroup.setResource(input.source.style, 2);\n\n        filter.groups[0] = this._globalFilterBindGroup;\n\n        renderer.encoder.draw({\n            geometry: quadGeometry,\n            shader: filter,\n            state: filter._state,\n            topology: 'triangle-list'\n        });\n\n        // WebGPU blit's automatically, but WebGL does not!\n        if (renderer.type === RendererType.WEBGL)\n        {\n            renderer.renderTarget.finishRenderPass();\n        }\n    }\n\n    private _getFilterData(): FilterData\n    {\n        return {\n            skip: false,\n            inputTexture: null,\n            bounds: new Bounds(),\n            container: null,\n            filterEffect: null,\n            blendRequired: false,\n            previousRenderSurface: null,\n        };\n    }\n\n    /**\n     * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n     *\n     * Use `outputMatrix * vTextureCoord` in the shader.\n     * @param outputMatrix - The matrix to output to.\n     * @param {Sprite} sprite - The sprite to map to.\n     * @returns The mapped matrix.\n     */\n    public calculateSpriteMatrix(outputMatrix: Matrix, sprite: Sprite): Matrix\n    {\n        const data = this._activeFilterData;\n\n        const mappedMatrix = outputMatrix.set(\n            data.inputTexture._source.width,\n            0, 0,\n            data.inputTexture._source.height,\n            data.bounds.minX, data.bounds.minY\n        );\n\n        const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n\n        const renderGroup = sprite.renderGroup || sprite.parentRenderGroup;\n\n        if (renderGroup && renderGroup.cacheToLocalTransform)\n        {\n            // get the matrix relative to the render group..\n            worldTransform.prepend(renderGroup.cacheToLocalTransform);\n        }\n\n        worldTransform.invert();\n        mappedMatrix.prepend(worldTransform);\n        mappedMatrix.scale(\n            1.0 / sprite.texture.frame.width,\n            1.0 / sprite.texture.frame.height\n        );\n\n        mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n\n        return mappedMatrix;\n    }\n\n    public destroy?: () => void;\n}\n"],"names":["filterData"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4472, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4478, "column": 0}, "map": {"version":3,"file":"FilterPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/FilterPipe.ts"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions';\n\nimport type { InstructionSet } from '../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../rendering/renderers/types';\nimport type { Container } from '../scene/container/Container';\nimport type { Effect } from '../scene/container/Effect';\nimport type { FilterInstruction } from './FilterSystem';\n\nexport class FilterPipe implements InstructionPipe<FilterInstruction>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'filter',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(filterEffect: Effect, container: Container, instructionSet: InstructionSet): void\n    {\n        const renderPipes = this._renderer.renderPipes;\n\n        renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            canBundle: false,\n            action: 'pushFilter',\n            container,\n            filterEffect,\n        } as FilterInstruction);\n    }\n\n    public pop(_filterEffect: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            action: 'popFilter',\n            canBundle: false,\n        });\n    }\n\n    public execute(instruction: FilterInstruction)\n    {\n        if (instruction.action === 'pushFilter')\n        {\n            this._renderer.filter.push(instruction);\n        }\n        else if (instruction.action === 'popFilter')\n        {\n            this._renderer.filter.pop();\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n"],"names":[],"mappings":";;;;;;AASO,MAAM,UACb,CAAA;IAYI,YAAY,QACZ,CAAA;QACI,IAAA,CAAK,SAAY,GAAA,QAAA,CAAA;IAAA,CACrB;IAEO,IAAA,CAAK,YAAsB,EAAA,SAAA,EAAsB,cACxD,EAAA;QACU,MAAA,WAAA,GAAc,IAAA,CAAK,SAAU,CAAA,WAAA,CAAA;QAEvB,WAAA,CAAA,KAAA,CAAM,KAAA,CAAM,cAAc,CAAA,CAAA;QAEtC,cAAA,CAAe,GAAI,CAAA;YACf,YAAc,EAAA,QAAA;YACd,SAAW,EAAA,KAAA;YACX,MAAQ,EAAA,YAAA;YACR,SAAA;YACA,YAAA;QAAA,CACkB,CAAA,CAAA;IAAA,CAC1B;IAEO,GAAA,CAAI,aAAuB,EAAA,UAAA,EAAuB,cACzD,EAAA;QACI,IAAA,CAAK,SAAU,CAAA,WAAA,CAAY,KAAM,CAAA,KAAA,CAAM,cAAc,CAAA,CAAA;QAErD,cAAA,CAAe,GAAI,CAAA;YACf,YAAc,EAAA,QAAA;YACd,MAAQ,EAAA,WAAA;YACR,SAAW,EAAA,KAAA;QAAA,CACd,CAAA,CAAA;IAAA,CACL;IAEO,QAAQ,WACf,EAAA;QACQ,IAAA,WAAA,CAAY,MAAA,KAAW,YAC3B,EAAA;YACS,IAAA,CAAA,SAAA,CAAU,MAAO,CAAA,IAAA,CAAK,WAAW,CAAA,CAAA;QAAA,CAC1C,MAAA,IACS,WAAY,CAAA,MAAA,KAAW,WAChC,EAAA;YACS,IAAA,CAAA,SAAA,CAAU,MAAA,CAAO,GAAI,EAAA,CAAA;QAAA,CAC9B;IAAA,CACJ;IAEO,OACP,GAAA;QACI,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;IAAA,CACrB;AACJ,CAAA;AA5Da,UAAA,CAEK,SAAY,GAAA;IACtB,IAAM,EAAA;0KACF,gBAAc,CAAA,UAAA;0KACd,gBAAc,CAAA,WAAA;0KACd,gBAAc,CAAA,WAAA;KAClB;IACA,IAAM,EAAA,QAAA;AACV,CAAA","ignoreList":[0]}},
    {"offset": {"line": 4528, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4534, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/init.ts"],"sourcesContent":["import { extensions } from '../extensions/Extensions';\nimport { FilterPipe } from './FilterPipe';\nimport { FilterSystem } from './FilterSystem';\n\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n"],"names":[],"mappings":";;;;;;;;kKAIA,aAAA,CAAW,GAAA,kKAAI,eAAY,CAAA,CAAA;kKAC3B,aAAA,CAAW,GAAA,gKAAI,aAAU,CAAA","ignoreList":[0]}},
    {"offset": {"line": 4544, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4550, "column": 0}, "map": {"version":3,"file":"webworkerAll.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 4576, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}