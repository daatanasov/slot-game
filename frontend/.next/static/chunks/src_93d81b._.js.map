{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/slot-game/frontend/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,8JAAM,UAAU,MAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,yDACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,8JAAM,UAAU,OAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,8JAAM,UAAU,OAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,6CAA6C;QAC1D,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,8JAAM,UAAU,OAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,8JAAM,UAAU,OAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,8JAAM,UAAU,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/slot-game/frontend/src/app/custom-hooks/useSocket.ts"],"sourcesContent":["'use client'\r\nimport { useState, useEffect } from 'react'\r\nimport io, { Socket } from 'socket.io-client'\r\n\r\ninterface GameState {\r\n    balance: number\r\n    minBet: number\r\n    maxBet: number\r\n}\r\n\r\ninterface SpinResult {\r\n    success: boolean\r\n    reels?: string[]\r\n    isWin?: boolean\r\n    winnings?: number\r\n    message?: string\r\n    grid: string[][]\r\n}\r\n\r\nexport const useSocket = (userId: string) => {\r\n    const [socket, setSocket] = useState<Socket | null>(null)\r\n    const [gameState, setGameState] = useState<GameState | null>(null)\r\n    const [spinResult, setSpinResult] = useState<SpinResult | null>(null)\r\n    const [isConnected, setIsConnected] = useState(false)\r\n\r\n    useEffect(() => {\r\n        // Create socket connection\r\n        const newSocket = io('http://localhost:8080', {\r\n            query: { userId },\r\n        })\r\n\r\n        // Connection event handlers\r\n        newSocket.on('connect', () => {\r\n            setIsConnected(true)\r\n            console.log('Connected to WebSocket server')\r\n\r\n            // Join the slot game\r\n            newSocket.emit('join-slot-game', { userId })\r\n        })\r\n\r\n        newSocket.on('disconnect', () => {\r\n            setIsConnected(false)\r\n            console.log('Disconnected from WebSocket server')\r\n        })\r\n\r\n        // Game-specific event listeners\r\n        newSocket.on('game-joined', (response) => {\r\n            if (response.success) {\r\n                setGameState(response.gameState)\r\n            } else {\r\n                console.error('Failed to join game:', response.message)\r\n            }\r\n        })\r\n\r\n        newSocket.on('spin-result', (result) => {\r\n            console.log(result)\r\n            setSpinResult(result)\r\n        })\r\n\r\n        // Set the socket state\r\n        setSocket(newSocket)\r\n\r\n        // Cleanup on component unmount\r\n        return () => {\r\n            newSocket.disconnect()\r\n        }\r\n    }, [userId])\r\n\r\n    const spin = (betAmount: number) => {\r\n        console.log(betAmount)\r\n        if (socket && isConnected) {\r\n            socket.emit('spin', betAmount)\r\n        }\r\n    }\r\n\r\n    return {\r\n        socket,\r\n        gameState,\r\n        spinResult,\r\n        isConnected,\r\n        spin,\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;AACA;AACA;AAAA;;AAFA;;;AAmBO,MAAM,YAAY,CAAC;;IACtB,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IACpD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAoB;IAC7D,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAqB;IAChE,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE/C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;+BAAE;YACN,2BAA2B;YAC3B,MAAM,YAAY,CAAA,GAAA,kLAAA,CAAA,UAAE,AAAD,EAAE,yBAAyB;gBAC1C,OAAO;oBAAE;gBAAO;YACpB;YAEA,4BAA4B;YAC5B,UAAU,EAAE,CAAC;uCAAW;oBACpB,eAAe;oBACf,QAAQ,GAAG,CAAC;oBAEZ,qBAAqB;oBACrB,UAAU,IAAI,CAAC,kBAAkB;wBAAE;oBAAO;gBAC9C;;YAEA,UAAU,EAAE,CAAC;uCAAc;oBACvB,eAAe;oBACf,QAAQ,GAAG,CAAC;gBAChB;;YAEA,gCAAgC;YAChC,UAAU,EAAE,CAAC;uCAAe,CAAC;oBACzB,IAAI,SAAS,OAAO,EAAE;wBAClB,aAAa,SAAS,SAAS;oBACnC,OAAO;wBACH,QAAQ,KAAK,CAAC,wBAAwB,SAAS,OAAO;oBAC1D;gBACJ;;YAEA,UAAU,EAAE,CAAC;uCAAe,CAAC;oBACzB,QAAQ,GAAG,CAAC;oBACZ,cAAc;gBAClB;;YAEA,uBAAuB;YACvB,UAAU;YAEV,+BAA+B;YAC/B;uCAAO;oBACH,UAAU,UAAU;gBACxB;;QACJ;8BAAG;QAAC;KAAO;IAEX,MAAM,OAAO,CAAC;QACV,QAAQ,GAAG,CAAC;QACZ,IAAI,UAAU,aAAa;YACvB,OAAO,IAAI,CAAC,QAAQ;QACxB;IACJ;IAEA,OAAO;QACH;QACA;QACA;QACA;QACA;IACJ;AACJ;GA/Da"}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}