{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/slot-game/frontend/src/app/custom-hooks/useSocket.ts"],"sourcesContent":["'use client'\r\nimport { useState, useEffect } from 'react'\r\nimport io, { Socket } from 'socket.io-client'\r\n\r\ninterface GameState {\r\n    balance: number\r\n    minBet: number\r\n    maxBet: number\r\n}\r\n\r\ninterface SpinResult {\r\n    success: boolean\r\n    reels?: string[]\r\n    isWin?: boolean\r\n    winnings?: number\r\n    message?: string\r\n}\r\n\r\nexport const useSocket = (userId: string) => {\r\n    const [socket, setSocket] = useState<Socket | null>(null)\r\n    const [gameState, setGameState] = useState<GameState | null>(null)\r\n    const [spinResult, setSpinResult] = useState<SpinResult | null>(null)\r\n    const [isConnected, setIsConnected] = useState(false)\r\n\r\n    useEffect(() => {\r\n        // Create socket connection\r\n        const newSocket = io('http://localhost:8080', {\r\n            query: { userId },\r\n        })\r\n\r\n        // Connection event handlers\r\n        newSocket.on('connect', () => {\r\n            setIsConnected(true)\r\n            console.log('Connected to WebSocket server')\r\n\r\n            // Join the slot game\r\n            newSocket.emit('join-slot-game', { userId })\r\n        })\r\n\r\n        newSocket.on('disconnect', () => {\r\n            setIsConnected(false)\r\n            console.log('Disconnected from WebSocket server')\r\n        })\r\n\r\n        // Game-specific event listeners\r\n        newSocket.on('game-joined', (response) => {\r\n            if (response.success) {\r\n                setGameState(response.gameState)\r\n            } else {\r\n                console.error('Failed to join game:', response.message)\r\n            }\r\n        })\r\n\r\n        newSocket.on('spin-result', (result) => {\r\n            setSpinResult(result)\r\n        })\r\n\r\n        // Set the socket state\r\n        setSocket(newSocket)\r\n\r\n        // Cleanup on component unmount\r\n        return () => {\r\n            newSocket.disconnect()\r\n        }\r\n    }, [userId])\r\n\r\n    const spin = (betAmount: number) => {\r\n        if (socket && isConnected) {\r\n            socket.emit('spin', betAmount)\r\n        }\r\n    }\r\n\r\n    return {\r\n        socket,\r\n        gameState,\r\n        spinResult,\r\n        isConnected,\r\n        spin,\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;AACA;AACA;AAAA;;AAFA;;;AAkBO,MAAM,YAAY,CAAC;;IACtB,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IACpD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAoB;IAC7D,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAqB;IAChE,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE/C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;+BAAE;YACN,2BAA2B;YAC3B,MAAM,YAAY,CAAA,GAAA,kLAAA,CAAA,UAAE,AAAD,EAAE,yBAAyB;gBAC1C,OAAO;oBAAE;gBAAO;YACpB;YAEA,4BAA4B;YAC5B,UAAU,EAAE,CAAC;uCAAW;oBACpB,eAAe;oBACf,QAAQ,GAAG,CAAC;oBAEZ,qBAAqB;oBACrB,UAAU,IAAI,CAAC,kBAAkB;wBAAE;oBAAO;gBAC9C;;YAEA,UAAU,EAAE,CAAC;uCAAc;oBACvB,eAAe;oBACf,QAAQ,GAAG,CAAC;gBAChB;;YAEA,gCAAgC;YAChC,UAAU,EAAE,CAAC;uCAAe,CAAC;oBACzB,IAAI,SAAS,OAAO,EAAE;wBAClB,aAAa,SAAS,SAAS;oBACnC,OAAO;wBACH,QAAQ,KAAK,CAAC,wBAAwB,SAAS,OAAO;oBAC1D;gBACJ;;YAEA,UAAU,EAAE,CAAC;uCAAe,CAAC;oBACzB,cAAc;gBAClB;;YAEA,uBAAuB;YACvB,UAAU;YAEV,+BAA+B;YAC/B;uCAAO;oBACH,UAAU,UAAU;gBACxB;;QACJ;8BAAG;QAAC;KAAO;IAEX,MAAM,OAAO,CAAC;QACV,IAAI,UAAU,aAAa;YACvB,OAAO,IAAI,CAAC,QAAQ;QACxB;IACJ;IAEA,OAAO;QACH;QACA;QACA;QACA;QACA;IACJ;AACJ;GA7Da"}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/slot-game/frontend/src/app/pages/games/SlotGame2.tsx"],"sourcesContent":["'use client'\r\nimport React, { useState } from 'react'\r\nimport { useSocket } from '../../custom-hooks/useSocket'\r\n\r\nexport const SlotGame: React.FC = () => {\r\n    // Use a mock user ID - in real app, this would come from authentication\r\n    const userId = 'user_123'\r\n    const { gameState, spinResult, isConnected, spin } = useSocket(userId)\r\n\r\n    // Local state for bet amount\r\n    const [betAmount, setBetAmount] = useState<number>(10)\r\n\r\n    // Handle spin action\r\n    const handleSpin = () => {\r\n        if (isConnected && gameState) {\r\n            // Validate bet amount\r\n            if (betAmount < gameState.minBet || betAmount > gameState.maxBet) {\r\n                alert(\r\n                    `Bet must be between ${gameState.minBet} and ${gameState.maxBet}`\r\n                )\r\n                return\r\n            }\r\n\r\n            spin(betAmount)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"max-w-md mx-auto p-6 bg-gray-800 rounded-lg shadow-lg\">\r\n            <h2 className=\"text-2xl font-bold text-white mb-4\">Slot Machine</h2>\r\n\r\n            {/* Connection Status */}\r\n            <div className=\"mb-4\">\r\n                <p\r\n                    className={`\r\n          text-sm font-medium \r\n          ${isConnected ? 'text-green-500' : 'text-red-500'}\r\n        `}\r\n                >\r\n                    {isConnected ? 'Connected' : 'Disconnected'}\r\n                </p>\r\n            </div>\r\n\r\n            {/* Game State */}\r\n            {gameState && (\r\n                <div className=\"mb-4 text-white\">\r\n                    <p>Balance: ${gameState.balance}</p>\r\n                </div>\r\n            )}\r\n\r\n            {/* Reels Display */}\r\n            <div className=\"flex justify-center mb-4 text-4xl\">\r\n                {spinResult?.reels ? (\r\n                    spinResult.reels.map((symbol, index) => (\r\n                        <div key={index} className=\"mx-2\">\r\n                            {symbol}\r\n                        </div>\r\n                    ))\r\n                ) : (\r\n                    <div className=\"text-gray-500\">Spin to play!</div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Spin Result */}\r\n            {spinResult && (\r\n                <div\r\n                    className={`\r\n          mb-4 p-2 rounded \r\n          ${spinResult.isWin ? 'bg-green-200' : 'bg-red-200'}\r\n        `}\r\n                >\r\n                    {spinResult.isWin\r\n                        ? `You won $${spinResult.winnings}!`\r\n                        : `You lost $${Math.abs(spinResult.winnings || 0)}`}\r\n                </div>\r\n            )}\r\n\r\n            {/* Bet Control */}\r\n            <div className=\"flex items-center mb-4\">\r\n                <label className=\"mr-2 text-white\">Bet Amount:</label>\r\n                <input\r\n                    type=\"number\"\r\n                    value={betAmount}\r\n                    onChange={(e) => setBetAmount(Number(e.target.value))}\r\n                    min={gameState?.minBet}\r\n                    max={gameState?.maxBet}\r\n                    className=\"w-20 p-2 rounded bg-gray-700 text-white\"\r\n                />\r\n            </div>\r\n\r\n            {/* Spin Button */}\r\n            <button\r\n                onClick={handleSpin}\r\n                disabled={!isConnected}\r\n                className={`\r\n          w-full p-3 rounded \r\n          ${\r\n              isConnected\r\n                  ? 'bg-blue-500 hover:bg-blue-600 text-white'\r\n                  : 'bg-gray-500 text-gray-300 cursor-not-allowed'\r\n          }\r\n        `}\r\n            >\r\n                Spin\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SlotGame\r\n"],"names":[],"mappings":";;;;;AACA;AACA;;;AAFA;;;AAIO,MAAM,WAAqB;;IAC9B,wEAAwE;IACxE,MAAM,SAAS;IACf,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,6IAAA,CAAA,YAAS,AAAD,EAAE;IAE/D,6BAA6B;IAC7B,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU;IAEnD,qBAAqB;IACrB,MAAM,aAAa;QACf,IAAI,eAAe,WAAW;YAC1B,sBAAsB;YACtB,IAAI,YAAY,UAAU,MAAM,IAAI,YAAY,UAAU,MAAM,EAAE;gBAC9D,MACI,CAAC,oBAAoB,EAAE,UAAU,MAAM,CAAC,KAAK,EAAE,UAAU,MAAM,EAAE;gBAErE;YACJ;YAEA,KAAK;QACT;IACJ;IAEA,qBACI,6LAAC;QAAI,WAAU;;0BACX,6LAAC;gBAAG,WAAU;0BAAqC;;;;;;0BAGnD,6LAAC;gBAAI,WAAU;0BACX,cAAA,6LAAC;oBACG,WAAW,CAAC;;UAEtB,EAAE,cAAc,mBAAmB,eAAe;QACpD,CAAC;8BAEY,cAAc,cAAc;;;;;;;;;;;YAKpC,2BACG,6LAAC;gBAAI,WAAU;0BACX,cAAA,6LAAC;;wBAAE;wBAAW,UAAU,OAAO;;;;;;;;;;;;0BAKvC,6LAAC;gBAAI,WAAU;0BACV,YAAY,QACT,WAAW,KAAK,CAAC,GAAG,CAAC,CAAC,QAAQ,sBAC1B,6LAAC;wBAAgB,WAAU;kCACtB;uBADK;;;;8CAKd,6LAAC;oBAAI,WAAU;8BAAgB;;;;;;;;;;;YAKtC,4BACG,6LAAC;gBACG,WAAW,CAAC;;UAEtB,EAAE,WAAW,KAAK,GAAG,iBAAiB,aAAa;QACrD,CAAC;0BAEY,WAAW,KAAK,GACX,CAAC,SAAS,EAAE,WAAW,QAAQ,CAAC,CAAC,CAAC,GAClC,CAAC,UAAU,EAAE,KAAK,GAAG,CAAC,WAAW,QAAQ,IAAI,IAAI;;;;;;0BAK/D,6LAAC;gBAAI,WAAU;;kCACX,6LAAC;wBAAM,WAAU;kCAAkB;;;;;;kCACnC,6LAAC;wBACG,MAAK;wBACL,OAAO;wBACP,UAAU,CAAC,IAAM,aAAa,OAAO,EAAE,MAAM,CAAC,KAAK;wBACnD,KAAK,WAAW;wBAChB,KAAK,WAAW;wBAChB,WAAU;;;;;;;;;;;;0BAKlB,6LAAC;gBACG,SAAS;gBACT,UAAU,CAAC;gBACX,WAAW,CAAC;;UAElB,EACI,cACM,6CACA,+CACT;QACH,CAAC;0BACI;;;;;;;;;;;;AAKb;GAvGa;;QAG4C,6IAAA,CAAA,YAAS;;;KAHrD;uCAyGE"}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}