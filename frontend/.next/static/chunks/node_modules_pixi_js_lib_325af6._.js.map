{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/accessibility/init.ts"],"sourcesContent":["import { extensions } from '../extensions/Extensions';\nimport { Container } from '../scene/container/Container';\nimport { AccessibilitySystem } from './AccessibilitySystem';\nimport { accessibilityTarget } from './accessibilityTarget';\n\nextensions.add(AccessibilitySystem);\nContainer.mixin(accessibilityTarget);\n"],"names":[],"mappings":";;;;;;;;;;kKAKA,aAAA,CAAW,GAAA,+KAAI,sBAAmB,CAAA,CAAA;yKAClC,YAAA,CAAU,KAAA,+KAAM,sBAAmB,CAAA","ignoreList":[0]}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/app/init.ts"],"sourcesContent":["import { extensions } from '../extensions/Extensions';\nimport { ResizePlugin } from './ResizePlugin';\nimport { TickerPlugin } from './TickerPlugin';\n\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n"],"names":[],"mappings":";;;;;;;;kKAIA,aAAA,CAAW,GAAA,8JAAI,eAAY,CAAA,CAAA;kKAC3B,aAAA,CAAW,GAAA,8JAAI,eAAY,CAAA","ignoreList":[0]}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 41, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/events/init.ts"],"sourcesContent":["import { extensions } from '../extensions/Extensions';\nimport { Container } from '../scene/container/Container';\nimport { EventSystem } from './EventSystem';\nimport { FederatedContainer } from './FederatedEventTarget';\n\n/* eslint-disable max-len */\n/**\n * PixiJS is primarily a rendering system, but it also includes support for interactivity.\n * Adding support for mouse and touch events to your project is simple and consistent.\n *\n * The new event-based system that replaced InteractionManager from v6 has expanded the definition of what a\n * Container means to be interactive. With this we have introduced `eventMode` which allows you to control\n * how an object responds to interaction events.\n * This is similar to the `interactive` property in v6 but with more options.\n *\n * <details id=\"enabling-interaction\">\n * <summary>Enabling Interaction</summary>\n *\n * Any Container-derived object (Sprite, Container, etc.) can become interactive simply by setting its `eventMode` property to any of\n * the {@link events.EventMode} values. Doing so will cause the object to emit interaction events that can be responded to in order to drive your project's behavior.\n *\n * Check out the [interaction example code](/examples/events/click).\n *\n * Container-derived objects are based on {@link https://www.npmjs.com/package/eventemitter3|EventEmitter3}\n * so you can use `on()`, `once()`, `off()` to listen to events.\n *\n * For example to respond to clicks and taps, bind to an object ike so:\n *\n * ```javascript\n * let sprite = Sprite.from('/some/texture.png');\n *\n * sprite.eventMode = 'static'; // similar to `sprite.interactive = true` in v6\n * sprite.on('pointerdown', (event) => { alert('clicked!'); });\n * ```\n *\n * Check out the **EventTypes** section below for the full list of interaction events supported.\n * </details>\n *\n * <details id=\"event-modes\">\n * <summary>Event Modes</summary>\n *\n * The new event-based system that replaced InteractionManager from v6 has expanded the definition of what a Container\n *  means to be interactive. With this we have introduced `eventMode` which allows you to control how an object responds\n * to interaction events. This is similar to the `interactive` property in v6 but with more options.\n *\n * | event mode | Description |\n * |---|---|\n * | `none` | Ignores all interaction events, similar to CSS's `pointer-events: none`, good optimization for non-interactive children |\n * |  `passive`  | Does not emit events and ignores hit testing on itself but does allow for events and hit testing only its interactive children. If you want to be compatible with v6, set this as your default `eventMode` (see options in Renderer, Application, etc) |\n * |  `auto`  | Does not emit events and but is hit tested if parent is interactive. Same as `interactive = false` in v7 |\n * |  `static`  | Emit events and is hit tested. Same as `interaction = true` in v7, useful for objects like buttons that do not move. |\n * |  `dynamic` | Emits events and is hit tested but will also receive mock interaction events fired from a ticker to allow for interaction when the mouse isn't moving. This is useful for elements that independently moving or animating. |\n * </details>\n *\n * <details id=\"event-types\">\n * <summary>Event Types</summary>\n *\n * Pixi supports the following event types for interactive objects:\n *\n * | Event Type | Fired When |\n * |---|---|\n * | `pointercancel` | Pointer device button is released outside the display object\n * that initially registered a pointerdown. |\n * | `pointerdown` | Pointer device button is pressed on the display object. |\n * | `pointerenter` | Pointer device enters the display object. |\n * | `pointerleave` | Pointer device leaves the display object. |\n * | `pointermove` | Pointer device is moved while over the display object. |\n * | `globalpointermove` | Pointer device is moved, regardless of hit-testing the current object. |\n * | `pointerout` | Pointer device is moved off the display object. |\n * | `pointerover` | Pointer device is moved onto the display object. |\n * | `pointertap` | Pointer device is tapped twice on the display object. |\n * | `pointerup` | Pointer device button is released over the display object. |\n * | `pointerupoutside` | Pointer device button is released outside the display object\n * that initially registered a pointerdown. |\n * | `mousedown ` | Mouse button is pressed on the display object. |\n * | `mouseenter` | Mouse cursor enters the display object. |\n * | `mouseleave` | Mouse cursor leaves the display object. |\n * | `mousemove ` | Mouse cursor is moved while over the display object. |\n * | `globalmousemove` | Mouse is moved, regardless of hit-testing the current object. |\n * | `mouseout ` | Mouse cursor is moved off the display object. |\n * | `mouseover ` | Mouse cursor is moved onto the display object. |\n * | `mouseup ` | Mouse button is released over the display object. |\n * | `mouseupoutside ` | Mouse button is released outside the display object that initially registered a mousedown. |\n * | `click ` | Mouse button is clicked (pressed and released) over the display object. |\n * | `touchcancel ` | Touch point is removed outside of the display object that initially registered a touchstart. |\n * | `touchend ` | Touch point is removed from the display object. |\n * | `touchendoutside ` | Touch point is removed outside of the display object that initially registered a touchstart. |\n * | `touchmove ` | Touch point is moved along the display object. |\n * | `globaltouchmove` | Touch point is moved, regardless of hit-testing the current object. |\n * | `touchstart ` | Touch point is placed on the display object. |\n * | `tap ` | Touch point is tapped twice on the display object. |\n * | `wheel ` | Mouse wheel is spun over the display object. |\n * | `rightclick ` | Right mouse button is clicked (pressed and released) over the display object. |\n * | `rightdown ` | Right mouse button is pressed on the display object. |\n * | `rightup ` | Right mouse button is released over the display object. |\n * | `rightupoutside ` | Right mouse button is released outside the display object that initially registered a rightdown. |\n * </details>\n * @namespace events\n */\n/* eslint-enable max-len */\n\nextensions.add(EventSystem);\nContainer.mixin(FederatedContainer);\n"],"names":[],"mappings":";;;;;;;;;;kKAqGA,aAAA,CAAW,GAAA,gKAAI,cAAW,CAAA,CAAA;yKAC1B,YAAA,CAAU,KAAA,yKAAM,qBAAkB,CAAA","ignoreList":[0]}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem';\nimport { GraphicsPipe } from './shared/GraphicsPipe';\n\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n"],"names":[],"mappings":";;;;;;;;kKAIA,aAAA,CAAW,GAAA,sLAAI,eAAY,CAAA,CAAA;kKAC3B,aAAA,CAAW,GAAA,+LAAI,wBAAqB,CAAA","ignoreList":[0]}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/mesh/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { MeshPipe } from './shared/MeshPipe';\n\nextensions.add(MeshPipe);\n"],"names":[],"mappings":";;;;;;kKAGA,aAAA,CAAW,GAAA,8KAAI,WAAQ,CAAA","ignoreList":[0]}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"file":"GlParticleContainerAdaptor.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/gl/GlParticleContainerAdaptor.ts"],"sourcesContent":["import type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\nimport type { ParticleContainer } from '../shared/ParticleContainer';\nimport type { ParticleContainerAdaptor, ParticleContainerPipe } from '../shared/ParticleContainerPipe';\n\nexport class GlParticleContainerAdaptor implements ParticleContainerAdaptor\n{\n    public execute(particleContainerPipe: ParticleContainerPipe, container: ParticleContainer)\n    {\n        const state = particleContainerPipe.state;\n        const renderer = particleContainerPipe.renderer as WebGLRenderer;\n        const shader = container.shader || particleContainerPipe.defaultShader;\n\n        shader.resources.uTexture = container.texture._source;\n        shader.resources.uniforms = particleContainerPipe.localUniforms;\n\n        const gl = renderer.gl;\n\n        const buffer = particleContainerPipe.getBuffers(container);\n\n        // now lets upload and render the buffers..\n        renderer.shader.bind(shader);\n        renderer.state.set(state);\n        renderer.geometry.bind(buffer.geometry, shader.glProgram);\n\n        const byteSize = buffer.geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n        const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n\n        gl.drawElements(gl.TRIANGLES, container.particleChildren.length * 6, glType, 0);\n    }\n}\n"],"names":[],"mappings":";;;;AAIO,MAAM,0BACb,CAAA;IACW,OAAA,CAAQ,qBAAA,EAA8C,SAC7D,EAAA;QACI,MAAM,QAAQ,qBAAsB,CAAA,KAAA,CAAA;QACpC,MAAM,WAAW,qBAAsB,CAAA,QAAA,CAAA;QACjC,MAAA,MAAA,GAAS,SAAU,CAAA,MAAA,IAAU,qBAAsB,CAAA,aAAA,CAAA;QAElD,MAAA,CAAA,SAAA,CAAU,QAAW,GAAA,SAAA,CAAU,OAAQ,CAAA,OAAA,CAAA;QACvC,MAAA,CAAA,SAAA,CAAU,QAAA,GAAW,qBAAsB,CAAA,aAAA,CAAA;QAElD,MAAM,KAAK,QAAS,CAAA,EAAA,CAAA;QAEd,MAAA,MAAA,GAAS,qBAAsB,CAAA,UAAA,CAAW,SAAS,CAAA,CAAA;QAGhD,QAAA,CAAA,MAAA,CAAO,IAAA,CAAK,MAAM,CAAA,CAAA;QAClB,QAAA,CAAA,KAAA,CAAM,GAAA,CAAI,KAAK,CAAA,CAAA;QACxB,QAAA,CAAS,QAAS,CAAA,IAAA,CAAK,MAAO,CAAA,QAAA,EAAU,OAAO,SAAS,CAAA,CAAA;QAExD,MAAM,QAAW,GAAA,MAAA,CAAO,QAAS,CAAA,WAAA,CAAY,IAAK,CAAA,iBAAA,CAAA;QAClD,MAAM,MAAS,GAAA,QAAA,KAAa,CAAI,GAAA,EAAA,CAAG,cAAA,GAAiB,EAAG,CAAA,YAAA,CAAA;QAEpD,EAAA,CAAA,YAAA,CAAa,GAAG,SAAW,EAAA,SAAA,CAAU,gBAAA,CAAiB,MAAS,GAAA,CAAA,EAAG,QAAQ,CAAC,CAAA,CAAA;IAAA,CAClF;AACJ","ignoreList":[0]}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"file":"particles.vert.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"file":"particles.frag.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"file":"particles.wgsl.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"file":"ParticleShader.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/shared/shader/ParticleShader.ts"],"sourcesContent":["import { Color } from '../../../../color/Color';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram';\nimport { Shader } from '../../../../rendering/renderers/shared/shader/Shader';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { TextureStyle } from '../../../../rendering/renderers/shared/texture/TextureStyle';\nimport fragment from './particles.frag';\nimport vertex from './particles.vert';\nimport wgsl from './particles.wgsl';\n\nexport class ParticleShader extends Shader\n{\n    constructor()\n    {\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment\n        });\n\n        const gpuProgram = GpuProgram.from({\n            fragment: {\n                source: wgsl,\n                entryPoint: 'mainFragment'\n            },\n            vertex: {\n                source: wgsl,\n                entryPoint: 'mainVertex'\n            }\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                // this will be replaced with the texture from the particle container\n                uTexture: Texture.WHITE.source,\n                // this will be replaced with the texture style from the particle container\n                uSampler: new TextureStyle({}),\n                // this will be replaced with the local uniforms from the particle container\n                uniforms: {\n                    uTranslationMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Color(0xFFFFFF), type: 'vec4<f32>' },\n                    uRound: { value: 1, type: 'f32' },\n                    uResolution: { value: [0, 0], type: 'vec2<f32>' },\n                }\n            }\n        });\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAWO,MAAM,qNAAuB,SACpC,CAAA;IACI,WACA,EAAA;QACU,MAAA,SAAA,gMAAY,YAAA,CAAU,IAAK,CAAA;qOAC7B,UAAA;uOACA,UAAA;QAAA,CACH,CAAA,CAAA;QAEK,MAAA,UAAA,iMAAa,cAAA,CAAW,IAAK,CAAA;YAC/B,QAAU,EAAA;gBACN,MAAQ,mNAAA,UAAA;gBACR,UAAY,EAAA,cAAA;YAAA,CAChB;YACA,MAAQ,EAAA;gBACJ,MAAQ,mNAAA,UAAA;gBACR,UAAY,EAAA,YAAA;YAAA,CAChB;QAAA,CACH,CAAA,CAAA;QAEK,KAAA,CAAA;YACF,SAAA;YACA,UAAA;YACA,SAAW,EAAA;gBAAA,qEAAA;gBAEP,QAAA,EAAU,0MAAA,CAAQ,KAAM,CAAA,MAAA;gBAAA,2EAAA;gBAExB,QAAU,EAAA,yMAAI,eAAa,CAAA,CAAA,CAAE,CAAA;gBAAA,4EAAA;gBAE7B,QAAU,EAAA;oBACN,oBAAoB;wBAAE,KAAA,EAAO,uKAAI,SAAO,EAAA;wBAAG,MAAM,aAAc;oBAAA,CAAA;oBAC/D,MAAA,EAAQ;wBAAE,KAAO,EAAA,4JAAI,QAAA,CAAM,QAAQ,CAAA;wBAAG,MAAM,WAAY;oBAAA,CAAA;oBACxD,MAAQ,EAAA;wBAAE,KAAO,EAAA,CAAA;wBAAG,MAAM,KAAM;oBAAA,CAAA;oBAChC,WAAA,EAAa;wBAAE,KAAO,EAAA;4BAAC;4BAAG,CAAC;yBAAA;wBAAG,MAAM,WAAY;oBAAA,CAAA;gBAAA,CACpD;YAAA,CACJ;QAAA,CACH,CAAA,CAAA;IAAA,CACL;AACJ","ignoreList":[0]}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"file":"createIndicesForQuads.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/shared/utils/createIndicesForQuads.ts"],"sourcesContent":["/**\n * Generic Mask Stack data structure\n * @function createIndicesForQuads\n * @param {number} size - Number of quads\n * @param {Uint16Array|Uint32Array} [outBuffer] - Buffer for output, length has to be `6 * size`\n * @returns {Uint16Array|Uint32Array} - Resulting index buffer\n */\nexport function createIndicesForQuads(\n    size: number,\n    outBuffer: Uint16Array | Uint32Array | null = null\n): Uint16Array | Uint32Array\n{\n    // the total number of indices in our array, there are 6 points per quad.\n    const totalIndices = size * 6;\n\n    // Check if we need to use Uint32Array\n    if (totalIndices > 65535)\n    {\n        outBuffer ||= new Uint32Array(totalIndices); // Use Uint32Array if needed\n    }\n    else\n    {\n        outBuffer ||= new Uint16Array(totalIndices);\n    }\n\n    if (outBuffer.length !== totalIndices)\n    {\n        throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n    }\n\n    // fill the indices with the quads to draw\n    for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4)\n    {\n        outBuffer[i + 0] = j + 0;\n        outBuffer[i + 1] = j + 1;\n        outBuffer[i + 2] = j + 2;\n        outBuffer[i + 3] = j + 0;\n        outBuffer[i + 4] = j + 2;\n        outBuffer[i + 5] = j + 3;\n    }\n\n    return outBuffer;\n}\n"],"names":[],"mappings":";;;;AAOgB,SAAA,qBAAA,CACZ,IACA,EAAA,SAAA,GAA8C,IAElD,EAAA;IAEI,MAAM,eAAe,IAAO,GAAA,CAAA,CAAA;IAG5B,IAAI,eAAe,KACnB,EAAA;QACkB,SAAA,IAAA,CAAA,SAAA,GAAA,IAAI,YAAY,YAAY,CAAA,CAAA,CAAA;IAAA,CAG9C,MAAA;QACkB,SAAA,IAAA,CAAA,SAAA,GAAA,IAAI,YAAY,YAAY,CAAA,CAAA,CAAA;IAAA,CAC9C;IAEI,IAAA,SAAA,CAAU,MAAA,KAAW,YACzB,EAAA;QACI,MAAM,IAAI,KAAM,CAAA,CAAA,oCAAA,EAAuC,UAAU,MAAM,CAAA,cAAA,EAAiB,YAAY,CAAE,CAAA,CAAA,CAAA;IAAA,CAC1G;IAGS,IAAA,IAAA,CAAA,GAAI,GAAG,CAAI,GAAA,CAAA,EAAG,IAAI,YAAc,EAAA,CAAA,IAAK,CAAG,EAAA,CAAA,IAAK,CACtD,CAAA;QACc,SAAA,CAAA,CAAA,GAAI,CAAC,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA;QACb,SAAA,CAAA,CAAA,GAAI,CAAC,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA;QACb,SAAA,CAAA,CAAA,GAAI,CAAC,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA;QACb,SAAA,CAAA,CAAA,GAAI,CAAC,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA;QACb,SAAA,CAAA,CAAA,GAAI,CAAC,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA;QACb,SAAA,CAAA,CAAA,GAAI,CAAC,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA;IAAA,CAC3B;IAEO,OAAA,SAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 261, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 267, "column": 0}, "map": {"version":3,"file":"generateParticleUpdateFunction.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/shared/utils/generateParticleUpdateFunction.ts"],"sourcesContent":["import {\n    getAttributeInfoFromFormat\n} from '../../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat';\n\nimport type { IParticle } from '../Particle';\nimport type { ParticleRendererProperty } from '../particleData';\n\n// TODO rename to update function\nexport type ParticleUpdateFunction = (ps: IParticle[], f32v: Float32Array, u32v: Uint32Array) => void;\n\nexport function generateParticleUpdateFunction(properties: Record<string, ParticleRendererProperty>)\n{\n    return {\n        dynamicUpdate: generateUpdateFunction(properties, true),\n        staticUpdate: generateUpdateFunction(properties, false),\n    };\n}\n\nfunction generateUpdateFunction(\n    properties: Record<string, ParticleRendererProperty>,\n    dynamic: boolean\n): ParticleUpdateFunction\n{\n    const funcFragments: string[] = [];\n\n    funcFragments.push(`\n      \n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            `);\n\n    let offset = 0;\n\n    for (const i in properties)\n    {\n        const property = properties[i];\n\n        if (dynamic !== property.dynamic) continue;\n\n        funcFragments.push(`offset = index + ${offset}`);\n\n        funcFragments.push(property.code);\n\n        const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n        offset += attributeInfo.stride / 4;\n    }\n\n    funcFragments.push(`\n            index += stride * 4;\n        }\n    `);\n\n    // add to the front..\n    funcFragments.unshift(`\n        var stride = ${offset};\n    `);\n\n    const functionSource = funcFragments.join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function('ps', 'f32v', 'u32v', functionSource) as ParticleUpdateFunction;\n}\n"],"names":[],"mappings":";;;;;;AAUO,SAAS,+BAA+B,UAC/C,EAAA;IACW,OAAA;QACH,aAAA,EAAe,sBAAuB,CAAA,UAAA,EAAY,IAAI,CAAA;QACtD,YAAA,EAAc,sBAAuB,CAAA,UAAA,EAAY,KAAK,CAAA;IAAA,CAC1D,CAAA;AACJ,CAAA;AAEA,SAAS,sBAAA,CACL,UAAA,EACA,OAEJ,EAAA;IACI,MAAM,gBAA0B,EAAC,CAAA;IAEjC,aAAA,CAAc,IAAK,CAAA,CAAA;;;;;;;;YAQV,CAAA,CAAA,CAAA;IAET,IAAI,MAAS,GAAA,CAAA,CAAA;IAEb,IAAA,MAAW,KAAK,UAChB,CAAA;QACU,MAAA,QAAA,GAAW,UAAA,CAAW,CAAC,CAAA,CAAA;QAE7B,IAAI,YAAY,QAAS,CAAA,OAAA,EAAS,SAAA;QAEpB,aAAA,CAAA,IAAA,CAAK,CAAoB,iBAAA,EAAA,MAAM,CAAE,CAAA,CAAA,CAAA;QAEjC,aAAA,CAAA,IAAA,CAAK,SAAS,IAAI,CAAA,CAAA;QAE1B,MAAA,aAAA,oOAAgB,6BAAA,AAA2B,EAAA,QAAA,CAAS,MAAM,CAAA,CAAA;QAEhE,MAAA,IAAU,cAAc,MAAS,GAAA,CAAA,CAAA;IAAA,CACrC;IAEA,aAAA,CAAc,IAAK,CAAA,CAAA;;;IAGlB,CAAA,CAAA,CAAA;IAGD,aAAA,CAAc,OAAQ,CAAA,CAAA;qBAAA,EACH,MAAM,CAAA;IACxB,CAAA,CAAA,CAAA;IAEK,MAAA,cAAA,GAAiB,aAAc,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;IAG9C,OAAO,IAAI,QAAA,CAAS,IAAM,EAAA,MAAA,EAAQ,QAAQ,cAAc,CAAA,CAAA;AAC5D","ignoreList":[0]}},
    {"offset": {"line": 311, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 317, "column": 0}, "map": {"version":3,"file":"ParticleBuffer.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/shared/ParticleBuffer.ts"],"sourcesContent":["import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport { getAttributeInfoFromFormat } from '../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer';\nimport { createIndicesForQuads } from './utils/createIndicesForQuads';\nimport { generateParticleUpdateFunction } from './utils/generateParticleUpdateFunction';\n\nimport type { IndexBufferArray } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport type { IParticle } from './Particle';\nimport type { ParticleRendererProperty } from './particleData';\nimport type { ParticleUpdateFunction } from './utils/generateParticleUpdateFunction';\n\n/**\n * Options for creating a ParticleBuffer.\n * @property {number} size - The size of the particle buffer.\n * @property {Record<string, ParticleRendererProperty>} properties - A record of attributes that the particle container uses.\n */\nexport interface ParticleBufferOptions\n{\n    size: number;\n    properties: Record<string, ParticleRendererProperty>;\n}\n\n/**\n * The ParticleBuffer holds the buffers and geometry for a particle container.\n * It also contains the upload functions for the static and dynamic properties.\n * @internal\n */\nexport class ParticleBuffer\n{\n    /** The buffer containing static attribute data for all elements in the batch. */\n    public staticAttributeBuffer: ViewableBuffer;\n    /** The buffer containing dynamic attribute data for all elements in the batch. */\n    public dynamicAttributeBuffer: ViewableBuffer;\n\n    private readonly _staticBuffer: Buffer;\n    private readonly _dynamicBuffer: Buffer;\n\n    /** The buffer containing index data for all elements in the batch. */\n    public indexBuffer: IndexBufferArray;\n\n    private readonly _dynamicStride: number;\n    private readonly _staticStride: number;\n\n    /** The geometry of the particle buffer. */\n    public readonly geometry: Geometry;\n\n    private _size = 0;\n    private readonly _dynamicUpload: ParticleUpdateFunction;\n    private readonly _staticUpload: ParticleUpdateFunction;\n    private readonly _generateParticleUpdateCache: Record<string, {\n        dynamicUpdate: ParticleUpdateFunction;\n        staticUpdate: ParticleUpdateFunction;\n    }> = {};\n\n    constructor(options: ParticleBufferOptions)\n    {\n        // size in sprites!\n        const size = this._size = options.size ?? 1000;\n\n        // TODO add the option to specify what is dynamic!\n        const properties = options.properties;\n\n        // in bytes!\n        let staticVertexSize = 0;\n        let dynamicVertexSize = 0;\n\n        for (const i in properties)\n        {\n            const property = properties[i];\n            const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n            if (property.dynamic)\n            {\n                // dynamic.\n                dynamicVertexSize += attributeInfo.stride;\n            }\n            else\n            {\n                // static.\n                staticVertexSize += attributeInfo.stride;\n            }\n        }\n\n        this._dynamicStride = dynamicVertexSize / 4;\n        this._staticStride = staticVertexSize / 4;\n\n        this.staticAttributeBuffer = new ViewableBuffer(size * 4 * staticVertexSize);\n        this.dynamicAttributeBuffer = new ViewableBuffer(size * 4 * dynamicVertexSize);\n\n        this.indexBuffer = createIndicesForQuads(size);\n\n        // build geometry..\n\n        const geometry = new Geometry();\n\n        let dynamicOffset = 0;\n        let staticOffset = 0;\n\n        this._staticBuffer = new Buffer({\n            data: new Float32Array(1),\n            label: 'static-particle-buffer',\n            shrinkToFit: false,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n        });\n\n        this._dynamicBuffer = new Buffer({\n            data: new Float32Array(1),\n            label: 'dynamic-particle-buffer',\n            shrinkToFit: false,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n        });\n\n        for (const i in properties)\n        {\n            const property = properties[i];\n            const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n            if (property.dynamic)\n            {\n                geometry.addAttribute(property.attributeName, {\n                    buffer: this._dynamicBuffer,\n                    stride: this._dynamicStride * 4,\n                    offset: dynamicOffset * 4,\n                    format: property.format,\n                });\n                dynamicOffset += attributeInfo.size;\n            }\n            else\n            {\n                geometry.addAttribute(property.attributeName, {\n                    buffer: this._staticBuffer,\n                    stride: this._staticStride * 4,\n                    offset: staticOffset * 4,\n                    format: property.format,\n                });\n                staticOffset += attributeInfo.size;\n            }\n        }\n\n        geometry.addIndex(this.indexBuffer);\n\n        const uploadFunction = this.getParticleUpdate(properties);\n\n        this._dynamicUpload = uploadFunction.dynamicUpdate;\n        this._staticUpload = uploadFunction.staticUpdate;\n\n        this.geometry = geometry;\n    }\n\n    public getParticleUpdate(properties: Record<string, ParticleRendererProperty>)\n    {\n        const key = getParticleSyncKey(properties);\n\n        if (this._generateParticleUpdateCache[key])\n        {\n            return this._generateParticleUpdateCache[key];\n        }\n\n        this._generateParticleUpdateCache[key] = this.generateParticleUpdate(properties);\n\n        return this._generateParticleUpdateCache[key];\n    }\n\n    public generateParticleUpdate(properties: Record<string, ParticleRendererProperty>)\n    {\n        return generateParticleUpdateFunction(properties);\n    }\n\n    public update(particles: IParticle[], uploadStatic: boolean)\n    {\n        // first resize the buffers if needed!\n        // TODO resize!\n        if (particles.length > this._size)\n        {\n            uploadStatic = true;\n\n            this._size = Math.max(particles.length, (this._size * 1.5) | 0);\n\n            this.staticAttributeBuffer = new ViewableBuffer(this._size * this._staticStride * 4 * 4);\n            this.dynamicAttributeBuffer = new ViewableBuffer(this._size * this._dynamicStride * 4 * 4);\n            this.indexBuffer = createIndicesForQuads(this._size);\n\n            this.geometry.indexBuffer.setDataWithSize(\n                this.indexBuffer, this.indexBuffer.byteLength, true);\n        }\n\n        const dynamicAttributeBuffer = this.dynamicAttributeBuffer;\n\n        this._dynamicUpload(particles, dynamicAttributeBuffer.float32View, dynamicAttributeBuffer.uint32View);\n\n        this._dynamicBuffer.setDataWithSize(\n            this.dynamicAttributeBuffer.float32View, particles.length * this._dynamicStride * 4, true);\n\n        if (uploadStatic)\n        {\n            const staticAttributeBuffer = this.staticAttributeBuffer;\n\n            this._staticUpload(particles, staticAttributeBuffer.float32View, staticAttributeBuffer.uint32View);\n\n            this._staticBuffer.setDataWithSize(\n                staticAttributeBuffer.float32View, particles.length * this._staticStride * 4, true);\n        }\n    }\n\n    public destroy()\n    {\n        this._staticBuffer.destroy();\n        this._dynamicBuffer.destroy();\n        this.geometry.destroy();\n    }\n}\n\nfunction getParticleSyncKey(properties: Record<string, ParticleRendererProperty>)\n{\n    const keyGen: string[] = [];\n\n    for (const key in properties)\n    {\n        const property = properties[key];\n\n        keyGen.push(key, property.code, property.dynamic ? 'd' : 's');\n    }\n\n    return keyGen.join('_');\n}\n\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 444, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 450, "column": 0}, "map": {"version":3,"file":"colorToUniform.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/graphics/gpu/colorToUniform.ts"],"sourcesContent":["export function colorToUniform(rgb: number, alpha: number, out: Float32Array, offset: number)\n{\n    // TODO replace with Color..\n    out[offset++] = ((rgb >> 16) & 0xFF) / 255;\n    out[offset++] = ((rgb >> 8) & 0xFF) / 255;\n    out[offset++] = (rgb & 0xFF) / 255;\n    out[offset++] = alpha;\n}\n\nexport function color32BitToUniform(abgr: number, out: Float32Array, offset: number)\n{\n    const alpha = ((abgr >> 24) & 0xFF) / 255;\n\n    out[offset++] = ((abgr & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 8) & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 16) & 0xFF) / 255) * alpha;\n    out[offset++] = alpha;\n}\n"],"names":[],"mappings":";;;;;AAAO,SAAS,cAAe,CAAA,GAAA,EAAa,KAAe,EAAA,GAAA,EAAmB,MAC9E,EAAA;IAEI,GAAA,CAAI,MAAQ,EAAA,CAAA,GAAA,CAAM,GAAO,IAAA,EAAA,GAAM,GAAQ,IAAA,GAAA,CAAA;IACvC,GAAA,CAAI,MAAQ,EAAA,CAAA,GAAA,CAAM,GAAO,IAAA,CAAA,GAAK,GAAQ,IAAA,GAAA,CAAA;IAClC,GAAA,CAAA,MAAA,EAAQ,CAAK,GAAA,CAAA,GAAA,GAAM,GAAQ,IAAA,GAAA,CAAA;IAC/B,GAAA,CAAI,QAAQ,CAAI,GAAA,KAAA,CAAA;AACpB,CAAA;AAEgB,SAAA,mBAAA,CAAoB,IAAc,EAAA,GAAA,EAAmB,MACrE,EAAA;IACU,MAAA,KAAA,GAAA,CAAU,IAAQ,IAAA,EAAA,GAAM,GAAQ,IAAA,GAAA,CAAA;IAEtC,GAAA,CAAI,MAAQ,EAAA,CAAA,GAAA,CAAM,IAAO,GAAA,GAAA,IAAQ,GAAO,GAAA,KAAA,CAAA;IACxC,GAAA,CAAI,MAAQ,EAAA,CAAA,GAAA,CAAO,IAAQ,IAAA,CAAA,GAAK,GAAA,IAAQ,GAAO,GAAA,KAAA,CAAA;IAC/C,GAAA,CAAI,MAAQ,EAAA,CAAA,GAAA,CAAO,IAAQ,IAAA,EAAA,GAAM,GAAA,IAAQ,GAAO,GAAA,KAAA,CAAA;IAChD,GAAA,CAAI,QAAQ,CAAI,GAAA,KAAA,CAAA;AACpB","ignoreList":[0]}},
    {"offset": {"line": 470, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 476, "column": 0}, "map": {"version":3,"file":"ParticleContainerPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/shared/ParticleContainerPipe.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { State } from '../../../rendering/renderers/shared/state/State';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform';\nimport { ParticleBuffer } from './ParticleBuffer';\nimport { ParticleShader } from './shader/ParticleShader';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Container } from '../../container/Container';\nimport type { ParticleContainer } from './ParticleContainer';\n\nexport interface ParticleContainerAdaptor\n{\n    execute(particleContainerPop: ParticleContainerPipe, container: ParticleContainer): void;\n}\n\n/**\n * Renderer for Particles that is designer for speed over feature set.\n * @memberof scene\n */\nexport class ParticleContainerPipe implements RenderPipe<ParticleContainer>\n{\n    /** The default shader that is used if a sprite doesn't have a more specific one. */\n    public defaultShader: Shader;\n\n    public adaptor: ParticleContainerAdaptor;\n    public readonly state = State.for2d();\n    public readonly renderer: Renderer;\n\n    private _gpuBufferHash: Record<number, ParticleBuffer> = Object.create(null);\n    // eslint-disable-next-line max-len\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as unknown as (renderable: Container) => void;\n\n    public readonly localUniforms = new UniformGroup({\n        uTranslationMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        uColor: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uRound: { value: 1, type: 'f32' },\n        uResolution: { value: [0, 0], type: 'vec2<f32>' },\n    });\n\n    /**\n     * @param renderer - The renderer this sprite batch works for.\n     * @param adaptor\n     */\n    constructor(renderer: Renderer, adaptor: ParticleContainerAdaptor)\n    {\n        this.renderer = renderer;\n\n        this.adaptor = adaptor;\n\n        this.defaultShader = new ParticleShader();\n\n        this.state = State.for2d();\n    }\n\n    public validateRenderable(_renderable: ParticleContainer): boolean\n    {\n        // always fine :D\n        return false;\n    }\n\n    public addRenderable(renderable: ParticleContainer, instructionSet: InstructionSet)\n    {\n        this.renderer.renderPipes.batch.break(instructionSet);\n        instructionSet.add(renderable);\n    }\n\n    public getBuffers(renderable: ParticleContainer): ParticleBuffer\n    {\n        return this._gpuBufferHash[renderable.uid] || this._initBuffer(renderable);\n    }\n\n    private _initBuffer(renderable: ParticleContainer): ParticleBuffer\n    {\n        this._gpuBufferHash[renderable.uid] = new ParticleBuffer({\n            size: renderable.particleChildren.length,\n            properties: renderable._properties,\n        });\n\n        renderable.on('destroyed', this._destroyRenderableBound);\n\n        return this._gpuBufferHash[renderable.uid];\n    }\n\n    public updateRenderable(_renderable: ParticleContainer)\n    {\n        // nothing to be done here!\n\n    }\n\n    public destroyRenderable(renderable: ParticleContainer)\n    {\n        const buffer = this._gpuBufferHash[renderable.uid];\n\n        buffer.destroy();\n\n        this._gpuBufferHash[renderable.uid] = null;\n\n        renderable.off('destroyed', this._destroyRenderableBound);\n    }\n\n    public execute(container: ParticleContainer): void\n    {\n        const children = container.particleChildren;\n\n        if (children.length === 0)\n        {\n            return;\n        }\n\n        const renderer = this.renderer;\n        const buffer = this.getBuffers(container);\n\n        container.texture ||= children[0].texture;\n\n        const state = this.state;\n\n        buffer.update(children, container._childrenDirty);\n        container._childrenDirty = false;\n\n        state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n\n        const uniforms = this.localUniforms.uniforms;\n\n        const transformationMatrix = uniforms.uTranslationMatrix;\n\n        container.worldTransform.copyTo(transformationMatrix);\n\n        transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n\n        uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n        uniforms.uRound = renderer._roundPixels | container._roundPixels;\n\n        color32BitToUniform(\n            container.groupColorAlpha,\n            uniforms.uColor,\n            0\n        );\n\n        this.adaptor.execute(this, container);\n    }\n\n    /** Destroys the ParticleRenderer. */\n    public destroy(): void\n    {\n        if (this.defaultShader)\n        {\n            this.defaultShader.destroy();\n            this.defaultShader = null;\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 584, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 590, "column": 0}, "map": {"version":3,"file":"GlParticleContainerPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/shared/GlParticleContainerPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { GlParticleContainerAdaptor } from '../gl/GlParticleContainerAdaptor';\nimport { ParticleContainerPipe } from './ParticleContainerPipe';\n\nimport type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\n\nexport class GlParticleContainerPipe extends ParticleContainerPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n        ],\n        name: 'particle',\n    } as const;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        super(renderer, new GlParticleContainerAdaptor());\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;AAMO,MAAM,2OAAgC,wBAC7C,CAAA;IASI,YAAY,QACZ,CAAA;QACU,KAAA,CAAA,QAAA,EAAU,IAAI,yOAAA,EAA4B,CAAA,CAAA;IAAA,CACpD;AACJ,CAAA;AAAA,YAAA,GAda,uBAAA,CAGK,SAAY,GAAA;IACtB,IAAM,EAAA;0KACF,gBAAc,CAAA,UAAA;KAClB;IACA,IAAM,EAAA,UAAA;AACV,CAAA","ignoreList":[0]}},
    {"offset": {"line": 613, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 619, "column": 0}, "map": {"version":3,"file":"GpuParticleContainerAdaptor.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/gpu/GpuParticleContainerAdaptor.ts"],"sourcesContent":["import type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\nimport type { ParticleContainer } from '../shared/ParticleContainer';\nimport type { ParticleContainerAdaptor, ParticleContainerPipe } from '../shared/ParticleContainerPipe';\n\nexport class GpuParticleContainerAdaptor implements ParticleContainerAdaptor\n{\n    public execute(particleContainerPipe: ParticleContainerPipe, container: ParticleContainer)\n    {\n        const renderer = particleContainerPipe.renderer as WebGPURenderer;\n\n        const shader = container.shader || particleContainerPipe.defaultShader;\n\n        shader.groups[0] = renderer.renderPipes.uniformBatch.getUniformBindGroup(particleContainerPipe.localUniforms, true);\n\n        shader.groups[1] = renderer.texture.getTextureBindGroup(container.texture);\n\n        const state = particleContainerPipe.state;\n\n        const buffer = particleContainerPipe.getBuffers(container);\n\n        renderer.encoder.draw({\n            geometry: buffer.geometry,\n            shader: container.shader || particleContainerPipe.defaultShader,\n            state,\n            size: container.particleChildren.length * 6,\n        });\n    }\n}\n"],"names":[],"mappings":";;;;AAIO,MAAM,2BACb,CAAA;IACW,OAAA,CAAQ,qBAAA,EAA8C,SAC7D,EAAA;QACI,MAAM,WAAW,qBAAsB,CAAA,QAAA,CAAA;QAEjC,MAAA,MAAA,GAAS,SAAU,CAAA,MAAA,IAAU,qBAAsB,CAAA,aAAA,CAAA;QAElD,MAAA,CAAA,MAAA,CAAO,CAAC,CAAI,GAAA,QAAA,CAAS,WAAA,CAAY,YAAa,CAAA,mBAAA,CAAoB,qBAAsB,CAAA,aAAA,EAAe,IAAI,CAAA,CAAA;QAElH,MAAA,CAAO,MAAA,CAAO,CAAC,CAAA,GAAI,SAAS,OAAQ,CAAA,mBAAA,CAAoB,UAAU,OAAO,CAAA,CAAA;QAEzE,MAAM,QAAQ,qBAAsB,CAAA,KAAA,CAAA;QAE9B,MAAA,MAAA,GAAS,qBAAsB,CAAA,UAAA,CAAW,SAAS,CAAA,CAAA;QAEzD,QAAA,CAAS,OAAA,CAAQ,IAAK,CAAA;YAClB,UAAU,MAAO,CAAA,QAAA;YACjB,MAAA,EAAQ,SAAU,CAAA,MAAA,IAAU,qBAAsB,CAAA,aAAA;YAClD,KAAA;YACA,IAAA,EAAM,SAAU,CAAA,gBAAA,CAAiB,MAAS,GAAA,CAAA;QAAA,CAC7C,CAAA,CAAA;IAAA,CACL;AACJ","ignoreList":[0]}},
    {"offset": {"line": 641, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 647, "column": 0}, "map": {"version":3,"file":"GpuParticleContainerPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/shared/GpuParticleContainerPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { GpuParticleContainerAdaptor } from '../gpu/GpuParticleContainerAdaptor';\nimport { ParticleContainerPipe } from './ParticleContainerPipe';\n\nimport type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\n\nexport class GpuParticleContainerPipe extends ParticleContainerPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipes,\n        ],\n        name: 'particle',\n    } as const;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        super(renderer, new GpuParticleContainerAdaptor());\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;AAMO,MAAM,4OAAiC,wBAC9C,CAAA;IASI,YAAY,QACZ,CAAA;QACU,KAAA,CAAA,QAAA,EAAU,IAAI,4OAAA,EAA6B,CAAA,CAAA;IAAA,CACrD;AACJ,CAAA;AAAA,YAAA,GAda,wBAAA,CAGK,SAAY,GAAA;IACtB,IAAM,EAAA;0KACF,gBAAc,CAAA,WAAA;KAClB;IACA,IAAM,EAAA,UAAA;AACV,CAAA","ignoreList":[0]}},
    {"offset": {"line": 670, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 676, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/particle-container/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { GlParticleContainerPipe } from './shared/GlParticleContainerPipe';\nimport { GpuParticleContainerPipe } from './shared/GpuParticleContainerPipe';\n\n// NOTE: this is the first occurrence of needing both gl and gpu pipes in the same file\n// This could cause some issues with tree shaking in the future.\n// Right now these two files do not import anything specific for a renderer, so is not an issue for now.\nextensions.add(GlParticleContainerPipe);\nextensions.add(GpuParticleContainerPipe);\n"],"names":[],"mappings":";;;;;;;;kKAOA,aAAA,CAAW,GAAA,8MAAI,0BAAuB,CAAA,CAAA;kKACtC,aAAA,CAAW,GAAA,+MAAI,2BAAwB,CAAA","ignoreList":[0]}},
    {"offset": {"line": 686, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 692, "column": 0}, "map": {"version":3,"file":"getPo2TextureFromSource.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/utils/getPo2TextureFromSource.ts"],"sourcesContent":["import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { Bounds } from '../../container/bounds/Bounds';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\n\nconst tempBounds = new Bounds();\n\n/**\n * Takes an image and creates a texture from it, using a power of 2 texture from the texture pool.\n * Remember to return the texture when you don't need it any more!\n * @param image - The image to create a texture from\n * @param width - the frame width of the texture\n * @param height - the frame height of the texture\n * @param resolution - The resolution of the texture\n * @returns - The texture\n */\nexport function getPo2TextureFromSource(\n    image: HTMLImageElement | HTMLCanvasElement | ICanvas,\n    width: number,\n    height: number,\n    resolution: number\n): Texture\n{\n    const bounds = tempBounds;\n\n    bounds.minX = 0;\n    bounds.minY = 0;\n\n    bounds.maxX = (image.width / resolution) | 0;\n    bounds.maxY = (image.height / resolution) | 0;\n\n    const texture = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        resolution,\n        false\n    );\n\n    texture.source.uploadMethodId = 'image';\n    texture.source.resource = image;\n    texture.source.alphaMode = 'premultiply-alpha-on-upload';\n\n    texture.frame.width = width / resolution;\n    texture.frame.height = height / resolution;\n\n    // We want to update the resource on the GPU,\n    // but we do not want to resize the texture.\n    // calling `texture.source.update` will fit the resource to the texture\n    // causing a resize of the texture on the GPU.\n    // which is not what we want!\n    texture.source.emit('update', texture.source);\n\n    texture.updateUvs();\n\n    return texture;\n}\n"],"names":[],"mappings":";;;;;;;;AAMA,MAAM,UAAA,GAAa,oLAAI,SAAO,EAAA,CAAA;AAWvB,SAAS,uBACZ,CAAA,KAAA,EACA,KACA,EAAA,MAAA,EACA,UAEJ,EAAA;IACI,MAAM,MAAS,GAAA,UAAA,CAAA;IAEf,MAAA,CAAO,IAAO,GAAA,CAAA,CAAA;IACd,MAAA,CAAO,IAAO,GAAA,CAAA,CAAA;IAEP,MAAA,CAAA,IAAA,GAAQ,KAAM,CAAA,KAAA,GAAQ,UAAc,GAAA,CAAA,CAAA;IACpC,MAAA,CAAA,IAAA,GAAQ,KAAM,CAAA,MAAA,GAAS,UAAc,GAAA,CAAA,CAAA;IAE5C,MAAM,8MAAU,cAAY,CAAA,iBAAA,CACxB,MAAO,CAAA,KAAA,EACP,MAAO,CAAA,MAAA,EACP,UAAA,EACA,KAAA;IAGJ,OAAA,CAAQ,MAAA,CAAO,cAAiB,GAAA,OAAA,CAAA;IAChC,OAAA,CAAQ,MAAA,CAAO,QAAW,GAAA,KAAA,CAAA;IAC1B,OAAA,CAAQ,MAAA,CAAO,SAAY,GAAA,6BAAA,CAAA;IAEnB,OAAA,CAAA,KAAA,CAAM,KAAA,GAAQ,KAAQ,GAAA,UAAA,CAAA;IACtB,OAAA,CAAA,KAAA,CAAM,MAAA,GAAS,MAAS,GAAA,UAAA,CAAA;IAOhC,OAAA,CAAQ,MAAO,CAAA,IAAA,CAAK,QAAU,EAAA,OAAA,CAAQ,MAAM,CAAA,CAAA;IAE5C,OAAA,CAAQ,SAAU,EAAA,CAAA;IAEX,OAAA,OAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 719, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 725, "column": 0}, "map": {"version":3,"file":"getCanvasBoundingBox.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/utils/canvas/getCanvasBoundingBox.ts"],"sourcesContent":["import { Rectangle } from '../../maths/shapes/Rectangle';\n\nimport type { ICanvas } from '../../environment/canvas/ICanvas';\n\nfunction checkRow(data: Uint8ClampedArray, width: number, y: number)\n{\n    for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4)\n    {\n        if (data[index + 3] !== 0) return false;\n    }\n\n    return true;\n}\n\nfunction checkColumn(data: Uint8ClampedArray, width: number, x: number, top: number, bottom: number)\n{\n    const stride = 4 * width;\n\n    for (let y = top, index = (top * stride) + (4 * x); y <= bottom; ++y, index += stride)\n    {\n        if (data[index + 3] !== 0) return false;\n    }\n\n    return true;\n}\n\n/**\n * Measuring the bounds of a canvas' visible (non-transparent) pixels.\n * @param canvas - The canvas to measure.\n * @param resolution - The resolution of the canvas.\n * @returns The bounding box of the canvas' visible pixels.\n * @since 7.1.0\n * @memberof utils\n */\nexport function getCanvasBoundingBox(canvas: ICanvas, resolution = 1): Rectangle\n{\n    // https://gist.github.com/timdown/021d9c8f2aabc7092df564996f5afbbf\n\n    const { width, height } = canvas;\n\n    const context = canvas.getContext('2d', {\n        willReadFrequently: true,\n    });\n\n    if (context === null)\n    {\n        throw new TypeError('Failed to get canvas 2D context');\n    }\n\n    const imageData = context.getImageData(0, 0, width, height);\n    const data = imageData.data;\n\n    let left = 0;\n    let top = 0;\n    let right = width - 1;\n    let bottom = height - 1;\n\n    while (top < height && checkRow(data, width, top)) ++top;\n    if (top === height) return Rectangle.EMPTY;\n    while (checkRow(data, width, bottom)) --bottom;\n    while (checkColumn(data, width, left, top, bottom)) ++left;\n    while (checkColumn(data, width, right, top, bottom)) --right;\n\n    ++right;\n    ++bottom;\n\n    return new Rectangle(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n}\n"],"names":[],"mappings":";;;;;;AAIA,SAAS,QAAA,CAAS,IAAyB,EAAA,KAAA,EAAe,CAC1D,EAAA;IACa,IAAA,IAAA,CAAA,GAAI,CAAG,EAAA,KAAA,GAAQ,CAAI,GAAA,CAAA,GAAI,KAAO,EAAA,CAAA,GAAI,KAAO,EAAA,EAAE,CAAG,EAAA,KAAA,IAAS,CAChE,CAAA;QACQ,IAAA,IAAA,CAAK,KAAQ,GAAA,CAAC,CAAM,KAAA,CAAA,EAAU,OAAA,KAAA,CAAA;IAAA,CACtC;IAEO,OAAA,IAAA,CAAA;AACX,CAAA;AAEA,SAAS,WAAY,CAAA,IAAA,EAAyB,KAAe,EAAA,CAAA,EAAW,GAAA,EAAa,MACrF,EAAA;IACI,MAAM,SAAS,CAAI,GAAA,KAAA,CAAA;IAEnB,IAAA,IAAS,CAAI,GAAA,GAAA,EAAK,KAAS,GAAA,GAAA,GAAM,MAAW,GAAA,CAAA,GAAI,CAAI,EAAA,CAAA,IAAK,MAAQ,EAAA,EAAE,CAAG,EAAA,KAAA,IAAS,MAC/E,CAAA;QACQ,IAAA,IAAA,CAAK,KAAQ,GAAA,CAAC,CAAM,KAAA,CAAA,EAAU,OAAA,KAAA,CAAA;IAAA,CACtC;IAEO,OAAA,IAAA,CAAA;AACX,CAAA;AAUgB,SAAA,oBAAA,CAAqB,MAAiB,EAAA,UAAA,GAAa,CACnE,EAAA;IAGU,MAAA,EAAE,KAAO,EAAA,MAAA,EAAW,GAAA,MAAA,CAAA;IAEpB,MAAA,OAAA,GAAU,MAAO,CAAA,UAAA,CAAW,IAAM,EAAA;QACpC,kBAAoB,EAAA,IAAA;IAAA,CACvB,CAAA,CAAA;IAED,IAAI,YAAY,IAChB,EAAA;QACU,MAAA,IAAI,UAAU,iCAAiC,CAAA,CAAA;IAAA,CACzD;IAEA,MAAM,YAAY,OAAQ,CAAA,YAAA,CAAa,CAAG,EAAA,CAAA,EAAG,OAAO,MAAM,CAAA,CAAA;IAC1D,MAAM,OAAO,SAAU,CAAA,IAAA,CAAA;IAEvB,IAAI,IAAO,GAAA,CAAA,CAAA;IACX,IAAI,GAAM,GAAA,CAAA,CAAA;IACV,IAAI,QAAQ,KAAQ,GAAA,CAAA,CAAA;IACpB,IAAI,SAAS,MAAS,GAAA,CAAA,CAAA;IAEtB,MAAO,GAAM,GAAA,MAAA,IAAU,QAAS,CAAA,IAAA,EAAM,OAAO,GAAG,CAAA,CAAK,EAAA,GAAA,CAAA;IACrD,IAAI,GAAQ,KAAA,MAAA,EAAQ,6KAAO,YAAU,CAAA,KAAA,CAAA;IAC9B,MAAA,QAAA,CAAS,IAAM,EAAA,KAAA,EAAO,MAAM,CAAA,CAAK,EAAA,MAAA,CAAA;IACxC,MAAO,WAAY,CAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,KAAK,MAAM,CAAA,CAAK,EAAA,IAAA,CAAA;IACtD,MAAO,WAAY,CAAA,IAAA,EAAM,KAAO,EAAA,KAAA,EAAO,KAAK,MAAM,CAAA,CAAK,EAAA,KAAA,CAAA;IAErD,EAAA,KAAA,CAAA;IACA,EAAA,MAAA,CAAA;IAEK,OAAA,0KAAI,YAAU,CAAA,IAAA,GAAO,UAAY,EAAA,GAAA,GAAM,UAAa,EAAA,CAAA,KAAA,GAAQ,IAAQ,IAAA,UAAA,EAAA,CAAa,MAAS,GAAA,GAAA,IAAO,UAAU,CAAA,CAAA;AACtH","ignoreList":[0]}},
    {"offset": {"line": 769, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 775, "column": 0}, "map": {"version":3,"file":"CanvasTextSystem.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/canvas/CanvasTextSystem.ts"],"sourcesContent":["import { Color } from '../../../color/Color';\nimport { ExtensionType } from '../../../extensions/Extensions';\nimport { nextPow2 } from '../../../maths/misc/pow2';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox';\nimport { deprecation } from '../../../utils/logging/deprecation';\nimport { TextStyle } from '../TextStyle';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource';\nimport { CanvasTextMetrics } from './CanvasTextMetrics';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { System } from '../../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { TextOptions } from '../AbstractText';\nimport type { Text } from '../Text';\n\ninterface CanvasAndContext\n{\n    canvas: ICanvas;\n    context: ICanvasRenderingContext2D;\n}\n\n/**\n * System plugin to the renderer to manage canvas text.\n * @memberof rendering\n */\nexport class CanvasTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'canvasText',\n    } as const;\n\n    private _activeTextures: Record<string, {\n        canvasAndContext: CanvasAndContext,\n        texture: Texture,\n        usageCount: number,\n    }> = {};\n\n    private readonly _renderer: Renderer;\n\n    constructor(_renderer: Renderer)\n    {\n        this._renderer = _renderer;\n    }\n\n    public getTextureSize(text: string, resolution: number, style: TextStyle): { width: number, height: number }\n    {\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);\n\n        let width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        let height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        width = Math.ceil((width) - 1e-6);\n        height = Math.ceil((height) - 1e-6);\n        width = nextPow2(width);\n        height = nextPow2(height);\n\n        return { width, height };\n    }\n\n    /**\n     * This is a function that will create a texture from a text string, style and resolution.\n     * Useful if you want to make a texture of your text and use if for various other pixi things!\n     * @param options - The options of the text that will be used to generate the texture.\n     * @param options.text - the text to render\n     * @param options.style - the style of the text\n     * @param options.resolution - the resolution of the texture\n     * @returns the newly created texture\n     */\n    /** @deprecated since 8.0.0 */\n    public getTexture(text: string, resolution: number, style: TextStyle, textKey: string): Texture;\n    public getTexture(options: TextOptions): Texture;\n    public getTexture(options: TextOptions | string, resolution?: number, style?: TextStyle, _textKey?: string): Texture\n    {\n        if (typeof options === 'string')\n        {\n            // #if _DEBUG\n            deprecation('8.0.0', 'CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments');\n            // #endif\n\n            options = {\n                text: options,\n                style,\n                resolution,\n            };\n        }\n\n        if (!(options.style instanceof TextStyle))\n        {\n            options.style = new TextStyle(options.style);\n        }\n\n        const { texture, canvasAndContext } = this.createTextureAndCanvas(\n            options as {text: string, style: TextStyle, resolution?: number}\n        );\n\n        this._renderer.texture.initSource(texture._source);\n\n        CanvasPool.returnCanvasAndContext(canvasAndContext);\n\n        return texture;\n    }\n\n    public createTextureAndCanvas(options: {text: string, style: TextStyle, resolution?: number})\n    {\n        const { text, style } = options;\n\n        const resolution = options.resolution ?? this._renderer.resolution;\n\n        // create a canvas with the word hello on it\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);\n\n        const width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        const height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n\n        // create a texture from the canvas\n        const { canvas } = canvasAndContext;\n\n        this.renderTextToCanvas(text, style, resolution, canvasAndContext);\n\n        const texture = getPo2TextureFromSource(canvas, width, height, resolution);\n\n        if (style.trim)\n        {\n            const trimmed = getCanvasBoundingBox(canvas, resolution);\n\n            texture.frame.copyFrom(trimmed);\n\n            texture.updateUvs();\n        }\n\n        return { texture, canvasAndContext };\n    }\n\n    public getManagedTexture(text: Text)\n    {\n        text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n        const textKey = text._getKey();\n\n        if (this._activeTextures[textKey])\n        {\n            this._increaseReferenceCount(textKey);\n\n            return this._activeTextures[textKey].texture;\n        }\n\n        const { texture, canvasAndContext } = this.createTextureAndCanvas(text);\n\n        this._activeTextures[textKey] = {\n            canvasAndContext,\n            texture,\n            usageCount: 1,\n        };\n\n        return texture;\n    }\n\n    private _increaseReferenceCount(textKey: string)\n    {\n        this._activeTextures[textKey].usageCount++;\n    }\n\n    public decreaseReferenceCount(textKey: string)\n    {\n        const activeTexture = this._activeTextures[textKey];\n\n        activeTexture.usageCount--;\n\n        if (activeTexture.usageCount === 0)\n        {\n            CanvasPool.returnCanvasAndContext(activeTexture.canvasAndContext);\n            TexturePool.returnTexture(activeTexture.texture);\n\n            const source = activeTexture.texture.source;\n\n            source.resource = null;\n            source.uploadMethodId = 'unknown';\n            source.alphaMode = 'no-premultiply-alpha';\n\n            this._activeTextures[textKey] = null;\n        }\n    }\n\n    public getReferenceCount(textKey: string)\n    {\n        return this._activeTextures[textKey].usageCount;\n    }\n\n    /**\n     * Renders text to its canvas, and updates its texture.\n     *\n     * By default this is used internally to ensure the texture is correct before rendering,\n     * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n     * and then shared across multiple Sprites.\n     * @param text\n     * @param style\n     * @param resolution\n     * @param canvasAndContext\n     */\n    public renderTextToCanvas(text: string, style: TextStyle, resolution: number, canvasAndContext: CanvasAndContext): void\n    {\n        const { canvas, context } = canvasAndContext;\n\n        const font = fontStringFromTextStyle(style);\n\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);// , canvas);\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        const height = canvas.height;\n\n        context.resetTransform();\n        context.scale(resolution, resolution);\n        context.textBaseline = style.textBaseline;\n\n        // set stroke styles..\n\n        if (style._stroke?.width)\n        {\n            const strokeStyle = style._stroke;\n\n            context.lineWidth = strokeStyle.width;\n\n            context.miterLimit = strokeStyle.miterLimit;\n            context.lineJoin = strokeStyle.join;\n            context.lineCap = strokeStyle.cap;\n        }\n\n        // return;\n        context.font = font;\n\n        let linePositionX: number;\n        let linePositionY: number;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            // we only want the drop shadow, so put text way off-screen\n            const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + (style.padding * 2)) : 0;\n            const dsOffsetShadow = dsOffsetText * resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const shadowOptions = style.dropShadow;\n\n                const dropShadowColor = shadowOptions.color;\n                const dropShadowAlpha = shadowOptions.alpha;\n\n                context.shadowColor = Color.shared\n                    .setValue(dropShadowColor)\n                    .setAlpha(dropShadowAlpha)\n                    .toRgbaString();\n\n                const dropShadowBlur = shadowOptions.blur * resolution;\n                const dropShadowDistance = shadowOptions.distance * resolution;\n\n                context.shadowBlur = dropShadowBlur;\n                context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(shadowOptions.angle) * dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context) : null;\n\n                if (style._stroke?.width)\n                {\n                    context.strokeStyle = getCanvasFillStyle(style._stroke, context);\n                }\n\n                context.shadowColor = 'black';\n            }\n\n            let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n\n            if (lineHeight - fontProperties.fontSize < 0)\n            {\n                linePositionYShift = 0;\n            }\n\n            const strokeWidth = style._stroke?.width ?? 0;\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = strokeWidth / 2;\n                linePositionY = ((strokeWidth / 2) + (i * lineHeight)) + fontProperties.ascent + linePositionYShift;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style._stroke?.width)\n                {\n                    this._drawLetterSpacing(\n                        lines[i],\n                        style,\n                        canvasAndContext,\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style._fill !== undefined)\n                {\n                    this._drawLetterSpacing(\n                        lines[i],\n                        style,\n                        canvasAndContext,\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     * @param text - The text to draw\n     * @param style\n     * @param canvasAndContext\n     * @param x - Horizontal position to draw the text\n     * @param y - Vertical position to draw the text\n     * @param isStroke - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     */\n    private _drawLetterSpacing(\n        text: string,\n        style: TextStyle,\n        canvasAndContext: CanvasAndContext,\n        x: number, y: number,\n        isStroke = false\n    ): void\n    {\n        const { context } = canvasAndContext;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        let useExperimentalLetterSpacing = false;\n\n        if (CanvasTextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (CanvasTextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        if (letterSpacing === 0 || useExperimentalLetterSpacing)\n        {\n            if (isStroke)\n            {\n                context.strokeText(text, x, y);\n            }\n            else\n            {\n                context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n        let previousWidth = context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                context.fillText(currentChar, currentPosition, y);\n            }\n            let textStr = '';\n\n            for (let j = i + 1; j < stringArray.length; ++j)\n            {\n                textStr += stringArray[j];\n            }\n            currentWidth = context.measureText(textStr).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    public destroy(): void\n    {\n        this._activeTextures = null;\n    }\n}\n"],"names":["i"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1036, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1042, "column": 0}, "map": {"version":3,"file":"BatchableSprite.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite/BatchableSprite.ts"],"sourcesContent":["import type { Matrix } from '../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableQuadElement } from '../../rendering/batcher/shared/DefaultBatcher';\nimport type { Topology } from '../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { BoundsData } from '../container/bounds/Bounds';\nimport type { Container } from '../container/Container';\n\n/**\n * A batchable sprite object.\n * @ignore\n */\nexport class BatchableSprite implements DefaultBatchableQuadElement\n{\n    public batcherName = 'default';\n    public topology: Topology = 'triangle-list';\n\n    // batch specific..\n    public readonly attributeSize = 4;\n    public readonly indexSize = 6;\n    public readonly packAsQuad = true;\n\n    public transform: Matrix;\n\n    public renderable: Container;\n    public texture: Texture;\n    public bounds: BoundsData;\n\n    public roundPixels: 0 | 1 = 0;\n\n    public _indexStart: number;\n    public _textureId: number;\n    public _attributeStart = 0; // location in the buffer\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n    get color() { return this.renderable.groupColorAlpha; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.bounds = null;\n    }\n}\n"],"names":[],"mappings":";;;;AAYO,MAAM,eACb,CAAA;IADO,WAAA,EAAA;QAEH,IAAA,CAAO,WAAc,GAAA,SAAA,CAAA;QACrB,IAAA,CAAO,QAAqB,GAAA,eAAA,CAAA;QAG5B,mBAAA;QAAA,IAAA,CAAgB,aAAgB,GAAA,CAAA,CAAA;QAChC,IAAA,CAAgB,SAAY,GAAA,CAAA,CAAA;QAC5B,IAAA,CAAgB,UAAa,GAAA,IAAA,CAAA;QAQ7B,IAAA,CAAO,WAAqB,GAAA,CAAA,CAAA;QAI5B,IAAA,CAAO,eAAkB,GAAA,CAAA,CAAA;QACzB,yBAAA;QAAA,IAAA,CAAO,QAAoB,GAAA,IAAA,CAAA;QAC3B,IAAA,CAAO,MAAgB,GAAA,IAAA,CAAA;IAAA,CAAA;IAEvB,IAAI,SAAY,GAAA;QAAE,OAAO,IAAA,CAAK,UAAW,CAAA,cAAA,CAAA;IAAA,CAAgB;IACzD,IAAI,KAAQ,GAAA;QAAE,OAAO,IAAA,CAAK,UAAW,CAAA,eAAA,CAAA;IAAA,CAAiB;IAE/C,KACP,GAAA;QACI,IAAA,CAAK,UAAa,GAAA,IAAA,CAAA;QAClB,IAAA,CAAK,OAAU,GAAA,IAAA,CAAA;QACf,IAAA,CAAK,QAAW,GAAA,IAAA,CAAA;QAChB,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QACd,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;IAAA,CAClB;AACJ","ignoreList":[0]}},
    {"offset": {"line": 1076, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1082, "column": 0}, "map": {"version":3,"file":"CanvasTextPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/canvas/CanvasTextPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { updateQuadBounds } from '../../../utils/data/updateQuadBounds';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../../sprite/BatchableSprite';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Container } from '../../container/Container';\nimport type { Text } from '../Text';\n\nexport class CanvasTextPipe implements RenderPipe<Text>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'text',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _gpuText: Record<number, {\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n    }> = Object.create(null);\n\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.runners.resolutionChange.add(this);\n        this._renderer.renderableGC.addManagedHash(this, '_gpuText');\n    }\n\n    public resolutionChange()\n    {\n        for (const i in this._gpuText)\n        {\n            const gpuText = this._gpuText[i];\n\n            if (!gpuText) continue;\n\n            const text = gpuText.batchableSprite.renderable as Text;\n\n            if (text._autoResolution)\n            {\n                text._resolution = this._renderer.resolution;\n                text.onViewUpdate();\n            }\n        }\n    }\n\n    public validateRenderable(text: Text): boolean\n    {\n        const gpuText = this._getGpuText(text);\n\n        const newKey = text._getKey();\n\n        if (gpuText.currentKey !== newKey)\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(text: Text, instructionSet: InstructionSet)\n    {\n        const gpuText = this._getGpuText(text);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (text._didTextUpdate)\n        {\n            this._updateText(text);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n    }\n\n    public updateRenderable(text: Text)\n    {\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (text._didTextUpdate)\n        {\n            this._updateText(text);\n        }\n\n        batchableSprite._batcher.updateElement(batchableSprite);\n    }\n\n    public destroyRenderable(text: Text)\n    {\n        text.off('destroyed', this._destroyRenderableBound);\n\n        this._destroyRenderableById(text.uid);\n    }\n\n    private _destroyRenderableById(textUid: number)\n    {\n        const gpuText = this._gpuText[textUid];\n\n        this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this._gpuText[textUid] = null;\n    }\n\n    private _updateText(text: Text)\n    {\n        const newKey = text._getKey();\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this._updateGpuText(text);\n        }\n\n        text._didTextUpdate = false;\n\n        const padding = text._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, text._anchor, batchableSprite.texture, padding);\n    }\n\n    private _updateGpuText(text: Text)\n    {\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.texture)\n        {\n            this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n        }\n\n        gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n        gpuText.currentKey = text._getKey();\n        batchableSprite.texture = gpuText.texture;\n    }\n\n    private _getGpuText(text: Text)\n    {\n        return this._gpuText[text.uid] || this.initGpuText(text);\n    }\n\n    public initGpuText(text: Text)\n    {\n        const gpuTextData: CanvasTextPipe['_gpuText'][number] = {\n            texture: null,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n        };\n\n        gpuTextData.batchableSprite.renderable = text;\n        gpuTextData.batchableSprite.transform = text.groupTransform;\n        gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        gpuTextData.batchableSprite.roundPixels = (this._renderer._roundPixels | text._roundPixels) as 0 | 1;\n\n        this._gpuText[text.uid] = gpuTextData;\n\n        text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n        this._updateText(text);\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        text.on('destroyed', this._destroyRenderableBound);\n\n        return gpuTextData;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuText)\n        {\n            this._destroyRenderableById(i as unknown as number);\n        }\n\n        this._gpuText = null;\n        this._renderer = null;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1210, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1216, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem';\n\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n"],"names":[],"mappings":";;;;;;;;kKAIA,aAAA,CAAW,GAAA,sLAAI,mBAAgB,CAAA,CAAA;kKAC/B,aAAA,CAAW,GAAA,oLAAI,iBAAc,CAAA","ignoreList":[0]}},
    {"offset": {"line": 1226, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1232, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-bitmap/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { BitmapTextPipe } from './BitmapTextPipe';\n\nextensions.add(BitmapTextPipe);\n"],"names":[],"mappings":";;;;;;kKAGA,aAAA,CAAW,GAAA,oLAAI,iBAAc,CAAA","ignoreList":[0]}},
    {"offset": {"line": 1239, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1245, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/text-html/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { HTMLTextPipe } from './HTMLTextPipe';\nimport { HTMLTextSystem } from './HTMLTextSystem';\n\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n"],"names":[],"mappings":";;;;;;;;kKAIA,aAAA,CAAW,GAAA,kLAAI,iBAAc,CAAA,CAAA;kKAC7B,aAAA,CAAW,GAAA,gLAAI,eAAY,CAAA","ignoreList":[0]}},
    {"offset": {"line": 1255, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1261, "column": 0}, "map": {"version":3,"file":"MeshGeometry.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/mesh/shared/MeshGeometry.ts"],"sourcesContent":["import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\n\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { BatchMode } from '../../graphics/shared/GraphicsContext';\n\n/**\n * Options for the mesh geometry.\n * @memberof scene\n */\nexport interface MeshGeometryOptions\n{\n    /** The positions of the mesh. */\n    positions?: Float32Array;\n    /** The UVs of the mesh. */\n    uvs?: Float32Array;\n    /** The indices of the mesh. */\n    indices?: Uint32Array;\n    /** The topology of the mesh. */\n    topology?: Topology;\n    /** Whether to shrink the buffers to fit the data. */\n    shrinkBuffersToFit?: boolean;\n}\n\n/**\n * A geometry used to batch multiple meshes with the same texture.\n * @memberof scene\n */\nexport class MeshGeometry extends Geometry\n{\n    public static defaultOptions: MeshGeometryOptions = {\n        topology: 'triangle-list',\n        shrinkBuffersToFit: false,\n    };\n\n    public batchMode: BatchMode = 'auto';\n\n    /**\n     * @param {scene.MeshGeometryOptions} options - The options of the mesh geometry.\n     */\n    constructor(options: MeshGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(positions: Float32Array, uvs: Float32Array, indices: Uint32Array);\n    constructor(...args: [MeshGeometryOptions] | [Float32Array, Float32Array, Uint32Array])\n    {\n        let options = args[0] ?? {};\n\n        if (options instanceof Float32Array)\n        {\n            // #if _DEBUG\n            deprecation(v8_0_0, 'use new MeshGeometry({ positions, uvs, indices }) instead');\n            // #endif\n\n            options = {\n                positions: options,\n                uvs: args[1],\n                indices: args[2],\n            };\n        }\n\n        options = { ...MeshGeometry.defaultOptions, ...options };\n\n        const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n        const uvs = options.uvs || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n        const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n\n        const shrinkToFit = options.shrinkBuffersToFit;\n\n        const positionBuffer = new Buffer({\n            data: positions,\n            label: 'attribute-mesh-positions',\n            shrinkToFit,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const uvBuffer = new Buffer({\n            data: uvs,\n            label: 'attribute-mesh-uvs',\n            shrinkToFit,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const indexBuffer = new Buffer({\n            data: indices,\n            label: 'index-mesh-buffer',\n            shrinkToFit,\n            usage: BufferUsage.INDEX | BufferUsage.COPY_DST,\n        });\n\n        super({\n            attributes: {\n                aPosition: {\n                    buffer: positionBuffer,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n                aUV: {\n                    buffer: uvBuffer,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n            },\n            indexBuffer,\n            topology: options.topology,\n        });\n    }\n\n    /** The positions of the mesh. */\n    get positions(): Float32Array\n    {\n        return this.attributes.aPosition.buffer.data as Float32Array;\n    }\n\n    set positions(value: Float32Array)\n    {\n        this.attributes.aPosition.buffer.data = value;\n    }\n\n    /** The UVs of the mesh. */\n    get uvs(): Float32Array\n    {\n        return this.attributes.aUV.buffer.data as Float32Array;\n    }\n\n    set uvs(value: Float32Array)\n    {\n        this.attributes.aUV.buffer.data = value;\n    }\n\n    /** The indices of the mesh. */\n    get indices(): Uint32Array\n    {\n        return this.indexBuffer.data as Uint32Array;\n    }\n\n    set indices(value: Uint32Array)\n    {\n        this.indexBuffer.data = value;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1381, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1387, "column": 0}, "map": {"version":3,"file":"QuadGeometry.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/utils/QuadGeometry.ts"],"sourcesContent":["import { MeshGeometry } from '../../mesh/shared/MeshGeometry';\n\nexport class QuadGeometry extends MeshGeometry\n{\n    constructor()\n    {\n        super({\n            positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            indices: new Uint32Array([0, 1, 2, 0, 2, 3]),\n        });\n    }\n}\n"],"names":[],"mappings":";;;;;;AAEO,MAAM,sMAAqB,eAClC,CAAA;IACI,WACA,EAAA;QACU,KAAA,CAAA;YACF,SAAW,EAAA,IAAI,YAAa,CAAA;gBAAC,CAAG;gBAAA,CAAA;gBAAG,CAAG;gBAAA,CAAA;gBAAG,CAAG;gBAAA,CAAA;gBAAG,CAAG;gBAAA,CAAC;aAAC,CAAA;YACpD,GAAK,EAAA,IAAI,YAAa,CAAA;gBAAC,CAAG;gBAAA,CAAA;gBAAG,CAAG;gBAAA,CAAA;gBAAG,CAAG;gBAAA,CAAA;gBAAG,CAAG;gBAAA,CAAC;aAAC,CAAA;YAC9C,OAAA,EAAS,IAAI,WAAA,CAAY;gBAAC,CAAA;gBAAG;gBAAG,CAAG;gBAAA,CAAA;gBAAG,CAAG;gBAAA,CAAC;aAAC,CAAA;QAAA,CAC9C,CAAA,CAAA;IAAA,CACL;AACJ","ignoreList":[0]}},
    {"offset": {"line": 1429, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1435, "column": 0}, "map": {"version":3,"file":"localUniformBit.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/rendering/high-shader/shader-bits/localUniformBit.ts"],"sourcesContent":["export const localUniformBit = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* wgsl */`\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n};\n\n// TODO this works, but i think down the road it will be better to manage groups automatically if there are clashes\nexport const localUniformBitGroup2 = {\n    ...localUniformBit,\n    vertex: {\n        ...localUniformBit.vertex,\n        // replace the group!\n        header: localUniformBit.vertex.header.replace('group(1)', 'group(2)'),\n    }\n};\n\nexport const localUniformBitGl = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* glsl */`\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n};\n"],"names":[],"mappings":";;;;;;AAAO,MAAM,eAAkB,GAAA;IAC3B,IAAM,EAAA,mBAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;;;;;QAAA,CAAA;QAUlB,IAAA,EAAA,QAAA,GAAgB,CAAA;;;QAAA,CAAA;QAIhB,GAAA,EAAA,QAAA,GAAe,CAAA;;;;;QAAA,CAAA;IAAA,CAMnB;AACJ,EAAA;AAGO,MAAM,qBAAwB,GAAA;IACjC,GAAG,eAAA;IACH,MAAQ,EAAA;QACJ,GAAG,eAAgB,CAAA,MAAA;QAAA,qBAAA;QAEnB,QAAQ,eAAgB,CAAA,MAAA,CAAO,MAAO,CAAA,OAAA,CAAQ,YAAY,UAAU,CAAA;IAAA,CACxE;AACJ,EAAA;AAEO,MAAM,iBAAoB,GAAA;IAC7B,IAAM,EAAA,mBAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;QAAA,CAAA;QAMlB,IAAA,EAAA,QAAA,GAAgB,CAAA;;;QAAA,CAAA;QAIhB,GAAA,EAAA,QAAA,GAAe,CAAA;;;;;QAAA,CAAA;IAAA,CAMnB;AACJ","ignoreList":[0]}},
    {"offset": {"line": 1497, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1503, "column": 0}, "map": {"version":3,"file":"tilingBit.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/shader/tilingBit.ts"],"sourcesContent":["export const tilingBit = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    }\n\n};\n\nexport const tilingBitGl = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        `,\n        main: /* glsl */`\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `,\n        main: /* glsl */`\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        `\n    }\n\n};\n"],"names":[],"mappings":";;;;;AAAO,MAAM,SAAY,GAAA;IACrB,IAAM,EAAA,YAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;;;;;;;;QAAA,CAAA;QAalB,IAAA,EAAA,QAAA,GAAgB,CAAA;;;;QAAA,CAAA;IAAA,CAMpB;IACA,QAAU,EAAA;QACN,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;;;;;;;;QAAA,CAAA;QAalB,IAAA,EAAA,QAAA,GAAgB,CAAA;;;;;;;;;;;;;;;QAAA,CAAA;IAAA,CAgBpB;AAEJ,EAAA;AAEO,MAAM,WAAc,GAAA;IACvB,IAAM,EAAA,YAAA;IACN,MAAQ,EAAA;QACJ,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;QAAA,CAAA;QAKlB,IAAA,EAAA,QAAA,GAAgB,CAAA;;;;QAAA,CAAA;IAAA,CAMpB;IACA,QAAU,EAAA;QACN,MAAA,EAAA,QAAA,GAAkB,CAAA;;;;;QAAA,CAAA;QAMlB,IAAA,EAAA,QAAA,GAAgB,CAAA;;;;;;;;;QAAA,CAAA;IAAA,CAUpB;AAEJ","ignoreList":[0]}},
    {"offset": {"line": 1597, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1603, "column": 0}, "map": {"version":3,"file":"TilingSpriteShader.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/shader/TilingSpriteShader.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { tilingBit, tilingBitGl } from './tilingBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\nexport class TilingSpriteShader extends Shader\n{\n    constructor()\n    {\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBit,\n                tilingBit,\n                roundPixelsBit,\n            ],\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBitGl,\n                tilingBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        const tilingUniforms = new UniformGroup({\n            uMapCoord: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: 'vec4<f32>' },\n            uClampOffset: { value: new Float32Array([0, 0]), type: 'vec2<f32>' },\n            uTextureTransform: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: 'vec4<f32>' },\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: new UniformGroup({\n                    uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n                    uRound: { value: 0, type: 'f32' },\n                }),\n                tilingUniforms,\n                uTexture: Texture.EMPTY.source,\n                uSampler: Texture.EMPTY.source.style,\n            }\n        });\n    }\n\n    public updateUniforms(\n        width: number, height: number,\n        matrix: Matrix,\n        anchorX: number, anchorY: number,\n        texture: Texture\n    ): void\n    {\n        const tilingUniforms = this.resources.tilingUniforms;\n\n        const textureWidth = texture.width;\n        const textureHeight = texture.height;\n        const textureMatrix = texture.textureMatrix;\n\n        const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n\n        uTextureTransform.set(\n            matrix.a * textureWidth / width,\n            matrix.b * textureWidth / height,\n            matrix.c * textureHeight / width,\n            matrix.d * textureHeight / height,\n            matrix.tx / width,\n            matrix.ty / height);\n\n        uTextureTransform.invert();\n\n        tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n        tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n        tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n        tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n        tilingUniforms.uniforms.uSizeAnchor[0] = width;\n        tilingUniforms.uniforms.uSizeAnchor[1] = height;\n        tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n        tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n\n        if (texture)\n        {\n            this.resources.uTexture = texture.source;\n            this.resources.uSampler = texture.source.style;\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1731, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1737, "column": 0}, "map": {"version":3,"file":"BatchableMesh.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/mesh/shared/BatchableMesh.ts"],"sourcesContent":["import type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableMeshElement } from '../../../rendering/batcher/shared/DefaultBatcher';\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { ViewContainer } from '../../view/ViewContainer';\nimport type { MeshGeometry } from './MeshGeometry';\n\n/**\n * A batchable mesh object.\n * @ignore\n */\nexport class BatchableMesh implements DefaultBatchableMeshElement\n{\n    public batcherName = 'default';\n\n    public _topology: Topology;\n\n    public readonly packAsQuad = false;\n    public location: number;\n\n    public renderable: ViewContainer;\n\n    public indexOffset = 0;\n    public attributeOffset = 0;\n\n    public texture: Texture;\n    public geometry: MeshGeometry;\n    public transform: Matrix;\n    public roundPixels: 0 | 1 = 0;\n\n    public _attributeStart: number;\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n    public _indexStart: number;\n    public _textureId: number;\n\n    private _transformedUvs: Float32Array;\n    private _uvUpdateId: number = -1;\n    private _textureMatrixUpdateId: number = -1;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n\n    get topology() { return this._topology || this.geometry.topology; }\n    set topology(value: Topology) { this._topology = value; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.geometry = null;\n        this._uvUpdateId = -1;\n        this._textureMatrixUpdateId = -1;\n    }\n\n    get uvs()\n    {\n        const geometry = this.geometry;\n\n        const uvBuffer = geometry.getBuffer('aUV');\n\n        const uvs = uvBuffer.data;\n\n        let transformedUvs = uvs;\n        const textureMatrix = this.texture.textureMatrix;\n\n        if (!textureMatrix.isSimple)\n        {\n            transformedUvs = this._transformedUvs;\n\n            if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID)\n            {\n                if (!transformedUvs || transformedUvs.length < uvs.length)\n                {\n                    transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n                }\n\n                this._textureMatrixUpdateId = textureMatrix._updateID;\n                this._uvUpdateId = uvBuffer._updateID;\n\n                textureMatrix.multiplyUvs(uvs as Float32Array, transformedUvs);\n            }\n        }\n\n        return transformedUvs as Float32Array;\n    }\n\n    get positions()\n    {\n        return this.geometry.positions;\n    }\n\n    get indices()\n    {\n        return this.geometry.indices;\n    }\n\n    get color()\n    {\n        return this.renderable.groupColorAlpha;\n    }\n\n    get groupTransform()\n    {\n        return this.renderable.groupTransform;\n    }\n\n    get attributeSize()\n    {\n        return this.geometry.positions.length / 2;\n    }\n\n    get indexSize()\n    {\n        return this.geometry.indices.length;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1811, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1817, "column": 0}, "map": {"version":3,"file":"applyMatrix.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/utils/applyMatrix.ts"],"sourcesContent":["import type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { TypedArray } from '../../../rendering/renderers/shared/buffer/Buffer';\n\nexport function applyMatrix(array: TypedArray, stride: number, offset: number, matrix: Matrix)\n{\n    let index = 0;\n    const size = array.length / (stride || 2);\n\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n\n    offset *= stride;\n\n    while (index < size)\n    {\n        const x = array[offset];\n        const y = array[offset + 1];\n\n        array[offset] = (a * x) + (c * y) + tx;\n        array[offset + 1] = (b * x) + (d * y) + ty;\n\n        offset += stride;\n\n        index++;\n    }\n}\n"],"names":[],"mappings":";;;;AAGO,SAAS,WAAY,CAAA,KAAA,EAAmB,MAAgB,EAAA,MAAA,EAAgB,MAC/E,EAAA;IACI,IAAI,KAAQ,GAAA,CAAA,CAAA;IACN,MAAA,IAAA,GAAO,KAAM,CAAA,MAAA,GAAA,CAAU,MAAU,IAAA,CAAA,CAAA,CAAA;IAEvC,MAAM,IAAI,MAAO,CAAA,CAAA,CAAA;IACjB,MAAM,IAAI,MAAO,CAAA,CAAA,CAAA;IACjB,MAAM,IAAI,MAAO,CAAA,CAAA,CAAA;IACjB,MAAM,IAAI,MAAO,CAAA,CAAA,CAAA;IACjB,MAAM,KAAK,MAAO,CAAA,EAAA,CAAA;IAClB,MAAM,KAAK,MAAO,CAAA,EAAA,CAAA;IAER,MAAA,IAAA,MAAA,CAAA;IAEV,MAAO,QAAQ,IACf,CAAA;QACU,MAAA,CAAA,GAAI,KAAA,CAAM,MAAM,CAAA,CAAA;QAChB,MAAA,CAAA,GAAI,KAAM,CAAA,MAAA,GAAS,CAAC,CAAA,CAAA;QAE1B,KAAA,CAAM,MAAM,CAAA,GAAK,CAAI,GAAA,CAAA,GAAM,IAAI,CAAK,GAAA,EAAA,CAAA;QACpC,KAAA,CAAM,SAAS,CAAC,CAAA,GAAK,CAAI,GAAA,CAAA,GAAM,IAAI,CAAK,GAAA,EAAA,CAAA;QAE9B,MAAA,IAAA,MAAA,CAAA;QAEV,KAAA,EAAA,CAAA;IAAA,CACJ;AACJ","ignoreList":[0]}},
    {"offset": {"line": 1842, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1848, "column": 0}, "map": {"version":3,"file":"setUvs.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/utils/setUvs.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { applyMatrix } from './applyMatrix';\n\nimport type { TilingSprite } from '../TilingSprite';\n\nexport function setUvs(tilingSprite: TilingSprite, uvs: Float32Array)\n{\n    const texture = tilingSprite.texture;\n\n    const width = texture.frame.width;\n    const height = texture.frame.height;\n\n    let anchorX = 0;\n    let anchorY = 0;\n\n    if (tilingSprite.applyAnchorToTexture)\n    {\n        anchorX = tilingSprite.anchor.x;\n        anchorY = tilingSprite.anchor.y;\n    }\n\n    uvs[0] = uvs[6] = -anchorX;\n    uvs[2] = uvs[4] = 1 - anchorX;\n    uvs[1] = uvs[3] = -anchorY;\n    uvs[5] = uvs[7] = 1 - anchorY;\n\n    const textureMatrix = Matrix.shared;\n\n    textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n\n    textureMatrix.tx /= tilingSprite.width;\n    textureMatrix.ty /= tilingSprite.height;\n\n    textureMatrix.invert();\n\n    textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n\n    applyMatrix(uvs, 2, 0, textureMatrix);\n}\n"],"names":[],"mappings":";;;;;;;;AAKgB,SAAA,MAAA,CAAO,YAAA,EAA4B,GACnD,EAAA;IACI,MAAM,UAAU,YAAa,CAAA,OAAA,CAAA;IAEvB,MAAA,KAAA,GAAQ,QAAQ,KAAM,CAAA,KAAA,CAAA;IACtB,MAAA,MAAA,GAAS,QAAQ,KAAM,CAAA,MAAA,CAAA;IAE7B,IAAI,OAAU,GAAA,CAAA,CAAA;IACd,IAAI,OAAU,GAAA,CAAA,CAAA;IAEd,IAAI,aAAa,oBACjB,EAAA;QACI,OAAA,GAAU,aAAa,MAAO,CAAA,CAAA,CAAA;QAC9B,OAAA,GAAU,aAAa,MAAO,CAAA,CAAA,CAAA;IAAA,CAClC;IAEA,GAAA,CAAI,CAAC,CAAA,GAAI,GAAI,CAAA,CAAC,CAAA,GAAI,CAAC,OAAA,CAAA;IACnB,GAAA,CAAI,CAAC,CAAA,GAAI,GAAI,CAAA,CAAC,CAAA,GAAI,CAAI,GAAA,OAAA,CAAA;IACtB,GAAA,CAAI,CAAC,CAAA,GAAI,GAAI,CAAA,CAAC,CAAA,GAAI,CAAC,OAAA,CAAA;IACnB,GAAA,CAAI,CAAC,CAAA,GAAI,GAAI,CAAA,CAAC,CAAA,GAAI,CAAI,GAAA,OAAA,CAAA;IAEtB,MAAM,mLAAgB,SAAO,CAAA,MAAA,CAAA;IAEf,aAAA,CAAA,QAAA,CAAS,YAAa,CAAA,cAAA,CAAe,MAAM,CAAA,CAAA;IAEzD,aAAA,CAAc,EAAA,IAAM,YAAa,CAAA,KAAA,CAAA;IACjC,aAAA,CAAc,EAAA,IAAM,YAAa,CAAA,MAAA,CAAA;IAEjC,aAAA,CAAc,MAAO,EAAA,CAAA;IAErB,aAAA,CAAc,KAAA,CAAM,YAAa,CAAA,KAAA,GAAQ,KAAO,EAAA,YAAA,CAAa,MAAA,GAAS,MAAM,CAAA,CAAA;mMAEhE,cAAA,EAAA,GAAA,EAAK,CAAG,EAAA,CAAA,EAAG,aAAa,CAAA,CAAA;AACxC","ignoreList":[0]}},
    {"offset": {"line": 1880, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1886, "column": 0}, "map": {"version":3,"file":"setPositions.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/utils/setPositions.ts"],"sourcesContent":["import type { TilingSprite } from '../TilingSprite';\n\nexport function setPositions(tilingSprite: TilingSprite, positions: Float32Array)\n{\n    const anchorX = tilingSprite.anchor.x;\n    const anchorY = tilingSprite.anchor.y;\n\n    positions[0] = -anchorX * tilingSprite.width;\n    positions[1] = -anchorY * tilingSprite.height;\n    positions[2] = (1 - anchorX) * tilingSprite.width;\n    positions[3] = -anchorY * tilingSprite.height;\n    positions[4] = (1 - anchorX) * tilingSprite.width;\n    positions[5] = (1 - anchorY) * tilingSprite.height;\n    positions[6] = -anchorX * tilingSprite.width;\n    positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n"],"names":[],"mappings":";;;;AAEgB,SAAA,YAAA,CAAa,YAAA,EAA4B,SACzD,EAAA;IACU,MAAA,OAAA,GAAU,aAAa,MAAO,CAAA,CAAA,CAAA;IAC9B,MAAA,OAAA,GAAU,aAAa,MAAO,CAAA,CAAA,CAAA;IAEpC,SAAA,CAAU,CAAC,CAAA,GAAI,CAAC,OAAA,GAAU,YAAa,CAAA,KAAA,CAAA;IACvC,SAAA,CAAU,CAAC,CAAA,GAAI,CAAC,OAAA,GAAU,YAAa,CAAA,MAAA,CAAA;IACvC,SAAA,CAAU,CAAC,CAAA,GAAA,CAAK,CAAI,GAAA,OAAA,IAAW,YAAa,CAAA,KAAA,CAAA;IAC5C,SAAA,CAAU,CAAC,CAAA,GAAI,CAAC,OAAA,GAAU,YAAa,CAAA,MAAA,CAAA;IACvC,SAAA,CAAU,CAAC,CAAA,GAAA,CAAK,CAAI,GAAA,OAAA,IAAW,YAAa,CAAA,KAAA,CAAA;IAC5C,SAAA,CAAU,CAAC,CAAA,GAAA,CAAK,CAAI,GAAA,OAAA,IAAW,YAAa,CAAA,MAAA,CAAA;IAC5C,SAAA,CAAU,CAAC,CAAA,GAAI,CAAC,OAAA,GAAU,YAAa,CAAA,KAAA,CAAA;IACvC,SAAA,CAAU,CAAC,CAAA,GAAA,CAAK,CAAI,GAAA,OAAA,IAAW,YAAa,CAAA,MAAA,CAAA;AAChD","ignoreList":[0]}},
    {"offset": {"line": 1904, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1910, "column": 0}, "map": {"version":3,"file":"TilingSpritePipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/TilingSpritePipe.ts"],"sourcesContent":["import { ExtensionType } from '../../extensions/Extensions';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { State } from '../../rendering/renderers/shared/state/State';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader';\nimport { QuadGeometry } from './utils/QuadGeometry';\nimport { setPositions } from './utils/setPositions';\nimport { setUvs } from './utils/setUvs';\n\nimport type { WebGLRenderer } from '../../rendering/renderers/gl/WebGLRenderer';\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Container } from '../container/Container';\nimport type { TilingSprite } from './TilingSprite';\n\ninterface RenderableData\n{\n    canBatch: boolean;\n    renderable: TilingSprite\n    batchableMesh?: BatchableMesh;\n    geometry?: MeshGeometry;\n    shader?: TilingSpriteShader;\n}\n\nconst sharedQuad = new QuadGeometry();\n\nexport class TilingSpritePipe implements RenderPipe<TilingSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'tilingSprite',\n    } as const;\n\n    private _renderer: Renderer;\n    private readonly _state: State = State.default2d;\n    private readonly _tilingSpriteDataHash: Record<number, RenderableData> = Object.create(null);\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_tilingSpriteDataHash');\n    }\n\n    public validateRenderable(renderable: TilingSprite): boolean\n    {\n        const tilingSpriteData = this._getTilingSpriteData(renderable);\n\n        const couldBatch = tilingSpriteData.canBatch;\n\n        this._updateCanBatch(renderable);\n\n        const canBatch = tilingSpriteData.canBatch;\n\n        if (canBatch && canBatch === couldBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            return !batchableMesh._batcher.checkAndUpdateTexture(\n                batchableMesh,\n                renderable.texture\n            );\n        }\n\n        return (couldBatch !== canBatch);\n\n        // // TODO - only update if required?\n        // // only texture\n        // // only uvs\n        // // only positions?\n    }\n\n    public addRenderable(tilingSprite: TilingSprite, instructionSet: InstructionSet)\n    {\n        const batcher = this._renderer.renderPipes.batch;\n\n        // init\n        this._updateCanBatch(tilingSprite);\n\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry, canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            tilingSpriteData.batchableMesh ||= new BatchableMesh();\n\n            const batchableMesh = tilingSpriteData.batchableMesh;\n\n            if (tilingSprite.didViewUpdate)\n            {\n                this._updateBatchableMesh(tilingSprite);\n\n                batchableMesh.geometry = geometry;\n                batchableMesh.renderable = tilingSprite;\n                batchableMesh.transform = tilingSprite.groupTransform;\n                batchableMesh.texture = tilingSprite._texture;\n            }\n\n            batchableMesh.roundPixels = (this._renderer._roundPixels | tilingSprite._roundPixels) as 0 | 1;\n\n            batcher.addToBatch(batchableMesh, instructionSet);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            tilingSpriteData.shader ||= new TilingSpriteShader();\n\n            this.updateRenderable(tilingSprite);\n\n            instructionSet.add(tilingSprite);\n        }\n    }\n\n    public execute(tilingSprite: TilingSprite)\n    {\n        const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n\n        shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n\n        // deal with local uniforms...\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n        localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n\n        color32BitToUniform(\n            tilingSprite.groupColorAlpha,\n            localUniforms.uColor,\n            0\n        );\n\n        this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n\n        this._renderer.encoder.draw({\n            geometry: sharedQuad,\n            shader,\n            state: this._state,\n        });\n    }\n\n    public updateRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            if (tilingSprite.didViewUpdate) this._updateBatchableMesh(tilingSprite);\n\n            batchableMesh._batcher.updateElement(batchableMesh);\n        }\n        else if (tilingSprite.didViewUpdate)\n        {\n            const { shader } = tilingSpriteData;\n            // now update uniforms...\n\n            shader.updateUniforms(\n                tilingSprite.width,\n                tilingSprite.height,\n                tilingSprite._tileTransform.matrix,\n                tilingSprite.anchor.x,\n                tilingSprite.anchor.y,\n                tilingSprite.texture,\n            );\n        }\n    }\n\n    public destroyRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        tilingSpriteData.batchableMesh = null;\n\n        tilingSpriteData.shader?.destroy();\n\n        this._tilingSpriteDataHash[tilingSprite.uid] = null;\n\n        tilingSprite.off('destroyed', this._destroyRenderableBound);\n    }\n\n    private _getTilingSpriteData(renderable: TilingSprite): RenderableData\n    {\n        return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n    }\n\n    private _initTilingSpriteData(tilingSprite: TilingSprite): RenderableData\n    {\n        const geometry = new MeshGeometry({\n            indices: sharedQuad.indices,\n            positions: sharedQuad.positions.slice(),\n            uvs: sharedQuad.uvs.slice(),\n        });\n\n        this._tilingSpriteDataHash[tilingSprite.uid] = {\n            canBatch: true,\n            renderable: tilingSprite,\n            geometry,\n        };\n\n        tilingSprite.on('destroyed', this._destroyRenderableBound);\n\n        return this._tilingSpriteDataHash[tilingSprite.uid];\n    }\n\n    private _updateBatchableMesh(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry } = renderableData;\n\n        const style = tilingSprite.texture.source.style;\n\n        if (style.addressMode !== 'repeat')\n        {\n            style.addressMode = 'repeat';\n            style.update();\n        }\n\n        setUvs(tilingSprite, geometry.uvs);\n        setPositions(tilingSprite, geometry.positions);\n    }\n\n    public destroy()\n    {\n        for (const i in this._tilingSpriteDataHash)\n        {\n            this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n        }\n\n        (this._tilingSpriteDataHash as null) = null;\n        this._renderer = null;\n    }\n\n    private _updateCanBatch(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n        const texture = tilingSprite.texture;\n\n        let _nonPowOf2wrapping = true;\n\n        if (this._renderer.type === RendererType.WEBGL)\n        {\n            _nonPowOf2wrapping = (this._renderer as WebGLRenderer).context.supports.nonPowOf2wrapping;\n        }\n\n        renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n\n        return renderableData.canBatch;\n    }\n}\n\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2069, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2075, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-tiling/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { TilingSpritePipe } from './TilingSpritePipe';\n\nextensions.add(TilingSpritePipe);\n"],"names":[],"mappings":";;;;;;kKAGA,aAAA,CAAW,GAAA,wLAAI,mBAAgB,CAAA","ignoreList":[0]}},
    {"offset": {"line": 2082, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2088, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/sprite-nine-slice/init.ts"],"sourcesContent":["import { extensions } from '../../extensions/Extensions';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe';\n\nextensions.add(NineSliceSpritePipe);\n"],"names":[],"mappings":";;;;;;kKAGA,aAAA,CAAW,GAAA,kMAAI,sBAAmB,CAAA","ignoreList":[0]}},
    {"offset": {"line": 2095, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2101, "column": 0}, "map": {"version":3,"file":"getFastGlobalBounds.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/container/bounds/getFastGlobalBounds.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { boundsPool } from './utils/matrixAndBoundsPool';\n\nimport type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Container } from '../Container';\nimport type { Bounds } from './Bounds';\n\n// TODO could we cache local bounds on the render groups?\n\nconst tempMatrix = new Matrix();\n\n/**\n * Does exactly the same as getGlobalBounds, but does instead makes use of transforming AABBs\n * of the various children within the scene graph. This is much faster, but less accurate.\n *\n * the result will never be smaller - only ever slightly larger (in most cases, it will be the same).\n * @param target - The target container to get the bounds from\n * @param bounds - The output bounds object.\n * @returns The bounds.\n */\nexport function getFastGlobalBounds(target: Container, bounds: Bounds): Bounds\n{\n    bounds.clear();\n\n    _getGlobalBoundsRecursive(target, bounds);\n\n    if (!bounds.isValid)\n    {\n        bounds.set(0, 0, 0, 0);\n    }\n\n    const renderGroup = target.renderGroup || target.parentRenderGroup;\n\n    bounds.applyMatrix(renderGroup.worldTransform);\n\n    return bounds;\n}\n\nexport function _getGlobalBoundsRecursive(\n    target: Container,\n    bounds: Bounds,\n)\n{\n    if (target.localDisplayStatus !== 0b111 || !target.measurable)\n    {\n        return;\n    }\n\n    const manageEffects = !!target.effects.length;\n\n    let localBounds = bounds;\n\n    if (target.renderGroup || manageEffects)\n    {\n        localBounds = boundsPool.get().clear();\n    }\n\n    if (target.boundsArea)\n    {\n        bounds.addRect(target.boundsArea, target.worldTransform);\n    }\n    else\n    {\n        if (target.renderPipeId)\n        {\n            const viewBounds = (target as Renderable).bounds;\n\n            localBounds.addFrame(\n                viewBounds.minX,\n                viewBounds.minY,\n                viewBounds.maxX,\n                viewBounds.maxY,\n                target.groupTransform\n            );\n        }\n\n        const children = target.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            _getGlobalBoundsRecursive(children[i], localBounds);\n        }\n    }\n\n    if (manageEffects)\n    {\n        let advanced = false;\n\n        const renderGroup = target.renderGroup || target.parentRenderGroup;\n\n        for (let i = 0; i < target.effects.length; i++)\n        {\n            if (target.effects[i].addBounds)\n            {\n                if (!advanced)\n                {\n                    advanced = true;\n                    localBounds.applyMatrix(renderGroup.worldTransform);\n                }\n\n                target.effects[i].addBounds(localBounds, true);\n            }\n        }\n\n        if (advanced)\n        {\n            localBounds.applyMatrix(renderGroup.worldTransform.copyTo(tempMatrix).invert());\n            bounds.addBounds(localBounds, target.relativeGroupTransform);\n        }\n\n        bounds.addBounds(localBounds);\n        boundsPool.return(localBounds);\n    }\n    else if (target.renderGroup)\n    {\n        bounds.addBounds(localBounds, target.relativeGroupTransform);\n        boundsPool.return(localBounds);\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2167, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2173, "column": 0}, "map": {"version":3,"file":"getRenderableBounds.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/scene/container/bounds/getRenderableBounds.ts"],"sourcesContent":["import type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Bounds } from './Bounds';\n\nexport function getGlobalRenderableBounds(renderables: Renderable[], bounds: Bounds): Bounds\n{\n    bounds.clear();\n\n    // instead of copying the matrix each time we are assigning it in bounds\n    // this is a performance hack :D\n    // so we need to restore the matrix after we are done\n\n    const tempMatrix = bounds.matrix;\n\n    for (let i = 0; i < renderables.length; i++)\n    {\n        const renderable = renderables[i];\n\n        if (renderable.globalDisplayStatus < 0b111)\n        {\n            continue;\n        }\n\n        bounds.matrix = renderable.worldTransform;\n        bounds.addBounds(renderable.bounds);\n    }\n\n    bounds.matrix = tempMatrix;\n\n    return bounds;\n}\n"],"names":[],"mappings":";;;;AAGgB,SAAA,yBAAA,CAA0B,WAAA,EAA2B,MACrE,EAAA;IACI,MAAA,CAAO,KAAM,EAAA,CAAA;IAMb,MAAM,aAAa,MAAO,CAAA,MAAA,CAAA;IAE1B,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,WAAA,CAAY,MAAA,EAAQ,CACxC,EAAA,CAAA;QACU,MAAA,UAAA,GAAa,WAAA,CAAY,CAAC,CAAA,CAAA;QAE5B,IAAA,UAAA,CAAW,mBAAA,GAAsB,CACrC,EAAA;YACI,SAAA;QAAA,CACJ;QAEA,MAAA,CAAO,MAAA,GAAS,UAAW,CAAA,cAAA,CAAA;QACpB,MAAA,CAAA,SAAA,CAAU,WAAW,MAAM,CAAA,CAAA;IAAA,CACtC;IAEA,MAAA,CAAO,MAAS,GAAA,UAAA,CAAA;IAET,OAAA,MAAA,CAAA;AACX","ignoreList":[0]}},
    {"offset": {"line": 2193, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2199, "column": 0}, "map": {"version":3,"file":"FilterSystem.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/FilterSystem.ts"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions';\nimport { Matrix } from '../maths/matrix/Matrix';\nimport { Point } from '../maths/point/Point';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer, RendererType } from '../rendering/renderers/types';\nimport { Bounds } from '../scene/container/bounds/Bounds';\nimport { getFastGlobalBounds } from '../scene/container/bounds/getFastGlobalBounds';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds';\nimport { warn } from '../utils/logging/warn';\n\nimport type { WebGLRenderer } from '../rendering/renderers/gl/WebGLRenderer';\nimport type { WebGPURenderer } from '../rendering/renderers/gpu/WebGPURenderer';\nimport type { Instruction } from '../rendering/renderers/shared/instructions/Instruction';\nimport type { Renderable } from '../rendering/renderers/shared/Renderable';\nimport type { RenderTarget } from '../rendering/renderers/shared/renderTarget/RenderTarget';\nimport type { RenderSurface } from '../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type { System } from '../rendering/renderers/shared/system/System';\nimport type { Container } from '../scene/container/Container';\nimport type { Sprite } from '../scene/sprite/Sprite';\nimport type { Filter } from './Filter';\nimport type { FilterEffect } from './FilterEffect';\n\ntype FilterAction = 'pushFilter' | 'popFilter';\n\n//\nconst quadGeometry = new Geometry({\n    attributes: {\n        aPosition: {\n            buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            format: 'float32x2',\n            stride: 2 * 4,\n            offset: 0,\n        },\n    },\n    indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3]),\n});\n\n/**\n * The filter pipeline is responsible for applying filters scene items!\n *\n * KNOWN BUGS:\n * 1. Global bounds calculation is incorrect if it is used when flip flopping filters. The maths can be found below\n * eg: filters [noiseFilter, blurFilter] noiseFilter will calculate the global bounds incorrectly.\n *\n * 2. RenderGroups do not work with filters. This is because the renderGroup matrix is not currently taken into account.\n *\n * Implementation notes:\n * 1. Gotcha - nesting filters that require blending will not work correctly. This creates a chicken and egg problem\n * the complexity and performance required to do this is not worth it i feel.. but lets see if others agree!\n *\n * 2. Filters are designed to be changed on the fly, this is means that changing filter information each frame will\n * not trigger an instruction rebuild. If you are constantly turning a filter on and off.. its therefore better to set\n * enabled to true or false on the filter. Or setting an empty array.\n *\n * 3. Need to look at perhaps aliasing when flip flopping filters. Really we should only need to antialias the FIRST\n * Texture we render too. The rest can be non aliased. This might help performance.\n * Currently we flip flop with an antialiased texture if antialiasing is enabled on the filter.\n */\nexport interface FilterInstruction extends Instruction\n{\n    renderPipeId: 'filter',\n    action: FilterAction,\n    container?: Container,\n    renderables?: Renderable[],\n    filterEffect: FilterEffect,\n}\n\nexport interface FilterData\n{\n    skip: boolean;\n    enabledLength?: number;\n    inputTexture: Texture\n    bounds: Bounds,\n    blendRequired: boolean,\n    container: Container,\n    filterEffect: FilterEffect,\n    previousRenderSurface: RenderSurface,\n    backTexture?: Texture,\n}\n\n/**\n * System that manages the filter pipeline\n * @memberof rendering\n */\nexport class FilterSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'filter',\n    } as const;\n\n    public readonly renderer: Renderer;\n\n    private _filterStackIndex = 0;\n    private _filterStack: FilterData[] = [];\n\n    private readonly _filterGlobalUniforms = new UniformGroup({\n        uInputSize: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputPixel: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputClamp: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uGlobalFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputTexture: { value: new Float32Array(4), type: 'vec4<f32>' },\n    });\n\n    private readonly _globalFilterBindGroup: BindGroup = new BindGroup({});\n    private _activeFilterData: FilterData;\n\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n     * @readonly\n     */\n    public get activeBackTexture(): Texture | undefined\n    {\n        return this._activeFilterData?.backTexture;\n    }\n\n    public push(instruction: FilterInstruction)\n    {\n        const renderer = this.renderer;\n\n        const filters = instruction.filterEffect.filters;\n\n        if (!this._filterStack[this._filterStackIndex])\n        {\n            this._filterStack[this._filterStackIndex] = this._getFilterData();\n        }\n\n        // get a filter data from the stack. They can be reused multiple times each frame,\n        // so we don't need to worry about overwriting them in a single pass.\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        this._filterStackIndex++;\n\n        // if there are no filters, we skip the pass\n        if (filters.length === 0)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        const bounds: Bounds = filterData.bounds;\n\n        // this path is used by the blend modes mostly!\n        // they collect all renderables and push them into a list.\n        // this list is then used to calculate the bounds of the filter area\n        if (instruction.renderables)\n        {\n            getGlobalRenderableBounds(instruction.renderables, bounds);\n        }\n        // if a filterArea is provided, we save our selves some measuring and just use that area supplied\n        else if (instruction.filterEffect.filterArea)\n        {\n            bounds.clear();\n\n            // transform the filterArea into global space..\n            bounds.addRect(instruction.filterEffect.filterArea);\n\n            // new for v8, we transform the bounds into the space of the container\n            bounds.applyMatrix(instruction.container.worldTransform);\n        }\n        // classic filter path, we get the bounds of the container and use it by recursively\n        // measuring.\n        else\n        {\n            getFastGlobalBounds(instruction.container, bounds);\n        }\n\n        if (instruction.container)\n        {\n            // When a container is cached as a texture, its filters need to be applied relative to its\n            // cached parent's coordinate space rather than world space. This transform adjustment ensures\n            // filters are applied in the correct coordinate system.\n            const renderGroup = instruction.container.renderGroup || instruction.container.parentRenderGroup;\n            const filterFrameTransform = renderGroup.cacheToLocalTransform;\n\n            if (filterFrameTransform)\n            {\n                bounds.applyMatrix(filterFrameTransform);\n            }\n        }\n\n        // get GLOBAL bounds of the item we are going to apply the filter to\n\n        const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n\n        // next we get the settings for the filter\n        // we need to find the LOWEST resolution for the filter list\n        let resolution = Infinity;\n        // Padding is additive to add padding to our padding\n        let padding = 0;\n        // if this is true for all filter, it should be true, and otherwise false\n        let antialias = true;\n        // true if any filter requires the previous render target\n        let blendRequired = false;\n        // true if any filter in the list is enabled\n        let enabled = false;\n        // false if any filter in the list has false\n        let clipToViewport = true;\n\n        for (let i = 0; i < filters.length; i++)\n        {\n            const filter = filters[i];\n\n            resolution = Math.min(resolution, filter.resolution === 'inherit'\n                ? colorTextureSource._resolution : filter.resolution);\n            padding += filter.padding;\n\n            if (filter.antialias === 'off')\n            {\n                antialias = false;\n            }\n            else if (filter.antialias === 'inherit')\n            {\n                antialias &&= colorTextureSource.antialias;\n            }\n\n            if (!filter.clipToViewport)\n            {\n                clipToViewport = false;\n            }\n\n            const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n\n            if (!isCompatible)\n            {\n                enabled = false;\n                break;\n            }\n\n            if (filter.blendRequired && !((renderer as WebGLRenderer).backBuffer?.useBackBuffer ?? true))\n            {\n                // #if _DEBUG\n                // eslint-disable-next-line max-len\n                warn('Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.');\n                // #endif\n\n                enabled = false;\n                break;\n            }\n\n            enabled = filter.enabled || enabled;\n            blendRequired ||= filter.blendRequired;\n        }\n\n        // if no filters are enabled lets skip!\n        if (!enabled)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // here we constrain the bounds to the viewport we will render too\n        // this should not take into account the x, y offset of the viewport - as this is\n        // handled by the viewport on the gpu.\n        if (clipToViewport)\n        {\n            const viewPort = renderer.renderTarget.rootViewPort;\n\n            const rootResolution = renderer.renderTarget.renderTarget.resolution;\n\n            bounds.fitBounds(0, viewPort.width / rootResolution, 0, viewPort.height / rootResolution);\n        }\n\n        // round the bounds to the nearest pixel\n        bounds\n            .scale(resolution)\n            .ceil()\n            .scale(1 / resolution)\n            .pad(padding | 0);\n\n        // skip if the bounds are negative or zero as this means they are\n        // not visible on the screen\n        if (!bounds.isPositive)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // set all the filter data\n        filterData.skip = false;\n\n        filterData.bounds = bounds;\n        filterData.blendRequired = blendRequired;\n        filterData.container = instruction.container;\n        filterData.filterEffect = instruction.filterEffect;\n\n        filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n\n        // bind...\n        // get a P02 texture from our pool...\n        filterData.inputTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            resolution,\n            antialias,\n        );\n\n        renderer.renderTarget.bind(filterData.inputTexture, true);\n        // set the global uniforms to take into account the bounds offset required\n\n        renderer.globalUniforms.push({\n            offset: bounds,\n        });\n    }\n\n    public pop()\n    {\n        const renderer = this.renderer;\n\n        this._filterStackIndex--;\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        // if we are skipping this filter then we just do nothing :D\n        if (filterData.skip)\n        {\n            return;\n        }\n\n        this._activeFilterData = filterData;\n\n        const inputTexture = filterData.inputTexture;\n\n        const bounds = filterData.bounds;\n\n        let backTexture = Texture.EMPTY;\n\n        renderer.renderTarget.finishRenderPass();\n\n        if (filterData.blendRequired)\n        {\n            // this actually forces the current commandQueue to render everything so far.\n            // if we don't do this, we won't be able to copy pixels for the background\n            const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n\n            const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n\n            backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n        }\n\n        filterData.backTexture = backTexture;\n\n        const filters = filterData.filterEffect.filters;\n\n        // get a BufferResource from the uniformBatch.\n        // this will batch the shader uniform data and give us a buffer resource we can\n        // set on our globalUniform Bind Group\n\n        // update the resources on the bind group...\n        this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n        this._globalFilterBindGroup.setResource(backTexture.source, 3);\n\n        renderer.globalUniforms.pop();\n\n        if (filters.length === 1)\n        {\n            // render a single filter...\n            // this.applyFilter(filters[0], inputTexture, filterData.previousRenderSurface, false);\n            filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n\n            // return the texture to the pool so we can reuse the next frame\n            TexturePool.returnTexture(inputTexture);\n        }\n        else\n        {\n            let flip = filterData.inputTexture;\n\n            // get another texture that we will render the next filter too\n            let flop = TexturePool.getOptimalTexture(\n                bounds.width,\n                bounds.height,\n                flip.source._resolution,\n                false\n            );\n\n            let i = 0;\n\n            // loop and apply the filters, omitting the last one as we will render that to the final target\n            for (i = 0; i < filters.length - 1; ++i)\n            {\n                const filter = filters[i];\n\n                filter.apply(this, flip, flop, true);\n                const t = flip;\n\n                flip = flop;\n                flop = t;\n            }\n\n            filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n\n            // return those textures for later!\n            TexturePool.returnTexture(flip);\n            TexturePool.returnTexture(flop);\n        }\n\n        // if we made a background texture, lets return that also\n        if (filterData.blendRequired)\n        {\n            TexturePool.returnTexture(backTexture);\n        }\n    }\n\n    public getBackTexture(lastRenderSurface: RenderTarget, bounds: Bounds, previousBounds?: Bounds)\n    {\n        const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n\n        const backTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            backgroundResolution,\n            false,\n        );\n\n        let x = bounds.minX;\n        let y = bounds.minY;\n\n        if (previousBounds)\n        {\n            x -= previousBounds.minX;\n            y -= previousBounds.minY;\n        }\n\n        x = Math.floor(x * backgroundResolution);\n        y = Math.floor(y * backgroundResolution);\n\n        const width = Math.ceil(bounds.width * backgroundResolution);\n        const height = Math.ceil(bounds.height * backgroundResolution);\n\n        this.renderer.renderTarget.copyToTexture(\n            lastRenderSurface,\n            backTexture,\n            { x, y },\n            { width, height },\n            { x: 0, y: 0 }\n        );\n\n        return backTexture;\n    }\n\n    public applyFilter(filter: Filter, input: Texture, output: RenderSurface, clear: boolean)\n    {\n        const renderer = this.renderer;\n\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        const bounds = filterData.bounds;\n\n        const offset = Point.shared;\n        const previousRenderSurface = filterData.previousRenderSurface;\n\n        const isFinalTarget = previousRenderSurface === output;\n\n        let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n\n        // to find the previous resolution we need to account for the skipped filters\n        // the following will find the last non skipped filter...\n        let currentIndex = this._filterStackIndex - 1;\n\n        while (currentIndex > 0 && this._filterStack[currentIndex].skip)\n        {\n            --currentIndex;\n        }\n\n        if (currentIndex > 0)\n        {\n            resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n        }\n\n        const filterUniforms = this._filterGlobalUniforms;\n        const uniforms = filterUniforms.uniforms;\n\n        const outputFrame = uniforms.uOutputFrame;\n        const inputSize = uniforms.uInputSize;\n        const inputPixel = uniforms.uInputPixel;\n        const inputClamp = uniforms.uInputClamp;\n        const globalFrame = uniforms.uGlobalFrame;\n        const outputTexture = uniforms.uOutputTexture;\n\n        // are we rendering back to the original surface?\n        if (isFinalTarget)\n        {\n            let lastIndex = this._filterStackIndex;\n\n            // get previous bounds.. we must take into account skipped filters also..\n            while (lastIndex > 0)\n            {\n                lastIndex--;\n                const filterData = this._filterStack[this._filterStackIndex - 1];\n\n                if (!filterData.skip)\n                {\n                    offset.x = filterData.bounds.minX;\n                    offset.y = filterData.bounds.minY;\n\n                    break;\n                }\n            }\n\n            outputFrame[0] = bounds.minX - offset.x;\n            outputFrame[1] = bounds.minY - offset.y;\n        }\n        else\n        {\n            outputFrame[0] = 0;\n            outputFrame[1] = 0;\n        }\n\n        outputFrame[2] = input.frame.width;\n        outputFrame[3] = input.frame.height;\n\n        inputSize[0] = input.source.width;\n        inputSize[1] = input.source.height;\n        inputSize[2] = 1 / inputSize[0];\n        inputSize[3] = 1 / inputSize[1];\n\n        inputPixel[0] = input.source.pixelWidth;\n        inputPixel[1] = input.source.pixelHeight;\n        inputPixel[2] = 1.0 / inputPixel[0];\n        inputPixel[3] = 1.0 / inputPixel[1];\n\n        inputClamp[0] = 0.5 * inputPixel[2];\n        inputClamp[1] = 0.5 * inputPixel[3];\n        inputClamp[2] = (input.frame.width * inputSize[2]) - (0.5 * inputPixel[2]);\n        inputClamp[3] = (input.frame.height * inputSize[3]) - (0.5 * inputPixel[3]);\n\n        const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n\n        globalFrame[0] = offset.x * resolution;\n        globalFrame[1] = offset.y * resolution;\n\n        globalFrame[2] = rootTexture.source.width * resolution;\n        globalFrame[3] = rootTexture.source.height * resolution;\n\n        // set the output texture - this is where we are going to render to\n\n        const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n\n        renderer.renderTarget.bind(output, !!clear);\n\n        if (output instanceof Texture)\n        {\n            outputTexture[0] = output.frame.width;\n            outputTexture[1] = output.frame.height;\n        }\n        else\n        {\n            // this means a renderTarget was passed directly\n            outputTexture[0] = renderTarget.width;\n            outputTexture[1] = renderTarget.height;\n        }\n\n        outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n        filterUniforms.update();\n\n        // TODO - should prolly use a adaptor...\n        if ((renderer as WebGPURenderer).renderPipes.uniformBatch)\n        {\n            const batchUniforms = (renderer as WebGPURenderer).renderPipes.uniformBatch\n                .getUboResource(filterUniforms);\n\n            this._globalFilterBindGroup.setResource(batchUniforms, 0);\n        }\n        else\n        {\n            this._globalFilterBindGroup.setResource(filterUniforms, 0);\n        }\n\n        // now lets update the output texture...\n\n        // set bind group..\n        this._globalFilterBindGroup.setResource(input.source, 1);\n        this._globalFilterBindGroup.setResource(input.source.style, 2);\n\n        filter.groups[0] = this._globalFilterBindGroup;\n\n        renderer.encoder.draw({\n            geometry: quadGeometry,\n            shader: filter,\n            state: filter._state,\n            topology: 'triangle-list'\n        });\n\n        // WebGPU blit's automatically, but WebGL does not!\n        if (renderer.type === RendererType.WEBGL)\n        {\n            renderer.renderTarget.finishRenderPass();\n        }\n    }\n\n    private _getFilterData(): FilterData\n    {\n        return {\n            skip: false,\n            inputTexture: null,\n            bounds: new Bounds(),\n            container: null,\n            filterEffect: null,\n            blendRequired: false,\n            previousRenderSurface: null,\n        };\n    }\n\n    /**\n     * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n     *\n     * Use `outputMatrix * vTextureCoord` in the shader.\n     * @param outputMatrix - The matrix to output to.\n     * @param {Sprite} sprite - The sprite to map to.\n     * @returns The mapped matrix.\n     */\n    public calculateSpriteMatrix(outputMatrix: Matrix, sprite: Sprite): Matrix\n    {\n        const data = this._activeFilterData;\n\n        const mappedMatrix = outputMatrix.set(\n            data.inputTexture._source.width,\n            0, 0,\n            data.inputTexture._source.height,\n            data.bounds.minX, data.bounds.minY\n        );\n\n        const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n\n        const renderGroup = sprite.renderGroup || sprite.parentRenderGroup;\n\n        if (renderGroup && renderGroup.cacheToLocalTransform)\n        {\n            // get the matrix relative to the render group..\n            worldTransform.prepend(renderGroup.cacheToLocalTransform);\n        }\n\n        worldTransform.invert();\n        mappedMatrix.prepend(worldTransform);\n        mappedMatrix.scale(\n            1.0 / sprite.texture.frame.width,\n            1.0 / sprite.texture.frame.height\n        );\n\n        mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n\n        return mappedMatrix;\n    }\n\n    public destroy?: () => void;\n}\n"],"names":["filterData"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2582, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2588, "column": 0}, "map": {"version":3,"file":"FilterPipe.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/FilterPipe.ts"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions';\n\nimport type { InstructionSet } from '../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../rendering/renderers/types';\nimport type { Container } from '../scene/container/Container';\nimport type { Effect } from '../scene/container/Effect';\nimport type { FilterInstruction } from './FilterSystem';\n\nexport class FilterPipe implements InstructionPipe<FilterInstruction>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'filter',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(filterEffect: Effect, container: Container, instructionSet: InstructionSet): void\n    {\n        const renderPipes = this._renderer.renderPipes;\n\n        renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            canBundle: false,\n            action: 'pushFilter',\n            container,\n            filterEffect,\n        } as FilterInstruction);\n    }\n\n    public pop(_filterEffect: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            action: 'popFilter',\n            canBundle: false,\n        });\n    }\n\n    public execute(instruction: FilterInstruction)\n    {\n        if (instruction.action === 'pushFilter')\n        {\n            this._renderer.filter.push(instruction);\n        }\n        else if (instruction.action === 'popFilter')\n        {\n            this._renderer.filter.pop();\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n"],"names":[],"mappings":";;;;;;AASO,MAAM,UACb,CAAA;IAYI,YAAY,QACZ,CAAA;QACI,IAAA,CAAK,SAAY,GAAA,QAAA,CAAA;IAAA,CACrB;IAEO,IAAA,CAAK,YAAsB,EAAA,SAAA,EAAsB,cACxD,EAAA;QACU,MAAA,WAAA,GAAc,IAAA,CAAK,SAAU,CAAA,WAAA,CAAA;QAEvB,WAAA,CAAA,KAAA,CAAM,KAAA,CAAM,cAAc,CAAA,CAAA;QAEtC,cAAA,CAAe,GAAI,CAAA;YACf,YAAc,EAAA,QAAA;YACd,SAAW,EAAA,KAAA;YACX,MAAQ,EAAA,YAAA;YACR,SAAA;YACA,YAAA;QAAA,CACkB,CAAA,CAAA;IAAA,CAC1B;IAEO,GAAA,CAAI,aAAuB,EAAA,UAAA,EAAuB,cACzD,EAAA;QACI,IAAA,CAAK,SAAU,CAAA,WAAA,CAAY,KAAM,CAAA,KAAA,CAAM,cAAc,CAAA,CAAA;QAErD,cAAA,CAAe,GAAI,CAAA;YACf,YAAc,EAAA,QAAA;YACd,MAAQ,EAAA,WAAA;YACR,SAAW,EAAA,KAAA;QAAA,CACd,CAAA,CAAA;IAAA,CACL;IAEO,QAAQ,WACf,EAAA;QACQ,IAAA,WAAA,CAAY,MAAA,KAAW,YAC3B,EAAA;YACS,IAAA,CAAA,SAAA,CAAU,MAAO,CAAA,IAAA,CAAK,WAAW,CAAA,CAAA;QAAA,CAC1C,MAAA,IACS,WAAY,CAAA,MAAA,KAAW,WAChC,EAAA;YACS,IAAA,CAAA,SAAA,CAAU,MAAA,CAAO,GAAI,EAAA,CAAA;QAAA,CAC9B;IAAA,CACJ;IAEO,OACP,GAAA;QACI,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;IAAA,CACrB;AACJ,CAAA;AA5Da,UAAA,CAEK,SAAY,GAAA;IACtB,IAAM,EAAA;0KACF,gBAAc,CAAA,UAAA;0KACd,gBAAc,CAAA,WAAA;0KACd,gBAAc,CAAA,WAAA;KAClB;IACA,IAAM,EAAA,QAAA;AACV,CAAA","ignoreList":[0]}},
    {"offset": {"line": 2638, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2644, "column": 0}, "map": {"version":3,"file":"init.mjs","sources":["file://D%3A/dev/slot-game/frontend/node_modules/pixi.js/src/filters/init.ts"],"sourcesContent":["import { extensions } from '../extensions/Extensions';\nimport { FilterPipe } from './FilterPipe';\nimport { FilterSystem } from './FilterSystem';\n\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n"],"names":[],"mappings":";;;;;;;;kKAIA,aAAA,CAAW,GAAA,kKAAI,eAAY,CAAA,CAAA;kKAC3B,aAAA,CAAW,GAAA,gKAAI,aAAU,CAAA","ignoreList":[0]}},
    {"offset": {"line": 2654, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2660, "column": 0}, "map": {"version":3,"file":"browserAll.mjs","sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 2690, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}